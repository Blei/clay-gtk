/* automatically generated by clay-bindgen */
import glib.generated.*;
import gobject.generated.*;

record Struct_sigstack (
    ss_sp : OpaquePointer,
    ss_onstack : Int,
);

alias Enum_Unnamed1 = UInt;
alias SS_ONSTACK = UInt(1);
alias SS_DISABLE = UInt(2);

record Struct_sigaltstack (
    ss_sp : OpaquePointer,
    ss_flags : Int,
    ss_size : size_t,
);

alias stack_t = Struct_sigaltstack;

alias GString = Struct__GString;

alias Struct__GStringChunk = Opaque;

alias GStringChunk = Struct__GStringChunk;

record Struct__GString (
    str : Pointer[gchar],
    len : gsize,
    allocated_len : gsize,
);

external (cdecl) g_string_chunk_new(arg0:gsize) : Pointer[GStringChunk];

external (cdecl) g_string_chunk_free(arg0:Pointer[GStringChunk]) : ;

external (cdecl) g_string_chunk_clear(arg0:Pointer[GStringChunk]) : ;

external (cdecl) g_string_chunk_insert(arg0:Pointer[GStringChunk], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_string_chunk_insert_len(arg0:Pointer[GStringChunk], arg1:Pointer[gchar], arg2:gssize) : Pointer[gchar];

external (cdecl) g_string_chunk_insert_const(arg0:Pointer[GStringChunk], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_string_new(arg0:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_new_len(arg0:Pointer[gchar], arg1:gssize) : Pointer[GString];

external (cdecl) g_string_sized_new(arg0:gsize) : Pointer[GString];

external (cdecl) g_string_free(arg0:Pointer[GString], arg1:gboolean) : Pointer[gchar];

external (cdecl) g_string_equal(arg0:Pointer[GString], arg1:Pointer[GString]) : gboolean;

external (cdecl) g_string_hash(arg0:Pointer[GString]) : guint;

external (cdecl) g_string_assign(arg0:Pointer[GString], arg1:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_truncate(arg0:Pointer[GString], arg1:gsize) : Pointer[GString];

external (cdecl) g_string_set_size(arg0:Pointer[GString], arg1:gsize) : Pointer[GString];

external (cdecl) g_string_insert_len(arg0:Pointer[GString], arg1:gssize, arg2:Pointer[gchar], arg3:gssize) : Pointer[GString];

external (cdecl) g_string_append(arg0:Pointer[GString], arg1:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_append_len(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:gssize) : Pointer[GString];

external (cdecl) g_string_append_c(arg0:Pointer[GString], arg1:gchar) : Pointer[GString];

external (cdecl) g_string_append_unichar(arg0:Pointer[GString], arg1:gunichar) : Pointer[GString];

external (cdecl) g_string_prepend(arg0:Pointer[GString], arg1:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_prepend_c(arg0:Pointer[GString], arg1:gchar) : Pointer[GString];

external (cdecl) g_string_prepend_unichar(arg0:Pointer[GString], arg1:gunichar) : Pointer[GString];

external (cdecl) g_string_prepend_len(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:gssize) : Pointer[GString];

external (cdecl) g_string_insert(arg0:Pointer[GString], arg1:gssize, arg2:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_insert_c(arg0:Pointer[GString], arg1:gssize, arg2:gchar) : Pointer[GString];

external (cdecl) g_string_insert_unichar(arg0:Pointer[GString], arg1:gssize, arg2:gunichar) : Pointer[GString];

external (cdecl) g_string_overwrite(arg0:Pointer[GString], arg1:gsize, arg2:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_overwrite_len(arg0:Pointer[GString], arg1:gsize, arg2:Pointer[gchar], arg3:gssize) : Pointer[GString];

external (cdecl) g_string_erase(arg0:Pointer[GString], arg1:gssize, arg2:gssize) : Pointer[GString];

external (cdecl) g_string_ascii_down(arg0:Pointer[GString]) : Pointer[GString];

external (cdecl) g_string_ascii_up(arg0:Pointer[GString]) : Pointer[GString];

external (cdecl) g_string_vprintf(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) g_string_printf(arg0:Pointer[GString], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_string_append_vprintf(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) g_string_append_printf(arg0:Pointer[GString], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_string_append_uri_escaped(arg0:Pointer[GString], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:gboolean) : Pointer[GString];

external (cdecl) g_string_append_c_inline(arg0:Pointer[GString], arg1:gchar) : Pointer[GString];

external (cdecl) g_string_down(arg0:Pointer[GString]) : Pointer[GString];

external (cdecl) g_string_up(arg0:Pointer[GString]) : Pointer[GString];

alias Enum_Unnamed2 = UInt;
alias G_ASCII_ALNUM = UInt(1);
alias G_ASCII_ALPHA = UInt(2);
alias G_ASCII_CNTRL = UInt(4);
alias G_ASCII_DIGIT = UInt(8);
alias G_ASCII_GRAPH = UInt(16);
alias G_ASCII_LOWER = UInt(32);
alias G_ASCII_PRINT = UInt(64);
alias G_ASCII_PUNCT = UInt(128);
alias G_ASCII_SPACE = UInt(256);
alias G_ASCII_UPPER = UInt(512);
alias G_ASCII_XDIGIT = UInt(1024);

alias GAsciiType = UInt;

external g_ascii_table : Pointer[guint16];

external (cdecl) g_ascii_tolower(arg0:gchar) : gchar;

external (cdecl) g_ascii_toupper(arg0:gchar) : gchar;

external (cdecl) g_ascii_digit_value(arg0:gchar) : gint;

external (cdecl) g_ascii_xdigit_value(arg0:gchar) : gint;

external (cdecl) g_strdelimit(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gchar) : Pointer[gchar];

external (cdecl) g_strcanon(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gchar) : Pointer[gchar];

external (cdecl) g_strerror(arg0:gint) : Pointer[gchar];

external (cdecl) g_strsignal(arg0:gint) : Pointer[gchar];

external (cdecl) g_strreverse(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strlcpy(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : gsize;

external (cdecl) g_strlcat(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : gsize;

external (cdecl) g_strstr_len(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strrstr(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strrstr_len(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_str_has_suffix(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_str_has_prefix(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_strtod(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : gdouble;

external (cdecl) g_ascii_strtod(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : gdouble;

external (cdecl) g_ascii_strtoull(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:guint) : guint64;

external (cdecl) g_ascii_strtoll(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:guint) : gint64;

external (cdecl) g_ascii_dtostr(arg0:Pointer[gchar], arg1:gint, arg2:gdouble) : Pointer[gchar];

external (cdecl) g_ascii_formatd(arg0:Pointer[gchar], arg1:gint, arg2:Pointer[gchar], arg3:gdouble) : Pointer[gchar];

external (cdecl) g_strchug(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strchomp(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_ascii_strcasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gint;

external (cdecl) g_ascii_strncasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : gint;

external (cdecl) g_ascii_strdown(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_ascii_strup(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_strcasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gint;

external (cdecl) g_strncasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:guint) : gint;

external (cdecl) g_strdown(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strup(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strdup(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strdup_printf(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_strdup_vprintf(arg0:Pointer[gchar], arg1:Pointer[__va_list_tag]) : Pointer[gchar];

external (cdecl) g_strndup(arg0:Pointer[gchar], arg1:gsize) : Pointer[gchar];

external (cdecl) g_strnfill(arg0:gsize, arg1:gchar) : Pointer[gchar];

external (cdecl) g_strconcat(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_strjoin(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_strcompress(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strescape(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_memdup(arg0:gconstpointer, arg1:guint) : gpointer;

external (cdecl) g_strsplit(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gint) : Pointer[Pointer[gchar]];

external (cdecl) g_strsplit_set(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gint) : Pointer[Pointer[gchar]];

external (cdecl) g_strjoinv(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : Pointer[gchar];

external (cdecl) g_strfreev(arg0:Pointer[Pointer[gchar]]) : ;

external (cdecl) g_strdupv(arg0:Pointer[Pointer[gchar]]) : Pointer[Pointer[gchar]];

external (cdecl) g_strv_length(arg0:Pointer[Pointer[gchar]]) : guint;

external (cdecl) g_stpcpy(arg0:Pointer[gchar], arg1:Pointer[CChar]) : Pointer[gchar];

external (cdecl) g_strip_context(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_dgettext(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_dcgettext(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Int) : Pointer[gchar];

external (cdecl) g_dngettext(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gulong) : Pointer[gchar];

external (cdecl) g_dpgettext(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : Pointer[gchar];

external (cdecl) g_dpgettext2(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_object_flags_get_type() : GType;

external (cdecl) gst_bin_flags_get_type() : GType;

external (cdecl) gst_buffer_flag_get_type() : GType;

external (cdecl) gst_buffer_copy_flags_get_type() : GType;

external (cdecl) gst_buffer_list_item_get_type() : GType;

external (cdecl) gst_bus_flags_get_type() : GType;

external (cdecl) gst_bus_sync_reply_get_type() : GType;

external (cdecl) gst_caps_flags_get_type() : GType;

external (cdecl) gst_caps_intersect_mode_get_type() : GType;

external (cdecl) gst_clock_return_get_type() : GType;

external (cdecl) gst_clock_entry_type_get_type() : GType;

external (cdecl) gst_clock_flags_get_type() : GType;

external (cdecl) gst_debug_graph_details_get_type() : GType;

external (cdecl) gst_state_get_type() : GType;

external (cdecl) gst_state_change_return_get_type() : GType;

external (cdecl) gst_state_change_get_type() : GType;

external (cdecl) gst_element_flags_get_type() : GType;

external (cdecl) gst_core_error_get_type() : GType;

external (cdecl) gst_library_error_get_type() : GType;

external (cdecl) gst_resource_error_get_type() : GType;

external (cdecl) gst_stream_error_get_type() : GType;

external (cdecl) gst_event_type_flags_get_type() : GType;

external (cdecl) gst_event_type_get_type() : GType;

external (cdecl) gst_seek_type_get_type() : GType;

external (cdecl) gst_seek_flags_get_type() : GType;

external (cdecl) gst_qos_type_get_type() : GType;

external (cdecl) gst_format_get_type() : GType;

external (cdecl) gst_index_certainty_get_type() : GType;

external (cdecl) gst_index_entry_type_get_type() : GType;

external (cdecl) gst_index_lookup_method_get_type() : GType;

external (cdecl) gst_assoc_flags_get_type() : GType;

external (cdecl) gst_index_resolver_method_get_type() : GType;

external (cdecl) gst_index_flags_get_type() : GType;

external (cdecl) gst_debug_level_get_type() : GType;

external (cdecl) gst_debug_color_flags_get_type() : GType;

external (cdecl) gst_iterator_result_get_type() : GType;

external (cdecl) gst_iterator_item_get_type() : GType;

external (cdecl) gst_message_type_get_type() : GType;

external (cdecl) gst_structure_change_type_get_type() : GType;

external (cdecl) gst_stream_status_type_get_type() : GType;

external (cdecl) gst_progress_type_get_type() : GType;

external (cdecl) gst_mini_object_flags_get_type() : GType;

external (cdecl) gst_pad_link_return_get_type() : GType;

external (cdecl) gst_flow_return_get_type() : GType;

external (cdecl) gst_pad_link_check_get_type() : GType;

external (cdecl) gst_activate_mode_get_type() : GType;

external (cdecl) gst_pad_direction_get_type() : GType;

external (cdecl) gst_pad_flags_get_type() : GType;

external (cdecl) gst_pad_presence_get_type() : GType;

external (cdecl) gst_pad_template_flags_get_type() : GType;

external (cdecl) gst_pipeline_flags_get_type() : GType;

external (cdecl) gst_plugin_error_get_type() : GType;

external (cdecl) gst_plugin_flags_get_type() : GType;

external (cdecl) gst_plugin_dependency_flags_get_type() : GType;

external (cdecl) gst_rank_get_type() : GType;

external (cdecl) gst_query_type_get_type() : GType;

external (cdecl) gst_buffering_mode_get_type() : GType;

external (cdecl) gst_clock_type_get_type() : GType;

external (cdecl) gst_tag_merge_mode_get_type() : GType;

external (cdecl) gst_tag_flag_get_type() : GType;

external (cdecl) gst_task_state_get_type() : GType;

external (cdecl) gst_alloc_trace_flags_get_type() : GType;

external (cdecl) gst_type_find_probability_get_type() : GType;

external (cdecl) gst_uri_type_get_type() : GType;

external (cdecl) gst_search_mode_get_type() : GType;

external (cdecl) gst_parse_error_get_type() : GType;

external (cdecl) gst_parse_flags_get_type() : GType;

alias GstElement = Struct__GstElement;

alias GstElementClass = Struct__GstElementClass;

alias Enum_Unnamed3 = UInt;
alias GST_STATE_VOID_PENDING = UInt(0);
alias GST_STATE_NULL = UInt(1);
alias GST_STATE_READY = UInt(2);
alias GST_STATE_PAUSED = UInt(3);
alias GST_STATE_PLAYING = UInt(4);

alias GstState = UInt;

alias Enum_Unnamed4 = UInt;
alias GST_OBJECT_DISPOSING = UInt(1);
alias GST_OBJECT_FLOATING = UInt(2);
alias GST_OBJECT_FLAG_LAST = UInt(16);

alias GstObjectFlags = UInt;

alias GstObject = Struct__GstObject;

alias GstObjectClass = Struct__GstObjectClass;

record Struct__GstObject (
    object : GObject,
    refcount : gint,
    lock : Pointer[GMutex],
    name : Pointer[gchar],
    name_prefix : Pointer[gchar],
    parent : Pointer[GstObject],
    flags : guint32,
    _gst_reserved : gpointer,
);

record Struct__GstObjectClass (
    parent_class : GObjectClass,
    path_string_separator : Pointer[gchar],
    signal_object : Pointer[GObject],
    lock : Pointer[GStaticRecMutex],
    parent_set : CCodePointer[[Pointer[GstObject], Pointer[GstObject]],[]],
    parent_unset : CCodePointer[[Pointer[GstObject], Pointer[GstObject]],[]],
    object_saved : CCodePointer[[Pointer[GstObject], xmlNodePtr],[]],
    deep_notify : CCodePointer[[Pointer[GstObject], Pointer[GstObject], Pointer[GParamSpec]],[]],
    save_thyself : CCodePointer[[Pointer[GstObject], xmlNodePtr],[xmlNodePtr]],
    restore_thyself : CCodePointer[[Pointer[GstObject], xmlNodePtr],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_object_get_type() : GType;

external (cdecl) gst_object_set_name(arg0:Pointer[GstObject], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_object_get_name(arg0:Pointer[GstObject]) : Pointer[gchar];

external (cdecl) gst_object_set_name_prefix(arg0:Pointer[GstObject], arg1:Pointer[gchar]) : ;

external (cdecl) gst_object_get_name_prefix(arg0:Pointer[GstObject]) : Pointer[gchar];

external (cdecl) gst_object_set_parent(arg0:Pointer[GstObject], arg1:Pointer[GstObject]) : gboolean;

external (cdecl) gst_object_get_parent(arg0:Pointer[GstObject]) : Pointer[GstObject];

external (cdecl) gst_object_unparent(arg0:Pointer[GstObject]) : ;

external (cdecl) gst_object_has_ancestor(arg0:Pointer[GstObject], arg1:Pointer[GstObject]) : gboolean;

external (cdecl) gst_object_default_deep_notify(arg0:Pointer[GObject], arg1:Pointer[GstObject], arg2:Pointer[GParamSpec], arg3:Pointer[Pointer[gchar]]) : ;

external (cdecl) gst_object_ref(arg0:gpointer) : gpointer;

external (cdecl) gst_object_unref(arg0:gpointer) : ;

external (cdecl) gst_object_ref_sink(arg0:gpointer) : ;

external (cdecl) gst_object_sink(arg0:gpointer) : ;

external (cdecl) gst_object_replace(arg0:Pointer[Pointer[GstObject]], arg1:Pointer[GstObject]) : ;

external (cdecl) gst_object_get_path_string(arg0:Pointer[GstObject]) : Pointer[gchar];

external (cdecl) gst_object_check_uniqueness(arg0:Pointer[GList], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_object_save_thyself(arg0:Pointer[GstObject], arg1:xmlNodePtr) : xmlNodePtr;

external (cdecl) gst_object_restore_thyself(arg0:Pointer[GstObject], arg1:xmlNodePtr) : ;

external (cdecl) gst_class_signal_connect(arg0:Pointer[GstObjectClass], arg1:Pointer[gchar], arg2:gpointer, arg3:gpointer) : guint;

external (cdecl) gst_class_signal_emit_by_name(arg0:Pointer[GstObject], arg1:Pointer[gchar], arg2:xmlNodePtr) : ;

alias GstMiniObject = Struct__GstMiniObject;

alias GstMiniObjectClass = Struct__GstMiniObjectClass;

alias GstMiniObjectCopyFunction = CCodePointer[[Pointer[GstMiniObject]],[Pointer[GstMiniObject]]];

alias GstMiniObjectFinalizeFunction = CCodePointer[[Pointer[GstMiniObject]],[]];

alias Enum_Unnamed5 = UInt;
alias GST_MINI_OBJECT_FLAG_READONLY = UInt(1);
alias GST_MINI_OBJECT_FLAG_RESERVED1 = UInt(2);
alias GST_MINI_OBJECT_FLAG_LAST = UInt(16);

alias GstMiniObjectFlags = UInt;

record Struct__GstMiniObject (
    instance_ : GTypeInstance,
    refcount : gint,
    flags : guint,
    _gst_reserved : gpointer,
);

record Struct__GstMiniObjectClass (
    type_class : GTypeClass,
    copy : GstMiniObjectCopyFunction,
    finalize : GstMiniObjectFinalizeFunction,
    _gst_reserved : gpointer,
);

external (cdecl) gst_mini_object_get_type() : GType;

external (cdecl) gst_mini_object_new(arg0:GType) : Pointer[GstMiniObject];

external (cdecl) gst_mini_object_copy(arg0:Pointer[GstMiniObject]) : Pointer[GstMiniObject];

external (cdecl) gst_mini_object_is_writable(arg0:Pointer[GstMiniObject]) : gboolean;

external (cdecl) gst_mini_object_make_writable(arg0:Pointer[GstMiniObject]) : Pointer[GstMiniObject];

external (cdecl) gst_mini_object_ref(arg0:Pointer[GstMiniObject]) : Pointer[GstMiniObject];

external (cdecl) gst_mini_object_unref(arg0:Pointer[GstMiniObject]) : ;

external (cdecl) gst_mini_object_replace(arg0:Pointer[Pointer[GstMiniObject]], arg1:Pointer[GstMiniObject]) : ;

alias GstParamSpecMiniObject = Struct__GstParamSpecMiniObject;

record Struct__GstParamSpecMiniObject (
    parent_instance : GParamSpec,
);

external (cdecl) gst_param_spec_mini_object_get_type() : GType;

external (cdecl) gst_param_spec_mini_object(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:GType, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) gst_value_set_mini_object(arg0:Pointer[GValue], arg1:Pointer[GstMiniObject]) : ;

external (cdecl) gst_value_take_mini_object(arg0:Pointer[GValue], arg1:Pointer[GstMiniObject]) : ;

external (cdecl) gst_value_get_mini_object(arg0:Pointer[GValue]) : Pointer[GstMiniObject];

external (cdecl) gst_value_dup_mini_object(arg0:Pointer[GValue]) : Pointer[GstMiniObject];

alias GstClockTime = guint64;

alias GstClockTimeDiff = gint64;

alias GstClockID = gpointer;

alias GstClockEntry = Struct__GstClockEntry;

alias GstClock = Struct__GstClock;

alias GstClockClass = Struct__GstClockClass;

alias Struct__GstClockPrivate = Opaque;

alias GstClockPrivate = Struct__GstClockPrivate;

alias GstClockCallback = CCodePointer[[Pointer[GstClock], GstClockTime, GstClockID, gpointer],[gboolean]];

alias Enum_Unnamed6 = UInt;
alias GST_CLOCK_OK = UInt(0);
alias GST_CLOCK_EARLY = UInt(1);
alias GST_CLOCK_UNSCHEDULED = UInt(2);
alias GST_CLOCK_BUSY = UInt(3);
alias GST_CLOCK_BADTIME = UInt(4);
alias GST_CLOCK_ERROR = UInt(5);
alias GST_CLOCK_UNSUPPORTED = UInt(6);
alias GST_CLOCK_DONE = UInt(7);

alias GstClockReturn = UInt;

alias Enum_Unnamed7 = UInt;
alias GST_CLOCK_ENTRY_SINGLE = UInt(0);
alias GST_CLOCK_ENTRY_PERIODIC = UInt(1);

alias GstClockEntryType = UInt;

record Struct__GstClockEntry (
    refcount : gint,
    clock : Pointer[GstClock],
    type : GstClockEntryType,
    time : GstClockTime,
    interval : GstClockTime,
    status : GstClockReturn,
    func : GstClockCallback,
    user_data : gpointer,
    destroy_data : GDestroyNotify,
    unscheduled : gboolean,
    woken_up : gboolean,
);

alias Enum_Unnamed8 = UInt;
alias GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC = UInt(16);
alias GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC = UInt(32);
alias GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC = UInt(64);
alias GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC = UInt(128);
alias GST_CLOCK_FLAG_CAN_SET_RESOLUTION = UInt(256);
alias GST_CLOCK_FLAG_CAN_SET_MASTER = UInt(512);
alias GST_CLOCK_FLAG_LAST = UInt(4096);

alias GstClockFlags = UInt;

record Struct__GstClock (
    object : GstObject,
    slave_lock : Pointer[GMutex],
    internal_calibration : GstClockTime,
    external_calibration : GstClockTime,
    rate_numerator : GstClockTime,
    rate_denominator : GstClockTime,
    last_time : GstClockTime,
    entries : Pointer[GList],
    entries_changed : Pointer[GCond],
    resolution : GstClockTime,
    stats : gboolean,
    master : Pointer[GstClock],
    filling : gboolean,
    window_size : gint,
    window_threshold : gint,
    time_index : gint,
    timeout : GstClockTime,
    times : Pointer[GstClockTime],
    clockid : GstClockID,
    ABI : Union_Unnamed9,
);

alias Union_Unnamed9 = Union[
    /* priv */ Pointer[GstClockPrivate],
    /* _gst_reserved */ Array[GstClockTime, 4],
];

record Struct__GstClockClass (
    parent_class : GstObjectClass,
    change_resolution : CCodePointer[[Pointer[GstClock], GstClockTime, GstClockTime],[GstClockTime]],
    get_resolution : CCodePointer[[Pointer[GstClock]],[GstClockTime]],
    get_internal_time : CCodePointer[[Pointer[GstClock]],[GstClockTime]],
    wait : CCodePointer[[Pointer[GstClock], Pointer[GstClockEntry]],[GstClockReturn]],
    wait_async : CCodePointer[[Pointer[GstClock], Pointer[GstClockEntry]],[GstClockReturn]],
    unschedule : CCodePointer[[Pointer[GstClock], Pointer[GstClockEntry]],[]],
    wait_jitter : CCodePointer[[Pointer[GstClock], Pointer[GstClockEntry], Pointer[GstClockTimeDiff]],[GstClockReturn]],
    _gst_reserved : Array[gpointer, 3],
);

external (cdecl) gst_clock_get_type() : GType;

external (cdecl) gst_clock_set_resolution(arg0:Pointer[GstClock], arg1:GstClockTime) : GstClockTime;

external (cdecl) gst_clock_get_resolution(arg0:Pointer[GstClock]) : GstClockTime;

external (cdecl) gst_clock_get_time(arg0:Pointer[GstClock]) : GstClockTime;

external (cdecl) gst_clock_set_calibration(arg0:Pointer[GstClock], arg1:GstClockTime, arg2:GstClockTime, arg3:GstClockTime, arg4:GstClockTime) : ;

external (cdecl) gst_clock_get_calibration(arg0:Pointer[GstClock], arg1:Pointer[GstClockTime], arg2:Pointer[GstClockTime], arg3:Pointer[GstClockTime], arg4:Pointer[GstClockTime]) : ;

external (cdecl) gst_clock_set_master(arg0:Pointer[GstClock], arg1:Pointer[GstClock]) : gboolean;

external (cdecl) gst_clock_get_master(arg0:Pointer[GstClock]) : Pointer[GstClock];

external (cdecl) gst_clock_add_observation(arg0:Pointer[GstClock], arg1:GstClockTime, arg2:GstClockTime, arg3:Pointer[gdouble]) : gboolean;

external (cdecl) gst_clock_get_internal_time(arg0:Pointer[GstClock]) : GstClockTime;

external (cdecl) gst_clock_adjust_unlocked(arg0:Pointer[GstClock], arg1:GstClockTime) : GstClockTime;

external (cdecl) gst_clock_unadjust_unlocked(arg0:Pointer[GstClock], arg1:GstClockTime) : GstClockTime;

external (cdecl) gst_clock_new_single_shot_id(arg0:Pointer[GstClock], arg1:GstClockTime) : GstClockID;

external (cdecl) gst_clock_new_periodic_id(arg0:Pointer[GstClock], arg1:GstClockTime, arg2:GstClockTime) : GstClockID;

external (cdecl) gst_clock_id_ref(arg0:GstClockID) : GstClockID;

external (cdecl) gst_clock_id_unref(arg0:GstClockID) : ;

external (cdecl) gst_clock_id_compare_func(arg0:gconstpointer, arg1:gconstpointer) : gint;

external (cdecl) gst_clock_id_get_time(arg0:GstClockID) : GstClockTime;

external (cdecl) gst_clock_id_wait(arg0:GstClockID, arg1:Pointer[GstClockTimeDiff]) : GstClockReturn;

external (cdecl) gst_clock_id_wait_async(arg0:GstClockID, arg1:GstClockCallback, arg2:gpointer) : GstClockReturn;

external (cdecl) gst_clock_id_wait_async_full(arg0:GstClockID, arg1:GstClockCallback, arg2:gpointer, arg3:GDestroyNotify) : GstClockReturn;

external (cdecl) gst_clock_id_unschedule(arg0:GstClockID) : ;

external (cdecl) gst_clock_single_shot_id_reinit(arg0:Pointer[GstClock], arg1:GstClockID, arg2:GstClockTime) : gboolean;

external (cdecl) gst_clock_periodic_id_reinit(arg0:Pointer[GstClock], arg1:GstClockID, arg2:GstClockTime, arg3:GstClockTime) : gboolean;

alias Struct__GstDateTime = Opaque;

alias GstDateTime = Struct__GstDateTime;

external (cdecl) gst_date_time_get_year(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_month(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_day(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_hour(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_minute(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_second(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_microsecond(arg0:Pointer[GstDateTime]) : gint;

external (cdecl) gst_date_time_get_time_zone_offset(arg0:Pointer[GstDateTime]) : gfloat;

external (cdecl) gst_date_time_new_from_unix_epoch_local_time(arg0:gint64) : Pointer[GstDateTime];

external (cdecl) gst_date_time_new_from_unix_epoch_utc(arg0:gint64) : Pointer[GstDateTime];

external (cdecl) gst_date_time_new_local_time(arg0:gint, arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gdouble) : Pointer[GstDateTime];

external (cdecl) gst_date_time_new(arg0:gfloat, arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:gdouble) : Pointer[GstDateTime];

external (cdecl) gst_date_time_new_now_local_time() : Pointer[GstDateTime];

external (cdecl) gst_date_time_new_now_utc() : Pointer[GstDateTime];

external (cdecl) gst_date_time_ref(arg0:Pointer[GstDateTime]) : Pointer[GstDateTime];

external (cdecl) gst_date_time_unref(arg0:Pointer[GstDateTime]) : ;

alias GstStructure = Struct__GstStructure;

alias GstStructureForeachFunc = CCodePointer[[GQuark, Pointer[GValue], gpointer],[gboolean]];

alias GstStructureMapFunc = CCodePointer[[GQuark, Pointer[GValue], gpointer],[gboolean]];

record Struct__GstStructure (
    type : GType,
    name : GQuark,
    parent_refcount : Pointer[gint],
    fields : Pointer[GArray],
    _gst_reserved : gpointer,
);

external (cdecl) gst_structure_get_type() : GType;

external (cdecl) gst_structure_empty_new(arg0:Pointer[gchar]) : Pointer[GstStructure];

external (cdecl) gst_structure_id_empty_new(arg0:GQuark) : Pointer[GstStructure];

external (cdecl) gst_structure_new(arg0:Pointer[gchar], arg1:Pointer[gchar], ..) : Pointer[GstStructure];

external (cdecl) gst_structure_new_valist(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : Pointer[GstStructure];

external (cdecl) gst_structure_id_new(arg0:GQuark, arg1:GQuark, ..) : Pointer[GstStructure];

external (cdecl) gst_structure_copy(arg0:Pointer[GstStructure]) : Pointer[GstStructure];

external (cdecl) gst_structure_set_parent_refcount(arg0:Pointer[GstStructure], arg1:Pointer[gint]) : ;

external (cdecl) gst_structure_free(arg0:Pointer[GstStructure]) : ;

external (cdecl) gst_structure_get_name(arg0:Pointer[GstStructure]) : Pointer[gchar];

external (cdecl) gst_structure_get_name_id(arg0:Pointer[GstStructure]) : GQuark;

external (cdecl) gst_structure_has_name(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_structure_set_name(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : ;

external (cdecl) gst_structure_id_set_value(arg0:Pointer[GstStructure], arg1:GQuark, arg2:Pointer[GValue]) : ;

external (cdecl) gst_structure_set_value(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) gst_structure_id_take_value(arg0:Pointer[GstStructure], arg1:GQuark, arg2:Pointer[GValue]) : ;

external (cdecl) gst_structure_take_value(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) gst_structure_set(arg0:Pointer[GstStructure], arg1:Pointer[gchar], ..) : ;

external (cdecl) gst_structure_set_valist(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gst_structure_id_set(arg0:Pointer[GstStructure], arg1:GQuark, ..) : ;

external (cdecl) gst_structure_id_set_valist(arg0:Pointer[GstStructure], arg1:GQuark, arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gst_structure_get_valist(arg0:Pointer[GstStructure], arg1:Pointer[CChar], arg2:Pointer[__va_list_tag]) : gboolean;

external (cdecl) gst_structure_get(arg0:Pointer[GstStructure], arg1:Pointer[CChar], ..) : gboolean;

external (cdecl) gst_structure_id_get_valist(arg0:Pointer[GstStructure], arg1:GQuark, arg2:Pointer[__va_list_tag]) : gboolean;

external (cdecl) gst_structure_id_get(arg0:Pointer[GstStructure], arg1:GQuark, ..) : gboolean;

external (cdecl) gst_structure_id_get_value(arg0:Pointer[GstStructure], arg1:GQuark) : Pointer[GValue];

external (cdecl) gst_structure_get_value(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : Pointer[GValue];

external (cdecl) gst_structure_remove_field(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : ;

external (cdecl) gst_structure_remove_fields(arg0:Pointer[GstStructure], arg1:Pointer[gchar], ..) : ;

external (cdecl) gst_structure_remove_fields_valist(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gst_structure_remove_all_fields(arg0:Pointer[GstStructure]) : ;

external (cdecl) gst_structure_get_field_type(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : GType;

external (cdecl) gst_structure_foreach(arg0:Pointer[GstStructure], arg1:GstStructureForeachFunc, arg2:gpointer) : gboolean;

external (cdecl) gst_structure_map_in_place(arg0:Pointer[GstStructure], arg1:GstStructureMapFunc, arg2:gpointer) : gboolean;

external (cdecl) gst_structure_n_fields(arg0:Pointer[GstStructure]) : gint;

external (cdecl) gst_structure_nth_field_name(arg0:Pointer[GstStructure], arg1:guint) : Pointer[gchar];

external (cdecl) gst_structure_id_has_field(arg0:Pointer[GstStructure], arg1:GQuark) : gboolean;

external (cdecl) gst_structure_id_has_field_typed(arg0:Pointer[GstStructure], arg1:GQuark, arg2:GType) : gboolean;

external (cdecl) gst_structure_has_field(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_structure_has_field_typed(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:GType) : gboolean;

external (cdecl) gst_structure_get_boolean(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[gboolean]) : gboolean;

external (cdecl) gst_structure_get_int(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[gint]) : gboolean;

external (cdecl) gst_structure_get_uint(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[guint]) : gboolean;

external (cdecl) gst_structure_get_fourcc(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[guint32]) : gboolean;

external (cdecl) gst_structure_get_double(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[gdouble]) : gboolean;

external (cdecl) gst_structure_get_date(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[Pointer[GDate]]) : gboolean;

external (cdecl) gst_structure_get_date_time(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[Pointer[GstDateTime]]) : gboolean;

external (cdecl) gst_structure_get_clock_time(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[GstClockTime]) : gboolean;

external (cdecl) gst_structure_get_string(arg0:Pointer[GstStructure], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_structure_get_enum(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:GType, arg3:Pointer[gint]) : gboolean;

external (cdecl) gst_structure_get_fraction(arg0:Pointer[GstStructure], arg1:Pointer[gchar], arg2:Pointer[gint], arg3:Pointer[gint]) : gboolean;

external (cdecl) gst_structure_to_string(arg0:Pointer[GstStructure]) : Pointer[gchar];

external (cdecl) gst_structure_from_string(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : Pointer[GstStructure];

external (cdecl) gst_structure_fixate_field_nearest_int(arg0:Pointer[GstStructure], arg1:Pointer[CChar], arg2:Int) : gboolean;

external (cdecl) gst_structure_fixate_field_nearest_double(arg0:Pointer[GstStructure], arg1:Pointer[CChar], arg2:Double) : gboolean;

external (cdecl) gst_structure_fixate_field_boolean(arg0:Pointer[GstStructure], arg1:Pointer[CChar], arg2:gboolean) : gboolean;

external (cdecl) gst_structure_fixate_field_string(arg0:Pointer[GstStructure], arg1:Pointer[CChar], arg2:Pointer[gchar]) : gboolean;

external (cdecl) gst_structure_fixate_field_nearest_fraction(arg0:Pointer[GstStructure], arg1:Pointer[CChar], arg2:gint, arg3:gint) : gboolean;

alias Enum_Unnamed10 = UInt;
alias GST_CAPS_FLAGS_ANY = UInt(1);

alias GstCapsFlags = UInt;

alias Enum_Unnamed11 = UInt;
alias GST_CAPS_INTERSECT_ZIG_ZAG = UInt(0);
alias GST_CAPS_INTERSECT_FIRST = UInt(1);

alias GstCapsIntersectMode = UInt;

alias GstCaps = Struct__GstCaps;

alias GstStaticCaps = Struct__GstStaticCaps;

record Struct__GstCaps (
    type : GType,
    refcount : gint,
    flags : GstCapsFlags,
    structs : Pointer[GPtrArray],
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstStaticCaps (
    caps : GstCaps,
    string : Pointer[CChar],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_caps_get_type() : GType;

external (cdecl) gst_caps_new_empty() : Pointer[GstCaps];

external (cdecl) gst_caps_new_any() : Pointer[GstCaps];

external (cdecl) gst_caps_new_simple(arg0:Pointer[CChar], arg1:Pointer[CChar], ..) : Pointer[GstCaps];

external (cdecl) gst_caps_new_full(arg0:Pointer[GstStructure], ..) : Pointer[GstCaps];

external (cdecl) gst_caps_new_full_valist(arg0:Pointer[GstStructure], arg1:Pointer[__va_list_tag]) : Pointer[GstCaps];

external (cdecl) gst_caps_ref(arg0:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_copy(arg0:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_make_writable(arg0:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_unref(arg0:Pointer[GstCaps]) : ;

external (cdecl) gst_static_caps_get_type() : GType;

external (cdecl) gst_static_caps_get(arg0:Pointer[GstStaticCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_append(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : ;

external (cdecl) gst_caps_merge(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : ;

external (cdecl) gst_caps_append_structure(arg0:Pointer[GstCaps], arg1:Pointer[GstStructure]) : ;

external (cdecl) gst_caps_remove_structure(arg0:Pointer[GstCaps], arg1:guint) : ;

external (cdecl) gst_caps_merge_structure(arg0:Pointer[GstCaps], arg1:Pointer[GstStructure]) : ;

external (cdecl) gst_caps_get_size(arg0:Pointer[GstCaps]) : guint;

external (cdecl) gst_caps_get_structure(arg0:Pointer[GstCaps], arg1:guint) : Pointer[GstStructure];

external (cdecl) gst_caps_steal_structure(arg0:Pointer[GstCaps], arg1:guint) : Pointer[GstStructure];

external (cdecl) gst_caps_copy_nth(arg0:Pointer[GstCaps], arg1:guint) : Pointer[GstCaps];

external (cdecl) gst_caps_truncate(arg0:Pointer[GstCaps]) : ;

external (cdecl) gst_caps_set_value(arg0:Pointer[GstCaps], arg1:Pointer[CChar], arg2:Pointer[GValue]) : ;

external (cdecl) gst_caps_set_simple(arg0:Pointer[GstCaps], arg1:Pointer[CChar], ..) : ;

external (cdecl) gst_caps_set_simple_valist(arg0:Pointer[GstCaps], arg1:Pointer[CChar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gst_caps_is_any(arg0:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_is_empty(arg0:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_is_fixed(arg0:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_is_always_compatible(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_is_subset(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_is_equal(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_is_equal_fixed(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_can_intersect(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_intersect(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_intersect_full(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps], arg2:GstCapsIntersectMode) : Pointer[GstCaps];

external (cdecl) gst_caps_subtract(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_union(arg0:Pointer[GstCaps], arg1:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_normalize(arg0:Pointer[GstCaps]) : Pointer[GstCaps];

external (cdecl) gst_caps_do_simplify(arg0:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_caps_save_thyself(arg0:Pointer[GstCaps], arg1:xmlNodePtr) : xmlNodePtr;

external (cdecl) gst_caps_load_thyself(arg0:xmlNodePtr) : Pointer[GstCaps];

external (cdecl) gst_caps_replace(arg0:Pointer[Pointer[GstCaps]], arg1:Pointer[GstCaps]) : ;

external (cdecl) gst_caps_to_string(arg0:Pointer[GstCaps]) : Pointer[gchar];

external (cdecl) gst_caps_from_string(arg0:Pointer[gchar]) : Pointer[GstCaps];

alias GstBuffer = Struct__GstBuffer;

alias GstBufferClass = Struct__GstBufferClass;

alias Enum_Unnamed12 = UInt;
alias GST_BUFFER_FLAG_READONLY = UInt(1);
alias GST_BUFFER_FLAG_MEDIA4 = UInt(2);
alias GST_BUFFER_FLAG_PREROLL = UInt(16);
alias GST_BUFFER_FLAG_DISCONT = UInt(32);
alias GST_BUFFER_FLAG_IN_CAPS = UInt(64);
alias GST_BUFFER_FLAG_GAP = UInt(128);
alias GST_BUFFER_FLAG_DELTA_UNIT = UInt(256);
alias GST_BUFFER_FLAG_MEDIA1 = UInt(512);
alias GST_BUFFER_FLAG_MEDIA2 = UInt(1024);
alias GST_BUFFER_FLAG_MEDIA3 = UInt(2048);
alias GST_BUFFER_FLAG_LAST = UInt(4096);

alias GstBufferFlag = UInt;

record Struct__GstBuffer (
    mini_object : GstMiniObject,
    data : Pointer[guint8],
    size : guint,
    timestamp : GstClockTime,
    duration : GstClockTime,
    caps : Pointer[GstCaps],
    offset : guint64,
    offset_end : guint64,
    malloc_data : Pointer[guint8],
    free_func : GFreeFunc,
    parent : Pointer[GstBuffer],
    _gst_reserved : Array[gpointer, 2],
);

record Struct__GstBufferClass (
    mini_object_class : GstMiniObjectClass,
);

external (cdecl) gst_buffer_get_type() : GType;

external (cdecl) gst_buffer_new() : Pointer[GstBuffer];

external (cdecl) gst_buffer_new_and_alloc(arg0:guint) : Pointer[GstBuffer];

external (cdecl) gst_buffer_try_new_and_alloc(arg0:guint) : Pointer[GstBuffer];

external (cdecl) gst_buffer_ref(arg0:Pointer[GstBuffer]) : Pointer[GstBuffer];

external (cdecl) gst_buffer_unref(arg0:Pointer[GstBuffer]) : ;

external (cdecl) gst_buffer_copy(arg0:Pointer[GstBuffer]) : Pointer[GstBuffer];

alias Enum_Unnamed13 = UInt;
alias GST_BUFFER_COPY_FLAGS = UInt(1);
alias GST_BUFFER_COPY_TIMESTAMPS = UInt(2);
alias GST_BUFFER_COPY_CAPS = UInt(4);

alias GstBufferCopyFlags = UInt;

external (cdecl) gst_buffer_copy_metadata(arg0:Pointer[GstBuffer], arg1:Pointer[GstBuffer], arg2:GstBufferCopyFlags) : ;

external (cdecl) gst_buffer_is_metadata_writable(arg0:Pointer[GstBuffer]) : gboolean;

external (cdecl) gst_buffer_make_metadata_writable(arg0:Pointer[GstBuffer]) : Pointer[GstBuffer];

external (cdecl) gst_buffer_get_caps(arg0:Pointer[GstBuffer]) : Pointer[GstCaps];

external (cdecl) gst_buffer_set_caps(arg0:Pointer[GstBuffer], arg1:Pointer[GstCaps]) : ;

external (cdecl) gst_buffer_create_sub(arg0:Pointer[GstBuffer], arg1:guint, arg2:guint) : Pointer[GstBuffer];

external (cdecl) gst_buffer_is_span_fast(arg0:Pointer[GstBuffer], arg1:Pointer[GstBuffer]) : gboolean;

external (cdecl) gst_buffer_span(arg0:Pointer[GstBuffer], arg1:guint32, arg2:Pointer[GstBuffer], arg3:guint32) : Pointer[GstBuffer];

alias Struct__GstBufferList = Opaque;

alias GstBufferList = Struct__GstBufferList;

alias Struct__GstBufferListClass = Opaque;

alias GstBufferListClass = Struct__GstBufferListClass;

alias Struct__GstBufferListIterator = Opaque;

alias GstBufferListIterator = Struct__GstBufferListIterator;

alias GstBufferListDoFunction = CCodePointer[[Pointer[GstBuffer], gpointer],[Pointer[GstBuffer]]];

alias Enum_Unnamed14 = UInt;
alias GST_BUFFER_LIST_CONTINUE = UInt(0);
alias GST_BUFFER_LIST_SKIP_GROUP = UInt(1);
alias GST_BUFFER_LIST_END = UInt(2);

alias GstBufferListItem = UInt;

alias GstBufferListFunc = CCodePointer[[Pointer[Pointer[GstBuffer]], guint, guint, gpointer],[GstBufferListItem]];

external (cdecl) gst_buffer_list_get_type() : GType;

external (cdecl) gst_buffer_list_new() : Pointer[GstBufferList];

external (cdecl) gst_buffer_list_ref(arg0:Pointer[GstBufferList]) : Pointer[GstBufferList];

external (cdecl) gst_buffer_list_unref(arg0:Pointer[GstBufferList]) : ;

external (cdecl) gst_buffer_list_copy(arg0:Pointer[GstBufferList]) : Pointer[GstBufferList];

external (cdecl) gst_buffer_list_n_groups(arg0:Pointer[GstBufferList]) : guint;

external (cdecl) gst_buffer_list_foreach(arg0:Pointer[GstBufferList], arg1:GstBufferListFunc, arg2:gpointer) : ;

external (cdecl) gst_buffer_list_get(arg0:Pointer[GstBufferList], arg1:guint, arg2:guint) : Pointer[GstBuffer];

external (cdecl) gst_buffer_list_iterator_get_type() : GType;

external (cdecl) gst_buffer_list_iterate(arg0:Pointer[GstBufferList]) : Pointer[GstBufferListIterator];

external (cdecl) gst_buffer_list_iterator_free(arg0:Pointer[GstBufferListIterator]) : ;

external (cdecl) gst_buffer_list_iterator_n_buffers(arg0:Pointer[GstBufferListIterator]) : guint;

external (cdecl) gst_buffer_list_iterator_next(arg0:Pointer[GstBufferListIterator]) : Pointer[GstBuffer];

external (cdecl) gst_buffer_list_iterator_next_group(arg0:Pointer[GstBufferListIterator]) : gboolean;

external (cdecl) gst_buffer_list_iterator_add(arg0:Pointer[GstBufferListIterator], arg1:Pointer[GstBuffer]) : ;

external (cdecl) gst_buffer_list_iterator_add_list(arg0:Pointer[GstBufferListIterator], arg1:Pointer[GList]) : ;

external (cdecl) gst_buffer_list_iterator_add_group(arg0:Pointer[GstBufferListIterator]) : ;

external (cdecl) gst_buffer_list_iterator_remove(arg0:Pointer[GstBufferListIterator]) : ;

external (cdecl) gst_buffer_list_iterator_steal(arg0:Pointer[GstBufferListIterator]) : Pointer[GstBuffer];

external (cdecl) gst_buffer_list_iterator_take(arg0:Pointer[GstBufferListIterator], arg1:Pointer[GstBuffer]) : ;

external (cdecl) gst_buffer_list_iterator_do(arg0:Pointer[GstBufferListIterator], arg1:GstBufferListDoFunction, arg2:gpointer) : Pointer[GstBuffer];

external (cdecl) gst_buffer_list_iterator_merge_group(arg0:Pointer[GstBufferListIterator]) : Pointer[GstBuffer];

alias Enum_Unnamed15 = UInt;
alias GST_ITERATOR_DONE = UInt(0);
alias GST_ITERATOR_OK = UInt(1);
alias GST_ITERATOR_RESYNC = UInt(2);
alias GST_ITERATOR_ERROR = UInt(3);

alias GstIteratorResult = UInt;

alias GstIterator = Struct__GstIterator;

alias Enum_Unnamed16 = UInt;
alias GST_ITERATOR_ITEM_SKIP = UInt(0);
alias GST_ITERATOR_ITEM_PASS = UInt(1);
alias GST_ITERATOR_ITEM_END = UInt(2);

alias GstIteratorItem = UInt;

alias GstIteratorDisposeFunction = CCodePointer[[gpointer],[]];

alias GstIteratorNextFunction = CCodePointer[[Pointer[GstIterator], Pointer[gpointer]],[GstIteratorResult]];

alias GstIteratorItemFunction = CCodePointer[[Pointer[GstIterator], gpointer],[GstIteratorItem]];

alias GstIteratorResyncFunction = CCodePointer[[Pointer[GstIterator]],[]];

alias GstIteratorFreeFunction = CCodePointer[[Pointer[GstIterator]],[]];

alias GstIteratorFoldFunction = CCodePointer[[gpointer, Pointer[GValue], gpointer],[gboolean]];

alias GstCopyFunction = CCodePointer[[gpointer],[gpointer]];

record Struct__GstIterator (
    next : GstIteratorNextFunction,
    item : GstIteratorItemFunction,
    resync : GstIteratorResyncFunction,
    free : GstIteratorFreeFunction,
    pushed : Pointer[GstIterator],
    type : GType,
    lock : Pointer[GMutex],
    cookie : guint32,
    master_cookie : Pointer[guint32],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_iterator_new(arg0:guint, arg1:GType, arg2:Pointer[GMutex], arg3:Pointer[guint32], arg4:GstIteratorNextFunction, arg5:GstIteratorItemFunction, arg6:GstIteratorResyncFunction, arg7:GstIteratorFreeFunction) : Pointer[GstIterator];

external (cdecl) gst_iterator_new_list(arg0:GType, arg1:Pointer[GMutex], arg2:Pointer[guint32], arg3:Pointer[Pointer[GList]], arg4:gpointer, arg5:GstIteratorItemFunction, arg6:GstIteratorDisposeFunction) : Pointer[GstIterator];

external (cdecl) gst_iterator_new_single(arg0:GType, arg1:gpointer, arg2:GstCopyFunction, arg3:GFreeFunc) : Pointer[GstIterator];

external (cdecl) gst_iterator_next(arg0:Pointer[GstIterator], arg1:Pointer[gpointer]) : GstIteratorResult;

external (cdecl) gst_iterator_resync(arg0:Pointer[GstIterator]) : ;

external (cdecl) gst_iterator_free(arg0:Pointer[GstIterator]) : ;

external (cdecl) gst_iterator_push(arg0:Pointer[GstIterator], arg1:Pointer[GstIterator]) : ;

external (cdecl) gst_iterator_filter(arg0:Pointer[GstIterator], arg1:GCompareFunc, arg2:gpointer) : Pointer[GstIterator];

external (cdecl) gst_iterator_fold(arg0:Pointer[GstIterator], arg1:GstIteratorFoldFunction, arg2:Pointer[GValue], arg3:gpointer) : GstIteratorResult;

external (cdecl) gst_iterator_foreach(arg0:Pointer[GstIterator], arg1:GFunc, arg2:gpointer) : GstIteratorResult;

external (cdecl) gst_iterator_find_custom(arg0:Pointer[GstIterator], arg1:GCompareFunc, arg2:gpointer) : gpointer;

alias Enum_Unnamed17 = UInt;
alias GST_FORMAT_UNDEFINED = UInt(0);
alias GST_FORMAT_DEFAULT = UInt(1);
alias GST_FORMAT_BYTES = UInt(2);
alias GST_FORMAT_TIME = UInt(3);
alias GST_FORMAT_BUFFERS = UInt(4);
alias GST_FORMAT_PERCENT = UInt(5);

alias GstFormat = UInt;

alias GstFormatDefinition = Struct__GstFormatDefinition;

record Struct__GstFormatDefinition (
    value : GstFormat,
    nick : Pointer[gchar],
    description : Pointer[gchar],
    quark : GQuark,
);

external (cdecl) gst_format_get_name(arg0:GstFormat) : Pointer[gchar];

external (cdecl) gst_format_to_quark(arg0:GstFormat) : GQuark;

external (cdecl) gst_format_register(arg0:Pointer[gchar], arg1:Pointer[gchar]) : GstFormat;

external (cdecl) gst_format_get_by_nick(arg0:Pointer[gchar]) : GstFormat;

external (cdecl) gst_formats_contains(arg0:Pointer[GstFormat], arg1:GstFormat) : gboolean;

external (cdecl) gst_format_get_details(arg0:GstFormat) : Pointer[GstFormatDefinition];

external (cdecl) gst_format_iterate_definitions() : Pointer[GstIterator];

alias Enum_Unnamed18 = UInt;
alias GST_TAG_MERGE_UNDEFINED = UInt(0);
alias GST_TAG_MERGE_REPLACE_ALL = UInt(1);
alias GST_TAG_MERGE_REPLACE = UInt(2);
alias GST_TAG_MERGE_APPEND = UInt(3);
alias GST_TAG_MERGE_PREPEND = UInt(4);
alias GST_TAG_MERGE_KEEP = UInt(5);
alias GST_TAG_MERGE_KEEP_ALL = UInt(6);
alias GST_TAG_MERGE_COUNT = UInt(7);

alias GstTagMergeMode = UInt;

alias Enum_Unnamed19 = UInt;
alias GST_TAG_FLAG_UNDEFINED = UInt(0);
alias GST_TAG_FLAG_META = UInt(1);
alias GST_TAG_FLAG_ENCODED = UInt(2);
alias GST_TAG_FLAG_DECODED = UInt(3);
alias GST_TAG_FLAG_COUNT = UInt(4);

alias GstTagFlag = UInt;

alias GstTagList = GstStructure;

alias GstTagForeachFunc = CCodePointer[[Pointer[GstTagList], Pointer[gchar], gpointer],[]];

alias GstTagMergeFunc = CCodePointer[[Pointer[GValue], Pointer[GValue]],[]];

external (cdecl) gst_tag_list_get_type() : GType;

external (cdecl) gst_tag_register(arg0:Pointer[gchar], arg1:GstTagFlag, arg2:GType, arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:GstTagMergeFunc) : ;

external (cdecl) gst_tag_merge_use_first(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_tag_merge_strings_with_comma(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_tag_exists(arg0:Pointer[gchar]) : gboolean;

external (cdecl) gst_tag_get_type(arg0:Pointer[gchar]) : GType;

external (cdecl) gst_tag_get_nick(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_tag_get_description(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_tag_get_flag(arg0:Pointer[gchar]) : GstTagFlag;

external (cdecl) gst_tag_is_fixed(arg0:Pointer[gchar]) : gboolean;

external (cdecl) gst_tag_list_new() : Pointer[GstTagList];

external (cdecl) gst_tag_list_new_full(arg0:Pointer[gchar], ..) : Pointer[GstTagList];

external (cdecl) gst_tag_list_new_full_valist(arg0:Pointer[__va_list_tag]) : Pointer[GstTagList];

external (cdecl) gst_is_tag_list(arg0:gconstpointer) : gboolean;

external (cdecl) gst_tag_list_copy(arg0:Pointer[GstTagList]) : Pointer[GstTagList];

external (cdecl) gst_tag_list_is_empty(arg0:Pointer[GstTagList]) : gboolean;

external (cdecl) gst_tag_list_insert(arg0:Pointer[GstTagList], arg1:Pointer[GstTagList], arg2:GstTagMergeMode) : ;

external (cdecl) gst_tag_list_merge(arg0:Pointer[GstTagList], arg1:Pointer[GstTagList], arg2:GstTagMergeMode) : Pointer[GstTagList];

external (cdecl) gst_tag_list_free(arg0:Pointer[GstTagList]) : ;

external (cdecl) gst_tag_list_get_tag_size(arg0:Pointer[GstTagList], arg1:Pointer[gchar]) : guint;

external (cdecl) gst_tag_list_add(arg0:Pointer[GstTagList], arg1:GstTagMergeMode, arg2:Pointer[gchar], ..) : ;

external (cdecl) gst_tag_list_add_values(arg0:Pointer[GstTagList], arg1:GstTagMergeMode, arg2:Pointer[gchar], ..) : ;

external (cdecl) gst_tag_list_add_valist(arg0:Pointer[GstTagList], arg1:GstTagMergeMode, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gst_tag_list_add_valist_values(arg0:Pointer[GstTagList], arg1:GstTagMergeMode, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gst_tag_list_add_value(arg0:Pointer[GstTagList], arg1:GstTagMergeMode, arg2:Pointer[gchar], arg3:Pointer[GValue]) : ;

external (cdecl) gst_tag_list_remove_tag(arg0:Pointer[GstTagList], arg1:Pointer[gchar]) : ;

external (cdecl) gst_tag_list_foreach(arg0:Pointer[GstTagList], arg1:GstTagForeachFunc, arg2:gpointer) : ;

external (cdecl) gst_tag_list_get_value_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint) : Pointer[GValue];

external (cdecl) gst_tag_list_copy_value(arg0:Pointer[GValue], arg1:Pointer[GstTagList], arg2:Pointer[gchar]) : gboolean;

external (cdecl) gst_tag_list_get_char(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gchar]) : gboolean;

external (cdecl) gst_tag_list_get_char_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gchar]) : gboolean;

external (cdecl) gst_tag_list_get_uchar(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[guchar]) : gboolean;

external (cdecl) gst_tag_list_get_uchar_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[guchar]) : gboolean;

external (cdecl) gst_tag_list_get_boolean(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gboolean]) : gboolean;

external (cdecl) gst_tag_list_get_boolean_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gboolean]) : gboolean;

external (cdecl) gst_tag_list_get_int(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gint]) : gboolean;

external (cdecl) gst_tag_list_get_int_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gint]) : gboolean;

external (cdecl) gst_tag_list_get_uint(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[guint]) : gboolean;

external (cdecl) gst_tag_list_get_uint_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[guint]) : gboolean;

external (cdecl) gst_tag_list_get_long(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[glong]) : gboolean;

external (cdecl) gst_tag_list_get_long_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[glong]) : gboolean;

external (cdecl) gst_tag_list_get_ulong(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gulong]) : gboolean;

external (cdecl) gst_tag_list_get_ulong_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gulong]) : gboolean;

external (cdecl) gst_tag_list_get_int64(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_tag_list_get_int64_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gint64]) : gboolean;

external (cdecl) gst_tag_list_get_uint64(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[guint64]) : gboolean;

external (cdecl) gst_tag_list_get_uint64_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[guint64]) : gboolean;

external (cdecl) gst_tag_list_get_float(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gfloat]) : gboolean;

external (cdecl) gst_tag_list_get_float_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gfloat]) : gboolean;

external (cdecl) gst_tag_list_get_double(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gdouble]) : gboolean;

external (cdecl) gst_tag_list_get_double_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gdouble]) : gboolean;

external (cdecl) gst_tag_list_get_string(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) gst_tag_list_get_string_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) gst_tag_list_peek_string_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) gst_tag_list_get_pointer(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[gpointer]) : gboolean;

external (cdecl) gst_tag_list_get_pointer_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[gpointer]) : gboolean;

external (cdecl) gst_tag_list_get_date(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[Pointer[GDate]]) : gboolean;

external (cdecl) gst_tag_list_get_date_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[Pointer[GDate]]) : gboolean;

external (cdecl) gst_tag_list_get_date_time(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[Pointer[GstDateTime]]) : gboolean;

external (cdecl) gst_tag_list_get_date_time_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[Pointer[GstDateTime]]) : gboolean;

external (cdecl) gst_tag_list_get_buffer(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:Pointer[Pointer[GstBuffer]]) : gboolean;

external (cdecl) gst_tag_list_get_buffer_index(arg0:Pointer[GstTagList], arg1:Pointer[gchar], arg2:guint, arg3:Pointer[Pointer[GstBuffer]]) : gboolean;

alias Enum_Unnamed20 = UInt;
alias GST_EVENT_TYPE_UPSTREAM = UInt(1);
alias GST_EVENT_TYPE_DOWNSTREAM = UInt(2);
alias GST_EVENT_TYPE_SERIALIZED = UInt(4);

alias GstEventTypeFlags = UInt;

alias Enum_Unnamed21 = UInt;
alias GST_EVENT_UNKNOWN = UInt(0);
alias GST_EVENT_FLUSH_START = UInt(19);
alias GST_EVENT_FLUSH_STOP = UInt(39);
alias GST_EVENT_EOS = UInt(86);
alias GST_EVENT_NEWSEGMENT = UInt(102);
alias GST_EVENT_TAG = UInt(118);
alias GST_EVENT_BUFFERSIZE = UInt(134);
alias GST_EVENT_SINK_MESSAGE = UInt(150);
alias GST_EVENT_QOS = UInt(241);
alias GST_EVENT_SEEK = UInt(257);
alias GST_EVENT_NAVIGATION = UInt(273);
alias GST_EVENT_LATENCY = UInt(289);
alias GST_EVENT_STEP = UInt(305);
alias GST_EVENT_CUSTOM_UPSTREAM = UInt(513);
alias GST_EVENT_CUSTOM_DOWNSTREAM = UInt(518);
alias GST_EVENT_CUSTOM_DOWNSTREAM_OOB = UInt(514);
alias GST_EVENT_CUSTOM_BOTH = UInt(519);
alias GST_EVENT_CUSTOM_BOTH_OOB = UInt(515);

alias GstEventType = UInt;

alias GstEvent = Struct__GstEvent;

alias GstEventClass = Struct__GstEventClass;

alias Enum_Unnamed22 = UInt;
alias GST_SEEK_TYPE_NONE = UInt(0);
alias GST_SEEK_TYPE_CUR = UInt(1);
alias GST_SEEK_TYPE_SET = UInt(2);
alias GST_SEEK_TYPE_END = UInt(3);

alias GstSeekType = UInt;

alias Enum_Unnamed23 = UInt;
alias GST_SEEK_FLAG_NONE = UInt(0);
alias GST_SEEK_FLAG_FLUSH = UInt(1);
alias GST_SEEK_FLAG_ACCURATE = UInt(2);
alias GST_SEEK_FLAG_KEY_UNIT = UInt(4);
alias GST_SEEK_FLAG_SEGMENT = UInt(8);
alias GST_SEEK_FLAG_SKIP = UInt(16);

alias GstSeekFlags = UInt;

alias Enum_Unnamed24 = UInt;
alias GST_QOS_TYPE_OVERFLOW = UInt(0);
alias GST_QOS_TYPE_UNDERFLOW = UInt(1);
alias GST_QOS_TYPE_THROTTLE = UInt(2);

alias GstQOSType = UInt;

record Struct__GstEvent (
    mini_object : GstMiniObject,
    type : GstEventType,
    timestamp : guint64,
    src : Pointer[GstObject],
    structure : Pointer[GstStructure],
    abidata : Union_Unnamed25,
);

alias Union_Unnamed25 = Union[
    /* seqnum */ guint32,
    /* _gst_reserved */ gpointer,
];

record Struct__GstEventClass (
    mini_object_class : GstMiniObjectClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_event_type_get_name(arg0:GstEventType) : Pointer[gchar];

external (cdecl) gst_event_type_to_quark(arg0:GstEventType) : GQuark;

external (cdecl) gst_event_type_get_flags(arg0:GstEventType) : GstEventTypeFlags;

external (cdecl) gst_event_get_type() : GType;

external (cdecl) gst_event_ref(arg0:Pointer[GstEvent]) : Pointer[GstEvent];

external (cdecl) gst_event_unref(arg0:Pointer[GstEvent]) : ;

external (cdecl) gst_event_copy(arg0:Pointer[GstEvent]) : Pointer[GstEvent];

external (cdecl) gst_event_new_custom(arg0:GstEventType, arg1:Pointer[GstStructure]) : Pointer[GstEvent];

external (cdecl) gst_event_get_structure(arg0:Pointer[GstEvent]) : Pointer[GstStructure];

external (cdecl) gst_event_has_name(arg0:Pointer[GstEvent], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_event_get_seqnum(arg0:Pointer[GstEvent]) : guint32;

external (cdecl) gst_event_set_seqnum(arg0:Pointer[GstEvent], arg1:guint32) : ;

external (cdecl) gst_event_new_flush_start() : Pointer[GstEvent];

external (cdecl) gst_event_new_flush_stop() : Pointer[GstEvent];

external (cdecl) gst_event_new_eos() : Pointer[GstEvent];

external (cdecl) gst_event_new_new_segment(arg0:gboolean, arg1:gdouble, arg2:GstFormat, arg3:gint64, arg4:gint64, arg5:gint64) : Pointer[GstEvent];

external (cdecl) gst_event_new_new_segment_full(arg0:gboolean, arg1:gdouble, arg2:gdouble, arg3:GstFormat, arg4:gint64, arg5:gint64, arg6:gint64) : Pointer[GstEvent];

external (cdecl) gst_event_parse_new_segment(arg0:Pointer[GstEvent], arg1:Pointer[gboolean], arg2:Pointer[gdouble], arg3:Pointer[GstFormat], arg4:Pointer[gint64], arg5:Pointer[gint64], arg6:Pointer[gint64]) : ;

external (cdecl) gst_event_parse_new_segment_full(arg0:Pointer[GstEvent], arg1:Pointer[gboolean], arg2:Pointer[gdouble], arg3:Pointer[gdouble], arg4:Pointer[GstFormat], arg5:Pointer[gint64], arg6:Pointer[gint64], arg7:Pointer[gint64]) : ;

external (cdecl) gst_event_new_tag(arg0:Pointer[GstTagList]) : Pointer[GstEvent];

external (cdecl) gst_event_parse_tag(arg0:Pointer[GstEvent], arg1:Pointer[Pointer[GstTagList]]) : ;

external (cdecl) gst_event_new_buffer_size(arg0:GstFormat, arg1:gint64, arg2:gint64, arg3:gboolean) : Pointer[GstEvent];

external (cdecl) gst_event_parse_buffer_size(arg0:Pointer[GstEvent], arg1:Pointer[GstFormat], arg2:Pointer[gint64], arg3:Pointer[gint64], arg4:Pointer[gboolean]) : ;

external (cdecl) gst_event_new_qos(arg0:gdouble, arg1:GstClockTimeDiff, arg2:GstClockTime) : Pointer[GstEvent];

external (cdecl) gst_event_new_qos_full(arg0:GstQOSType, arg1:gdouble, arg2:GstClockTimeDiff, arg3:GstClockTime) : Pointer[GstEvent];

external (cdecl) gst_event_parse_qos(arg0:Pointer[GstEvent], arg1:Pointer[gdouble], arg2:Pointer[GstClockTimeDiff], arg3:Pointer[GstClockTime]) : ;

external (cdecl) gst_event_parse_qos_full(arg0:Pointer[GstEvent], arg1:Pointer[GstQOSType], arg2:Pointer[gdouble], arg3:Pointer[GstClockTimeDiff], arg4:Pointer[GstClockTime]) : ;

external (cdecl) gst_event_new_seek(arg0:gdouble, arg1:GstFormat, arg2:GstSeekFlags, arg3:GstSeekType, arg4:gint64, arg5:GstSeekType, arg6:gint64) : Pointer[GstEvent];

external (cdecl) gst_event_parse_seek(arg0:Pointer[GstEvent], arg1:Pointer[gdouble], arg2:Pointer[GstFormat], arg3:Pointer[GstSeekFlags], arg4:Pointer[GstSeekType], arg5:Pointer[gint64], arg6:Pointer[GstSeekType], arg7:Pointer[gint64]) : ;

external (cdecl) gst_event_new_navigation(arg0:Pointer[GstStructure]) : Pointer[GstEvent];

external (cdecl) gst_event_new_latency(arg0:GstClockTime) : Pointer[GstEvent];

external (cdecl) gst_event_parse_latency(arg0:Pointer[GstEvent], arg1:Pointer[GstClockTime]) : ;

external (cdecl) gst_event_new_step(arg0:GstFormat, arg1:guint64, arg2:gdouble, arg3:gboolean, arg4:gboolean) : Pointer[GstEvent];

external (cdecl) gst_event_parse_step(arg0:Pointer[GstEvent], arg1:Pointer[GstFormat], arg2:Pointer[guint64], arg3:Pointer[gdouble], arg4:Pointer[gboolean], arg5:Pointer[gboolean]) : ;

alias Enum_Unnamed26 = UInt;
alias GST_QUERY_NONE = UInt(0);
alias GST_QUERY_POSITION = UInt(1);
alias GST_QUERY_DURATION = UInt(2);
alias GST_QUERY_LATENCY = UInt(3);
alias GST_QUERY_JITTER = UInt(4);
alias GST_QUERY_RATE = UInt(5);
alias GST_QUERY_SEEKING = UInt(6);
alias GST_QUERY_SEGMENT = UInt(7);
alias GST_QUERY_CONVERT = UInt(8);
alias GST_QUERY_FORMATS = UInt(9);
alias GST_QUERY_BUFFERING = UInt(10);
alias GST_QUERY_CUSTOM = UInt(11);
alias GST_QUERY_URI = UInt(12);

alias GstQueryType = UInt;

alias Enum_Unnamed27 = UInt;
alias GST_BUFFERING_STREAM = UInt(0);
alias GST_BUFFERING_DOWNLOAD = UInt(1);
alias GST_BUFFERING_TIMESHIFT = UInt(2);
alias GST_BUFFERING_LIVE = UInt(3);

alias GstBufferingMode = UInt;

alias GstQueryTypeDefinition = Struct__GstQueryTypeDefinition;

alias GstQuery = Struct__GstQuery;

alias GstQueryClass = Struct__GstQueryClass;

record Struct__GstQueryTypeDefinition (
    value : GstQueryType,
    nick : Pointer[gchar],
    description : Pointer[gchar],
    quark : GQuark,
);

record Struct__GstQuery (
    mini_object : GstMiniObject,
    type : GstQueryType,
    structure : Pointer[GstStructure],
    _gst_reserved : gpointer,
);

record Struct__GstQueryClass (
    mini_object_class : GstMiniObjectClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_query_type_get_name(arg0:GstQueryType) : Pointer[gchar];

external (cdecl) gst_query_type_to_quark(arg0:GstQueryType) : GQuark;

external (cdecl) gst_query_get_type() : GType;

external (cdecl) gst_query_type_register(arg0:Pointer[gchar], arg1:Pointer[gchar]) : GstQueryType;

external (cdecl) gst_query_type_get_by_nick(arg0:Pointer[gchar]) : GstQueryType;

external (cdecl) gst_query_types_contains(arg0:Pointer[GstQueryType], arg1:GstQueryType) : gboolean;

external (cdecl) gst_query_type_get_details(arg0:GstQueryType) : Pointer[GstQueryTypeDefinition];

external (cdecl) gst_query_type_iterate_definitions() : Pointer[GstIterator];

external (cdecl) gst_query_ref(arg0:Pointer[GstQuery]) : Pointer[GstQuery];

external (cdecl) gst_query_unref(arg0:Pointer[GstQuery]) : ;

external (cdecl) gst_query_copy(arg0:Pointer[GstQuery]) : Pointer[GstQuery];

external (cdecl) gst_query_new_position(arg0:GstFormat) : Pointer[GstQuery];

external (cdecl) gst_query_set_position(arg0:Pointer[GstQuery], arg1:GstFormat, arg2:gint64) : ;

external (cdecl) gst_query_parse_position(arg0:Pointer[GstQuery], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : ;

external (cdecl) gst_query_new_duration(arg0:GstFormat) : Pointer[GstQuery];

external (cdecl) gst_query_set_duration(arg0:Pointer[GstQuery], arg1:GstFormat, arg2:gint64) : ;

external (cdecl) gst_query_parse_duration(arg0:Pointer[GstQuery], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : ;

external (cdecl) gst_query_new_latency() : Pointer[GstQuery];

external (cdecl) gst_query_set_latency(arg0:Pointer[GstQuery], arg1:gboolean, arg2:GstClockTime, arg3:GstClockTime) : ;

external (cdecl) gst_query_parse_latency(arg0:Pointer[GstQuery], arg1:Pointer[gboolean], arg2:Pointer[GstClockTime], arg3:Pointer[GstClockTime]) : ;

external (cdecl) gst_query_new_convert(arg0:GstFormat, arg1:gint64, arg2:GstFormat) : Pointer[GstQuery];

external (cdecl) gst_query_set_convert(arg0:Pointer[GstQuery], arg1:GstFormat, arg2:gint64, arg3:GstFormat, arg4:gint64) : ;

external (cdecl) gst_query_parse_convert(arg0:Pointer[GstQuery], arg1:Pointer[GstFormat], arg2:Pointer[gint64], arg3:Pointer[GstFormat], arg4:Pointer[gint64]) : ;

external (cdecl) gst_query_new_segment(arg0:GstFormat) : Pointer[GstQuery];

external (cdecl) gst_query_set_segment(arg0:Pointer[GstQuery], arg1:gdouble, arg2:GstFormat, arg3:gint64, arg4:gint64) : ;

external (cdecl) gst_query_parse_segment(arg0:Pointer[GstQuery], arg1:Pointer[gdouble], arg2:Pointer[GstFormat], arg3:Pointer[gint64], arg4:Pointer[gint64]) : ;

external (cdecl) gst_query_new_application(arg0:GstQueryType, arg1:Pointer[GstStructure]) : Pointer[GstQuery];

external (cdecl) gst_query_get_structure(arg0:Pointer[GstQuery]) : Pointer[GstStructure];

external (cdecl) gst_query_new_seeking(arg0:GstFormat) : Pointer[GstQuery];

external (cdecl) gst_query_set_seeking(arg0:Pointer[GstQuery], arg1:GstFormat, arg2:gboolean, arg3:gint64, arg4:gint64) : ;

external (cdecl) gst_query_parse_seeking(arg0:Pointer[GstQuery], arg1:Pointer[GstFormat], arg2:Pointer[gboolean], arg3:Pointer[gint64], arg4:Pointer[gint64]) : ;

external (cdecl) gst_query_new_formats() : Pointer[GstQuery];

external (cdecl) gst_query_set_formats(arg0:Pointer[GstQuery], arg1:gint, ..) : ;

external (cdecl) gst_query_set_formatsv(arg0:Pointer[GstQuery], arg1:gint, arg2:Pointer[GstFormat]) : ;

external (cdecl) gst_query_parse_formats_length(arg0:Pointer[GstQuery], arg1:Pointer[guint]) : ;

external (cdecl) gst_query_parse_formats_nth(arg0:Pointer[GstQuery], arg1:guint, arg2:Pointer[GstFormat]) : ;

external (cdecl) gst_query_new_buffering(arg0:GstFormat) : Pointer[GstQuery];

external (cdecl) gst_query_set_buffering_percent(arg0:Pointer[GstQuery], arg1:gboolean, arg2:gint) : ;

external (cdecl) gst_query_parse_buffering_percent(arg0:Pointer[GstQuery], arg1:Pointer[gboolean], arg2:Pointer[gint]) : ;

external (cdecl) gst_query_set_buffering_stats(arg0:Pointer[GstQuery], arg1:GstBufferingMode, arg2:gint, arg3:gint, arg4:gint64) : ;

external (cdecl) gst_query_parse_buffering_stats(arg0:Pointer[GstQuery], arg1:Pointer[GstBufferingMode], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[gint64]) : ;

external (cdecl) gst_query_set_buffering_range(arg0:Pointer[GstQuery], arg1:GstFormat, arg2:gint64, arg3:gint64, arg4:gint64) : ;

external (cdecl) gst_query_parse_buffering_range(arg0:Pointer[GstQuery], arg1:Pointer[GstFormat], arg2:Pointer[gint64], arg3:Pointer[gint64], arg4:Pointer[gint64]) : ;

external (cdecl) gst_query_add_buffering_range(arg0:Pointer[GstQuery], arg1:gint64, arg2:gint64) : gboolean;

external (cdecl) gst_query_get_n_buffering_ranges(arg0:Pointer[GstQuery]) : guint;

external (cdecl) gst_query_parse_nth_buffering_range(arg0:Pointer[GstQuery], arg1:guint, arg2:Pointer[gint64], arg3:Pointer[gint64]) : gboolean;

external (cdecl) gst_query_new_uri() : Pointer[GstQuery];

external (cdecl) gst_query_parse_uri(arg0:Pointer[GstQuery], arg1:Pointer[Pointer[gchar]]) : ;

external (cdecl) gst_query_set_uri(arg0:Pointer[GstQuery], arg1:Pointer[gchar]) : ;

alias GstTaskPool = Struct__GstTaskPool;

alias GstTaskPoolClass = Struct__GstTaskPoolClass;

alias GstTaskPoolFunction = CCodePointer[[OpaquePointer],[]];

record Struct__GstTaskPool (
    object : GstObject,
    pool : Pointer[GThreadPool],
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstTaskPoolClass (
    parent_class : GstObjectClass,
    prepare : CCodePointer[[Pointer[GstTaskPool], Pointer[Pointer[GError]]],[]],
    cleanup : CCodePointer[[Pointer[GstTaskPool]],[]],
    push : CCodePointer[[Pointer[GstTaskPool], GstTaskPoolFunction, gpointer, Pointer[Pointer[GError]]],[gpointer]],
    join : CCodePointer[[Pointer[GstTaskPool], gpointer],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_task_pool_get_type() : GType;

external (cdecl) gst_task_pool_new() : Pointer[GstTaskPool];

external (cdecl) gst_task_pool_prepare(arg0:Pointer[GstTaskPool], arg1:Pointer[Pointer[GError]]) : ;

external (cdecl) gst_task_pool_push(arg0:Pointer[GstTaskPool], arg1:GstTaskPoolFunction, arg2:gpointer, arg3:Pointer[Pointer[GError]]) : gpointer;

external (cdecl) gst_task_pool_join(arg0:Pointer[GstTaskPool], arg1:gpointer) : ;

external (cdecl) gst_task_pool_cleanup(arg0:Pointer[GstTaskPool]) : ;

alias GstTaskFunction = CCodePointer[[OpaquePointer],[]];

alias GstTask = Struct__GstTask;

alias GstTaskClass = Struct__GstTaskClass;

alias Struct__GstTaskPrivate = Opaque;

alias GstTaskPrivate = Struct__GstTaskPrivate;

alias Enum_Unnamed28 = UInt;
alias GST_TASK_STARTED = UInt(0);
alias GST_TASK_STOPPED = UInt(1);
alias GST_TASK_PAUSED = UInt(2);

alias GstTaskState = UInt;

record Struct_Unnamed29 (
    enter_thread : CCodePointer[[Pointer[GstTask], Pointer[GThread], gpointer],[]],
    leave_thread : CCodePointer[[Pointer[GstTask], Pointer[GThread], gpointer],[]],
    _gst_reserved : Array[gpointer, 4],
);

alias GstTaskThreadCallbacks = Struct_Unnamed29;

record Struct__GstTask (
    object : GstObject,
    state : GstTaskState,
    cond : Pointer[GCond],
    lock : Pointer[GStaticRecMutex],
    func : GstTaskFunction,
    data : gpointer,
    running : gboolean,
    abidata : Union_Unnamed30,
    priv : Pointer[GstTaskPrivate],
);

alias Union_Unnamed30 = Union[
    /* ABI */ Struct_Unnamed31,
    /* _gst_reserved */ Array[gpointer, 3],
];

record Struct_Unnamed31 (
    thread : Pointer[GThread],
);

record Struct__GstTaskClass (
    parent_class : GstObjectClass,
    pool : Pointer[GstTaskPool],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_task_cleanup_all() : ;

external (cdecl) gst_task_get_type() : GType;

external (cdecl) gst_task_create(arg0:GstTaskFunction, arg1:gpointer) : Pointer[GstTask];

external (cdecl) gst_task_set_lock(arg0:Pointer[GstTask], arg1:Pointer[GStaticRecMutex]) : ;

external (cdecl) gst_task_set_priority(arg0:Pointer[GstTask], arg1:GThreadPriority) : ;

external (cdecl) gst_task_get_pool(arg0:Pointer[GstTask]) : Pointer[GstTaskPool];

external (cdecl) gst_task_set_pool(arg0:Pointer[GstTask], arg1:Pointer[GstTaskPool]) : ;

external (cdecl) gst_task_set_thread_callbacks(arg0:Pointer[GstTask], arg1:Pointer[GstTaskThreadCallbacks], arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gst_task_get_state(arg0:Pointer[GstTask]) : GstTaskState;

external (cdecl) gst_task_set_state(arg0:Pointer[GstTask], arg1:GstTaskState) : gboolean;

external (cdecl) gst_task_start(arg0:Pointer[GstTask]) : gboolean;

external (cdecl) gst_task_stop(arg0:Pointer[GstTask]) : gboolean;

external (cdecl) gst_task_pause(arg0:Pointer[GstTask]) : gboolean;

external (cdecl) gst_task_join(arg0:Pointer[GstTask]) : gboolean;

alias GstPad = Struct__GstPad;

alias Struct__GstPadPrivate = Opaque;

alias GstPadPrivate = Struct__GstPadPrivate;

alias GstPadClass = Struct__GstPadClass;

alias Enum_Unnamed32 = Int;
alias GST_PAD_LINK_OK = Int(0);
alias GST_PAD_LINK_WRONG_HIERARCHY = Int(-1);
alias GST_PAD_LINK_WAS_LINKED = Int(-2);
alias GST_PAD_LINK_WRONG_DIRECTION = Int(-3);
alias GST_PAD_LINK_NOFORMAT = Int(-4);
alias GST_PAD_LINK_NOSCHED = Int(-5);
alias GST_PAD_LINK_REFUSED = Int(-6);

alias GstPadLinkReturn = Int;

alias Enum_Unnamed33 = Int;
alias GST_FLOW_CUSTOM_SUCCESS_2 = Int(102);
alias GST_FLOW_CUSTOM_SUCCESS_1 = Int(101);
alias GST_FLOW_CUSTOM_SUCCESS = Int(100);
alias GST_FLOW_RESEND = Int(1);
alias GST_FLOW_OK = Int(0);
alias GST_FLOW_NOT_LINKED = Int(-1);
alias GST_FLOW_WRONG_STATE = Int(-2);
alias GST_FLOW_UNEXPECTED = Int(-3);
alias GST_FLOW_NOT_NEGOTIATED = Int(-4);
alias GST_FLOW_ERROR = Int(-5);
alias GST_FLOW_NOT_SUPPORTED = Int(-6);
alias GST_FLOW_CUSTOM_ERROR = Int(-100);
alias GST_FLOW_CUSTOM_ERROR_1 = Int(-101);
alias GST_FLOW_CUSTOM_ERROR_2 = Int(-102);

alias GstFlowReturn = Int;

external (cdecl) gst_flow_get_name(arg0:GstFlowReturn) : Pointer[gchar];

external (cdecl) gst_flow_to_quark(arg0:GstFlowReturn) : GQuark;

alias Enum_Unnamed34 = UInt;
alias GST_PAD_LINK_CHECK_NOTHING = UInt(0);
alias GST_PAD_LINK_CHECK_HIERARCHY = UInt(1);
alias GST_PAD_LINK_CHECK_TEMPLATE_CAPS = UInt(2);
alias GST_PAD_LINK_CHECK_CAPS = UInt(4);

alias GstPadLinkCheck = UInt;

alias Enum_Unnamed35 = UInt;
alias GST_ACTIVATE_NONE = UInt(0);
alias GST_ACTIVATE_PUSH = UInt(1);
alias GST_ACTIVATE_PULL = UInt(2);

alias GstActivateMode = UInt;

alias GstPadActivateFunction = CCodePointer[[Pointer[GstPad]],[gboolean]];

alias GstPadActivateModeFunction = CCodePointer[[Pointer[GstPad], gboolean],[gboolean]];

alias GstPadChainFunction = CCodePointer[[Pointer[GstPad], Pointer[GstBuffer]],[GstFlowReturn]];

alias GstPadChainListFunction = CCodePointer[[Pointer[GstPad], Pointer[GstBufferList]],[GstFlowReturn]];

alias GstPadGetRangeFunction = CCodePointer[[Pointer[GstPad], guint64, guint, Pointer[Pointer[GstBuffer]]],[GstFlowReturn]];

alias GstPadEventFunction = CCodePointer[[Pointer[GstPad], Pointer[GstEvent]],[gboolean]];

alias GstPadCheckGetRangeFunction = CCodePointer[[Pointer[GstPad]],[gboolean]];

alias GstPadIntLinkFunction = CCodePointer[[Pointer[GstPad]],[Pointer[GList]]];

alias GstPadIterIntLinkFunction = CCodePointer[[Pointer[GstPad]],[Pointer[GstIterator]]];

alias GstPadQueryTypeFunction = CCodePointer[[Pointer[GstPad]],[Pointer[GstQueryType]]];

alias GstPadQueryFunction = CCodePointer[[Pointer[GstPad], Pointer[GstQuery]],[gboolean]];

alias GstPadLinkFunction = CCodePointer[[Pointer[GstPad], Pointer[GstPad]],[GstPadLinkReturn]];

alias GstPadUnlinkFunction = CCodePointer[[Pointer[GstPad]],[]];

alias GstPadGetCapsFunction = CCodePointer[[Pointer[GstPad]],[Pointer[GstCaps]]];

alias GstPadSetCapsFunction = CCodePointer[[Pointer[GstPad], Pointer[GstCaps]],[gboolean]];

alias GstPadAcceptCapsFunction = CCodePointer[[Pointer[GstPad], Pointer[GstCaps]],[gboolean]];

alias GstPadFixateCapsFunction = CCodePointer[[Pointer[GstPad], Pointer[GstCaps]],[]];

alias GstPadBufferAllocFunction = CCodePointer[[Pointer[GstPad], guint64, guint, Pointer[GstCaps], Pointer[Pointer[GstBuffer]]],[GstFlowReturn]];

alias GstPadDispatcherFunction = CCodePointer[[Pointer[GstPad], gpointer],[gboolean]];

alias GstPadBlockCallback = CCodePointer[[Pointer[GstPad], gboolean, gpointer],[]];

alias Enum_Unnamed36 = UInt;
alias GST_PAD_UNKNOWN = UInt(0);
alias GST_PAD_SRC = UInt(1);
alias GST_PAD_SINK = UInt(2);

alias GstPadDirection = UInt;

alias Enum_Unnamed37 = UInt;
alias GST_PAD_BLOCKED = UInt(16);
alias GST_PAD_FLUSHING = UInt(32);
alias GST_PAD_IN_GETCAPS = UInt(64);
alias GST_PAD_IN_SETCAPS = UInt(128);
alias GST_PAD_BLOCKING = UInt(256);
alias GST_PAD_FLAG_LAST = UInt(4096);

alias GstPadFlags = UInt;

alias GstPadTemplate = Struct__GstPadTemplate;

record Struct__GstPad (
    object : GstObject,
    element_private : gpointer,
    padtemplate : Pointer[GstPadTemplate],
    direction : GstPadDirection,
    stream_rec_lock : Pointer[GStaticRecMutex],
    task : Pointer[GstTask],
    preroll_lock : Pointer[GMutex],
    preroll_cond : Pointer[GCond],
    block_cond : Pointer[GCond],
    block_callback : GstPadBlockCallback,
    block_data : gpointer,
    caps : Pointer[GstCaps],
    getcapsfunc : GstPadGetCapsFunction,
    setcapsfunc : GstPadSetCapsFunction,
    acceptcapsfunc : GstPadAcceptCapsFunction,
    fixatecapsfunc : GstPadFixateCapsFunction,
    activatefunc : GstPadActivateFunction,
    activatepushfunc : GstPadActivateModeFunction,
    activatepullfunc : GstPadActivateModeFunction,
    linkfunc : GstPadLinkFunction,
    unlinkfunc : GstPadUnlinkFunction,
    peer : Pointer[GstPad],
    sched_private : gpointer,
    chainfunc : GstPadChainFunction,
    checkgetrangefunc : GstPadCheckGetRangeFunction,
    getrangefunc : GstPadGetRangeFunction,
    eventfunc : GstPadEventFunction,
    mode : GstActivateMode,
    querytypefunc : GstPadQueryTypeFunction,
    queryfunc : GstPadQueryFunction,
    intlinkfunc : GstPadIntLinkFunction,
    bufferallocfunc : GstPadBufferAllocFunction,
    do_buffer_signals : gint,
    do_event_signals : gint,
    iterintlinkfunc : GstPadIterIntLinkFunction,
    block_destroy_data : GDestroyNotify,
    abidata : Union_Unnamed38,
);

alias Union_Unnamed38 = Union[
    /* ABI */ Struct_Unnamed39,
    /* _gst_reserved */ Array[gpointer, 2],
];

record Struct_Unnamed39 (
    block_callback_called : gboolean,
    priv : Pointer[GstPadPrivate],
);

record Struct__GstPadClass (
    parent_class : GstObjectClass,
    linked : CCodePointer[[Pointer[GstPad], Pointer[GstPad]],[]],
    unlinked : CCodePointer[[Pointer[GstPad], Pointer[GstPad]],[]],
    request_link : CCodePointer[[Pointer[GstPad]],[]],
    have_data : CCodePointer[[Pointer[GstPad], Pointer[GstMiniObject]],[gboolean]],
    _gst_reserved : Array[gpointer, 4],
);

alias GstPadTemplateClass = Struct__GstPadTemplateClass;

alias GstStaticPadTemplate = Struct__GstStaticPadTemplate;

alias Enum_Unnamed40 = UInt;
alias GST_PAD_ALWAYS = UInt(0);
alias GST_PAD_SOMETIMES = UInt(1);
alias GST_PAD_REQUEST = UInt(2);

alias GstPadPresence = UInt;

alias Enum_Unnamed41 = UInt;
alias GST_PAD_TEMPLATE_FIXED = UInt(16);
alias GST_PAD_TEMPLATE_FLAG_LAST = UInt(256);

alias GstPadTemplateFlags = UInt;

record Struct__GstPadTemplate (
    object : GstObject,
    name_template : Pointer[gchar],
    direction : GstPadDirection,
    presence : GstPadPresence,
    caps : Pointer[GstCaps],
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstPadTemplateClass (
    parent_class : GstObjectClass,
    pad_created : CCodePointer[[Pointer[GstPadTemplate], Pointer[GstPad]],[]],
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstStaticPadTemplate (
    name_template : Pointer[gchar],
    direction : GstPadDirection,
    presence : GstPadPresence,
    static_caps : GstStaticCaps,
);

external (cdecl) gst_pad_template_get_type() : GType;

external (cdecl) gst_static_pad_template_get_type() : GType;

external (cdecl) gst_pad_template_new(arg0:Pointer[gchar], arg1:GstPadDirection, arg2:GstPadPresence, arg3:Pointer[GstCaps]) : Pointer[GstPadTemplate];

external (cdecl) gst_static_pad_template_get(arg0:Pointer[GstStaticPadTemplate]) : Pointer[GstPadTemplate];

external (cdecl) gst_static_pad_template_get_caps(arg0:Pointer[GstStaticPadTemplate]) : Pointer[GstCaps];

external (cdecl) gst_pad_template_get_caps(arg0:Pointer[GstPadTemplate]) : Pointer[GstCaps];

external (cdecl) gst_pad_template_pad_created(arg0:Pointer[GstPadTemplate], arg1:Pointer[GstPad]) : ;

external (cdecl) gst_pad_get_type() : GType;

external (cdecl) gst_pad_new(arg0:Pointer[gchar], arg1:GstPadDirection) : Pointer[GstPad];

external (cdecl) gst_pad_new_from_template(arg0:Pointer[GstPadTemplate], arg1:Pointer[gchar]) : Pointer[GstPad];

external (cdecl) gst_pad_new_from_static_template(arg0:Pointer[GstStaticPadTemplate], arg1:Pointer[gchar]) : Pointer[GstPad];

external (cdecl) gst_pad_get_direction(arg0:Pointer[GstPad]) : GstPadDirection;

external (cdecl) gst_pad_set_active(arg0:Pointer[GstPad], arg1:gboolean) : gboolean;

external (cdecl) gst_pad_is_active(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_activate_pull(arg0:Pointer[GstPad], arg1:gboolean) : gboolean;

external (cdecl) gst_pad_activate_push(arg0:Pointer[GstPad], arg1:gboolean) : gboolean;

external (cdecl) gst_pad_set_blocked(arg0:Pointer[GstPad], arg1:gboolean) : gboolean;

external (cdecl) gst_pad_set_blocked_async(arg0:Pointer[GstPad], arg1:gboolean, arg2:GstPadBlockCallback, arg3:gpointer) : gboolean;

external (cdecl) gst_pad_set_blocked_async_full(arg0:Pointer[GstPad], arg1:gboolean, arg2:GstPadBlockCallback, arg3:gpointer, arg4:GDestroyNotify) : gboolean;

external (cdecl) gst_pad_is_blocked(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_is_blocking(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_set_element_private(arg0:Pointer[GstPad], arg1:gpointer) : ;

external (cdecl) gst_pad_get_element_private(arg0:Pointer[GstPad]) : gpointer;

external (cdecl) gst_pad_get_pad_template(arg0:Pointer[GstPad]) : Pointer[GstPadTemplate];

external (cdecl) gst_pad_set_bufferalloc_function(arg0:Pointer[GstPad], arg1:GstPadBufferAllocFunction) : ;

external (cdecl) gst_pad_alloc_buffer(arg0:Pointer[GstPad], arg1:guint64, arg2:gint, arg3:Pointer[GstCaps], arg4:Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external (cdecl) gst_pad_alloc_buffer_and_set_caps(arg0:Pointer[GstPad], arg1:guint64, arg2:gint, arg3:Pointer[GstCaps], arg4:Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external (cdecl) gst_pad_set_activate_function(arg0:Pointer[GstPad], arg1:GstPadActivateFunction) : ;

external (cdecl) gst_pad_set_activatepull_function(arg0:Pointer[GstPad], arg1:GstPadActivateModeFunction) : ;

external (cdecl) gst_pad_set_activatepush_function(arg0:Pointer[GstPad], arg1:GstPadActivateModeFunction) : ;

external (cdecl) gst_pad_set_chain_function(arg0:Pointer[GstPad], arg1:GstPadChainFunction) : ;

external (cdecl) gst_pad_set_chain_list_function(arg0:Pointer[GstPad], arg1:GstPadChainListFunction) : ;

external (cdecl) gst_pad_set_getrange_function(arg0:Pointer[GstPad], arg1:GstPadGetRangeFunction) : ;

external (cdecl) gst_pad_set_checkgetrange_function(arg0:Pointer[GstPad], arg1:GstPadCheckGetRangeFunction) : ;

external (cdecl) gst_pad_set_event_function(arg0:Pointer[GstPad], arg1:GstPadEventFunction) : ;

external (cdecl) gst_pad_set_link_function(arg0:Pointer[GstPad], arg1:GstPadLinkFunction) : ;

external (cdecl) gst_pad_set_unlink_function(arg0:Pointer[GstPad], arg1:GstPadUnlinkFunction) : ;

external (cdecl) gst_pad_can_link(arg0:Pointer[GstPad], arg1:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_link(arg0:Pointer[GstPad], arg1:Pointer[GstPad]) : GstPadLinkReturn;

external (cdecl) gst_pad_link_full(arg0:Pointer[GstPad], arg1:Pointer[GstPad], arg2:GstPadLinkCheck) : GstPadLinkReturn;

external (cdecl) gst_pad_unlink(arg0:Pointer[GstPad], arg1:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_is_linked(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_get_peer(arg0:Pointer[GstPad]) : Pointer[GstPad];

external (cdecl) gst_pad_set_getcaps_function(arg0:Pointer[GstPad], arg1:GstPadGetCapsFunction) : ;

external (cdecl) gst_pad_set_acceptcaps_function(arg0:Pointer[GstPad], arg1:GstPadAcceptCapsFunction) : ;

external (cdecl) gst_pad_set_fixatecaps_function(arg0:Pointer[GstPad], arg1:GstPadFixateCapsFunction) : ;

external (cdecl) gst_pad_set_setcaps_function(arg0:Pointer[GstPad], arg1:GstPadSetCapsFunction) : ;

external (cdecl) gst_pad_get_pad_template_caps(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_get_caps_reffed(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_get_caps(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_fixate_caps(arg0:Pointer[GstPad], arg1:Pointer[GstCaps]) : ;

external (cdecl) gst_pad_accept_caps(arg0:Pointer[GstPad], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_pad_set_caps(arg0:Pointer[GstPad], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_pad_peer_get_caps_reffed(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_peer_get_caps(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_peer_accept_caps(arg0:Pointer[GstPad], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_pad_get_allowed_caps(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_get_negotiated_caps(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_push(arg0:Pointer[GstPad], arg1:Pointer[GstBuffer]) : GstFlowReturn;

external (cdecl) gst_pad_push_list(arg0:Pointer[GstPad], arg1:Pointer[GstBufferList]) : GstFlowReturn;

external (cdecl) gst_pad_check_pull_range(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_pull_range(arg0:Pointer[GstPad], arg1:guint64, arg2:guint, arg3:Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external (cdecl) gst_pad_push_event(arg0:Pointer[GstPad], arg1:Pointer[GstEvent]) : gboolean;

external (cdecl) gst_pad_event_default(arg0:Pointer[GstPad], arg1:Pointer[GstEvent]) : gboolean;

external (cdecl) gst_pad_chain(arg0:Pointer[GstPad], arg1:Pointer[GstBuffer]) : GstFlowReturn;

external (cdecl) gst_pad_chain_list(arg0:Pointer[GstPad], arg1:Pointer[GstBufferList]) : GstFlowReturn;

external (cdecl) gst_pad_get_range(arg0:Pointer[GstPad], arg1:guint64, arg2:guint, arg3:Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external (cdecl) gst_pad_send_event(arg0:Pointer[GstPad], arg1:Pointer[GstEvent]) : gboolean;

external (cdecl) gst_pad_start_task(arg0:Pointer[GstPad], arg1:GstTaskFunction, arg2:gpointer) : gboolean;

external (cdecl) gst_pad_pause_task(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_stop_task(arg0:Pointer[GstPad]) : gboolean;

external (cdecl) gst_pad_set_internal_link_function(arg0:Pointer[GstPad], arg1:GstPadIntLinkFunction) : ;

external (cdecl) gst_pad_get_internal_links(arg0:Pointer[GstPad]) : Pointer[GList];

external (cdecl) gst_pad_get_internal_links_default(arg0:Pointer[GstPad]) : Pointer[GList];

external (cdecl) gst_pad_set_iterate_internal_links_function(arg0:Pointer[GstPad], arg1:GstPadIterIntLinkFunction) : ;

external (cdecl) gst_pad_iterate_internal_links(arg0:Pointer[GstPad]) : Pointer[GstIterator];

external (cdecl) gst_pad_iterate_internal_links_default(arg0:Pointer[GstPad]) : Pointer[GstIterator];

external (cdecl) gst_pad_set_query_type_function(arg0:Pointer[GstPad], arg1:GstPadQueryTypeFunction) : ;

external (cdecl) gst_pad_get_query_types(arg0:Pointer[GstPad]) : Pointer[GstQueryType];

external (cdecl) gst_pad_get_query_types_default(arg0:Pointer[GstPad]) : Pointer[GstQueryType];

external (cdecl) gst_pad_query(arg0:Pointer[GstPad], arg1:Pointer[GstQuery]) : gboolean;

external (cdecl) gst_pad_peer_query(arg0:Pointer[GstPad], arg1:Pointer[GstQuery]) : gboolean;

external (cdecl) gst_pad_set_query_function(arg0:Pointer[GstPad], arg1:GstPadQueryFunction) : ;

external (cdecl) gst_pad_query_default(arg0:Pointer[GstPad], arg1:Pointer[GstQuery]) : gboolean;

external (cdecl) gst_pad_dispatcher(arg0:Pointer[GstPad], arg1:GstPadDispatcherFunction, arg2:gpointer) : gboolean;

external (cdecl) gst_pad_load_and_link(arg0:xmlNodePtr, arg1:Pointer[GstObject]) : ;

alias GstBus = Struct__GstBus;

alias Struct__GstBusPrivate = Opaque;

alias GstBusPrivate = Struct__GstBusPrivate;

alias GstBusClass = Struct__GstBusClass;

alias GstMessage = Struct__GstMessage;

alias GstMessageClass = Struct__GstMessageClass;

alias Enum_Unnamed42 = Int;
alias GST_MESSAGE_UNKNOWN = Int(0);
alias GST_MESSAGE_EOS = Int(1);
alias GST_MESSAGE_ERROR = Int(2);
alias GST_MESSAGE_WARNING = Int(4);
alias GST_MESSAGE_INFO = Int(8);
alias GST_MESSAGE_TAG = Int(16);
alias GST_MESSAGE_BUFFERING = Int(32);
alias GST_MESSAGE_STATE_CHANGED = Int(64);
alias GST_MESSAGE_STATE_DIRTY = Int(128);
alias GST_MESSAGE_STEP_DONE = Int(256);
alias GST_MESSAGE_CLOCK_PROVIDE = Int(512);
alias GST_MESSAGE_CLOCK_LOST = Int(1024);
alias GST_MESSAGE_NEW_CLOCK = Int(2048);
alias GST_MESSAGE_STRUCTURE_CHANGE = Int(4096);
alias GST_MESSAGE_STREAM_STATUS = Int(8192);
alias GST_MESSAGE_APPLICATION = Int(16384);
alias GST_MESSAGE_ELEMENT = Int(32768);
alias GST_MESSAGE_SEGMENT_START = Int(65536);
alias GST_MESSAGE_SEGMENT_DONE = Int(131072);
alias GST_MESSAGE_DURATION = Int(262144);
alias GST_MESSAGE_LATENCY = Int(524288);
alias GST_MESSAGE_ASYNC_START = Int(1048576);
alias GST_MESSAGE_ASYNC_DONE = Int(2097152);
alias GST_MESSAGE_REQUEST_STATE = Int(4194304);
alias GST_MESSAGE_STEP_START = Int(8388608);
alias GST_MESSAGE_QOS = Int(16777216);
alias GST_MESSAGE_PROGRESS = Int(33554432);
alias GST_MESSAGE_ANY = Int(-1);

alias GstMessageType = Int;

alias Enum_Unnamed43 = UInt;
alias GST_STRUCTURE_CHANGE_TYPE_PAD_LINK = UInt(0);
alias GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK = UInt(1);

alias GstStructureChangeType = UInt;

alias Enum_Unnamed44 = UInt;
alias GST_STREAM_STATUS_TYPE_CREATE = UInt(0);
alias GST_STREAM_STATUS_TYPE_ENTER = UInt(1);
alias GST_STREAM_STATUS_TYPE_LEAVE = UInt(2);
alias GST_STREAM_STATUS_TYPE_DESTROY = UInt(3);
alias GST_STREAM_STATUS_TYPE_START = UInt(8);
alias GST_STREAM_STATUS_TYPE_PAUSE = UInt(9);
alias GST_STREAM_STATUS_TYPE_STOP = UInt(10);

alias GstStreamStatusType = UInt;

alias Enum_Unnamed45 = UInt;
alias GST_PROGRESS_TYPE_START = UInt(0);
alias GST_PROGRESS_TYPE_CONTINUE = UInt(1);
alias GST_PROGRESS_TYPE_COMPLETE = UInt(2);
alias GST_PROGRESS_TYPE_CANCELED = UInt(3);
alias GST_PROGRESS_TYPE_ERROR = UInt(4);

alias GstProgressType = UInt;

record Struct__GstMessage (
    mini_object : GstMiniObject,
    lock : Pointer[GMutex],
    cond : Pointer[GCond],
    type : GstMessageType,
    timestamp : guint64,
    src : Pointer[GstObject],
    structure : Pointer[GstStructure],
    abidata : Union_Unnamed46,
);

alias Union_Unnamed46 = Union[
    /* ABI */ Struct_Unnamed47,
    /* _gst_reserved */ Array[gpointer, 4],
];

record Struct_Unnamed47 (
    seqnum : guint32,
);

record Struct__GstMessageClass (
    mini_object_class : GstMiniObjectClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_message_get_type() : GType;

external (cdecl) gst_message_type_get_name(arg0:GstMessageType) : Pointer[gchar];

external (cdecl) gst_message_type_to_quark(arg0:GstMessageType) : GQuark;

external (cdecl) gst_message_ref(arg0:Pointer[GstMessage]) : Pointer[GstMessage];

external (cdecl) gst_message_unref(arg0:Pointer[GstMessage]) : ;

external (cdecl) gst_message_copy(arg0:Pointer[GstMessage]) : Pointer[GstMessage];

external (cdecl) gst_message_get_seqnum(arg0:Pointer[GstMessage]) : guint32;

external (cdecl) gst_message_set_seqnum(arg0:Pointer[GstMessage], arg1:guint32) : ;

external (cdecl) gst_message_new_eos(arg0:Pointer[GstObject]) : Pointer[GstMessage];

external (cdecl) gst_message_new_error(arg0:Pointer[GstObject], arg1:Pointer[GError], arg2:Pointer[gchar]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_error(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GError]], arg2:Pointer[Pointer[gchar]]) : ;

external (cdecl) gst_message_new_warning(arg0:Pointer[GstObject], arg1:Pointer[GError], arg2:Pointer[gchar]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_warning(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GError]], arg2:Pointer[Pointer[gchar]]) : ;

external (cdecl) gst_message_new_info(arg0:Pointer[GstObject], arg1:Pointer[GError], arg2:Pointer[gchar]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_info(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GError]], arg2:Pointer[Pointer[gchar]]) : ;

external (cdecl) gst_message_new_tag(arg0:Pointer[GstObject], arg1:Pointer[GstTagList]) : Pointer[GstMessage];

external (cdecl) gst_message_new_tag_full(arg0:Pointer[GstObject], arg1:Pointer[GstPad], arg2:Pointer[GstTagList]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_tag(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GstTagList]]) : ;

external (cdecl) gst_message_parse_tag_full(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GstPad]], arg2:Pointer[Pointer[GstTagList]]) : ;

external (cdecl) gst_message_new_buffering(arg0:Pointer[GstObject], arg1:gint) : Pointer[GstMessage];

external (cdecl) gst_message_parse_buffering(arg0:Pointer[GstMessage], arg1:Pointer[gint]) : ;

external (cdecl) gst_message_set_buffering_stats(arg0:Pointer[GstMessage], arg1:GstBufferingMode, arg2:gint, arg3:gint, arg4:gint64) : ;

external (cdecl) gst_message_parse_buffering_stats(arg0:Pointer[GstMessage], arg1:Pointer[GstBufferingMode], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[gint64]) : ;

external (cdecl) gst_message_new_state_changed(arg0:Pointer[GstObject], arg1:GstState, arg2:GstState, arg3:GstState) : Pointer[GstMessage];

external (cdecl) gst_message_parse_state_changed(arg0:Pointer[GstMessage], arg1:Pointer[GstState], arg2:Pointer[GstState], arg3:Pointer[GstState]) : ;

external (cdecl) gst_message_new_state_dirty(arg0:Pointer[GstObject]) : Pointer[GstMessage];

external (cdecl) gst_message_new_step_done(arg0:Pointer[GstObject], arg1:GstFormat, arg2:guint64, arg3:gdouble, arg4:gboolean, arg5:gboolean, arg6:guint64, arg7:gboolean) : Pointer[GstMessage];

external (cdecl) gst_message_parse_step_done(arg0:Pointer[GstMessage], arg1:Pointer[GstFormat], arg2:Pointer[guint64], arg3:Pointer[gdouble], arg4:Pointer[gboolean], arg5:Pointer[gboolean], arg6:Pointer[guint64], arg7:Pointer[gboolean]) : ;

external (cdecl) gst_message_new_clock_provide(arg0:Pointer[GstObject], arg1:Pointer[GstClock], arg2:gboolean) : Pointer[GstMessage];

external (cdecl) gst_message_parse_clock_provide(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GstClock]], arg2:Pointer[gboolean]) : ;

external (cdecl) gst_message_new_clock_lost(arg0:Pointer[GstObject], arg1:Pointer[GstClock]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_clock_lost(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GstClock]]) : ;

external (cdecl) gst_message_new_new_clock(arg0:Pointer[GstObject], arg1:Pointer[GstClock]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_new_clock(arg0:Pointer[GstMessage], arg1:Pointer[Pointer[GstClock]]) : ;

external (cdecl) gst_message_new_application(arg0:Pointer[GstObject], arg1:Pointer[GstStructure]) : Pointer[GstMessage];

external (cdecl) gst_message_new_element(arg0:Pointer[GstObject], arg1:Pointer[GstStructure]) : Pointer[GstMessage];

external (cdecl) gst_message_new_segment_start(arg0:Pointer[GstObject], arg1:GstFormat, arg2:gint64) : Pointer[GstMessage];

external (cdecl) gst_message_parse_segment_start(arg0:Pointer[GstMessage], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : ;

external (cdecl) gst_message_new_segment_done(arg0:Pointer[GstObject], arg1:GstFormat, arg2:gint64) : Pointer[GstMessage];

external (cdecl) gst_message_parse_segment_done(arg0:Pointer[GstMessage], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : ;

external (cdecl) gst_message_new_duration(arg0:Pointer[GstObject], arg1:GstFormat, arg2:gint64) : Pointer[GstMessage];

external (cdecl) gst_message_parse_duration(arg0:Pointer[GstMessage], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : ;

external (cdecl) gst_message_new_latency(arg0:Pointer[GstObject]) : Pointer[GstMessage];

external (cdecl) gst_message_new_async_start(arg0:Pointer[GstObject], arg1:gboolean) : Pointer[GstMessage];

external (cdecl) gst_message_parse_async_start(arg0:Pointer[GstMessage], arg1:Pointer[gboolean]) : ;

external (cdecl) gst_message_new_async_done(arg0:Pointer[GstObject]) : Pointer[GstMessage];

external (cdecl) gst_message_new_structure_change(arg0:Pointer[GstObject], arg1:GstStructureChangeType, arg2:Pointer[GstElement], arg3:gboolean) : Pointer[GstMessage];

external (cdecl) gst_message_parse_structure_change(arg0:Pointer[GstMessage], arg1:Pointer[GstStructureChangeType], arg2:Pointer[Pointer[GstElement]], arg3:Pointer[gboolean]) : ;

external (cdecl) gst_message_new_stream_status(arg0:Pointer[GstObject], arg1:GstStreamStatusType, arg2:Pointer[GstElement]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_stream_status(arg0:Pointer[GstMessage], arg1:Pointer[GstStreamStatusType], arg2:Pointer[Pointer[GstElement]]) : ;

external (cdecl) gst_message_set_stream_status_object(arg0:Pointer[GstMessage], arg1:Pointer[GValue]) : ;

external (cdecl) gst_message_get_stream_status_object(arg0:Pointer[GstMessage]) : Pointer[GValue];

external (cdecl) gst_message_new_request_state(arg0:Pointer[GstObject], arg1:GstState) : Pointer[GstMessage];

external (cdecl) gst_message_parse_request_state(arg0:Pointer[GstMessage], arg1:Pointer[GstState]) : ;

external (cdecl) gst_message_new_step_start(arg0:Pointer[GstObject], arg1:gboolean, arg2:GstFormat, arg3:guint64, arg4:gdouble, arg5:gboolean, arg6:gboolean) : Pointer[GstMessage];

external (cdecl) gst_message_parse_step_start(arg0:Pointer[GstMessage], arg1:Pointer[gboolean], arg2:Pointer[GstFormat], arg3:Pointer[guint64], arg4:Pointer[gdouble], arg5:Pointer[gboolean], arg6:Pointer[gboolean]) : ;

external (cdecl) gst_message_new_qos(arg0:Pointer[GstObject], arg1:gboolean, arg2:guint64, arg3:guint64, arg4:guint64, arg5:guint64) : Pointer[GstMessage];

external (cdecl) gst_message_set_qos_values(arg0:Pointer[GstMessage], arg1:gint64, arg2:gdouble, arg3:gint) : ;

external (cdecl) gst_message_set_qos_stats(arg0:Pointer[GstMessage], arg1:GstFormat, arg2:guint64, arg3:guint64) : ;

external (cdecl) gst_message_parse_qos(arg0:Pointer[GstMessage], arg1:Pointer[gboolean], arg2:Pointer[guint64], arg3:Pointer[guint64], arg4:Pointer[guint64], arg5:Pointer[guint64]) : ;

external (cdecl) gst_message_parse_qos_values(arg0:Pointer[GstMessage], arg1:Pointer[gint64], arg2:Pointer[gdouble], arg3:Pointer[gint]) : ;

external (cdecl) gst_message_parse_qos_stats(arg0:Pointer[GstMessage], arg1:Pointer[GstFormat], arg2:Pointer[guint64], arg3:Pointer[guint64]) : ;

external (cdecl) gst_message_new_progress(arg0:Pointer[GstObject], arg1:GstProgressType, arg2:Pointer[gchar], arg3:Pointer[gchar]) : Pointer[GstMessage];

external (cdecl) gst_message_parse_progress(arg0:Pointer[GstMessage], arg1:Pointer[GstProgressType], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]]) : ;

external (cdecl) gst_message_new_custom(arg0:GstMessageType, arg1:Pointer[GstObject], arg2:Pointer[GstStructure]) : Pointer[GstMessage];

external (cdecl) gst_message_get_structure(arg0:Pointer[GstMessage]) : Pointer[GstStructure];

alias Enum_Unnamed48 = UInt;
alias GST_BUS_FLUSHING = UInt(16);
alias GST_BUS_FLAG_LAST = UInt(32);

alias GstBusFlags = UInt;

alias Enum_Unnamed49 = UInt;
alias GST_BUS_DROP = UInt(0);
alias GST_BUS_PASS = UInt(1);
alias GST_BUS_ASYNC = UInt(2);

alias GstBusSyncReply = UInt;

alias GstBusSyncHandler = CCodePointer[[Pointer[GstBus], Pointer[GstMessage], gpointer],[GstBusSyncReply]];

alias GstBusFunc = CCodePointer[[Pointer[GstBus], Pointer[GstMessage], gpointer],[gboolean]];

record Struct__GstBus (
    object : GstObject,
    queue : Pointer[GQueue],
    queue_lock : Pointer[GMutex],
    sync_handler : GstBusSyncHandler,
    sync_handler_data : gpointer,
    signal_watch_id : guint,
    num_signal_watchers : guint,
    priv : Pointer[GstBusPrivate],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstBusClass (
    parent_class : GstObjectClass,
    message : CCodePointer[[Pointer[GstBus], Pointer[GstMessage]],[]],
    sync_message : CCodePointer[[Pointer[GstBus], Pointer[GstMessage]],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_bus_get_type() : GType;

external (cdecl) gst_bus_new() : Pointer[GstBus];

external (cdecl) gst_bus_post(arg0:Pointer[GstBus], arg1:Pointer[GstMessage]) : gboolean;

external (cdecl) gst_bus_have_pending(arg0:Pointer[GstBus]) : gboolean;

external (cdecl) gst_bus_peek(arg0:Pointer[GstBus]) : Pointer[GstMessage];

external (cdecl) gst_bus_pop(arg0:Pointer[GstBus]) : Pointer[GstMessage];

external (cdecl) gst_bus_pop_filtered(arg0:Pointer[GstBus], arg1:GstMessageType) : Pointer[GstMessage];

external (cdecl) gst_bus_timed_pop(arg0:Pointer[GstBus], arg1:GstClockTime) : Pointer[GstMessage];

external (cdecl) gst_bus_timed_pop_filtered(arg0:Pointer[GstBus], arg1:GstClockTime, arg2:GstMessageType) : Pointer[GstMessage];

external (cdecl) gst_bus_set_flushing(arg0:Pointer[GstBus], arg1:gboolean) : ;

external (cdecl) gst_bus_set_sync_handler(arg0:Pointer[GstBus], arg1:GstBusSyncHandler, arg2:gpointer) : ;

external (cdecl) gst_bus_create_watch(arg0:Pointer[GstBus]) : Pointer[GSource];

external (cdecl) gst_bus_add_watch_full(arg0:Pointer[GstBus], arg1:gint, arg2:GstBusFunc, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) gst_bus_add_watch(arg0:Pointer[GstBus], arg1:GstBusFunc, arg2:gpointer) : guint;

external (cdecl) gst_bus_poll(arg0:Pointer[GstBus], arg1:GstMessageType, arg2:GstClockTimeDiff) : Pointer[GstMessage];

external (cdecl) gst_bus_async_signal_func(arg0:Pointer[GstBus], arg1:Pointer[GstMessage], arg2:gpointer) : gboolean;

external (cdecl) gst_bus_sync_signal_handler(arg0:Pointer[GstBus], arg1:Pointer[GstMessage], arg2:gpointer) : GstBusSyncReply;

external (cdecl) gst_bus_add_signal_watch(arg0:Pointer[GstBus]) : ;

external (cdecl) gst_bus_add_signal_watch_full(arg0:Pointer[GstBus], arg1:gint) : ;

external (cdecl) gst_bus_remove_signal_watch(arg0:Pointer[GstBus]) : ;

external (cdecl) gst_bus_enable_sync_message_emission(arg0:Pointer[GstBus]) : ;

external (cdecl) gst_bus_disable_sync_message_emission(arg0:Pointer[GstBus]) : ;

alias GstElementFactory = Struct__GstElementFactory;

alias GstElementFactoryClass = Struct__GstElementFactoryClass;

alias GstPlugin = Struct__GstPlugin;

alias GstPluginClass = Struct__GstPluginClass;

alias Struct__GstPluginPrivate = Opaque;

alias GstPluginPrivate = Struct__GstPluginPrivate;

alias GstPluginDesc = Struct__GstPluginDesc;

external (cdecl) gst_plugin_error_quark() : GQuark;

alias Enum_Unnamed50 = UInt;
alias GST_PLUGIN_ERROR_MODULE = UInt(0);
alias GST_PLUGIN_ERROR_DEPENDENCIES = UInt(1);
alias GST_PLUGIN_ERROR_NAME_MISMATCH = UInt(2);

alias GstPluginError = UInt;

alias Enum_Unnamed51 = UInt;
alias GST_PLUGIN_FLAG_CACHED = UInt(1);
alias GST_PLUGIN_FLAG_BLACKLISTED = UInt(2);

alias GstPluginFlags = UInt;

alias Enum_Unnamed52 = UInt;
alias GST_PLUGIN_DEPENDENCY_FLAG_NONE = UInt(0);
alias GST_PLUGIN_DEPENDENCY_FLAG_RECURSE = UInt(1);
alias GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY = UInt(2);
alias GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX = UInt(4);

alias GstPluginDependencyFlags = UInt;

alias GstPluginInitFunc = CCodePointer[[Pointer[GstPlugin]],[gboolean]];

alias GstPluginInitFullFunc = CCodePointer[[Pointer[GstPlugin], gpointer],[gboolean]];

record Struct__GstPluginDesc (
    major_version : gint,
    minor_version : gint,
    name : Pointer[gchar],
    description : Pointer[gchar],
    plugin_init : GstPluginInitFunc,
    version : Pointer[gchar],
    license : Pointer[gchar],
    source : Pointer[gchar],
    package : Pointer[gchar],
    origin : Pointer[gchar],
    release_datetime : Pointer[gchar],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstPlugin (
    object : GstObject,
    desc : GstPluginDesc,
    orig_desc : Pointer[GstPluginDesc],
    flags : UInt,
    filename : Pointer[gchar],
    basename : Pointer[gchar],
    module : Pointer[GModule],
    file_size : off_t,
    file_mtime : time_t,
    registered : gboolean,
    priv : Pointer[GstPluginPrivate],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstPluginClass (
    object_class : GstObjectClass,
    _gst_reserved : Array[gpointer, 4],
);

alias GstPluginFilter = CCodePointer[[Pointer[GstPlugin], gpointer],[gboolean]];

external (cdecl) gst_plugin_get_type() : GType;

external (cdecl) _gst_plugin_register_static(arg0:Pointer[GstPluginDesc]) : ;

external (cdecl) gst_plugin_register_static(arg0:gint, arg1:gint, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GstPluginInitFunc, arg5:Pointer[gchar], arg6:Pointer[gchar], arg7:Pointer[gchar], arg8:Pointer[gchar], arg9:Pointer[gchar]) : gboolean;

external (cdecl) gst_plugin_register_static_full(arg0:gint, arg1:gint, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GstPluginInitFullFunc, arg5:Pointer[gchar], arg6:Pointer[gchar], arg7:Pointer[gchar], arg8:Pointer[gchar], arg9:Pointer[gchar], arg10:gpointer) : gboolean;

external (cdecl) gst_plugin_get_name(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_description(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_filename(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_version(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_license(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_source(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_package(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_origin(arg0:Pointer[GstPlugin]) : Pointer[gchar];

external (cdecl) gst_plugin_get_cache_data(arg0:Pointer[GstPlugin]) : Pointer[GstStructure];

external (cdecl) gst_plugin_set_cache_data(arg0:Pointer[GstPlugin], arg1:Pointer[GstStructure]) : ;

external (cdecl) gst_plugin_get_module(arg0:Pointer[GstPlugin]) : Pointer[GModule];

external (cdecl) gst_plugin_is_loaded(arg0:Pointer[GstPlugin]) : gboolean;

external (cdecl) gst_plugin_name_filter(arg0:Pointer[GstPlugin], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_plugin_load_file(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GstPlugin];

external (cdecl) gst_plugin_load(arg0:Pointer[GstPlugin]) : Pointer[GstPlugin];

external (cdecl) gst_plugin_load_by_name(arg0:Pointer[gchar]) : Pointer[GstPlugin];

external (cdecl) gst_plugin_add_dependency(arg0:Pointer[GstPlugin], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]], arg4:GstPluginDependencyFlags) : ;

external (cdecl) gst_plugin_add_dependency_simple(arg0:Pointer[GstPlugin], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GstPluginDependencyFlags) : ;

external (cdecl) gst_plugin_list_free(arg0:Pointer[GList]) : ;

alias GstPluginFeature = Struct__GstPluginFeature;

alias GstPluginFeatureClass = Struct__GstPluginFeatureClass;

alias Enum_Unnamed53 = UInt;
alias GST_RANK_NONE = UInt(0);
alias GST_RANK_MARGINAL = UInt(64);
alias GST_RANK_SECONDARY = UInt(128);
alias GST_RANK_PRIMARY = UInt(256);

alias GstRank = UInt;

record Struct__GstPluginFeature (
    object : GstObject,
    loaded : gboolean,
    name : Pointer[gchar],
    rank : guint,
    plugin_name : Pointer[gchar],
    plugin : Pointer[GstPlugin],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstPluginFeatureClass (
    parent_class : GstObjectClass,
    _gst_reserved : Array[gpointer, 4],
);

record Struct_Unnamed54 (
    name : Pointer[gchar],
    type : GType,
);

alias GstTypeNameData = Struct_Unnamed54;

alias GstPluginFeatureFilter = CCodePointer[[Pointer[GstPluginFeature], gpointer],[gboolean]];

external (cdecl) gst_plugin_feature_get_type() : GType;

external (cdecl) gst_plugin_feature_load(arg0:Pointer[GstPluginFeature]) : Pointer[GstPluginFeature];

external (cdecl) gst_plugin_feature_type_name_filter(arg0:Pointer[GstPluginFeature], arg1:Pointer[GstTypeNameData]) : gboolean;

external (cdecl) gst_plugin_feature_set_rank(arg0:Pointer[GstPluginFeature], arg1:guint) : ;

external (cdecl) gst_plugin_feature_set_name(arg0:Pointer[GstPluginFeature], arg1:Pointer[gchar]) : ;

external (cdecl) gst_plugin_feature_get_rank(arg0:Pointer[GstPluginFeature]) : guint;

external (cdecl) gst_plugin_feature_get_name(arg0:Pointer[GstPluginFeature]) : Pointer[gchar];

external (cdecl) gst_plugin_feature_list_free(arg0:Pointer[GList]) : ;

external (cdecl) gst_plugin_feature_list_copy(arg0:Pointer[GList]) : Pointer[GList];

external (cdecl) gst_plugin_feature_list_debug(arg0:Pointer[GList]) : ;

external (cdecl) gst_plugin_feature_check_version(arg0:Pointer[GstPluginFeature], arg1:guint, arg2:guint, arg3:guint) : gboolean;

external (cdecl) gst_plugin_feature_rank_compare_func(arg0:gconstpointer, arg1:gconstpointer) : gint;

alias GstElementDetails = Struct__GstElementDetails;

record Struct__GstElementDetails (
    longname : Pointer[gchar],
    klass : Pointer[gchar],
    description : Pointer[gchar],
    author : Pointer[gchar],
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstElementFactory (
    parent : GstPluginFeature,
    type : GType,
    details : GstElementDetails,
    staticpadtemplates : Pointer[GList],
    numpadtemplates : guint,
    uri_type : guint,
    uri_protocols : Pointer[Pointer[gchar]],
    interfaces : Pointer[GList],
    meta_data : gpointer,
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstElementFactoryClass (
    parent_class : GstPluginFeatureClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_element_factory_get_type() : GType;

external (cdecl) gst_element_factory_find(arg0:Pointer[gchar]) : Pointer[GstElementFactory];

external (cdecl) gst_element_factory_get_element_type(arg0:Pointer[GstElementFactory]) : GType;

external (cdecl) gst_element_factory_get_longname(arg0:Pointer[GstElementFactory]) : Pointer[gchar];

external (cdecl) gst_element_factory_get_klass(arg0:Pointer[GstElementFactory]) : Pointer[gchar];

external (cdecl) gst_element_factory_get_description(arg0:Pointer[GstElementFactory]) : Pointer[gchar];

external (cdecl) gst_element_factory_get_author(arg0:Pointer[GstElementFactory]) : Pointer[gchar];

external (cdecl) gst_element_factory_get_documentation_uri(arg0:Pointer[GstElementFactory]) : Pointer[gchar];

external (cdecl) gst_element_factory_get_icon_name(arg0:Pointer[GstElementFactory]) : Pointer[gchar];

external (cdecl) gst_element_factory_get_num_pad_templates(arg0:Pointer[GstElementFactory]) : guint;

external (cdecl) gst_element_factory_get_static_pad_templates(arg0:Pointer[GstElementFactory]) : Pointer[GList];

external (cdecl) gst_element_factory_get_uri_type(arg0:Pointer[GstElementFactory]) : gint;

external (cdecl) gst_element_factory_get_uri_protocols(arg0:Pointer[GstElementFactory]) : Pointer[Pointer[gchar]];

external (cdecl) gst_element_factory_has_interface(arg0:Pointer[GstElementFactory], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_element_factory_create(arg0:Pointer[GstElementFactory], arg1:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) gst_element_factory_make(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) __gst_element_factory_add_static_pad_template(arg0:Pointer[GstElementFactory], arg1:Pointer[GstStaticPadTemplate]) : ;

external (cdecl) __gst_element_factory_add_interface(arg0:Pointer[GstElementFactory], arg1:Pointer[gchar]) : ;

external (cdecl) gst_element_register(arg0:Pointer[GstPlugin], arg1:Pointer[gchar], arg2:guint, arg3:GType) : gboolean;

alias GstElementFactoryListType = guint64;

external (cdecl) gst_element_factory_list_is_type(arg0:Pointer[GstElementFactory], arg1:GstElementFactoryListType) : gboolean;

external (cdecl) gst_element_factory_list_get_elements(arg0:GstElementFactoryListType, arg1:GstRank) : Pointer[GList];

external (cdecl) gst_element_factory_list_filter(arg0:Pointer[GList], arg1:Pointer[GstCaps], arg2:GstPadDirection, arg3:gboolean) : Pointer[GList];

alias GstIndexEntry = Struct__GstIndexEntry;

alias GstIndexGroup = Struct__GstIndexGroup;

alias GstIndex = Struct__GstIndex;

alias GstIndexClass = Struct__GstIndexClass;

alias Enum_Unnamed55 = UInt;
alias GST_INDEX_UNKNOWN = UInt(0);
alias GST_INDEX_CERTAIN = UInt(1);
alias GST_INDEX_FUZZY = UInt(2);

alias GstIndexCertainty = UInt;

alias Enum_Unnamed56 = UInt;
alias GST_INDEX_ENTRY_ID = UInt(0);
alias GST_INDEX_ENTRY_ASSOCIATION = UInt(1);
alias GST_INDEX_ENTRY_OBJECT = UInt(2);
alias GST_INDEX_ENTRY_FORMAT = UInt(3);

alias GstIndexEntryType = UInt;

alias Enum_Unnamed57 = UInt;
alias GST_INDEX_LOOKUP_EXACT = UInt(0);
alias GST_INDEX_LOOKUP_BEFORE = UInt(1);
alias GST_INDEX_LOOKUP_AFTER = UInt(2);

alias GstIndexLookupMethod = UInt;

alias GstIndexAssociation = Struct__GstIndexAssociation;

record Struct__GstIndexAssociation (
    format : GstFormat,
    value : gint64,
);

alias Enum_Unnamed58 = UInt;
alias GST_ASSOCIATION_FLAG_NONE = UInt(0);
alias GST_ASSOCIATION_FLAG_KEY_UNIT = UInt(1);
alias GST_ASSOCIATION_FLAG_DELTA_UNIT = UInt(2);
alias GST_ASSOCIATION_FLAG_LAST = UInt(256);

alias GstAssocFlags = UInt;

record Struct__GstIndexEntry (
    type : GstIndexEntryType,
    id : gint,
    data : Union_Unnamed59,
);

alias Union_Unnamed59 = Union[
    /* id */ Struct_Unnamed60,
    /* assoc */ Struct_Unnamed61,
    /* object */ Struct_Unnamed62,
    /* format */ Struct_Unnamed63,
];

record Struct_Unnamed60 (
    description : Pointer[gchar],
);

record Struct_Unnamed61 (
    nassocs : gint,
    assocs : Pointer[GstIndexAssociation],
    flags : GstAssocFlags,
);

record Struct_Unnamed62 (
    key : Pointer[gchar],
    type : GType,
    object : gpointer,
);

record Struct_Unnamed63 (
    format : GstFormat,
    key : Pointer[gchar],
);

record Struct__GstIndexGroup (
    groupnum : gint,
    entries : Pointer[GList],
    certainty : GstIndexCertainty,
    peergroup : gint,
);

alias GstIndexFilter = CCodePointer[[Pointer[GstIndex], Pointer[GstIndexEntry], gpointer],[gboolean]];

alias Enum_Unnamed64 = UInt;
alias GST_INDEX_RESOLVER_CUSTOM = UInt(0);
alias GST_INDEX_RESOLVER_GTYPE = UInt(1);
alias GST_INDEX_RESOLVER_PATH = UInt(2);

alias GstIndexResolverMethod = UInt;

alias GstIndexResolver = CCodePointer[[Pointer[GstIndex], Pointer[GstObject], Pointer[Pointer[gchar]], gpointer],[gboolean]];

alias Enum_Unnamed65 = UInt;
alias GST_INDEX_WRITABLE = UInt(16);
alias GST_INDEX_READABLE = UInt(32);
alias GST_INDEX_FLAG_LAST = UInt(4096);

alias GstIndexFlags = UInt;

record Struct__GstIndex (
    object : GstObject,
    groups : Pointer[GList],
    curgroup : Pointer[GstIndexGroup],
    maxgroup : gint,
    method : GstIndexResolverMethod,
    resolver : GstIndexResolver,
    resolver_user_data : gpointer,
    filter : GstIndexFilter,
    filter_user_data : gpointer,
    filter_user_data_destroy : GDestroyNotify,
    writers : Pointer[GHashTable],
    last_id : gint,
    resolver_user_data_destroy : GDestroyNotify,
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstIndexClass (
    parent_class : GstObjectClass,
    get_writer_id : CCodePointer[[Pointer[GstIndex], Pointer[gint], Pointer[gchar]],[gboolean]],
    commit : CCodePointer[[Pointer[GstIndex], gint],[]],
    add_entry : CCodePointer[[Pointer[GstIndex], Pointer[GstIndexEntry]],[]],
    get_assoc_entry : CCodePointer[[Pointer[GstIndex], gint, GstIndexLookupMethod, GstAssocFlags, GstFormat, gint64, GCompareDataFunc, gpointer],[Pointer[GstIndexEntry]]],
    entry_added : CCodePointer[[Pointer[GstIndex], Pointer[GstIndexEntry]],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_index_get_type() : GType;

external (cdecl) gst_index_new() : Pointer[GstIndex];

external (cdecl) gst_index_commit(arg0:Pointer[GstIndex], arg1:gint) : ;

external (cdecl) gst_index_get_group(arg0:Pointer[GstIndex]) : gint;

external (cdecl) gst_index_new_group(arg0:Pointer[GstIndex]) : gint;

external (cdecl) gst_index_set_group(arg0:Pointer[GstIndex], arg1:gint) : gboolean;

external (cdecl) gst_index_set_certainty(arg0:Pointer[GstIndex], arg1:GstIndexCertainty) : ;

external (cdecl) gst_index_get_certainty(arg0:Pointer[GstIndex]) : GstIndexCertainty;

external (cdecl) gst_index_set_filter(arg0:Pointer[GstIndex], arg1:GstIndexFilter, arg2:gpointer) : ;

external (cdecl) gst_index_set_filter_full(arg0:Pointer[GstIndex], arg1:GstIndexFilter, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gst_index_set_resolver(arg0:Pointer[GstIndex], arg1:GstIndexResolver, arg2:gpointer) : ;

external (cdecl) gst_index_set_resolver_full(arg0:Pointer[GstIndex], arg1:GstIndexResolver, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gst_index_get_writer_id(arg0:Pointer[GstIndex], arg1:Pointer[GstObject], arg2:Pointer[gint]) : gboolean;

external (cdecl) gst_index_add_format(arg0:Pointer[GstIndex], arg1:gint, arg2:GstFormat) : Pointer[GstIndexEntry];

external (cdecl) gst_index_add_associationv(arg0:Pointer[GstIndex], arg1:gint, arg2:GstAssocFlags, arg3:gint, arg4:Pointer[GstIndexAssociation]) : Pointer[GstIndexEntry];

external (cdecl) gst_index_add_association(arg0:Pointer[GstIndex], arg1:gint, arg2:GstAssocFlags, arg3:GstFormat, arg4:gint64, ..) : Pointer[GstIndexEntry];

external (cdecl) gst_index_add_object(arg0:Pointer[GstIndex], arg1:gint, arg2:Pointer[gchar], arg3:GType, arg4:gpointer) : Pointer[GstIndexEntry];

external (cdecl) gst_index_add_id(arg0:Pointer[GstIndex], arg1:gint, arg2:Pointer[gchar]) : Pointer[GstIndexEntry];

external (cdecl) gst_index_get_assoc_entry(arg0:Pointer[GstIndex], arg1:gint, arg2:GstIndexLookupMethod, arg3:GstAssocFlags, arg4:GstFormat, arg5:gint64) : Pointer[GstIndexEntry];

external (cdecl) gst_index_get_assoc_entry_full(arg0:Pointer[GstIndex], arg1:gint, arg2:GstIndexLookupMethod, arg3:GstAssocFlags, arg4:GstFormat, arg5:gint64, arg6:GCompareDataFunc, arg7:gpointer) : Pointer[GstIndexEntry];

external (cdecl) gst_index_entry_get_type() : GType;

external (cdecl) gst_index_entry_copy(arg0:Pointer[GstIndexEntry]) : Pointer[GstIndexEntry];

external (cdecl) gst_index_entry_free(arg0:Pointer[GstIndexEntry]) : ;

external (cdecl) gst_index_entry_assoc_map(arg0:Pointer[GstIndexEntry], arg1:GstFormat, arg2:Pointer[gint64]) : gboolean;

alias GstIndexFactory = Struct__GstIndexFactory;

alias GstIndexFactoryClass = Struct__GstIndexFactoryClass;

record Struct__GstIndexFactory (
    feature : GstPluginFeature,
    longdesc : Pointer[gchar],
    type : GType,
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstIndexFactoryClass (
    parent : GstPluginFeatureClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_index_factory_get_type() : GType;

external (cdecl) gst_index_factory_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:GType) : Pointer[GstIndexFactory];

external (cdecl) gst_index_factory_destroy(arg0:Pointer[GstIndexFactory]) : ;

external (cdecl) gst_index_factory_find(arg0:Pointer[gchar]) : Pointer[GstIndexFactory];

external (cdecl) gst_index_factory_create(arg0:Pointer[GstIndexFactory]) : Pointer[GstIndex];

external (cdecl) gst_index_factory_make(arg0:Pointer[gchar]) : Pointer[GstIndex];

alias Enum_Unnamed66 = UInt;
alias GST_STATE_CHANGE_FAILURE = UInt(0);
alias GST_STATE_CHANGE_SUCCESS = UInt(1);
alias GST_STATE_CHANGE_ASYNC = UInt(2);
alias GST_STATE_CHANGE_NO_PREROLL = UInt(3);

alias GstStateChangeReturn = UInt;

alias Enum_Unnamed67 = UInt;
alias GST_STATE_CHANGE_NULL_TO_READY = UInt(10);
alias GST_STATE_CHANGE_READY_TO_PAUSED = UInt(19);
alias GST_STATE_CHANGE_PAUSED_TO_PLAYING = UInt(28);
alias GST_STATE_CHANGE_PLAYING_TO_PAUSED = UInt(35);
alias GST_STATE_CHANGE_PAUSED_TO_READY = UInt(26);
alias GST_STATE_CHANGE_READY_TO_NULL = UInt(17);

alias GstStateChange = UInt;

alias Enum_Unnamed68 = UInt;
alias GST_ELEMENT_LOCKED_STATE = UInt(16);
alias GST_ELEMENT_IS_SINK = UInt(32);
alias GST_ELEMENT_UNPARENTING = UInt(64);
alias GST_ELEMENT_IS_SOURCE = UInt(128);
alias GST_ELEMENT_FLAG_LAST = UInt(1048576);

alias GstElementFlags = UInt;

record Struct__GstElement (
    object : GstObject,
    state_lock : Pointer[GStaticRecMutex],
    state_cond : Pointer[GCond],
    state_cookie : guint32,
    current_state : GstState,
    next_state : GstState,
    pending_state : GstState,
    last_return : GstStateChangeReturn,
    bus : Pointer[GstBus],
    clock : Pointer[GstClock],
    base_time : GstClockTimeDiff,
    numpads : guint16,
    pads : Pointer[GList],
    numsrcpads : guint16,
    srcpads : Pointer[GList],
    numsinkpads : guint16,
    sinkpads : Pointer[GList],
    pads_cookie : guint32,
    abidata : Union_Unnamed69,
);

alias Union_Unnamed69 = Union[
    /* ABI */ Struct_Unnamed70,
    /* _gst_reserved */ Array[gpointer, 4],
];

record Struct_Unnamed70 (
    target_state : GstState,
    start_time : GstClockTime,
);

record Struct__GstElementClass (
    parent_class : GstObjectClass,
    details : GstElementDetails,
    elementfactory : Pointer[GstElementFactory],
    padtemplates : Pointer[GList],
    numpadtemplates : gint,
    pad_templ_cookie : guint32,
    pad_added : CCodePointer[[Pointer[GstElement], Pointer[GstPad]],[]],
    pad_removed : CCodePointer[[Pointer[GstElement], Pointer[GstPad]],[]],
    no_more_pads : CCodePointer[[Pointer[GstElement]],[]],
    request_new_pad : CCodePointer[[Pointer[GstElement], Pointer[GstPadTemplate], Pointer[gchar]],[Pointer[GstPad]]],
    release_pad : CCodePointer[[Pointer[GstElement], Pointer[GstPad]],[]],
    get_state : CCodePointer[[Pointer[GstElement], Pointer[GstState], Pointer[GstState], GstClockTime],[GstStateChangeReturn]],
    set_state : CCodePointer[[Pointer[GstElement], GstState],[GstStateChangeReturn]],
    change_state : CCodePointer[[Pointer[GstElement], GstStateChange],[GstStateChangeReturn]],
    set_bus : CCodePointer[[Pointer[GstElement], Pointer[GstBus]],[]],
    provide_clock : CCodePointer[[Pointer[GstElement]],[Pointer[GstClock]]],
    set_clock : CCodePointer[[Pointer[GstElement], Pointer[GstClock]],[gboolean]],
    get_index : CCodePointer[[Pointer[GstElement]],[Pointer[GstIndex]]],
    set_index : CCodePointer[[Pointer[GstElement], Pointer[GstIndex]],[]],
    send_event : CCodePointer[[Pointer[GstElement], Pointer[GstEvent]],[gboolean]],
    get_query_types : CCodePointer[[Pointer[GstElement]],[Pointer[GstQueryType]]],
    query : CCodePointer[[Pointer[GstElement], Pointer[GstQuery]],[gboolean]],
    meta_data : gpointer,
    request_new_pad_full : CCodePointer[[Pointer[GstElement], Pointer[GstPadTemplate], Pointer[gchar], Pointer[GstCaps]],[Pointer[GstPad]]],
    _gst_reserved : Array[gpointer, 2],
);

external (cdecl) gst_element_class_add_pad_template(arg0:Pointer[GstElementClass], arg1:Pointer[GstPadTemplate]) : ;

external (cdecl) gst_element_class_get_pad_template(arg0:Pointer[GstElementClass], arg1:Pointer[gchar]) : Pointer[GstPadTemplate];

external (cdecl) gst_element_class_get_pad_template_list(arg0:Pointer[GstElementClass]) : Pointer[GList];

external (cdecl) gst_element_class_set_documentation_uri(arg0:Pointer[GstElementClass], arg1:Pointer[gchar]) : ;

external (cdecl) gst_element_class_set_icon_name(arg0:Pointer[GstElementClass], arg1:Pointer[gchar]) : ;

external (cdecl) gst_element_class_set_details(arg0:Pointer[GstElementClass], arg1:Pointer[GstElementDetails]) : ;

external (cdecl) gst_element_class_set_details_simple(arg0:Pointer[GstElementClass], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar]) : ;

external (cdecl) gst_element_get_type() : GType;

external (cdecl) gst_element_requires_clock(arg0:Pointer[GstElement]) : gboolean;

external (cdecl) gst_element_provides_clock(arg0:Pointer[GstElement]) : gboolean;

external (cdecl) gst_element_provide_clock(arg0:Pointer[GstElement]) : Pointer[GstClock];

external (cdecl) gst_element_get_clock(arg0:Pointer[GstElement]) : Pointer[GstClock];

external (cdecl) gst_element_set_clock(arg0:Pointer[GstElement], arg1:Pointer[GstClock]) : gboolean;

external (cdecl) gst_element_set_base_time(arg0:Pointer[GstElement], arg1:GstClockTime) : ;

external (cdecl) gst_element_get_base_time(arg0:Pointer[GstElement]) : GstClockTime;

external (cdecl) gst_element_set_start_time(arg0:Pointer[GstElement], arg1:GstClockTime) : ;

external (cdecl) gst_element_get_start_time(arg0:Pointer[GstElement]) : GstClockTime;

external (cdecl) gst_element_is_indexable(arg0:Pointer[GstElement]) : gboolean;

external (cdecl) gst_element_set_index(arg0:Pointer[GstElement], arg1:Pointer[GstIndex]) : ;

external (cdecl) gst_element_get_index(arg0:Pointer[GstElement]) : Pointer[GstIndex];

external (cdecl) gst_element_set_bus(arg0:Pointer[GstElement], arg1:Pointer[GstBus]) : ;

external (cdecl) gst_element_get_bus(arg0:Pointer[GstElement]) : Pointer[GstBus];

external (cdecl) gst_element_add_pad(arg0:Pointer[GstElement], arg1:Pointer[GstPad]) : gboolean;

external (cdecl) gst_element_remove_pad(arg0:Pointer[GstElement], arg1:Pointer[GstPad]) : gboolean;

external (cdecl) gst_element_no_more_pads(arg0:Pointer[GstElement]) : ;

external (cdecl) gst_element_get_pad(arg0:Pointer[GstElement], arg1:Pointer[gchar]) : Pointer[GstPad];

external (cdecl) gst_element_get_static_pad(arg0:Pointer[GstElement], arg1:Pointer[gchar]) : Pointer[GstPad];

external (cdecl) gst_element_get_request_pad(arg0:Pointer[GstElement], arg1:Pointer[gchar]) : Pointer[GstPad];

external (cdecl) gst_element_request_pad(arg0:Pointer[GstElement], arg1:Pointer[GstPadTemplate], arg2:Pointer[gchar], arg3:Pointer[GstCaps]) : Pointer[GstPad];

external (cdecl) gst_element_release_request_pad(arg0:Pointer[GstElement], arg1:Pointer[GstPad]) : ;

external (cdecl) gst_element_iterate_pads(arg0:Pointer[GstElement]) : Pointer[GstIterator];

external (cdecl) gst_element_iterate_src_pads(arg0:Pointer[GstElement]) : Pointer[GstIterator];

external (cdecl) gst_element_iterate_sink_pads(arg0:Pointer[GstElement]) : Pointer[GstIterator];

external (cdecl) gst_element_send_event(arg0:Pointer[GstElement], arg1:Pointer[GstEvent]) : gboolean;

external (cdecl) gst_element_seek(arg0:Pointer[GstElement], arg1:gdouble, arg2:GstFormat, arg3:GstSeekFlags, arg4:GstSeekType, arg5:gint64, arg6:GstSeekType, arg7:gint64) : gboolean;

external (cdecl) gst_element_get_query_types(arg0:Pointer[GstElement]) : Pointer[GstQueryType];

external (cdecl) gst_element_query(arg0:Pointer[GstElement], arg1:Pointer[GstQuery]) : gboolean;

external (cdecl) gst_element_post_message(arg0:Pointer[GstElement], arg1:Pointer[GstMessage]) : gboolean;

external (cdecl) _gst_element_error_printf(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) gst_element_message_full(arg0:Pointer[GstElement], arg1:GstMessageType, arg2:GQuark, arg3:gint, arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:Pointer[gchar], arg7:Pointer[gchar], arg8:gint) : ;

external (cdecl) gst_element_is_locked_state(arg0:Pointer[GstElement]) : gboolean;

external (cdecl) gst_element_set_locked_state(arg0:Pointer[GstElement], arg1:gboolean) : gboolean;

external (cdecl) gst_element_sync_state_with_parent(arg0:Pointer[GstElement]) : gboolean;

external (cdecl) gst_element_get_state(arg0:Pointer[GstElement], arg1:Pointer[GstState], arg2:Pointer[GstState], arg3:GstClockTime) : GstStateChangeReturn;

external (cdecl) gst_element_set_state(arg0:Pointer[GstElement], arg1:GstState) : GstStateChangeReturn;

external (cdecl) gst_element_abort_state(arg0:Pointer[GstElement]) : ;

external (cdecl) gst_element_change_state(arg0:Pointer[GstElement], arg1:GstStateChange) : GstStateChangeReturn;

external (cdecl) gst_element_continue_state(arg0:Pointer[GstElement], arg1:GstStateChangeReturn) : GstStateChangeReturn;

external (cdecl) gst_element_lost_state(arg0:Pointer[GstElement]) : ;

external (cdecl) gst_element_lost_state_full(arg0:Pointer[GstElement], arg1:gboolean) : ;

external (cdecl) gst_element_get_factory(arg0:Pointer[GstElement]) : Pointer[GstElementFactory];

alias Enum_Unnamed71 = UInt;
alias GST_BIN_FLAG_LAST = UInt(33554432);

alias GstBinFlags = UInt;

alias GstBin = Struct__GstBin;

alias GstBinClass = Struct__GstBinClass;

alias Struct__GstBinPrivate = Opaque;

alias GstBinPrivate = Struct__GstBinPrivate;

record Struct__GstBin (
    element : GstElement,
    numchildren : gint,
    children : Pointer[GList],
    children_cookie : guint32,
    child_bus : Pointer[GstBus],
    messages : Pointer[GList],
    polling : gboolean,
    state_dirty : gboolean,
    clock_dirty : gboolean,
    provided_clock : Pointer[GstClock],
    clock_provider : Pointer[GstElement],
    priv : Pointer[GstBinPrivate],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstBinClass (
    parent_class : GstElementClass,
    pool : Pointer[GThreadPool],
    element_added : CCodePointer[[Pointer[GstBin], Pointer[GstElement]],[]],
    element_removed : CCodePointer[[Pointer[GstBin], Pointer[GstElement]],[]],
    add_element : CCodePointer[[Pointer[GstBin], Pointer[GstElement]],[gboolean]],
    remove_element : CCodePointer[[Pointer[GstBin], Pointer[GstElement]],[gboolean]],
    handle_message : CCodePointer[[Pointer[GstBin], Pointer[GstMessage]],[]],
    do_latency : CCodePointer[[Pointer[GstBin]],[gboolean]],
    _gst_reserved : Array[gpointer, 3],
);

external (cdecl) gst_bin_get_type() : GType;

external (cdecl) gst_bin_new(arg0:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) gst_bin_add(arg0:Pointer[GstBin], arg1:Pointer[GstElement]) : gboolean;

external (cdecl) gst_bin_remove(arg0:Pointer[GstBin], arg1:Pointer[GstElement]) : gboolean;

external (cdecl) gst_bin_get_by_name(arg0:Pointer[GstBin], arg1:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) gst_bin_get_by_name_recurse_up(arg0:Pointer[GstBin], arg1:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) gst_bin_get_by_interface(arg0:Pointer[GstBin], arg1:GType) : Pointer[GstElement];

external (cdecl) gst_bin_iterate_elements(arg0:Pointer[GstBin]) : Pointer[GstIterator];

external (cdecl) gst_bin_iterate_sorted(arg0:Pointer[GstBin]) : Pointer[GstIterator];

external (cdecl) gst_bin_iterate_recurse(arg0:Pointer[GstBin]) : Pointer[GstIterator];

external (cdecl) gst_bin_iterate_sinks(arg0:Pointer[GstBin]) : Pointer[GstIterator];

external (cdecl) gst_bin_iterate_sources(arg0:Pointer[GstBin]) : Pointer[GstIterator];

external (cdecl) gst_bin_iterate_all_by_interface(arg0:Pointer[GstBin], arg1:GType) : Pointer[GstIterator];

external (cdecl) gst_bin_recalculate_latency(arg0:Pointer[GstBin]) : gboolean;

alias Struct__GstChildProxy = Opaque;

alias GstChildProxy = Struct__GstChildProxy;

alias GstChildProxyInterface = Struct__GstChildProxyInterface;

record Struct__GstChildProxyInterface (
    parent : GTypeInterface,
    get_child_by_index : CCodePointer[[Pointer[GstChildProxy], guint],[Pointer[GstObject]]],
    get_children_count : CCodePointer[[Pointer[GstChildProxy]],[guint]],
    child_added : CCodePointer[[Pointer[GstChildProxy], Pointer[GstObject]],[]],
    child_removed : CCodePointer[[Pointer[GstChildProxy], Pointer[GstObject]],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_child_proxy_get_type() : GType;

external (cdecl) gst_child_proxy_get_child_by_name(arg0:Pointer[GstChildProxy], arg1:Pointer[gchar]) : Pointer[GstObject];

external (cdecl) gst_child_proxy_get_child_by_index(arg0:Pointer[GstChildProxy], arg1:guint) : Pointer[GstObject];

external (cdecl) gst_child_proxy_get_children_count(arg0:Pointer[GstChildProxy]) : guint;

external (cdecl) gst_child_proxy_lookup(arg0:Pointer[GstObject], arg1:Pointer[gchar], arg2:Pointer[Pointer[GstObject]], arg3:Pointer[Pointer[GParamSpec]]) : gboolean;

external (cdecl) gst_child_proxy_get_property(arg0:Pointer[GstObject], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) gst_child_proxy_get_valist(arg0:Pointer[GstObject], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gst_child_proxy_get(arg0:Pointer[GstObject], arg1:Pointer[gchar], ..) : ;

external (cdecl) gst_child_proxy_set_property(arg0:Pointer[GstObject], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) gst_child_proxy_set_valist(arg0:Pointer[GstObject], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gst_child_proxy_set(arg0:Pointer[GstObject], arg1:Pointer[gchar], ..) : ;

external (cdecl) gst_child_proxy_child_added(arg0:Pointer[GstObject], arg1:Pointer[GstObject]) : ;

external (cdecl) gst_child_proxy_child_removed(arg0:Pointer[GstObject], arg1:Pointer[GstObject]) : ;

alias Enum_Unnamed72 = UInt;
alias GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE = UInt(1);
alias GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS = UInt(2);
alias GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS = UInt(4);
alias GST_DEBUG_GRAPH_SHOW_STATES = UInt(8);
alias GST_DEBUG_GRAPH_SHOW_ALL = UInt(15);

alias GstDebugGraphDetails = UInt;

external (cdecl) _gst_debug_bin_to_dot_file(arg0:Pointer[GstBin], arg1:GstDebugGraphDetails, arg2:Pointer[gchar]) : ;

external (cdecl) _gst_debug_bin_to_dot_file_with_ts(arg0:Pointer[GstBin], arg1:GstDebugGraphDetails, arg2:Pointer[gchar]) : ;

alias Enum_Unnamed73 = UInt;
alias GST_CORE_ERROR_FAILED = UInt(1);
alias GST_CORE_ERROR_TOO_LAZY = UInt(2);
alias GST_CORE_ERROR_NOT_IMPLEMENTED = UInt(3);
alias GST_CORE_ERROR_STATE_CHANGE = UInt(4);
alias GST_CORE_ERROR_PAD = UInt(5);
alias GST_CORE_ERROR_THREAD = UInt(6);
alias GST_CORE_ERROR_NEGOTIATION = UInt(7);
alias GST_CORE_ERROR_EVENT = UInt(8);
alias GST_CORE_ERROR_SEEK = UInt(9);
alias GST_CORE_ERROR_CAPS = UInt(10);
alias GST_CORE_ERROR_TAG = UInt(11);
alias GST_CORE_ERROR_MISSING_PLUGIN = UInt(12);
alias GST_CORE_ERROR_CLOCK = UInt(13);
alias GST_CORE_ERROR_DISABLED = UInt(14);
alias GST_CORE_ERROR_NUM_ERRORS = UInt(15);

alias GstCoreError = UInt;

alias Enum_Unnamed74 = UInt;
alias GST_LIBRARY_ERROR_FAILED = UInt(1);
alias GST_LIBRARY_ERROR_TOO_LAZY = UInt(2);
alias GST_LIBRARY_ERROR_INIT = UInt(3);
alias GST_LIBRARY_ERROR_SHUTDOWN = UInt(4);
alias GST_LIBRARY_ERROR_SETTINGS = UInt(5);
alias GST_LIBRARY_ERROR_ENCODE = UInt(6);
alias GST_LIBRARY_ERROR_NUM_ERRORS = UInt(7);

alias GstLibraryError = UInt;

alias Enum_Unnamed75 = UInt;
alias GST_RESOURCE_ERROR_FAILED = UInt(1);
alias GST_RESOURCE_ERROR_TOO_LAZY = UInt(2);
alias GST_RESOURCE_ERROR_NOT_FOUND = UInt(3);
alias GST_RESOURCE_ERROR_BUSY = UInt(4);
alias GST_RESOURCE_ERROR_OPEN_READ = UInt(5);
alias GST_RESOURCE_ERROR_OPEN_WRITE = UInt(6);
alias GST_RESOURCE_ERROR_OPEN_READ_WRITE = UInt(7);
alias GST_RESOURCE_ERROR_CLOSE = UInt(8);
alias GST_RESOURCE_ERROR_READ = UInt(9);
alias GST_RESOURCE_ERROR_WRITE = UInt(10);
alias GST_RESOURCE_ERROR_SEEK = UInt(11);
alias GST_RESOURCE_ERROR_SYNC = UInt(12);
alias GST_RESOURCE_ERROR_SETTINGS = UInt(13);
alias GST_RESOURCE_ERROR_NO_SPACE_LEFT = UInt(14);
alias GST_RESOURCE_ERROR_NUM_ERRORS = UInt(15);

alias GstResourceError = UInt;

alias Enum_Unnamed76 = UInt;
alias GST_STREAM_ERROR_FAILED = UInt(1);
alias GST_STREAM_ERROR_TOO_LAZY = UInt(2);
alias GST_STREAM_ERROR_NOT_IMPLEMENTED = UInt(3);
alias GST_STREAM_ERROR_TYPE_NOT_FOUND = UInt(4);
alias GST_STREAM_ERROR_WRONG_TYPE = UInt(5);
alias GST_STREAM_ERROR_CODEC_NOT_FOUND = UInt(6);
alias GST_STREAM_ERROR_DECODE = UInt(7);
alias GST_STREAM_ERROR_ENCODE = UInt(8);
alias GST_STREAM_ERROR_DEMUX = UInt(9);
alias GST_STREAM_ERROR_MUX = UInt(10);
alias GST_STREAM_ERROR_FORMAT = UInt(11);
alias GST_STREAM_ERROR_DECRYPT = UInt(12);
alias GST_STREAM_ERROR_DECRYPT_NOKEY = UInt(13);
alias GST_STREAM_ERROR_NUM_ERRORS = UInt(14);

alias GstStreamError = UInt;

external (cdecl) gst_g_error_get_type() : GType;

external (cdecl) gst_error_get_message(arg0:GQuark, arg1:gint) : Pointer[gchar];

external (cdecl) gst_stream_error_quark() : GQuark;

external (cdecl) gst_core_error_quark() : GQuark;

external (cdecl) gst_resource_error_quark() : GQuark;

external (cdecl) gst_library_error_quark() : GQuark;

alias GstProxyPad = Struct__GstProxyPad;

alias Struct__GstProxyPadPrivate = Opaque;

alias GstProxyPadPrivate = Struct__GstProxyPadPrivate;

alias GstProxyPadClass = Struct__GstProxyPadClass;

record Struct__GstProxyPad (
    pad : GstPad,
    priv : Pointer[GstProxyPadPrivate],
);

record Struct__GstProxyPadClass (
    parent_class : GstPadClass,
    _gst_reserved : Array[gpointer, 1],
);

external (cdecl) gst_proxy_pad_get_type() : GType;

alias GstGhostPad = Struct__GstGhostPad;

alias Struct__GstGhostPadPrivate = Opaque;

alias GstGhostPadPrivate = Struct__GstGhostPadPrivate;

alias GstGhostPadClass = Struct__GstGhostPadClass;

record Struct__GstGhostPad (
    pad : GstProxyPad,
    priv : Pointer[GstGhostPadPrivate],
);

record Struct__GstGhostPadClass (
    parent_class : GstProxyPadClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_ghost_pad_get_type() : GType;

external (cdecl) gst_ghost_pad_new(arg0:Pointer[gchar], arg1:Pointer[GstPad]) : Pointer[GstPad];

external (cdecl) gst_ghost_pad_new_no_target(arg0:Pointer[gchar], arg1:GstPadDirection) : Pointer[GstPad];

external (cdecl) gst_ghost_pad_new_from_template(arg0:Pointer[gchar], arg1:Pointer[GstPad], arg2:Pointer[GstPadTemplate]) : Pointer[GstPad];

external (cdecl) gst_ghost_pad_new_no_target_from_template(arg0:Pointer[gchar], arg1:Pointer[GstPadTemplate]) : Pointer[GstPad];

external (cdecl) gst_ghost_pad_get_target(arg0:Pointer[GstGhostPad]) : Pointer[GstPad];

external (cdecl) gst_ghost_pad_set_target(arg0:Pointer[GstGhostPad], arg1:Pointer[GstPad]) : gboolean;

external (cdecl) gst_ghost_pad_construct(arg0:Pointer[GstGhostPad]) : gboolean;

alias Enum_Unnamed77 = UInt;
alias GST_LEVEL_NONE = UInt(0);
alias GST_LEVEL_ERROR = UInt(1);
alias GST_LEVEL_WARNING = UInt(2);
alias GST_LEVEL_INFO = UInt(3);
alias GST_LEVEL_DEBUG = UInt(4);
alias GST_LEVEL_LOG = UInt(5);
alias GST_LEVEL_FIXME = UInt(6);
alias GST_LEVEL_TRACE = UInt(7);
alias GST_LEVEL_MEMDUMP = UInt(9);
alias GST_LEVEL_COUNT = UInt(10);

alias GstDebugLevel = UInt;

alias Enum_Unnamed78 = UInt;
alias GST_DEBUG_FG_BLACK = UInt(0);
alias GST_DEBUG_FG_RED = UInt(1);
alias GST_DEBUG_FG_GREEN = UInt(2);
alias GST_DEBUG_FG_YELLOW = UInt(3);
alias GST_DEBUG_FG_BLUE = UInt(4);
alias GST_DEBUG_FG_MAGENTA = UInt(5);
alias GST_DEBUG_FG_CYAN = UInt(6);
alias GST_DEBUG_FG_WHITE = UInt(7);
alias GST_DEBUG_BG_BLACK = UInt(0);
alias GST_DEBUG_BG_RED = UInt(16);
alias GST_DEBUG_BG_GREEN = UInt(32);
alias GST_DEBUG_BG_YELLOW = UInt(48);
alias GST_DEBUG_BG_BLUE = UInt(64);
alias GST_DEBUG_BG_MAGENTA = UInt(80);
alias GST_DEBUG_BG_CYAN = UInt(96);
alias GST_DEBUG_BG_WHITE = UInt(112);
alias GST_DEBUG_BOLD = UInt(256);
alias GST_DEBUG_UNDERLINE = UInt(512);

alias GstDebugColorFlags = UInt;

alias GstDebugCategory = Struct__GstDebugCategory;

record Struct__GstDebugCategory (
    threshold : gint,
    color : guint,
    name : Pointer[gchar],
    description : Pointer[gchar],
);

alias Struct__GstDebugMessage = Opaque;

alias GstDebugMessage = Struct__GstDebugMessage;

alias GstLogFunction = CCodePointer[[Pointer[GstDebugCategory], GstDebugLevel, Pointer[gchar], Pointer[gchar], gint, Pointer[GObject], Pointer[GstDebugMessage], gpointer],[]];

external (cdecl) _gst_debug_init() : ;

external (cdecl) gst_debug_log(arg0:Pointer[GstDebugCategory], arg1:GstDebugLevel, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:gint, arg5:Pointer[GObject], arg6:Pointer[gchar], ..) : ;

external (cdecl) gst_debug_log_valist(arg0:Pointer[GstDebugCategory], arg1:GstDebugLevel, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:gint, arg5:Pointer[GObject], arg6:Pointer[gchar], arg7:Pointer[__va_list_tag]) : ;

external (cdecl) _gst_debug_category_new(arg0:Pointer[gchar], arg1:guint, arg2:Pointer[gchar]) : Pointer[GstDebugCategory];

external (cdecl) _gst_debug_get_category(arg0:Pointer[gchar]) : Pointer[GstDebugCategory];

external (cdecl) _gst_debug_dump_mem(arg0:Pointer[GstDebugCategory], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint, arg4:Pointer[GObject], arg5:Pointer[gchar], arg6:Pointer[guint8], arg7:guint) : ;

alias GstDebugFuncPtr = CCodePointer[[],[]];

external (cdecl) _gst_debug_register_funcptr(arg0:GstDebugFuncPtr, arg1:Pointer[gchar]) : ;

external (cdecl) _gst_debug_nameof_funcptr(arg0:GstDebugFuncPtr) : Pointer[gchar];

external (cdecl) gst_debug_message_get(arg0:Pointer[GstDebugMessage]) : Pointer[gchar];

external (cdecl) gst_debug_log_default(arg0:Pointer[GstDebugCategory], arg1:GstDebugLevel, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:gint, arg5:Pointer[GObject], arg6:Pointer[GstDebugMessage], arg7:gpointer) : ;

external (cdecl) gst_debug_level_get_name(arg0:GstDebugLevel) : Pointer[gchar];

external (cdecl) gst_debug_add_log_function(arg0:GstLogFunction, arg1:gpointer) : ;

external (cdecl) gst_debug_remove_log_function(arg0:GstLogFunction) : guint;

external (cdecl) gst_debug_remove_log_function_by_data(arg0:gpointer) : guint;

external (cdecl) gst_debug_set_active(arg0:gboolean) : ;

external (cdecl) gst_debug_is_active() : gboolean;

external (cdecl) gst_debug_set_colored(arg0:gboolean) : ;

external (cdecl) gst_debug_is_colored() : gboolean;

external (cdecl) gst_debug_set_default_threshold(arg0:GstDebugLevel) : ;

external (cdecl) gst_debug_get_default_threshold() : GstDebugLevel;

external (cdecl) gst_debug_set_threshold_for_name(arg0:Pointer[gchar], arg1:GstDebugLevel) : ;

external (cdecl) gst_debug_unset_threshold_for_name(arg0:Pointer[gchar]) : ;

external (cdecl) gst_debug_category_free(arg0:Pointer[GstDebugCategory]) : ;

external (cdecl) gst_debug_category_set_threshold(arg0:Pointer[GstDebugCategory], arg1:GstDebugLevel) : ;

external (cdecl) gst_debug_category_reset_threshold(arg0:Pointer[GstDebugCategory]) : ;

external (cdecl) gst_debug_category_get_threshold(arg0:Pointer[GstDebugCategory]) : GstDebugLevel;

external (cdecl) gst_debug_category_get_name(arg0:Pointer[GstDebugCategory]) : Pointer[gchar];

external (cdecl) gst_debug_category_get_color(arg0:Pointer[GstDebugCategory]) : guint;

external (cdecl) gst_debug_category_get_description(arg0:Pointer[GstDebugCategory]) : Pointer[gchar];

external (cdecl) gst_debug_get_all_categories() : Pointer[GSList];

external (cdecl) gst_debug_construct_term_color(arg0:guint) : Pointer[gchar];

external (cdecl) gst_debug_construct_win_color(arg0:guint) : gint;

external GST_CAT_DEFAULT : Pointer[GstDebugCategory];

external __gst_debug_enabled : gboolean;

external __gst_debug_min : GstDebugLevel;

external (cdecl) gst_debug_print_stack_trace() : ;

alias Struct__GstImplementsInterface = Opaque;

alias GstImplementsInterface = Struct__GstImplementsInterface;

alias GstImplementsInterfaceClass = Struct__GstImplementsInterfaceClass;

record Struct__GstImplementsInterfaceClass (
    parent : GTypeInterface,
    supported : CCodePointer[[Pointer[GstImplementsInterface], GType],[gboolean]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_implements_interface_get_type() : GType;

external (cdecl) gst_element_implements_interface(arg0:Pointer[GstElement], arg1:GType) : gboolean;

external (cdecl) gst_implements_interface_cast(arg0:gpointer, arg1:GType) : gpointer;

external (cdecl) gst_implements_interface_check(arg0:gpointer, arg1:GType) : gboolean;

external (cdecl) gst_marshal_VOID__BOXED_OBJECT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__POINTER_OBJECT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_OBJECT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_PARAM(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_BOXED(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_BOXED_STRING(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_OBJECT_STRING(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__OBJECT_STRING(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__INT_INT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__INT64(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_VOID__UINT_BOXED(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_BOOLEAN__VOID(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_BOOLEAN__POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_POINTER__POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gst_marshal_BOXED__BOXED(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

alias GstValueCompareFunc = CCodePointer[[Pointer[GValue], Pointer[GValue]],[gint]];

alias GstValueSerializeFunc = CCodePointer[[Pointer[GValue]],[Pointer[gchar]]];

alias GstValueDeserializeFunc = CCodePointer[[Pointer[GValue], Pointer[gchar]],[gboolean]];

alias GstValueUnionFunc = CCodePointer[[Pointer[GValue], Pointer[GValue], Pointer[GValue]],[gboolean]];

alias GstValueIntersectFunc = CCodePointer[[Pointer[GValue], Pointer[GValue], Pointer[GValue]],[gboolean]];

alias GstValueSubtractFunc = CCodePointer[[Pointer[GValue], Pointer[GValue], Pointer[GValue]],[gboolean]];

alias GstValueTable = Struct__GstValueTable;

record Struct__GstValueTable (
    type : GType,
    compare : GstValueCompareFunc,
    serialize : GstValueSerializeFunc,
    deserialize : GstValueDeserializeFunc,
    _gst_reserved : Array[OpaquePointer, 4],
);

external (cdecl) gst_int_range_get_type() : GType;

external (cdecl) gst_int64_range_get_type() : GType;

external (cdecl) gst_double_range_get_type() : GType;

external (cdecl) gst_fraction_range_get_type() : GType;

external (cdecl) gst_fourcc_get_type() : GType;

external (cdecl) gst_fraction_get_type() : GType;

external (cdecl) gst_value_list_get_type() : GType;

external (cdecl) gst_value_array_get_type() : GType;

external (cdecl) gst_date_get_type() : GType;

external (cdecl) gst_date_time_get_type() : GType;

external (cdecl) gst_value_register(arg0:Pointer[GstValueTable]) : ;

external (cdecl) gst_value_init_and_copy(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_value_serialize(arg0:Pointer[GValue]) : Pointer[gchar];

external (cdecl) gst_value_deserialize(arg0:Pointer[GValue], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_value_list_append_value(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_value_list_prepend_value(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_value_list_concat(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : ;

external (cdecl) gst_value_list_merge(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : ;

external (cdecl) gst_value_list_get_size(arg0:Pointer[GValue]) : guint;

external (cdecl) gst_value_list_get_value(arg0:Pointer[GValue], arg1:guint) : Pointer[GValue];

external (cdecl) gst_value_array_append_value(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_value_array_prepend_value(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) gst_value_array_get_size(arg0:Pointer[GValue]) : guint;

external (cdecl) gst_value_array_get_value(arg0:Pointer[GValue], arg1:guint) : Pointer[GValue];

external (cdecl) gst_value_set_fourcc(arg0:Pointer[GValue], arg1:guint32) : ;

external (cdecl) gst_value_get_fourcc(arg0:Pointer[GValue]) : guint32;

external (cdecl) gst_value_set_int_range(arg0:Pointer[GValue], arg1:gint, arg2:gint) : ;

external (cdecl) gst_value_get_int_range_min(arg0:Pointer[GValue]) : gint;

external (cdecl) gst_value_get_int_range_max(arg0:Pointer[GValue]) : gint;

external (cdecl) gst_value_set_int64_range(arg0:Pointer[GValue], arg1:gint64, arg2:gint64) : ;

external (cdecl) gst_value_get_int64_range_min(arg0:Pointer[GValue]) : gint64;

external (cdecl) gst_value_get_int64_range_max(arg0:Pointer[GValue]) : gint64;

external (cdecl) gst_value_set_double_range(arg0:Pointer[GValue], arg1:gdouble, arg2:gdouble) : ;

external (cdecl) gst_value_get_double_range_min(arg0:Pointer[GValue]) : gdouble;

external (cdecl) gst_value_get_double_range_max(arg0:Pointer[GValue]) : gdouble;

external (cdecl) gst_value_get_caps(arg0:Pointer[GValue]) : Pointer[GstCaps];

external (cdecl) gst_value_set_caps(arg0:Pointer[GValue], arg1:Pointer[GstCaps]) : ;

external (cdecl) gst_value_get_structure(arg0:Pointer[GValue]) : Pointer[GstStructure];

external (cdecl) gst_value_set_structure(arg0:Pointer[GValue], arg1:Pointer[GstStructure]) : ;

external (cdecl) gst_value_set_fraction(arg0:Pointer[GValue], arg1:gint, arg2:gint) : ;

external (cdecl) gst_value_get_fraction_numerator(arg0:Pointer[GValue]) : gint;

external (cdecl) gst_value_get_fraction_denominator(arg0:Pointer[GValue]) : gint;

external (cdecl) gst_value_fraction_multiply(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_fraction_subtract(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_set_fraction_range(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : ;

external (cdecl) gst_value_set_fraction_range_full(arg0:Pointer[GValue], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gst_value_get_fraction_range_min(arg0:Pointer[GValue]) : Pointer[GValue];

external (cdecl) gst_value_get_fraction_range_max(arg0:Pointer[GValue]) : Pointer[GValue];

external (cdecl) gst_value_get_date(arg0:Pointer[GValue]) : Pointer[GDate];

external (cdecl) gst_value_set_date(arg0:Pointer[GValue], arg1:Pointer[GDate]) : ;

external (cdecl) gst_value_compare(arg0:Pointer[GValue], arg1:Pointer[GValue]) : gint;

external (cdecl) gst_value_can_compare(arg0:Pointer[GValue], arg1:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_union(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_can_union(arg0:Pointer[GValue], arg1:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_register_union_func(arg0:GType, arg1:GType, arg2:GstValueUnionFunc) : ;

external (cdecl) gst_value_intersect(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_can_intersect(arg0:Pointer[GValue], arg1:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_register_intersect_func(arg0:GType, arg1:GType, arg2:GstValueIntersectFunc) : ;

external (cdecl) gst_value_subtract(arg0:Pointer[GValue], arg1:Pointer[GValue], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_can_subtract(arg0:Pointer[GValue], arg1:Pointer[GValue]) : gboolean;

external (cdecl) gst_value_register_subtract_func(arg0:GType, arg1:GType, arg2:GstValueSubtractFunc) : ;

external (cdecl) gst_value_is_fixed(arg0:Pointer[GValue]) : gboolean;

external (cdecl) gst_param_spec_fraction_get_type() : GType;

alias GstParamSpecFraction = Struct__GstParamSpecFraction;

record Struct__GstParamSpecFraction (
    parent_instance : GParamSpec,
    min_num : gint,
    min_den : gint,
    max_num : gint,
    max_den : gint,
    def_num : gint,
    def_den : gint,
);

external (cdecl) gst_param_spec_fraction(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:gint, arg9:GParamFlags) : Pointer[GParamSpec];

alias GstPipeline = Struct__GstPipeline;

alias GstPipelineClass = Struct__GstPipelineClass;

alias Struct__GstPipelinePrivate = Opaque;

alias GstPipelinePrivate = Struct__GstPipelinePrivate;

alias Enum_Unnamed79 = UInt;
alias GST_PIPELINE_FLAG_FIXED_CLOCK = UInt(33554432);
alias GST_PIPELINE_FLAG_LAST = UInt(536870912);

alias GstPipelineFlags = UInt;

record Struct__GstPipeline (
    bin : GstBin,
    fixed_clock : Pointer[GstClock],
    stream_time : GstClockTime,
    delay : GstClockTime,
    priv : Pointer[GstPipelinePrivate],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstPipelineClass (
    parent_class : GstBinClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_pipeline_get_type() : GType;

external (cdecl) gst_pipeline_new(arg0:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) gst_pipeline_get_bus(arg0:Pointer[GstPipeline]) : Pointer[GstBus];

external (cdecl) gst_pipeline_set_new_stream_time(arg0:Pointer[GstPipeline], arg1:GstClockTime) : ;

external (cdecl) gst_pipeline_get_last_stream_time(arg0:Pointer[GstPipeline]) : GstClockTime;

external (cdecl) gst_pipeline_use_clock(arg0:Pointer[GstPipeline], arg1:Pointer[GstClock]) : ;

external (cdecl) gst_pipeline_set_clock(arg0:Pointer[GstPipeline], arg1:Pointer[GstClock]) : gboolean;

external (cdecl) gst_pipeline_get_clock(arg0:Pointer[GstPipeline]) : Pointer[GstClock];

external (cdecl) gst_pipeline_auto_clock(arg0:Pointer[GstPipeline]) : ;

external (cdecl) gst_pipeline_set_delay(arg0:Pointer[GstPipeline], arg1:GstClockTime) : ;

external (cdecl) gst_pipeline_get_delay(arg0:Pointer[GstPipeline]) : GstClockTime;

external (cdecl) gst_pipeline_set_auto_flush_bus(arg0:Pointer[GstPipeline], arg1:gboolean) : ;

external (cdecl) gst_pipeline_get_auto_flush_bus(arg0:Pointer[GstPipeline]) : gboolean;

alias Struct__GstPoll = Opaque;

alias GstPoll = Struct__GstPoll;

record Struct_Unnamed80 (
    fd : Int,
    idx : gint,
);

alias GstPollFD = Struct_Unnamed80;

external (cdecl) gst_poll_new(arg0:gboolean) : Pointer[GstPoll];

external (cdecl) gst_poll_new_timer() : Pointer[GstPoll];

external (cdecl) gst_poll_free(arg0:Pointer[GstPoll]) : ;

external (cdecl) gst_poll_get_read_gpollfd(arg0:Pointer[GstPoll], arg1:Pointer[GPollFD]) : ;

external (cdecl) gst_poll_fd_init(arg0:Pointer[GstPollFD]) : ;

external (cdecl) gst_poll_add_fd(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : gboolean;

external (cdecl) gst_poll_remove_fd(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : gboolean;

external (cdecl) gst_poll_fd_ctl_write(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD], arg2:gboolean) : gboolean;

external (cdecl) gst_poll_fd_ctl_read(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD], arg2:gboolean) : gboolean;

external (cdecl) gst_poll_fd_ignored(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : ;

external (cdecl) gst_poll_fd_has_closed(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : gboolean;

external (cdecl) gst_poll_fd_has_error(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : gboolean;

external (cdecl) gst_poll_fd_can_read(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : gboolean;

external (cdecl) gst_poll_fd_can_write(arg0:Pointer[GstPoll], arg1:Pointer[GstPollFD]) : gboolean;

external (cdecl) gst_poll_wait(arg0:Pointer[GstPoll], arg1:GstClockTime) : gint;

external (cdecl) gst_poll_set_controllable(arg0:Pointer[GstPoll], arg1:gboolean) : gboolean;

external (cdecl) gst_poll_restart(arg0:Pointer[GstPoll]) : ;

external (cdecl) gst_poll_set_flushing(arg0:Pointer[GstPoll], arg1:gboolean) : ;

external (cdecl) gst_poll_write_control(arg0:Pointer[GstPoll]) : gboolean;

external (cdecl) gst_poll_read_control(arg0:Pointer[GstPoll]) : gboolean;

alias Struct__GstPreset = Opaque;

alias GstPreset = Struct__GstPreset;

alias GstPresetInterface = Struct__GstPresetInterface;

record Struct__GstPresetInterface (
    parent : GTypeInterface,
    get_preset_names : CCodePointer[[Pointer[GstPreset]],[Pointer[Pointer[gchar]]]],
    get_property_names : CCodePointer[[Pointer[GstPreset]],[Pointer[Pointer[gchar]]]],
    load_preset : CCodePointer[[Pointer[GstPreset], Pointer[gchar]],[gboolean]],
    save_preset : CCodePointer[[Pointer[GstPreset], Pointer[gchar]],[gboolean]],
    rename_preset : CCodePointer[[Pointer[GstPreset], Pointer[gchar], Pointer[gchar]],[gboolean]],
    delete_preset : CCodePointer[[Pointer[GstPreset], Pointer[gchar]],[gboolean]],
    set_meta : CCodePointer[[Pointer[GstPreset], Pointer[gchar], Pointer[gchar], Pointer[gchar]],[gboolean]],
    get_meta : CCodePointer[[Pointer[GstPreset], Pointer[gchar], Pointer[gchar], Pointer[Pointer[gchar]]],[gboolean]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_preset_get_type() : GType;

external (cdecl) gst_preset_get_preset_names(arg0:Pointer[GstPreset]) : Pointer[Pointer[gchar]];

external (cdecl) gst_preset_get_property_names(arg0:Pointer[GstPreset]) : Pointer[Pointer[gchar]];

external (cdecl) gst_preset_load_preset(arg0:Pointer[GstPreset], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_preset_save_preset(arg0:Pointer[GstPreset], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_preset_rename_preset(arg0:Pointer[GstPreset], arg1:Pointer[gchar], arg2:Pointer[gchar]) : gboolean;

external (cdecl) gst_preset_delete_preset(arg0:Pointer[GstPreset], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_preset_set_meta(arg0:Pointer[GstPreset], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : gboolean;

external (cdecl) gst_preset_get_meta(arg0:Pointer[GstPreset], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[gchar]]) : gboolean;

alias GstRegistry = Struct__GstRegistry;

alias GstRegistryClass = Struct__GstRegistryClass;

alias Struct__GstRegistryPrivate = Opaque;

alias GstRegistryPrivate = Struct__GstRegistryPrivate;

record Struct__GstRegistry (
    object : GstObject,
    plugins : Pointer[GList],
    features : Pointer[GList],
    paths : Pointer[GList],
    cache_file : Int,
    feature_hash : Pointer[GHashTable],
    basename_hash : Pointer[GHashTable],
    priv : Pointer[GstRegistryPrivate],
    _gst_reserved : Array[gpointer, 1],
);

record Struct__GstRegistryClass (
    parent_class : GstObjectClass,
    plugin_added : CCodePointer[[Pointer[GstRegistry], Pointer[GstPlugin]],[]],
    feature_added : CCodePointer[[Pointer[GstRegistry], Pointer[GstPluginFeature]],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_registry_get_type() : GType;

external (cdecl) gst_registry_get_default() : Pointer[GstRegistry];

external (cdecl) gst_registry_scan_path(arg0:Pointer[GstRegistry], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_registry_add_path(arg0:Pointer[GstRegistry], arg1:Pointer[gchar]) : ;

external (cdecl) gst_registry_get_path_list(arg0:Pointer[GstRegistry]) : Pointer[GList];

external (cdecl) gst_registry_add_plugin(arg0:Pointer[GstRegistry], arg1:Pointer[GstPlugin]) : gboolean;

external (cdecl) gst_registry_remove_plugin(arg0:Pointer[GstRegistry], arg1:Pointer[GstPlugin]) : ;

external (cdecl) gst_registry_add_feature(arg0:Pointer[GstRegistry], arg1:Pointer[GstPluginFeature]) : gboolean;

external (cdecl) gst_registry_remove_feature(arg0:Pointer[GstRegistry], arg1:Pointer[GstPluginFeature]) : ;

external (cdecl) gst_registry_get_plugin_list(arg0:Pointer[GstRegistry]) : Pointer[GList];

external (cdecl) gst_registry_plugin_filter(arg0:Pointer[GstRegistry], arg1:GstPluginFilter, arg2:gboolean, arg3:gpointer) : Pointer[GList];

external (cdecl) gst_registry_feature_filter(arg0:Pointer[GstRegistry], arg1:GstPluginFeatureFilter, arg2:gboolean, arg3:gpointer) : Pointer[GList];

external (cdecl) gst_registry_get_feature_list(arg0:Pointer[GstRegistry], arg1:GType) : Pointer[GList];

external (cdecl) gst_registry_get_feature_list_by_plugin(arg0:Pointer[GstRegistry], arg1:Pointer[gchar]) : Pointer[GList];

external (cdecl) gst_registry_get_feature_list_cookie(arg0:Pointer[GstRegistry]) : guint32;

external (cdecl) gst_registry_find_plugin(arg0:Pointer[GstRegistry], arg1:Pointer[gchar]) : Pointer[GstPlugin];

external (cdecl) gst_registry_find_feature(arg0:Pointer[GstRegistry], arg1:Pointer[gchar], arg2:GType) : Pointer[GstPluginFeature];

external (cdecl) gst_registry_lookup(arg0:Pointer[GstRegistry], arg1:Pointer[CChar]) : Pointer[GstPlugin];

external (cdecl) gst_registry_lookup_feature(arg0:Pointer[GstRegistry], arg1:Pointer[CChar]) : Pointer[GstPluginFeature];

external (cdecl) gst_registry_xml_read_cache(arg0:Pointer[GstRegistry], arg1:Pointer[CChar]) : gboolean;

external (cdecl) gst_registry_xml_write_cache(arg0:Pointer[GstRegistry], arg1:Pointer[CChar]) : gboolean;

external (cdecl) gst_default_registry_check_feature_version(arg0:Pointer[gchar], arg1:guint, arg2:guint, arg3:guint) : gboolean;

alias GstSegment = Struct__GstSegment;

record Struct__GstSegment (
    rate : gdouble,
    abs_rate : gdouble,
    format : GstFormat,
    flags : GstSeekFlags,
    start : gint64,
    stop : gint64,
    time : gint64,
    accum : gint64,
    last_stop : gint64,
    duration : gint64,
    applied_rate : gdouble,
    _gst_reserved : Array[guint8, 24],
);

external (cdecl) gst_segment_get_type() : GType;

external (cdecl) gst_segment_new() : Pointer[GstSegment];

external (cdecl) gst_segment_copy(arg0:Pointer[GstSegment]) : Pointer[GstSegment];

external (cdecl) gst_segment_free(arg0:Pointer[GstSegment]) : ;

external (cdecl) gst_segment_init(arg0:Pointer[GstSegment], arg1:GstFormat) : ;

external (cdecl) gst_segment_set_duration(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64) : ;

external (cdecl) gst_segment_set_last_stop(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64) : ;

external (cdecl) gst_segment_set_seek(arg0:Pointer[GstSegment], arg1:gdouble, arg2:GstFormat, arg3:GstSeekFlags, arg4:GstSeekType, arg5:gint64, arg6:GstSeekType, arg7:gint64, arg8:Pointer[gboolean]) : ;

external (cdecl) gst_segment_set_newsegment(arg0:Pointer[GstSegment], arg1:gboolean, arg2:gdouble, arg3:GstFormat, arg4:gint64, arg5:gint64, arg6:gint64) : ;

external (cdecl) gst_segment_set_newsegment_full(arg0:Pointer[GstSegment], arg1:gboolean, arg2:gdouble, arg3:gdouble, arg4:GstFormat, arg5:gint64, arg6:gint64, arg7:gint64) : ;

external (cdecl) gst_segment_to_stream_time(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64) : gint64;

external (cdecl) gst_segment_to_running_time(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64) : gint64;

external (cdecl) gst_segment_to_position(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64) : gint64;

external (cdecl) gst_segment_clip(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64, arg3:gint64, arg4:Pointer[gint64], arg5:Pointer[gint64]) : gboolean;

external (cdecl) gst_segment_set_running_time(arg0:Pointer[GstSegment], arg1:GstFormat, arg2:gint64) : gboolean;

alias GstSystemClock = Struct__GstSystemClock;

alias GstSystemClockClass = Struct__GstSystemClockClass;

alias Struct__GstSystemClockPrivate = Opaque;

alias GstSystemClockPrivate = Struct__GstSystemClockPrivate;

alias Enum_Unnamed81 = UInt;
alias GST_CLOCK_TYPE_REALTIME = UInt(0);
alias GST_CLOCK_TYPE_MONOTONIC = UInt(1);

alias GstClockType = UInt;

record Struct__GstSystemClock (
    clock : GstClock,
    thread : Pointer[GThread],
    stopping : gboolean,
    priv : Pointer[GstSystemClockPrivate],
    _gst_reserved : Array[gpointer, 3],
);

record Struct__GstSystemClockClass (
    parent_class : GstClockClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_system_clock_get_type() : GType;

external (cdecl) gst_system_clock_obtain() : Pointer[GstClock];

alias Struct__GstTagSetter = Opaque;

alias GstTagSetter = Struct__GstTagSetter;

alias GstTagSetterIFace = Struct__GstTagSetterIFace;

record Struct__GstTagSetterIFace (
    g_iface : GTypeInterface,
);

external (cdecl) gst_tag_setter_get_type() : GType;

external (cdecl) gst_tag_setter_reset_tags(arg0:Pointer[GstTagSetter]) : ;

external (cdecl) gst_tag_setter_merge_tags(arg0:Pointer[GstTagSetter], arg1:Pointer[GstTagList], arg2:GstTagMergeMode) : ;

external (cdecl) gst_tag_setter_add_tags(arg0:Pointer[GstTagSetter], arg1:GstTagMergeMode, arg2:Pointer[gchar], ..) : ;

external (cdecl) gst_tag_setter_add_tag_values(arg0:Pointer[GstTagSetter], arg1:GstTagMergeMode, arg2:Pointer[gchar], ..) : ;

external (cdecl) gst_tag_setter_add_tag_valist(arg0:Pointer[GstTagSetter], arg1:GstTagMergeMode, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gst_tag_setter_add_tag_valist_values(arg0:Pointer[GstTagSetter], arg1:GstTagMergeMode, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gst_tag_setter_add_tag_value(arg0:Pointer[GstTagSetter], arg1:GstTagMergeMode, arg2:Pointer[gchar], arg3:Pointer[GValue]) : ;

external (cdecl) gst_tag_setter_get_tag_list(arg0:Pointer[GstTagSetter]) : Pointer[GstTagList];

external (cdecl) gst_tag_setter_set_tag_merge_mode(arg0:Pointer[GstTagSetter], arg1:GstTagMergeMode) : ;

external (cdecl) gst_tag_setter_get_tag_merge_mode(arg0:Pointer[GstTagSetter]) : GstTagMergeMode;

alias Enum_Unnamed82 = UInt;
alias GST_ALLOC_TRACE_LIVE = UInt(1);
alias GST_ALLOC_TRACE_MEM_LIVE = UInt(2);

alias GstAllocTraceFlags = UInt;

alias GstAllocTrace = Struct__GstAllocTrace;

record Struct__GstAllocTrace (
    name : Pointer[gchar],
    flags : gint,
    live : gint,
    mem_live : Pointer[GSList],
);

alias GstTrace = Struct__GstTrace;

alias GstTraceEntry = Struct__GstTraceEntry;

record Struct__GstTrace (
    filename : Pointer[gchar],
    fd : Int,
    buf : Pointer[GstTraceEntry],
    bufsize : gint,
    bufoffset : gint,
);

record Struct__GstTraceEntry (
    timestamp : gint64,
    sequence : guint32,
    data : guint32,
    message : Array[gchar, 112],
);

external (cdecl) gst_trace_new(arg0:Pointer[gchar], arg1:gint) : Pointer[GstTrace];

external (cdecl) gst_trace_destroy(arg0:Pointer[GstTrace]) : ;

external (cdecl) gst_trace_flush(arg0:Pointer[GstTrace]) : ;

external (cdecl) gst_trace_text_flush(arg0:Pointer[GstTrace]) : ;

external (cdecl) gst_trace_set_default(arg0:Pointer[GstTrace]) : ;

external (cdecl) _gst_trace_add_entry(arg0:Pointer[GstTrace], arg1:guint32, arg2:guint32, arg3:Pointer[gchar]) : ;

external (cdecl) gst_trace_read_tsc(arg0:Pointer[gint64]) : ;

external _gst_trace_mutex : GStaticMutex;

external (cdecl) gst_alloc_trace_available() : gboolean;

external (cdecl) gst_alloc_trace_list() : Pointer[GList];

external (cdecl) _gst_alloc_trace_register(arg0:Pointer[gchar]) : Pointer[GstAllocTrace];

external (cdecl) gst_alloc_trace_live_all() : Int;

external (cdecl) gst_alloc_trace_print_all() : ;

external (cdecl) gst_alloc_trace_print_live() : ;

external (cdecl) gst_alloc_trace_set_flags_all(arg0:GstAllocTraceFlags) : ;

external (cdecl) gst_alloc_trace_get(arg0:Pointer[gchar]) : Pointer[GstAllocTrace];

external (cdecl) gst_alloc_trace_print(arg0:Pointer[GstAllocTrace]) : ;

external (cdecl) gst_alloc_trace_set_flags(arg0:Pointer[GstAllocTrace], arg1:GstAllocTraceFlags) : ;

external _gst_trace_on : gint;

alias GstTypeFind = Struct__GstTypeFind;

alias GstTypeFindFunction = CCodePointer[[Pointer[GstTypeFind], gpointer],[]];

alias Enum_Unnamed83 = UInt;
alias GST_TYPE_FIND_MINIMUM = UInt(1);
alias GST_TYPE_FIND_POSSIBLE = UInt(50);
alias GST_TYPE_FIND_LIKELY = UInt(80);
alias GST_TYPE_FIND_NEARLY_CERTAIN = UInt(99);
alias GST_TYPE_FIND_MAXIMUM = UInt(100);

alias GstTypeFindProbability = UInt;

record Struct__GstTypeFind (
    peek : CCodePointer[[gpointer, gint64, guint],[Pointer[guint8]]],
    suggest : CCodePointer[[gpointer, guint, Pointer[GstCaps]],[]],
    data : gpointer,
    get_length : CCodePointer[[gpointer],[guint64]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_type_find_get_type() : GType;

external (cdecl) gst_type_find_peek(arg0:Pointer[GstTypeFind], arg1:gint64, arg2:guint) : Pointer[guint8];

external (cdecl) gst_type_find_suggest(arg0:Pointer[GstTypeFind], arg1:guint, arg2:Pointer[GstCaps]) : ;

external (cdecl) gst_type_find_suggest_simple(arg0:Pointer[GstTypeFind], arg1:guint, arg2:Pointer[CChar], arg3:Pointer[CChar], ..) : ;

external (cdecl) gst_type_find_get_length(arg0:Pointer[GstTypeFind]) : guint64;

external (cdecl) gst_type_find_register(arg0:Pointer[GstPlugin], arg1:Pointer[gchar], arg2:guint, arg3:GstTypeFindFunction, arg4:Pointer[Pointer[gchar]], arg5:Pointer[GstCaps], arg6:gpointer, arg7:GDestroyNotify) : gboolean;

alias GstTypeFindFactory = Struct__GstTypeFindFactory;

alias GstTypeFindFactoryClass = Struct__GstTypeFindFactoryClass;

record Struct__GstTypeFindFactory (
    feature : GstPluginFeature,
    function : GstTypeFindFunction,
    extensions : Pointer[Pointer[gchar]],
    caps : Pointer[GstCaps],
    user_data : gpointer,
    user_data_notify : GDestroyNotify,
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstTypeFindFactoryClass (
    parent : GstPluginFeatureClass,
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_type_find_factory_get_type() : GType;

external (cdecl) gst_type_find_factory_get_list() : Pointer[GList];

external (cdecl) gst_type_find_factory_get_extensions(arg0:Pointer[GstTypeFindFactory]) : Pointer[Pointer[gchar]];

external (cdecl) gst_type_find_factory_get_caps(arg0:Pointer[GstTypeFindFactory]) : Pointer[GstCaps];

external (cdecl) gst_type_find_factory_call_function(arg0:Pointer[GstTypeFindFactory], arg1:Pointer[GstTypeFind]) : ;

alias Enum_Unnamed84 = UInt;
alias GST_URI_UNKNOWN = UInt(0);
alias GST_URI_SINK = UInt(1);
alias GST_URI_SRC = UInt(2);

alias GstURIType = UInt;

alias Struct__GstURIHandler = Opaque;

alias GstURIHandler = Struct__GstURIHandler;

alias GstURIHandlerInterface = Struct__GstURIHandlerInterface;

record Struct__GstURIHandlerInterface (
    parent : GTypeInterface,
    new_uri : CCodePointer[[Pointer[GstURIHandler], Pointer[gchar]],[]],
    get_type : CCodePointer[[],[GstURIType]],
    get_protocols : CCodePointer[[],[Pointer[Pointer[gchar]]]],
    get_uri : CCodePointer[[Pointer[GstURIHandler]],[Pointer[gchar]]],
    set_uri : CCodePointer[[Pointer[GstURIHandler], Pointer[gchar]],[gboolean]],
    get_type_full : CCodePointer[[GType],[GstURIType]],
    get_protocols_full : CCodePointer[[GType],[Pointer[Pointer[gchar]]]],
    _gst_reserved : Array[gpointer, 2],
);

external (cdecl) gst_uri_protocol_is_valid(arg0:Pointer[gchar]) : gboolean;

external (cdecl) gst_uri_protocol_is_supported(arg0:GstURIType, arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_uri_is_valid(arg0:Pointer[gchar]) : gboolean;

external (cdecl) gst_uri_get_protocol(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_uri_has_protocol(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_uri_get_location(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_uri_construct(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gst_filename_to_uri(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) gst_element_make_from_uri(arg0:GstURIType, arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[GstElement];

external (cdecl) gst_uri_handler_get_type() : GType;

external (cdecl) gst_uri_handler_get_uri_type(arg0:Pointer[GstURIHandler]) : guint;

external (cdecl) gst_uri_handler_get_protocols(arg0:Pointer[GstURIHandler]) : Pointer[Pointer[gchar]];

external (cdecl) gst_uri_handler_get_uri(arg0:Pointer[GstURIHandler]) : Pointer[gchar];

external (cdecl) gst_uri_handler_set_uri(arg0:Pointer[GstURIHandler], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gst_uri_handler_new_uri(arg0:Pointer[GstURIHandler], arg1:Pointer[gchar]) : ;

external (cdecl) gst_parse_error_quark() : GQuark;

alias Enum_Unnamed85 = UInt;
alias GST_PARSE_ERROR_SYNTAX = UInt(0);
alias GST_PARSE_ERROR_NO_SUCH_ELEMENT = UInt(1);
alias GST_PARSE_ERROR_NO_SUCH_PROPERTY = UInt(2);
alias GST_PARSE_ERROR_LINK = UInt(3);
alias GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY = UInt(4);
alias GST_PARSE_ERROR_EMPTY_BIN = UInt(5);
alias GST_PARSE_ERROR_EMPTY = UInt(6);

alias GstParseError = UInt;

alias Enum_Unnamed86 = UInt;
alias GST_PARSE_FLAG_NONE = UInt(0);
alias GST_PARSE_FLAG_FATAL_ERRORS = UInt(1);

alias GstParseFlags = UInt;

alias Struct__GstParseContext = Opaque;

alias GstParseContext = Struct__GstParseContext;

external (cdecl) gst_parse_context_get_type() : GType;

external (cdecl) gst_parse_context_new() : Pointer[GstParseContext];

external (cdecl) gst_parse_context_get_missing_elements(arg0:Pointer[GstParseContext]) : Pointer[Pointer[gchar]];

external (cdecl) gst_parse_context_free(arg0:Pointer[GstParseContext]) : ;

external (cdecl) gst_parse_launch(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GstElement];

external (cdecl) gst_parse_launchv(arg0:Pointer[Pointer[gchar]], arg1:Pointer[Pointer[GError]]) : Pointer[GstElement];

external (cdecl) gst_parse_launch_full(arg0:Pointer[gchar], arg1:Pointer[GstParseContext], arg2:GstParseFlags, arg3:Pointer[Pointer[GError]]) : Pointer[GstElement];

external (cdecl) gst_parse_launchv_full(arg0:Pointer[Pointer[gchar]], arg1:Pointer[GstParseContext], arg2:GstParseFlags, arg3:Pointer[Pointer[GError]]) : Pointer[GstElement];

external (cdecl) gst_util_set_value_from_string(arg0:Pointer[GValue], arg1:Pointer[gchar]) : ;

external (cdecl) gst_util_set_object_arg(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) gst_util_dump_mem(arg0:Pointer[guchar], arg1:guint) : ;

external (cdecl) gst_util_gdouble_to_guint64(arg0:gdouble) : guint64;

external (cdecl) gst_util_guint64_to_gdouble(arg0:guint64) : gdouble;

external (cdecl) gst_util_uint64_scale(arg0:guint64, arg1:guint64, arg2:guint64) : guint64;

external (cdecl) gst_util_uint64_scale_round(arg0:guint64, arg1:guint64, arg2:guint64) : guint64;

external (cdecl) gst_util_uint64_scale_ceil(arg0:guint64, arg1:guint64, arg2:guint64) : guint64;

external (cdecl) gst_util_uint64_scale_int(arg0:guint64, arg1:gint, arg2:gint) : guint64;

external (cdecl) gst_util_uint64_scale_int_round(arg0:guint64, arg1:gint, arg2:gint) : guint64;

external (cdecl) gst_util_uint64_scale_int_ceil(arg0:guint64, arg1:gint, arg2:gint) : guint64;

external (cdecl) gst_util_seqnum_next() : guint32;

external (cdecl) gst_util_seqnum_compare(arg0:guint32, arg1:guint32) : gint32;

external (cdecl) gst_print_pad_caps(arg0:Pointer[GString], arg1:gint, arg2:Pointer[GstPad]) : ;

external (cdecl) gst_print_element_args(arg0:Pointer[GString], arg1:gint, arg2:Pointer[GstElement]) : ;

external (cdecl) gst_type_register_static_full(arg0:GType, arg1:Pointer[gchar], arg2:guint, arg3:GBaseInitFunc, arg4:GBaseFinalizeFunc, arg5:GClassInitFunc, arg6:GClassFinalizeFunc, arg7:gconstpointer, arg8:guint, arg9:guint16, arg10:GInstanceInitFunc, arg11:Pointer[GTypeValueTable], arg12:GTypeFlags) : GType;

external (cdecl) GFLOAT_SWAP_LE_BE(arg0:gfloat) : gfloat;

external (cdecl) GDOUBLE_SWAP_LE_BE(arg0:gdouble) : gdouble;

external (cdecl) GST_READ_FLOAT_LE(arg0:Pointer[guint8]) : gfloat;

external (cdecl) GST_READ_FLOAT_BE(arg0:Pointer[guint8]) : gfloat;

external (cdecl) GST_READ_DOUBLE_LE(arg0:Pointer[guint8]) : gdouble;

external (cdecl) GST_READ_DOUBLE_BE(arg0:Pointer[guint8]) : gdouble;

external (cdecl) GST_WRITE_FLOAT_LE(arg0:Pointer[guint8], arg1:gfloat) : ;

external (cdecl) GST_WRITE_FLOAT_BE(arg0:Pointer[guint8], arg1:gfloat) : ;

external (cdecl) GST_WRITE_DOUBLE_LE(arg0:Pointer[guint8], arg1:gdouble) : ;

external (cdecl) GST_WRITE_DOUBLE_BE(arg0:Pointer[guint8], arg1:gdouble) : ;

external (cdecl) gst_object_default_error(arg0:Pointer[GstObject], arg1:Pointer[GError], arg2:Pointer[gchar]) : ;

external (cdecl) gst_element_create_all_pads(arg0:Pointer[GstElement]) : ;

external (cdecl) gst_element_get_compatible_pad(arg0:Pointer[GstElement], arg1:Pointer[GstPad], arg2:Pointer[GstCaps]) : Pointer[GstPad];

external (cdecl) gst_element_get_compatible_pad_template(arg0:Pointer[GstElement], arg1:Pointer[GstPadTemplate]) : Pointer[GstPadTemplate];

external (cdecl) gst_element_state_get_name(arg0:GstState) : Pointer[gchar];

external (cdecl) gst_element_state_change_return_get_name(arg0:GstStateChangeReturn) : Pointer[gchar];

external (cdecl) gst_element_link(arg0:Pointer[GstElement], arg1:Pointer[GstElement]) : gboolean;

external (cdecl) gst_element_link_many(arg0:Pointer[GstElement], arg1:Pointer[GstElement], ..) : gboolean;

external (cdecl) gst_element_link_filtered(arg0:Pointer[GstElement], arg1:Pointer[GstElement], arg2:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_unlink(arg0:Pointer[GstElement], arg1:Pointer[GstElement]) : ;

external (cdecl) gst_element_unlink_many(arg0:Pointer[GstElement], arg1:Pointer[GstElement], ..) : ;

external (cdecl) gst_element_link_pads(arg0:Pointer[GstElement], arg1:Pointer[gchar], arg2:Pointer[GstElement], arg3:Pointer[gchar]) : gboolean;

external (cdecl) gst_element_link_pads_full(arg0:Pointer[GstElement], arg1:Pointer[gchar], arg2:Pointer[GstElement], arg3:Pointer[gchar], arg4:GstPadLinkCheck) : gboolean;

external (cdecl) gst_element_unlink_pads(arg0:Pointer[GstElement], arg1:Pointer[gchar], arg2:Pointer[GstElement], arg3:Pointer[gchar]) : ;

external (cdecl) gst_element_link_pads_filtered(arg0:Pointer[GstElement], arg1:Pointer[gchar], arg2:Pointer[GstElement], arg3:Pointer[gchar], arg4:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_seek_simple(arg0:Pointer[GstElement], arg1:GstFormat, arg2:GstSeekFlags, arg3:gint64) : gboolean;

external (cdecl) gst_element_factory_can_src_caps(arg0:Pointer[GstElementFactory], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_factory_can_sink_caps(arg0:Pointer[GstElementFactory], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_factory_can_sink_all_caps(arg0:Pointer[GstElementFactory], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_factory_can_src_all_caps(arg0:Pointer[GstElementFactory], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_factory_can_sink_any_caps(arg0:Pointer[GstElementFactory], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_factory_can_src_any_caps(arg0:Pointer[GstElementFactory], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_element_query_position(arg0:Pointer[GstElement], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_element_query_duration(arg0:Pointer[GstElement], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_element_query_convert(arg0:Pointer[GstElement], arg1:GstFormat, arg2:gint64, arg3:Pointer[GstFormat], arg4:Pointer[gint64]) : gboolean;

external (cdecl) gst_element_class_install_std_props(arg0:Pointer[GstElementClass], arg1:Pointer[gchar], ..) : ;

external (cdecl) gst_pad_use_fixed_caps(arg0:Pointer[GstPad]) : ;

external (cdecl) gst_pad_get_fixed_caps_func(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_proxy_getcaps(arg0:Pointer[GstPad]) : Pointer[GstCaps];

external (cdecl) gst_pad_proxy_setcaps(arg0:Pointer[GstPad], arg1:Pointer[GstCaps]) : gboolean;

external (cdecl) gst_pad_get_parent_element(arg0:Pointer[GstPad]) : Pointer[GstElement];

external (cdecl) gst_pad_query_position(arg0:Pointer[GstPad], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_pad_query_duration(arg0:Pointer[GstPad], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_pad_query_convert(arg0:Pointer[GstPad], arg1:GstFormat, arg2:gint64, arg3:Pointer[GstFormat], arg4:Pointer[gint64]) : gboolean;

external (cdecl) gst_pad_query_peer_position(arg0:Pointer[GstPad], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_pad_query_peer_duration(arg0:Pointer[GstPad], arg1:Pointer[GstFormat], arg2:Pointer[gint64]) : gboolean;

external (cdecl) gst_pad_query_peer_convert(arg0:Pointer[GstPad], arg1:GstFormat, arg2:gint64, arg3:Pointer[GstFormat], arg4:Pointer[gint64]) : gboolean;

external (cdecl) gst_bin_add_many(arg0:Pointer[GstBin], arg1:Pointer[GstElement], ..) : ;

external (cdecl) gst_bin_remove_many(arg0:Pointer[GstBin], arg1:Pointer[GstElement], ..) : ;

external (cdecl) gst_bin_find_unlinked_pad(arg0:Pointer[GstBin], arg1:GstPadDirection) : Pointer[GstPad];

external (cdecl) gst_bin_find_unconnected_pad(arg0:Pointer[GstBin], arg1:GstPadDirection) : Pointer[GstPad];

external (cdecl) gst_buffer_merge(arg0:Pointer[GstBuffer], arg1:Pointer[GstBuffer]) : Pointer[GstBuffer];

external (cdecl) gst_buffer_join(arg0:Pointer[GstBuffer], arg1:Pointer[GstBuffer]) : Pointer[GstBuffer];

external (cdecl) gst_buffer_stamp(arg0:Pointer[GstBuffer], arg1:Pointer[GstBuffer]) : ;

external (cdecl) gst_atomic_int_set(arg0:Pointer[gint], arg1:gint) : ;

external (cdecl) gst_pad_add_data_probe(arg0:Pointer[GstPad], arg1:GCallback, arg2:gpointer) : gulong;

external (cdecl) gst_pad_add_data_probe_full(arg0:Pointer[GstPad], arg1:GCallback, arg2:gpointer, arg3:GDestroyNotify) : gulong;

external (cdecl) gst_pad_remove_data_probe(arg0:Pointer[GstPad], arg1:guint) : ;

external (cdecl) gst_pad_add_event_probe(arg0:Pointer[GstPad], arg1:GCallback, arg2:gpointer) : gulong;

external (cdecl) gst_pad_add_event_probe_full(arg0:Pointer[GstPad], arg1:GCallback, arg2:gpointer, arg3:GDestroyNotify) : gulong;

external (cdecl) gst_pad_remove_event_probe(arg0:Pointer[GstPad], arg1:guint) : ;

external (cdecl) gst_pad_add_buffer_probe(arg0:Pointer[GstPad], arg1:GCallback, arg2:gpointer) : gulong;

external (cdecl) gst_pad_add_buffer_probe_full(arg0:Pointer[GstPad], arg1:GCallback, arg2:gpointer, arg3:GDestroyNotify) : gulong;

external (cdecl) gst_pad_remove_buffer_probe(arg0:Pointer[GstPad], arg1:guint) : ;

external (cdecl) gst_element_found_tags_for_pad(arg0:Pointer[GstElement], arg1:Pointer[GstPad], arg2:Pointer[GstTagList]) : ;

external (cdecl) gst_element_found_tags(arg0:Pointer[GstElement], arg1:Pointer[GstTagList]) : ;

external (cdecl) gst_parse_bin_from_description(arg0:Pointer[gchar], arg1:gboolean, arg2:Pointer[Pointer[GError]]) : Pointer[GstElement];

external (cdecl) gst_parse_bin_from_description_full(arg0:Pointer[gchar], arg1:gboolean, arg2:Pointer[GstParseContext], arg3:GstParseFlags, arg4:Pointer[Pointer[GError]]) : Pointer[GstElement];

external (cdecl) gst_util_get_timestamp() : GstClockTime;

alias Enum_Unnamed87 = UInt;
alias GST_SEARCH_MODE_EXACT = UInt(0);
alias GST_SEARCH_MODE_BEFORE = UInt(1);
alias GST_SEARCH_MODE_AFTER = UInt(2);

alias GstSearchMode = UInt;

external (cdecl) gst_util_array_binary_search(arg0:gpointer, arg1:guint, arg2:gsize, arg3:GCompareDataFunc, arg4:GstSearchMode, arg5:gconstpointer, arg6:gpointer) : gpointer;

external (cdecl) gst_util_greatest_common_divisor(arg0:gint, arg1:gint) : gint;

external (cdecl) gst_util_fraction_to_double(arg0:gint, arg1:gint, arg2:Pointer[gdouble]) : ;

external (cdecl) gst_util_double_to_fraction(arg0:gdouble, arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gst_util_fraction_multiply(arg0:gint, arg1:gint, arg2:gint, arg3:gint, arg4:Pointer[gint], arg5:Pointer[gint]) : gboolean;

external (cdecl) gst_util_fraction_add(arg0:gint, arg1:gint, arg2:gint, arg3:gint, arg4:Pointer[gint], arg5:Pointer[gint]) : gboolean;

external (cdecl) gst_util_fraction_compare(arg0:gint, arg1:gint, arg2:gint, arg3:gint) : gint;

external (cdecl) gst_event_new_sink_message(arg0:Pointer[GstMessage]) : Pointer[GstEvent];

external (cdecl) gst_event_parse_sink_message(arg0:Pointer[GstEvent], arg1:Pointer[Pointer[GstMessage]]) : ;

alias GstXML = Struct__GstXML;

alias GstXMLClass = Struct__GstXMLClass;

record Struct__GstXML (
    object : GstObject,
    topelements : Pointer[GList],
    ns : xmlNsPtr,
    _gst_reserved : Array[gpointer, 4],
);

record Struct__GstXMLClass (
    parent_class : GstObjectClass,
    object_loaded : CCodePointer[[Pointer[GstXML], Pointer[GstObject], xmlNodePtr],[]],
    object_saved : CCodePointer[[Pointer[GstXML], Pointer[GstObject], xmlNodePtr],[]],
    _gst_reserved : Array[gpointer, 4],
);

external (cdecl) gst_xml_get_type() : GType;

external (cdecl) gst_xml_write(arg0:Pointer[GstElement]) : xmlDocPtr;

external (cdecl) gst_xml_write_file(arg0:Pointer[GstElement], arg1:Pointer[FILE]) : gint;

external (cdecl) gst_xml_new() : Pointer[GstXML];

external (cdecl) gst_xml_parse_doc(arg0:Pointer[GstXML], arg1:xmlDocPtr, arg2:Pointer[guchar]) : gboolean;

external (cdecl) gst_xml_parse_file(arg0:Pointer[GstXML], arg1:Pointer[guchar], arg2:Pointer[guchar]) : gboolean;

external (cdecl) gst_xml_parse_memory(arg0:Pointer[GstXML], arg1:Pointer[guchar], arg2:guint, arg3:Pointer[gchar]) : gboolean;

external (cdecl) gst_xml_get_element(arg0:Pointer[GstXML], arg1:Pointer[guchar]) : Pointer[GstElement];

external (cdecl) gst_xml_get_topelements(arg0:Pointer[GstXML]) : Pointer[GList];

external (cdecl) gst_xml_make_element(arg0:xmlNodePtr, arg1:Pointer[GstObject]) : Pointer[GstElement];

external (cdecl) gst_init(arg0:Pointer[Int], arg1:Pointer[Pointer[Pointer[CChar]]]) : ;

external (cdecl) gst_init_check(arg0:Pointer[Int], arg1:Pointer[Pointer[Pointer[CChar]]], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gst_is_initialized() : gboolean;

external (cdecl) gst_init_get_option_group() : Pointer[GOptionGroup];

external (cdecl) gst_deinit() : ;

external (cdecl) gst_version(arg0:Pointer[guint], arg1:Pointer[guint], arg2:Pointer[guint], arg3:Pointer[guint]) : ;

external (cdecl) gst_version_string() : Pointer[gchar];

external (cdecl) gst_segtrap_is_enabled() : gboolean;

external (cdecl) gst_segtrap_set_enabled(arg0:gboolean) : ;

external (cdecl) gst_registry_fork_is_enabled() : gboolean;

external (cdecl) gst_registry_fork_set_enabled(arg0:gboolean) : ;

external (cdecl) gst_update_registry() : gboolean;

