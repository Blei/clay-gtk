// Automatically generated by clay-bindgen
// language: c

import glib.generated.*;
import gobject.generated.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias GString = Struct__GString;

alias GStringChunk = Opaque;

record Struct__GString (
    str : Pointer[CChar],
    len : CULong,
    allocated_len : CULong,
);

external g_string_chunk_new(
    size : CULong) : Pointer[GStringChunk];

external g_string_chunk_free(
    chunk : Pointer[GStringChunk]);

external g_string_chunk_clear(
    chunk : Pointer[GStringChunk]);

external g_string_chunk_insert(
    chunk : Pointer[GStringChunk],
    string : Pointer[CChar]) : Pointer[CChar];

external g_string_chunk_insert_len(
    chunk : Pointer[GStringChunk],
    string : Pointer[CChar],
    len : CLong) : Pointer[CChar];

external g_string_chunk_insert_const(
    chunk : Pointer[GStringChunk],
    string : Pointer[CChar]) : Pointer[CChar];

external g_string_new(
    init : Pointer[CChar]) : Pointer[GString];

external g_string_new_len(
    init : Pointer[CChar],
    len : CLong) : Pointer[GString];

external g_string_sized_new(
    dfl_size : CULong) : Pointer[GString];

external g_string_free(
    string : Pointer[GString],
    free_segment : Int) : Pointer[CChar];

external g_string_equal(
    v : Pointer[GString],
    v2 : Pointer[GString]) : Int;

external g_string_hash(
    str : Pointer[GString]) : UInt;

external g_string_assign(
    string : Pointer[GString],
    rval : Pointer[CChar]) : Pointer[GString];

external g_string_truncate(
    string : Pointer[GString],
    len : CULong) : Pointer[GString];

external g_string_set_size(
    string : Pointer[GString],
    len : CULong) : Pointer[GString];

external g_string_insert_len(
    string : Pointer[GString],
    pos : CLong,
    val : Pointer[CChar],
    len : CLong) : Pointer[GString];

external g_string_append(
    string : Pointer[GString],
    val : Pointer[CChar]) : Pointer[GString];

external g_string_append_len(
    string : Pointer[GString],
    val : Pointer[CChar],
    len : CLong) : Pointer[GString];

external g_string_append_c(
    string : Pointer[GString],
    c : CChar) : Pointer[GString];

external g_string_append_unichar(
    string : Pointer[GString],
    wc : UInt) : Pointer[GString];

external g_string_prepend(
    string : Pointer[GString],
    val : Pointer[CChar]) : Pointer[GString];

external g_string_prepend_c(
    string : Pointer[GString],
    c : CChar) : Pointer[GString];

external g_string_prepend_unichar(
    string : Pointer[GString],
    wc : UInt) : Pointer[GString];

external g_string_prepend_len(
    string : Pointer[GString],
    val : Pointer[CChar],
    len : CLong) : Pointer[GString];

external g_string_insert(
    string : Pointer[GString],
    pos : CLong,
    val : Pointer[CChar]) : Pointer[GString];

external g_string_insert_c(
    string : Pointer[GString],
    pos : CLong,
    c : CChar) : Pointer[GString];

external g_string_insert_unichar(
    string : Pointer[GString],
    pos : CLong,
    wc : UInt) : Pointer[GString];

external g_string_overwrite(
    string : Pointer[GString],
    pos : CULong,
    val : Pointer[CChar]) : Pointer[GString];

external g_string_overwrite_len(
    string : Pointer[GString],
    pos : CULong,
    val : Pointer[CChar],
    len : CLong) : Pointer[GString];

external g_string_erase(
    string : Pointer[GString],
    pos : CLong,
    len : CLong) : Pointer[GString];

external g_string_ascii_down(
    string : Pointer[GString]) : Pointer[GString];

external g_string_ascii_up(
    string : Pointer[GString]) : Pointer[GString];

external g_string_vprintf(
    string : Pointer[GString],
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external g_string_printf(
    string : Pointer[GString],
    format : Pointer[CChar],
    ..);

external g_string_append_vprintf(
    string : Pointer[GString],
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external g_string_append_printf(
    string : Pointer[GString],
    format : Pointer[CChar],
    ..);

external g_string_append_uri_escaped(
    string : Pointer[GString],
    unescaped : Pointer[CChar],
    reserved_chars_allowed : Pointer[CChar],
    allow_utf8 : Int) : Pointer[GString];

external g_string_down(
    string : Pointer[GString]) : Pointer[GString];

external g_string_up(
    string : Pointer[GString]) : Pointer[GString];

alias G_ASCII_ALNUM = 1;
alias G_ASCII_ALPHA = 2;
alias G_ASCII_CNTRL = 4;
alias G_ASCII_DIGIT = 8;
alias G_ASCII_GRAPH = 16;
alias G_ASCII_LOWER = 32;
alias G_ASCII_PRINT = 64;
alias G_ASCII_PUNCT = 128;
alias G_ASCII_SPACE = 256;
alias G_ASCII_UPPER = 512;
alias G_ASCII_XDIGIT = 1024;

alias GAsciiType = Int;

external g_ascii_table : Pointer[UShort];

external g_ascii_tolower(
    c : CChar) : CChar;

external g_ascii_toupper(
    c : CChar) : CChar;

external g_ascii_digit_value(
    c : CChar) : Int;

external g_ascii_xdigit_value(
    c : CChar) : Int;

external g_strdelimit(
    string : Pointer[CChar],
    delimiters : Pointer[CChar],
    new_delimiter : CChar) : Pointer[CChar];

external g_strcanon(
    string : Pointer[CChar],
    valid_chars : Pointer[CChar],
    substitutor : CChar) : Pointer[CChar];

external g_strerror(
    errnum : Int) : Pointer[CChar];

external g_strsignal(
    signum : Int) : Pointer[CChar];

external g_strreverse(
    string : Pointer[CChar]) : Pointer[CChar];

external g_strlcpy(
    dest : Pointer[CChar],
    src : Pointer[CChar],
    dest_size : CULong) : CULong;

external g_strlcat(
    dest : Pointer[CChar],
    src : Pointer[CChar],
    dest_size : CULong) : CULong;

external g_strstr_len(
    haystack : Pointer[CChar],
    haystack_len : CLong,
    needle : Pointer[CChar]) : Pointer[CChar];

external g_strrstr(
    haystack : Pointer[CChar],
    needle : Pointer[CChar]) : Pointer[CChar];

external g_strrstr_len(
    haystack : Pointer[CChar],
    haystack_len : CLong,
    needle : Pointer[CChar]) : Pointer[CChar];

external g_str_has_suffix(
    str : Pointer[CChar],
    suffix : Pointer[CChar]) : Int;

external g_str_has_prefix(
    str : Pointer[CChar],
    prefix : Pointer[CChar]) : Int;

external g_strtod(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]]) : Double;

external g_ascii_strtod(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]]) : Double;

external g_ascii_strtoull(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    base : UInt) : CULong;

external g_ascii_strtoll(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    base : UInt) : CLong;

external g_ascii_dtostr(
    buffer : Pointer[CChar],
    buf_len : Int,
    d : Double) : Pointer[CChar];

external g_ascii_formatd(
    buffer : Pointer[CChar],
    buf_len : Int,
    format : Pointer[CChar],
    d : Double) : Pointer[CChar];

external g_strchug(
    string : Pointer[CChar]) : Pointer[CChar];

external g_strchomp(
    string : Pointer[CChar]) : Pointer[CChar];

external g_ascii_strcasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar]) : Int;

external g_ascii_strncasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar],
    n : CULong) : Int;

external g_ascii_strdown(
    str : Pointer[CChar],
    len : CLong) : Pointer[CChar];

external g_ascii_strup(
    str : Pointer[CChar],
    len : CLong) : Pointer[CChar];

external g_strcasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar]) : Int;

external g_strncasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar],
    n : UInt) : Int;

external g_strdown(
    string : Pointer[CChar]) : Pointer[CChar];

external g_strup(
    string : Pointer[CChar]) : Pointer[CChar];

external g_strdup(
    str : Pointer[CChar]) : Pointer[CChar];

external g_strdup_printf(
    format : Pointer[CChar],
    ..) : Pointer[CChar];

external g_strdup_vprintf(
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]) : Pointer[CChar];

external g_strndup(
    str : Pointer[CChar],
    n : CULong) : Pointer[CChar];

external g_strnfill(
    length : CULong,
    fill_char : CChar) : Pointer[CChar];

external g_strconcat(
    string1 : Pointer[CChar],
    ..) : Pointer[CChar];

external g_strjoin(
    separator : Pointer[CChar],
    ..) : Pointer[CChar];

external g_strcompress(
    source : Pointer[CChar]) : Pointer[CChar];

external g_strescape(
    source : Pointer[CChar],
    exceptions : Pointer[CChar]) : Pointer[CChar];

external g_memdup(
    mem : gconstpointer,
    byte_size : UInt) : gpointer;

external g_strsplit(
    string : Pointer[CChar],
    delimiter : Pointer[CChar],
    max_tokens : Int) : Pointer[Pointer[CChar]];

external g_strsplit_set(
    string : Pointer[CChar],
    delimiters : Pointer[CChar],
    max_tokens : Int) : Pointer[Pointer[CChar]];

external g_strjoinv(
    separator : Pointer[CChar],
    str_array : Pointer[Pointer[CChar]]) : Pointer[CChar];

external g_strfreev(
    str_array : Pointer[Pointer[CChar]]);

external g_strdupv(
    str_array : Pointer[Pointer[CChar]]) : Pointer[Pointer[CChar]];

external g_strv_length(
    str_array : Pointer[Pointer[CChar]]) : UInt;

external g_stpcpy(
    dest : Pointer[CChar],
    src : Pointer[CChar]) : Pointer[CChar];

external g_strip_context(
    msgid : Pointer[CChar],
    msgval : Pointer[CChar]) : Pointer[CChar];

external g_dgettext(
    domain : Pointer[CChar],
    msgid : Pointer[CChar]) : Pointer[CChar];

external g_dcgettext(
    domain : Pointer[CChar],
    msgid : Pointer[CChar],
    category : Int) : Pointer[CChar];

external g_dngettext(
    domain : Pointer[CChar],
    msgid : Pointer[CChar],
    msgid_plural : Pointer[CChar],
    n : CULong) : Pointer[CChar];

external g_dpgettext(
    domain : Pointer[CChar],
    msgctxtid : Pointer[CChar],
    msgidoffset : CULong) : Pointer[CChar];

external g_dpgettext2(
    domain : Pointer[CChar],
    context : Pointer[CChar],
    msgid : Pointer[CChar]) : Pointer[CChar];

external gst_object_flags_get_type() : CULong;

external gst_bin_flags_get_type() : CULong;

external gst_buffer_flag_get_type() : CULong;

external gst_buffer_copy_flags_get_type() : CULong;

external gst_buffer_list_item_get_type() : CULong;

external gst_bus_flags_get_type() : CULong;

external gst_bus_sync_reply_get_type() : CULong;

external gst_caps_flags_get_type() : CULong;

external gst_clock_return_get_type() : CULong;

external gst_clock_entry_type_get_type() : CULong;

external gst_clock_flags_get_type() : CULong;

external gst_debug_graph_details_get_type() : CULong;

external gst_state_get_type() : CULong;

external gst_state_change_return_get_type() : CULong;

external gst_state_change_get_type() : CULong;

external gst_element_flags_get_type() : CULong;

external gst_core_error_get_type() : CULong;

external gst_library_error_get_type() : CULong;

external gst_resource_error_get_type() : CULong;

external gst_stream_error_get_type() : CULong;

external gst_event_type_flags_get_type() : CULong;

external gst_event_type_get_type() : CULong;

external gst_seek_type_get_type() : CULong;

external gst_seek_flags_get_type() : CULong;

external gst_format_get_type() : CULong;

external gst_index_certainty_get_type() : CULong;

external gst_index_entry_type_get_type() : CULong;

external gst_index_lookup_method_get_type() : CULong;

external gst_assoc_flags_get_type() : CULong;

external gst_index_resolver_method_get_type() : CULong;

external gst_index_flags_get_type() : CULong;

external gst_debug_level_get_type() : CULong;

external gst_debug_color_flags_get_type() : CULong;

external gst_iterator_result_get_type() : CULong;

external gst_iterator_item_get_type() : CULong;

external gst_message_type_get_type() : CULong;

external gst_structure_change_type_get_type() : CULong;

external gst_stream_status_type_get_type() : CULong;

external gst_mini_object_flags_get_type() : CULong;

external gst_pad_link_return_get_type() : CULong;

external gst_flow_return_get_type() : CULong;

external gst_pad_link_check_get_type() : CULong;

external gst_activate_mode_get_type() : CULong;

external gst_pad_direction_get_type() : CULong;

external gst_pad_flags_get_type() : CULong;

external gst_pad_presence_get_type() : CULong;

external gst_pad_template_flags_get_type() : CULong;

external gst_pipeline_flags_get_type() : CULong;

external gst_plugin_error_get_type() : CULong;

external gst_plugin_flags_get_type() : CULong;

external gst_plugin_dependency_flags_get_type() : CULong;

external gst_rank_get_type() : CULong;

external gst_query_type_get_type() : CULong;

external gst_buffering_mode_get_type() : CULong;

external gst_clock_type_get_type() : CULong;

external gst_tag_merge_mode_get_type() : CULong;

external gst_tag_flag_get_type() : CULong;

external gst_task_state_get_type() : CULong;

external gst_alloc_trace_flags_get_type() : CULong;

external gst_type_find_probability_get_type() : CULong;

external gst_uri_type_get_type() : CULong;

external gst_search_mode_get_type() : CULong;

external gst_parse_error_get_type() : CULong;

external gst_parse_flags_get_type() : CULong;

alias GstElement = Struct__GstElement;

alias GstElementClass = Struct__GstElementClass;

alias GST_STATE_VOID_PENDING = 0;
alias GST_STATE_NULL = 1;
alias GST_STATE_READY = 2;
alias GST_STATE_PAUSED = 3;
alias GST_STATE_PLAYING = 4;

alias GstState = Int;

alias GST_OBJECT_DISPOSING = 1;
alias GST_OBJECT_FLOATING = 2;
alias GST_OBJECT_FLAG_LAST = 16;

alias GstObjectFlags = Int;

alias GstObject = Struct__GstObject;

alias GstObjectClass = Struct__GstObjectClass;

record Struct__GstObject (
    object : GObject,
    refcount : Int,
    lock : Pointer[GMutex],
    name : Pointer[CChar],
    name_prefix : Pointer[CChar],
    parent : Pointer[GstObject],
    flags : UInt,
    _gst_reserved : gpointer,
);

record Struct__GstObjectClass (
    parent_class : GObjectClass,
    path_string_separator : Pointer[CChar],
    signal_object : Pointer[GObject],
    lock : Pointer[GStaticRecMutex],
    parent_set : CCodePointer[[Pointer[Struct__GstObject],Pointer[Struct__GstObject]],[]],
    parent_unset : CCodePointer[[Pointer[Struct__GstObject],Pointer[Struct__GstObject]],[]],
    object_saved : CCodePointer[[Pointer[Struct__GstObject],Pointer[Struct__xmlNode]],[]],
    deep_notify : CCodePointer[[Pointer[Struct__GstObject],Pointer[Struct__GstObject],Pointer[Struct__GParamSpec]],[]],
    save_thyself : CCodePointer[[Pointer[Struct__GstObject],Pointer[Struct__xmlNode]],[Pointer[Struct__xmlNode]]],
    restore_thyself : CCodePointer[[Pointer[Struct__GstObject],Pointer[Struct__xmlNode]],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_object_get_type() : CULong;

external gst_object_set_name(
    object : Pointer[GstObject],
    name : Pointer[CChar]) : Int;

external gst_object_get_name(
    object : Pointer[GstObject]) : Pointer[CChar];

external gst_object_set_name_prefix(
    object : Pointer[GstObject],
    name_prefix : Pointer[CChar]);

external gst_object_get_name_prefix(
    object : Pointer[GstObject]) : Pointer[CChar];

external gst_object_set_parent(
    object : Pointer[GstObject],
    parent : Pointer[GstObject]) : Int;

external gst_object_get_parent(
    object : Pointer[GstObject]) : Pointer[GstObject];

external gst_object_unparent(
    object : Pointer[GstObject]);

external gst_object_has_ancestor(
    object : Pointer[GstObject],
    ancestor : Pointer[GstObject]) : Int;

external gst_object_default_deep_notify(
    object : Pointer[GObject],
    orig : Pointer[GstObject],
    pspec : Pointer[GParamSpec],
    excluded_props : Pointer[Pointer[CChar]]);

external gst_object_ref(
    object : gpointer) : gpointer;

external gst_object_unref(
    object : gpointer);

external gst_object_ref_sink(
    object : gpointer);

external gst_object_sink(
    object : gpointer);

external gst_object_replace(
    oldobj : Pointer[Pointer[GstObject]],
    newobj : Pointer[GstObject]);

external gst_object_get_path_string(
    object : Pointer[GstObject]) : Pointer[CChar];

external gst_object_check_uniqueness(
    list : Pointer[GList],
    name : Pointer[CChar]) : Int;

external gst_object_save_thyself(
    object : Pointer[GstObject],
    parent : xmlNodePtr) : xmlNodePtr;

external gst_object_restore_thyself(
    object : Pointer[GstObject],
    self : xmlNodePtr);

external gst_class_signal_connect(
    klass : Pointer[GstObjectClass],
    name : Pointer[CChar],
    func : gpointer,
    func_data : gpointer) : UInt;

external gst_class_signal_emit_by_name(
    object : Pointer[GstObject],
    name : Pointer[CChar],
    self : xmlNodePtr);

alias GstMiniObject = Struct__GstMiniObject;

alias GstMiniObjectClass = Struct__GstMiniObjectClass;

alias GstMiniObjectCopyFunction = CCodePointer[[Pointer[Struct__GstMiniObject]],[Pointer[Struct__GstMiniObject]]];

alias GstMiniObjectFinalizeFunction = CCodePointer[[Pointer[Struct__GstMiniObject]],[]];

alias GST_MINI_OBJECT_FLAG_READONLY = 1;
alias GST_MINI_OBJECT_FLAG_LAST = 16;

alias GstMiniObjectFlags = Int;

record Struct__GstMiniObject (
    instance_ : GTypeInstance,
    refcount : Int,
    flags : UInt,
    _gst_reserved : gpointer,
);

record Struct__GstMiniObjectClass (
    type_class : GTypeClass,
    copy : GstMiniObjectCopyFunction,
    finalize : GstMiniObjectFinalizeFunction,
    _gst_reserved : gpointer,
);

external gst_mini_object_get_type() : CULong;

external gst_mini_object_new(
    type : CULong) : Pointer[GstMiniObject];

external gst_mini_object_copy(
    mini_object : Pointer[GstMiniObject]) : Pointer[GstMiniObject];

external gst_mini_object_is_writable(
    mini_object : Pointer[GstMiniObject]) : Int;

external gst_mini_object_make_writable(
    mini_object : Pointer[GstMiniObject]) : Pointer[GstMiniObject];

external gst_mini_object_ref(
    mini_object : Pointer[GstMiniObject]) : Pointer[GstMiniObject];

external gst_mini_object_unref(
    mini_object : Pointer[GstMiniObject]);

external gst_mini_object_replace(
    olddata : Pointer[Pointer[GstMiniObject]],
    newdata : Pointer[GstMiniObject]);

alias GstParamSpecMiniObject = Struct__GstParamSpecMiniObject;

record Struct__GstParamSpecMiniObject (
    parent_instance : GParamSpec,
);

external gst_param_spec_mini_object_get_type() : CULong;

external gst_param_spec_mini_object(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    object_type : CULong,
    flags : GParamFlags) : Pointer[GParamSpec];

external gst_value_set_mini_object(
    value : Pointer[GValue],
    mini_object : Pointer[GstMiniObject]);

external gst_value_take_mini_object(
    value : Pointer[GValue],
    mini_object : Pointer[GstMiniObject]);

external gst_value_get_mini_object(
    value : Pointer[GValue]) : Pointer[GstMiniObject];

external gst_value_dup_mini_object(
    value : Pointer[GValue]) : Pointer[GstMiniObject];

alias GstClockTime = CULong;

alias GstClockTimeDiff = CLong;

alias GstClockID = gpointer;

alias GstClockEntry = Struct__GstClockEntry;

alias GstClock = Struct__GstClock;

alias GstClockClass = Struct__GstClockClass;

alias GstClockPrivate = Opaque;

alias GstClockCallback = CCodePointer[[Pointer[Struct__GstClock],CULong,RawPointer,RawPointer],[Int]];

alias GST_CLOCK_OK = 0;
alias GST_CLOCK_EARLY = 1;
alias GST_CLOCK_UNSCHEDULED = 2;
alias GST_CLOCK_BUSY = 3;
alias GST_CLOCK_BADTIME = 4;
alias GST_CLOCK_ERROR = 5;
alias GST_CLOCK_UNSUPPORTED = 6;
alias GST_CLOCK_DONE = 7;

alias GstClockReturn = Int;

alias GST_CLOCK_ENTRY_SINGLE = 0;
alias GST_CLOCK_ENTRY_PERIODIC = 1;

alias GstClockEntryType = Int;

record Struct__GstClockEntry (
    refcount : Int,
    clock : Pointer[GstClock],
    type : GstClockEntryType,
    time : CULong,
    interval : CULong,
    status : GstClockReturn,
    func : GstClockCallback,
    user_data : gpointer,
    destroy_data : GDestroyNotify,
    unscheduled : Int,
    woken_up : Int,
);

alias GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC = 16;
alias GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC = 32;
alias GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC = 64;
alias GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC = 128;
alias GST_CLOCK_FLAG_CAN_SET_RESOLUTION = 256;
alias GST_CLOCK_FLAG_CAN_SET_MASTER = 512;
alias GST_CLOCK_FLAG_LAST = 4096;

alias GstClockFlags = Int;

record Struct__GstClock (
    object : GstObject,
    slave_lock : Pointer[GMutex],
    internal_calibration : CULong,
    external_calibration : CULong,
    rate_numerator : CULong,
    rate_denominator : CULong,
    last_time : CULong,
    entries : Pointer[GList],
    entries_changed : Pointer[GCond],
    resolution : CULong,
    stats : Int,
    master : Pointer[GstClock],
    filling : Int,
    window_size : Int,
    window_threshold : Int,
    time_index : Int,
    timeout : CULong,
    times : Pointer[CULong],
    clockid : GstClockID,
    ABI : AUnionType,
);

record Struct__GstClockClass (
    parent_class : GstObjectClass,
    change_resolution : CCodePointer[[Pointer[Struct__GstClock],CULong,CULong],[CULong]],
    get_resolution : CCodePointer[[Pointer[Struct__GstClock]],[CULong]],
    get_internal_time : CCodePointer[[Pointer[Struct__GstClock]],[CULong]],
    wait : CCodePointer[[Pointer[Struct__GstClock],Pointer[Struct__GstClockEntry]],[Int]],
    wait_async : CCodePointer[[Pointer[Struct__GstClock],Pointer[Struct__GstClockEntry]],[Int]],
    unschedule : CCodePointer[[Pointer[Struct__GstClock],Pointer[Struct__GstClockEntry]],[]],
    wait_jitter : CCodePointer[[Pointer[Struct__GstClock],Pointer[Struct__GstClockEntry],Pointer[CLong]],[Int]],
    _gst_reserved : Array[gpointer,3],
);

external gst_clock_get_type() : CULong;

external gst_clock_set_resolution(
    clock : Pointer[GstClock],
    resolution : CULong) : CULong;

external gst_clock_get_resolution(
    clock : Pointer[GstClock]) : CULong;

external gst_clock_get_time(
    clock : Pointer[GstClock]) : CULong;

external gst_clock_set_calibration(
    clock : Pointer[GstClock],
    internal : CULong,
    external_ : CULong,
    rate_num : CULong,
    rate_denom : CULong);

external gst_clock_get_calibration(
    clock : Pointer[GstClock],
    internal : Pointer[CULong],
    external_ : Pointer[CULong],
    rate_num : Pointer[CULong],
    rate_denom : Pointer[CULong]);

external gst_clock_set_master(
    clock : Pointer[GstClock],
    master : Pointer[GstClock]) : Int;

external gst_clock_get_master(
    clock : Pointer[GstClock]) : Pointer[GstClock];

external gst_clock_add_observation(
    clock : Pointer[GstClock],
    slave : CULong,
    master : CULong,
    r_squared : Pointer[Double]) : Int;

external gst_clock_get_internal_time(
    clock : Pointer[GstClock]) : CULong;

external gst_clock_adjust_unlocked(
    clock : Pointer[GstClock],
    internal : CULong) : CULong;

external gst_clock_unadjust_unlocked(
    clock : Pointer[GstClock],
    external_ : CULong) : CULong;

external gst_clock_new_single_shot_id(
    clock : Pointer[GstClock],
    time : CULong) : GstClockID;

external gst_clock_new_periodic_id(
    clock : Pointer[GstClock],
    start_time : CULong,
    interval : CULong) : GstClockID;

external gst_clock_id_ref(
    id : GstClockID) : GstClockID;

external gst_clock_id_unref(
    id : GstClockID);

external gst_clock_id_compare_func(
    id1 : gconstpointer,
    id2 : gconstpointer) : Int;

external gst_clock_id_get_time(
    id : GstClockID) : CULong;

external gst_clock_id_wait(
    id : GstClockID,
    jitter : Pointer[CLong]) : GstClockReturn;

external gst_clock_id_wait_async(
    id : GstClockID,
    func : GstClockCallback,
    user_data : gpointer) : GstClockReturn;

external gst_clock_id_wait_async_full(
    id : GstClockID,
    func : GstClockCallback,
    user_data : gpointer,
    destroy_data : GDestroyNotify) : GstClockReturn;

external gst_clock_id_unschedule(
    id : GstClockID);

external gst_clock_single_shot_id_reinit(
    clock : Pointer[GstClock],
    id : GstClockID,
    time : CULong) : Int;

alias GstDateTime = Opaque;

external gst_date_time_get_year(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_month(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_day(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_hour(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_minute(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_second(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_microsecond(
    datetime : Pointer[GstDateTime]) : Int;

external gst_date_time_get_time_zone_offset(
    datetime : Pointer[GstDateTime]) : Float;

external gst_date_time_new_from_unix_epoch_local_time(
    secs : CLong) : Pointer[GstDateTime];

external gst_date_time_new_from_unix_epoch_utc(
    secs : CLong) : Pointer[GstDateTime];

external gst_date_time_new_local_time(
    year : Int,
    month : Int,
    day : Int,
    hour : Int,
    minute : Int,
    seconds : Double) : Pointer[GstDateTime];

external gst_date_time_new(
    tzoffset : Float,
    year : Int,
    month : Int,
    day : Int,
    hour : Int,
    minute : Int,
    seconds : Double) : Pointer[GstDateTime];

external gst_date_time_new_now_local_time() : Pointer[GstDateTime];

external gst_date_time_new_now_utc() : Pointer[GstDateTime];

external gst_date_time_ref(
    datetime : Pointer[GstDateTime]) : Pointer[GstDateTime];

external gst_date_time_unref(
    datetime : Pointer[GstDateTime]);

alias GstStructure = Struct__GstStructure;

alias GstStructureForeachFunc = CCodePointer[[UInt,Pointer[Struct__GValue],RawPointer],[Int]];

alias GstStructureMapFunc = CCodePointer[[UInt,Pointer[Struct__GValue],RawPointer],[Int]];

record Struct__GstStructure (
    type : CULong,
    name : UInt,
    parent_refcount : Pointer[Int],
    fields : Pointer[GArray],
    _gst_reserved : gpointer,
);

external gst_structure_get_type() : CULong;

external gst_structure_empty_new(
    name : Pointer[CChar]) : Pointer[GstStructure];

external gst_structure_id_empty_new(
    quark : UInt) : Pointer[GstStructure];

external gst_structure_new(
    name : Pointer[CChar],
    firstfield : Pointer[CChar],
    ..) : Pointer[GstStructure];

external gst_structure_new_valist(
    name : Pointer[CChar],
    firstfield : Pointer[CChar],
    varargs : Pointer[__va_list_tag]) : Pointer[GstStructure];

external gst_structure_id_new(
    name_quark : UInt,
    field_quark : UInt,
    ..) : Pointer[GstStructure];

external gst_structure_copy(
    structure : Pointer[GstStructure]) : Pointer[GstStructure];

external gst_structure_set_parent_refcount(
    structure : Pointer[GstStructure],
    refcount : Pointer[Int]);

external gst_structure_free(
    structure : Pointer[GstStructure]);

external gst_structure_get_name(
    structure : Pointer[GstStructure]) : Pointer[CChar];

external gst_structure_get_name_id(
    structure : Pointer[GstStructure]) : UInt;

external gst_structure_has_name(
    structure : Pointer[GstStructure],
    name : Pointer[CChar]) : Int;

external gst_structure_set_name(
    structure : Pointer[GstStructure],
    name : Pointer[CChar]);

external gst_structure_id_set_value(
    structure : Pointer[GstStructure],
    field : UInt,
    value : Pointer[GValue]);

external gst_structure_set_value(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[GValue]);

external gst_structure_id_take_value(
    structure : Pointer[GstStructure],
    field : UInt,
    value : Pointer[GValue]);

external gst_structure_take_value(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[GValue]);

external gst_structure_set(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    ..);

external gst_structure_set_valist(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    varargs : Pointer[__va_list_tag]);

external gst_structure_id_set(
    structure : Pointer[GstStructure],
    fieldname : UInt,
    ..);

external gst_structure_id_set_valist(
    structure : Pointer[GstStructure],
    fieldname : UInt,
    varargs : Pointer[__va_list_tag]);

external gst_structure_get_valist(
    structure : Pointer[GstStructure],
    first_fieldname : Pointer[CChar],
    args : Pointer[__va_list_tag]) : Int;

external gst_structure_get(
    structure : Pointer[GstStructure],
    first_fieldname : Pointer[CChar],
    ..) : Int;

external gst_structure_id_get_valist(
    structure : Pointer[GstStructure],
    first_field_id : UInt,
    args : Pointer[__va_list_tag]) : Int;

external gst_structure_id_get(
    structure : Pointer[GstStructure],
    first_field_id : UInt,
    ..) : Int;

external gst_structure_id_get_value(
    structure : Pointer[GstStructure],
    field : UInt) : Pointer[GValue];

external gst_structure_get_value(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar]) : Pointer[GValue];

external gst_structure_remove_field(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar]);

external gst_structure_remove_fields(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    ..);

external gst_structure_remove_fields_valist(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    varargs : Pointer[__va_list_tag]);

external gst_structure_remove_all_fields(
    structure : Pointer[GstStructure]);

external gst_structure_get_field_type(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar]) : CULong;

external gst_structure_foreach(
    structure : Pointer[GstStructure],
    func : GstStructureForeachFunc,
    user_data : gpointer) : Int;

external gst_structure_map_in_place(
    structure : Pointer[GstStructure],
    func : GstStructureMapFunc,
    user_data : gpointer) : Int;

external gst_structure_n_fields(
    structure : Pointer[GstStructure]) : Int;

external gst_structure_nth_field_name(
    structure : Pointer[GstStructure],
    index : UInt) : Pointer[CChar];

external gst_structure_id_has_field(
    structure : Pointer[GstStructure],
    field : UInt) : Int;

external gst_structure_id_has_field_typed(
    structure : Pointer[GstStructure],
    field : UInt,
    type : CULong) : Int;

external gst_structure_has_field(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar]) : Int;

external gst_structure_has_field_typed(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    type : CULong) : Int;

external gst_structure_get_boolean(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[Int]) : Int;

external gst_structure_get_int(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[Int]) : Int;

external gst_structure_get_uint(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[UInt]) : Int;

external gst_structure_get_fourcc(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[UInt]) : Int;

external gst_structure_get_double(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[Double]) : Int;

external gst_structure_get_date(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[Pointer[GDate]]) : Int;

external gst_structure_get_date_time(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[Pointer[GstDateTime]]) : Int;

external gst_structure_get_clock_time(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value : Pointer[CULong]) : Int;

external gst_structure_get_string(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar]) : Pointer[CChar];

external gst_structure_get_enum(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    enumtype : CULong,
    value : Pointer[Int]) : Int;

external gst_structure_get_fraction(
    structure : Pointer[GstStructure],
    fieldname : Pointer[CChar],
    value_numerator : Pointer[Int],
    value_denominator : Pointer[Int]) : Int;

external gst_structure_to_string(
    structure : Pointer[GstStructure]) : Pointer[CChar];

external gst_structure_from_string(
    string : Pointer[CChar],
    end : Pointer[Pointer[CChar]]) : Pointer[GstStructure];

external gst_structure_fixate_field_nearest_int(
    structure : Pointer[GstStructure],
    field_name : Pointer[CChar],
    target : Int) : Int;

external gst_structure_fixate_field_nearest_double(
    structure : Pointer[GstStructure],
    field_name : Pointer[CChar],
    target : Double) : Int;

external gst_structure_fixate_field_boolean(
    structure : Pointer[GstStructure],
    field_name : Pointer[CChar],
    target : Int) : Int;

external gst_structure_fixate_field_string(
    structure : Pointer[GstStructure],
    field_name : Pointer[CChar],
    target : Pointer[CChar]) : Int;

external gst_structure_fixate_field_nearest_fraction(
    structure : Pointer[GstStructure],
    field_name : Pointer[CChar],
    target_numerator : Int,
    target_denominator : Int) : Int;

alias GST_CAPS_FLAGS_ANY = 1;

alias GstCapsFlags = Int;

alias GstCaps = Struct__GstCaps;

alias GstStaticCaps = Struct__GstStaticCaps;

record Struct__GstCaps (
    type : CULong,
    refcount : Int,
    flags : GstCapsFlags,
    structs : Pointer[GPtrArray],
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstStaticCaps (
    caps : GstCaps,
    string : Pointer[CChar],
    _gst_reserved : Array[gpointer,4],
);

external gst_caps_get_type() : CULong;

external gst_caps_new_empty() : Pointer[GstCaps];

external gst_caps_new_any() : Pointer[GstCaps];

external gst_caps_new_simple(
    media_type : Pointer[CChar],
    fieldname : Pointer[CChar],
    ..) : Pointer[GstCaps];

external gst_caps_new_full(
    struct1 : Pointer[GstStructure],
    ..) : Pointer[GstCaps];

external gst_caps_new_full_valist(
    structure : Pointer[GstStructure],
    var_args : Pointer[__va_list_tag]) : Pointer[GstCaps];

external gst_caps_ref(
    caps : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_copy(
    caps : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_make_writable(
    caps : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_unref(
    caps : Pointer[GstCaps]);

external gst_static_caps_get_type() : CULong;

external gst_static_caps_get(
    static_caps : Pointer[GstStaticCaps]) : Pointer[GstCaps];

external gst_caps_append(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]);

external gst_caps_merge(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]);

external gst_caps_append_structure(
    caps : Pointer[GstCaps],
    structure : Pointer[GstStructure]);

external gst_caps_remove_structure(
    caps : Pointer[GstCaps],
    idx : UInt);

external gst_caps_merge_structure(
    caps : Pointer[GstCaps],
    structure : Pointer[GstStructure]);

external gst_caps_get_size(
    caps : Pointer[GstCaps]) : UInt;

external gst_caps_get_structure(
    caps : Pointer[GstCaps],
    index : UInt) : Pointer[GstStructure];

external gst_caps_steal_structure(
    caps : Pointer[GstCaps],
    index : UInt) : Pointer[GstStructure];

external gst_caps_copy_nth(
    caps : Pointer[GstCaps],
    nth : UInt) : Pointer[GstCaps];

external gst_caps_truncate(
    caps : Pointer[GstCaps]);

external gst_caps_set_value(
    caps : Pointer[GstCaps],
    field : Pointer[CChar],
    value : Pointer[GValue]);

external gst_caps_set_simple(
    caps : Pointer[GstCaps],
    field : Pointer[CChar],
    ..);

external gst_caps_set_simple_valist(
    caps : Pointer[GstCaps],
    field : Pointer[CChar],
    varargs : Pointer[__va_list_tag]);

external gst_caps_is_any(
    caps : Pointer[GstCaps]) : Int;

external gst_caps_is_empty(
    caps : Pointer[GstCaps]) : Int;

external gst_caps_is_fixed(
    caps : Pointer[GstCaps]) : Int;

external gst_caps_is_always_compatible(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]) : Int;

external gst_caps_is_subset(
    subset : Pointer[GstCaps],
    superset : Pointer[GstCaps]) : Int;

external gst_caps_is_equal(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]) : Int;

external gst_caps_is_equal_fixed(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]) : Int;

external gst_caps_can_intersect(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]) : Int;

external gst_caps_intersect(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_subtract(
    minuend : Pointer[GstCaps],
    subtrahend : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_union(
    caps1 : Pointer[GstCaps],
    caps2 : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_normalize(
    caps : Pointer[GstCaps]) : Pointer[GstCaps];

external gst_caps_do_simplify(
    caps : Pointer[GstCaps]) : Int;

external gst_caps_save_thyself(
    caps : Pointer[GstCaps],
    parent : xmlNodePtr) : xmlNodePtr;

external gst_caps_load_thyself(
    parent : xmlNodePtr) : Pointer[GstCaps];

external gst_caps_replace(
    caps : Pointer[Pointer[GstCaps]],
    newcaps : Pointer[GstCaps]);

external gst_caps_to_string(
    caps : Pointer[GstCaps]) : Pointer[CChar];

external gst_caps_from_string(
    string : Pointer[CChar]) : Pointer[GstCaps];

alias GstBuffer = Struct__GstBuffer;

alias GstBufferClass = Struct__GstBufferClass;

alias GST_BUFFER_FLAG_READONLY = 1;
alias GST_BUFFER_FLAG_PREROLL = 16;
alias GST_BUFFER_FLAG_DISCONT = 32;
alias GST_BUFFER_FLAG_IN_CAPS = 64;
alias GST_BUFFER_FLAG_GAP = 128;
alias GST_BUFFER_FLAG_DELTA_UNIT = 256;
alias GST_BUFFER_FLAG_MEDIA1 = 512;
alias GST_BUFFER_FLAG_MEDIA2 = 1024;
alias GST_BUFFER_FLAG_MEDIA3 = 2048;
alias GST_BUFFER_FLAG_LAST = 4096;

alias GstBufferFlag = Int;

record Struct__GstBuffer (
    mini_object : GstMiniObject,
    data : Pointer[CUChar],
    size : UInt,
    timestamp : CULong,
    duration : CULong,
    caps : Pointer[GstCaps],
    offset : CULong,
    offset_end : CULong,
    malloc_data : Pointer[CUChar],
    free_func : GFreeFunc,
    parent : Pointer[GstBuffer],
    _gst_reserved : Array[gpointer,2],
);

record Struct__GstBufferClass (
    mini_object_class : GstMiniObjectClass,
);

external gst_buffer_get_type() : CULong;

external gst_buffer_new() : Pointer[GstBuffer];

external gst_buffer_new_and_alloc(
    size : UInt) : Pointer[GstBuffer];

external gst_buffer_try_new_and_alloc(
    size : UInt) : Pointer[GstBuffer];

alias GST_BUFFER_COPY_FLAGS = 1;
alias GST_BUFFER_COPY_TIMESTAMPS = 2;
alias GST_BUFFER_COPY_CAPS = 4;

alias GstBufferCopyFlags = Int;

external gst_buffer_copy_metadata(
    dest : Pointer[GstBuffer],
    src : Pointer[GstBuffer],
    flags : GstBufferCopyFlags);

external gst_buffer_is_metadata_writable(
    buf : Pointer[GstBuffer]) : Int;

external gst_buffer_make_metadata_writable(
    buf : Pointer[GstBuffer]) : Pointer[GstBuffer];

external gst_buffer_get_caps(
    buffer : Pointer[GstBuffer]) : Pointer[GstCaps];

external gst_buffer_set_caps(
    buffer : Pointer[GstBuffer],
    caps : Pointer[GstCaps]);

external gst_buffer_create_sub(
    parent : Pointer[GstBuffer],
    offset : UInt,
    size : UInt) : Pointer[GstBuffer];

external gst_buffer_is_span_fast(
    buf1 : Pointer[GstBuffer],
    buf2 : Pointer[GstBuffer]) : Int;

external gst_buffer_span(
    buf1 : Pointer[GstBuffer],
    offset : UInt,
    buf2 : Pointer[GstBuffer],
    len : UInt) : Pointer[GstBuffer];

alias GstBufferList = Opaque;

alias GstBufferListClass = Opaque;

alias GstBufferListIterator = Opaque;

alias GstBufferListDoFunction = CCodePointer[[Pointer[Struct__GstBuffer],RawPointer],[Pointer[Struct__GstBuffer]]];

alias GST_BUFFER_LIST_CONTINUE = 0;
alias GST_BUFFER_LIST_SKIP_GROUP = 1;
alias GST_BUFFER_LIST_END = 2;

alias GstBufferListItem = Int;

alias GstBufferListFunc = CCodePointer[[Pointer[Pointer[Struct__GstBuffer]],UInt,UInt,RawPointer],[Int]];

external gst_buffer_list_get_type() : CULong;

external gst_buffer_list_new() : Pointer[GstBufferList];

external gst_buffer_list_n_groups(
    list : Pointer[GstBufferList]) : UInt;

external gst_buffer_list_foreach(
    list : Pointer[GstBufferList],
    func : GstBufferListFunc,
    user_data : gpointer);

external gst_buffer_list_get(
    list : Pointer[GstBufferList],
    group : UInt,
    idx : UInt) : Pointer[GstBuffer];

external gst_buffer_list_iterate(
    list : Pointer[GstBufferList]) : Pointer[GstBufferListIterator];

external gst_buffer_list_iterator_free(
    it : Pointer[GstBufferListIterator]);

external gst_buffer_list_iterator_n_buffers(
    it : Pointer[GstBufferListIterator]) : UInt;

external gst_buffer_list_iterator_next(
    it : Pointer[GstBufferListIterator]) : Pointer[GstBuffer];

external gst_buffer_list_iterator_next_group(
    it : Pointer[GstBufferListIterator]) : Int;

external gst_buffer_list_iterator_add(
    it : Pointer[GstBufferListIterator],
    buffer : Pointer[GstBuffer]);

external gst_buffer_list_iterator_add_list(
    it : Pointer[GstBufferListIterator],
    list : Pointer[GList]);

external gst_buffer_list_iterator_add_group(
    it : Pointer[GstBufferListIterator]);

external gst_buffer_list_iterator_remove(
    it : Pointer[GstBufferListIterator]);

external gst_buffer_list_iterator_steal(
    it : Pointer[GstBufferListIterator]) : Pointer[GstBuffer];

external gst_buffer_list_iterator_take(
    it : Pointer[GstBufferListIterator],
    buffer : Pointer[GstBuffer]);

external gst_buffer_list_iterator_do(
    it : Pointer[GstBufferListIterator],
    do_func : GstBufferListDoFunction,
    user_data : gpointer) : Pointer[GstBuffer];

external gst_buffer_list_iterator_merge_group(
    it : Pointer[GstBufferListIterator]) : Pointer[GstBuffer];

alias GST_ITERATOR_DONE = 0;
alias GST_ITERATOR_OK = 1;
alias GST_ITERATOR_RESYNC = 2;
alias GST_ITERATOR_ERROR = 3;

alias GstIteratorResult = Int;

alias GstIterator = Struct__GstIterator;

alias GST_ITERATOR_ITEM_SKIP = 0;
alias GST_ITERATOR_ITEM_PASS = 1;
alias GST_ITERATOR_ITEM_END = 2;

alias GstIteratorItem = Int;

alias GstIteratorDisposeFunction = CCodePointer[[RawPointer],[]];

alias GstIteratorNextFunction = CCodePointer[[Pointer[Struct__GstIterator],Pointer[RawPointer]],[Int]];

alias GstIteratorItemFunction = CCodePointer[[Pointer[Struct__GstIterator],RawPointer],[Int]];

alias GstIteratorResyncFunction = CCodePointer[[Pointer[Struct__GstIterator]],[]];

alias GstIteratorFreeFunction = CCodePointer[[Pointer[Struct__GstIterator]],[]];

alias GstIteratorFoldFunction = CCodePointer[[RawPointer,Pointer[Struct__GValue],RawPointer],[Int]];

alias GstCopyFunction = CCodePointer[[RawPointer],[RawPointer]];

record Struct__GstIterator (
    next : GstIteratorNextFunction,
    item : GstIteratorItemFunction,
    resync : GstIteratorResyncFunction,
    free : GstIteratorFreeFunction,
    pushed : Pointer[GstIterator],
    type : CULong,
    lock : Pointer[GMutex],
    cookie : UInt,
    master_cookie : Pointer[UInt],
    _gst_reserved : Array[gpointer,4],
);

external gst_iterator_new(
    size : UInt,
    type : CULong,
    lock : Pointer[GMutex],
    master_cookie : Pointer[UInt],
    next : GstIteratorNextFunction,
    item : GstIteratorItemFunction,
    resync : GstIteratorResyncFunction,
    free : GstIteratorFreeFunction) : Pointer[GstIterator];

external gst_iterator_new_list(
    type : CULong,
    lock : Pointer[GMutex],
    master_cookie : Pointer[UInt],
    list : Pointer[Pointer[GList]],
    owner : gpointer,
    item : GstIteratorItemFunction,
    free : GstIteratorDisposeFunction) : Pointer[GstIterator];

external gst_iterator_new_single(
    type : CULong,
    object : gpointer,
    copy : GstCopyFunction,
    free : GFreeFunc) : Pointer[GstIterator];

external gst_iterator_next(
    it : Pointer[GstIterator],
    elem : Pointer[gpointer]) : GstIteratorResult;

external gst_iterator_resync(
    it : Pointer[GstIterator]);

external gst_iterator_free(
    it : Pointer[GstIterator]);

external gst_iterator_push(
    it : Pointer[GstIterator],
    other : Pointer[GstIterator]);

external gst_iterator_filter(
    it : Pointer[GstIterator],
    func : GCompareFunc,
    user_data : gpointer) : Pointer[GstIterator];

external gst_iterator_fold(
    it : Pointer[GstIterator],
    func : GstIteratorFoldFunction,
    ret : Pointer[GValue],
    user_data : gpointer) : GstIteratorResult;

external gst_iterator_foreach(
    it : Pointer[GstIterator],
    func : GFunc,
    user_data : gpointer) : GstIteratorResult;

external gst_iterator_find_custom(
    it : Pointer[GstIterator],
    func : GCompareFunc,
    user_data : gpointer) : gpointer;

alias GST_FORMAT_UNDEFINED = 0;
alias GST_FORMAT_DEFAULT = 1;
alias GST_FORMAT_BYTES = 2;
alias GST_FORMAT_TIME = 3;
alias GST_FORMAT_BUFFERS = 4;
alias GST_FORMAT_PERCENT = 5;

alias GstFormat = Int;

alias GstFormatDefinition = Struct__GstFormatDefinition;

record Struct__GstFormatDefinition (
    value : GstFormat,
    nick : Pointer[CChar],
    description : Pointer[CChar],
    quark : UInt,
);

external gst_format_get_name(
    format : GstFormat) : Pointer[CChar];

external gst_format_to_quark(
    format : GstFormat) : UInt;

external gst_format_register(
    nick : Pointer[CChar],
    description : Pointer[CChar]) : GstFormat;

external gst_format_get_by_nick(
    nick : Pointer[CChar]) : GstFormat;

external gst_formats_contains(
    formats : Pointer[GstFormat],
    format : GstFormat) : Int;

external gst_format_get_details(
    format : GstFormat) : Pointer[GstFormatDefinition];

external gst_format_iterate_definitions() : Pointer[GstIterator];

alias GST_TAG_MERGE_UNDEFINED = 0;
alias GST_TAG_MERGE_REPLACE_ALL = 1;
alias GST_TAG_MERGE_REPLACE = 2;
alias GST_TAG_MERGE_APPEND = 3;
alias GST_TAG_MERGE_PREPEND = 4;
alias GST_TAG_MERGE_KEEP = 5;
alias GST_TAG_MERGE_KEEP_ALL = 6;
alias GST_TAG_MERGE_COUNT = 7;

alias GstTagMergeMode = Int;

alias GST_TAG_FLAG_UNDEFINED = 0;
alias GST_TAG_FLAG_META = 1;
alias GST_TAG_FLAG_ENCODED = 2;
alias GST_TAG_FLAG_DECODED = 3;
alias GST_TAG_FLAG_COUNT = 4;

alias GstTagFlag = Int;

alias GstTagList = GstStructure;

alias GstTagForeachFunc = CCodePointer[[Pointer[Struct__GstStructure],Pointer[CChar],RawPointer],[]];

alias GstTagMergeFunc = CCodePointer[[Pointer[Struct__GValue],Pointer[Struct__GValue]],[]];

external gst_tag_list_get_type() : CULong;

external gst_tag_register(
    name : Pointer[CChar],
    flag : GstTagFlag,
    type : CULong,
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    func : GstTagMergeFunc);

external gst_tag_merge_use_first(
    dest : Pointer[GValue],
    src : Pointer[GValue]);

external gst_tag_merge_strings_with_comma(
    dest : Pointer[GValue],
    src : Pointer[GValue]);

external gst_tag_exists(
    tag : Pointer[CChar]) : Int;

external gst_tag_get_type(
    tag : Pointer[CChar]) : CULong;

external gst_tag_get_nick(
    tag : Pointer[CChar]) : Pointer[CChar];

external gst_tag_get_description(
    tag : Pointer[CChar]) : Pointer[CChar];

external gst_tag_get_flag(
    tag : Pointer[CChar]) : GstTagFlag;

external gst_tag_is_fixed(
    tag : Pointer[CChar]) : Int;

external gst_tag_list_new() : Pointer[GstTagList];

external gst_tag_list_new_full(
    tag : Pointer[CChar],
    ..) : Pointer[GstTagList];

external gst_tag_list_new_full_valist(
    var_args : Pointer[__va_list_tag]) : Pointer[GstTagList];

external gst_is_tag_list(
    p : gconstpointer) : Int;

external gst_tag_list_copy(
    list : Pointer[GstTagList]) : Pointer[GstTagList];

external gst_tag_list_is_empty(
    list : Pointer[GstTagList]) : Int;

external gst_tag_list_insert(
    into : Pointer[GstTagList],
    from : Pointer[GstTagList],
    mode : GstTagMergeMode);

external gst_tag_list_merge(
    list1 : Pointer[GstTagList],
    list2 : Pointer[GstTagList],
    mode : GstTagMergeMode) : Pointer[GstTagList];

external gst_tag_list_free(
    list : Pointer[GstTagList]);

external gst_tag_list_get_tag_size(
    list : Pointer[GstTagList],
    tag : Pointer[CChar]) : UInt;

external gst_tag_list_add(
    list : Pointer[GstTagList],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    ..);

external gst_tag_list_add_values(
    list : Pointer[GstTagList],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    ..);

external gst_tag_list_add_valist(
    list : Pointer[GstTagList],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gst_tag_list_add_valist_values(
    list : Pointer[GstTagList],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gst_tag_list_add_value(
    list : Pointer[GstTagList],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    value : Pointer[GValue]);

external gst_tag_list_remove_tag(
    list : Pointer[GstTagList],
    tag : Pointer[CChar]);

external gst_tag_list_foreach(
    list : Pointer[GstTagList],
    func : GstTagForeachFunc,
    user_data : gpointer);

external gst_tag_list_get_value_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt) : Pointer[GValue];

external gst_tag_list_copy_value(
    dest : Pointer[GValue],
    list : Pointer[GstTagList],
    tag : Pointer[CChar]) : Int;

external gst_tag_list_get_char(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[CChar]) : Int;

external gst_tag_list_get_char_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[CChar]) : Int;

external gst_tag_list_get_uchar(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[CUChar]) : Int;

external gst_tag_list_get_uchar_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[CUChar]) : Int;

external gst_tag_list_get_boolean(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Int]) : Int;

external gst_tag_list_get_boolean_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Int]) : Int;

external gst_tag_list_get_int(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Int]) : Int;

external gst_tag_list_get_int_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Int]) : Int;

external gst_tag_list_get_uint(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[UInt]) : Int;

external gst_tag_list_get_uint_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[UInt]) : Int;

external gst_tag_list_get_long(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[CLong]) : Int;

external gst_tag_list_get_long_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[CLong]) : Int;

external gst_tag_list_get_ulong(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[CULong]) : Int;

external gst_tag_list_get_ulong_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[CULong]) : Int;

external gst_tag_list_get_int64(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[CLong]) : Int;

external gst_tag_list_get_int64_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[CLong]) : Int;

external gst_tag_list_get_uint64(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[CULong]) : Int;

external gst_tag_list_get_uint64_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[CULong]) : Int;

external gst_tag_list_get_float(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Float]) : Int;

external gst_tag_list_get_float_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Float]) : Int;

external gst_tag_list_get_double(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Double]) : Int;

external gst_tag_list_get_double_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Double]) : Int;

external gst_tag_list_get_string(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Pointer[CChar]]) : Int;

external gst_tag_list_get_string_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Pointer[CChar]]) : Int;

external gst_tag_list_peek_string_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Pointer[CChar]]) : Int;

external gst_tag_list_get_pointer(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[gpointer]) : Int;

external gst_tag_list_get_pointer_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[gpointer]) : Int;

external gst_tag_list_get_date(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Pointer[GDate]]) : Int;

external gst_tag_list_get_date_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Pointer[GDate]]) : Int;

external gst_tag_list_get_date_time(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Pointer[GstDateTime]]) : Int;

external gst_tag_list_get_date_time_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Pointer[GstDateTime]]) : Int;

external gst_tag_list_get_buffer(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    value : Pointer[Pointer[GstBuffer]]) : Int;

external gst_tag_list_get_buffer_index(
    list : Pointer[GstTagList],
    tag : Pointer[CChar],
    index : UInt,
    value : Pointer[Pointer[GstBuffer]]) : Int;

alias GST_EVENT_TYPE_UPSTREAM = 1;
alias GST_EVENT_TYPE_DOWNSTREAM = 2;
alias GST_EVENT_TYPE_SERIALIZED = 4;

alias GstEventTypeFlags = Int;

alias GST_EVENT_UNKNOWN = 0;
alias GST_EVENT_FLUSH_START = 19;
alias GST_EVENT_FLUSH_STOP = 39;
alias GST_EVENT_EOS = 86;
alias GST_EVENT_NEWSEGMENT = 102;
alias GST_EVENT_TAG = 118;
alias GST_EVENT_BUFFERSIZE = 134;
alias GST_EVENT_SINK_MESSAGE = 150;
alias GST_EVENT_QOS = 241;
alias GST_EVENT_SEEK = 257;
alias GST_EVENT_NAVIGATION = 273;
alias GST_EVENT_LATENCY = 289;
alias GST_EVENT_STEP = 305;
alias GST_EVENT_CUSTOM_UPSTREAM = 513;
alias GST_EVENT_CUSTOM_DOWNSTREAM = 518;
alias GST_EVENT_CUSTOM_DOWNSTREAM_OOB = 514;
alias GST_EVENT_CUSTOM_BOTH = 519;
alias GST_EVENT_CUSTOM_BOTH_OOB = 515;

alias GstEventType = Int;

alias GstEvent = Struct__GstEvent;

alias GstEventClass = Struct__GstEventClass;

alias GST_SEEK_TYPE_NONE = 0;
alias GST_SEEK_TYPE_CUR = 1;
alias GST_SEEK_TYPE_SET = 2;
alias GST_SEEK_TYPE_END = 3;

alias GstSeekType = Int;

alias GST_SEEK_FLAG_NONE = 0;
alias GST_SEEK_FLAG_FLUSH = 1;
alias GST_SEEK_FLAG_ACCURATE = 2;
alias GST_SEEK_FLAG_KEY_UNIT = 4;
alias GST_SEEK_FLAG_SEGMENT = 8;
alias GST_SEEK_FLAG_SKIP = 16;

alias GstSeekFlags = Int;

record Struct__GstEvent (
    mini_object : GstMiniObject,
    type : GstEventType,
    timestamp : CULong,
    src : Pointer[GstObject],
    structure : Pointer[GstStructure],
    abidata : AUnionType,
);

record Struct__GstEventClass (
    mini_object_class : GstMiniObjectClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_event_type_get_name(
    type : GstEventType) : Pointer[CChar];

external gst_event_type_to_quark(
    type : GstEventType) : UInt;

external gst_event_type_get_flags(
    type : GstEventType) : GstEventTypeFlags;

external gst_event_get_type() : CULong;

external gst_event_new_custom(
    type : GstEventType,
    structure : Pointer[GstStructure]) : Pointer[GstEvent];

external gst_event_get_structure(
    event : Pointer[GstEvent]) : Pointer[GstStructure];

external gst_event_has_name(
    event : Pointer[GstEvent],
    name : Pointer[CChar]) : Int;

external gst_event_get_seqnum(
    event : Pointer[GstEvent]) : UInt;

external gst_event_set_seqnum(
    event : Pointer[GstEvent],
    seqnum : UInt);

external gst_event_new_flush_start() : Pointer[GstEvent];

external gst_event_new_flush_stop() : Pointer[GstEvent];

external gst_event_new_eos() : Pointer[GstEvent];

external gst_event_new_new_segment(
    update : Int,
    rate : Double,
    format : GstFormat,
    start : CLong,
    stop : CLong,
    position : CLong) : Pointer[GstEvent];

external gst_event_new_new_segment_full(
    update : Int,
    rate : Double,
    applied_rate : Double,
    format : GstFormat,
    start : CLong,
    stop : CLong,
    position : CLong) : Pointer[GstEvent];

external gst_event_parse_new_segment(
    event : Pointer[GstEvent],
    update : Pointer[Int],
    rate : Pointer[Double],
    format : Pointer[GstFormat],
    start : Pointer[CLong],
    stop : Pointer[CLong],
    position : Pointer[CLong]);

external gst_event_parse_new_segment_full(
    event : Pointer[GstEvent],
    update : Pointer[Int],
    rate : Pointer[Double],
    applied_rate : Pointer[Double],
    format : Pointer[GstFormat],
    start : Pointer[CLong],
    stop : Pointer[CLong],
    position : Pointer[CLong]);

external gst_event_new_tag(
    taglist : Pointer[GstTagList]) : Pointer[GstEvent];

external gst_event_parse_tag(
    event : Pointer[GstEvent],
    taglist : Pointer[Pointer[GstTagList]]);

external gst_event_new_buffer_size(
    format : GstFormat,
    minsize : CLong,
    maxsize : CLong,
    async : Int) : Pointer[GstEvent];

external gst_event_parse_buffer_size(
    event : Pointer[GstEvent],
    format : Pointer[GstFormat],
    minsize : Pointer[CLong],
    maxsize : Pointer[CLong],
    async : Pointer[Int]);

external gst_event_new_qos(
    proportion : Double,
    diff : CLong,
    timestamp : CULong) : Pointer[GstEvent];

external gst_event_parse_qos(
    event : Pointer[GstEvent],
    proportion : Pointer[Double],
    diff : Pointer[CLong],
    timestamp : Pointer[CULong]);

external gst_event_new_seek(
    rate : Double,
    format : GstFormat,
    flags : GstSeekFlags,
    start_type : GstSeekType,
    start : CLong,
    stop_type : GstSeekType,
    stop : CLong) : Pointer[GstEvent];

external gst_event_parse_seek(
    event : Pointer[GstEvent],
    rate : Pointer[Double],
    format : Pointer[GstFormat],
    flags : Pointer[GstSeekFlags],
    start_type : Pointer[GstSeekType],
    start : Pointer[CLong],
    stop_type : Pointer[GstSeekType],
    stop : Pointer[CLong]);

external gst_event_new_navigation(
    structure : Pointer[GstStructure]) : Pointer[GstEvent];

external gst_event_new_latency(
    latency : CULong) : Pointer[GstEvent];

external gst_event_parse_latency(
    event : Pointer[GstEvent],
    latency : Pointer[CULong]);

external gst_event_new_step(
    format : GstFormat,
    amount : CULong,
    rate : Double,
    flush : Int,
    intermediate : Int) : Pointer[GstEvent];

external gst_event_parse_step(
    event : Pointer[GstEvent],
    format : Pointer[GstFormat],
    amount : Pointer[CULong],
    rate : Pointer[Double],
    flush : Pointer[Int],
    intermediate : Pointer[Int]);

alias GST_QUERY_NONE = 0;
alias GST_QUERY_POSITION = 1;
alias GST_QUERY_DURATION = 2;
alias GST_QUERY_LATENCY = 3;
alias GST_QUERY_JITTER = 4;
alias GST_QUERY_RATE = 5;
alias GST_QUERY_SEEKING = 6;
alias GST_QUERY_SEGMENT = 7;
alias GST_QUERY_CONVERT = 8;
alias GST_QUERY_FORMATS = 9;
alias GST_QUERY_BUFFERING = 10;
alias GST_QUERY_CUSTOM = 11;
alias GST_QUERY_URI = 12;

alias GstQueryType = Int;

alias GST_BUFFERING_STREAM = 0;
alias GST_BUFFERING_DOWNLOAD = 1;
alias GST_BUFFERING_TIMESHIFT = 2;
alias GST_BUFFERING_LIVE = 3;

alias GstBufferingMode = Int;

alias GstQueryTypeDefinition = Struct__GstQueryTypeDefinition;

alias GstQuery = Struct__GstQuery;

alias GstQueryClass = Struct__GstQueryClass;

record Struct__GstQueryTypeDefinition (
    value : GstQueryType,
    nick : Pointer[CChar],
    description : Pointer[CChar],
    quark : UInt,
);

record Struct__GstQuery (
    mini_object : GstMiniObject,
    type : GstQueryType,
    structure : Pointer[GstStructure],
    _gst_reserved : gpointer,
);

record Struct__GstQueryClass (
    mini_object_class : GstMiniObjectClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_query_type_get_name(
    query : GstQueryType) : Pointer[CChar];

external gst_query_type_to_quark(
    query : GstQueryType) : UInt;

external gst_query_get_type() : CULong;

external gst_query_type_register(
    nick : Pointer[CChar],
    description : Pointer[CChar]) : GstQueryType;

external gst_query_type_get_by_nick(
    nick : Pointer[CChar]) : GstQueryType;

external gst_query_types_contains(
    types : Pointer[GstQueryType],
    type : GstQueryType) : Int;

external gst_query_type_get_details(
    type : GstQueryType) : Pointer[GstQueryTypeDefinition];

external gst_query_type_iterate_definitions() : Pointer[GstIterator];

external gst_query_new_position(
    format : GstFormat) : Pointer[GstQuery];

external gst_query_set_position(
    query : Pointer[GstQuery],
    format : GstFormat,
    cur : CLong);

external gst_query_parse_position(
    query : Pointer[GstQuery],
    format : Pointer[GstFormat],
    cur : Pointer[CLong]);

external gst_query_new_duration(
    format : GstFormat) : Pointer[GstQuery];

external gst_query_set_duration(
    query : Pointer[GstQuery],
    format : GstFormat,
    duration : CLong);

external gst_query_parse_duration(
    query : Pointer[GstQuery],
    format : Pointer[GstFormat],
    duration : Pointer[CLong]);

external gst_query_new_latency() : Pointer[GstQuery];

external gst_query_set_latency(
    query : Pointer[GstQuery],
    live : Int,
    min_latency : CULong,
    max_latency : CULong);

external gst_query_parse_latency(
    query : Pointer[GstQuery],
    live : Pointer[Int],
    min_latency : Pointer[CULong],
    max_latency : Pointer[CULong]);

external gst_query_new_convert(
    src_format : GstFormat,
    value : CLong,
    dest_format : GstFormat) : Pointer[GstQuery];

external gst_query_set_convert(
    query : Pointer[GstQuery],
    src_format : GstFormat,
    src_value : CLong,
    dest_format : GstFormat,
    dest_value : CLong);

external gst_query_parse_convert(
    query : Pointer[GstQuery],
    src_format : Pointer[GstFormat],
    src_value : Pointer[CLong],
    dest_format : Pointer[GstFormat],
    dest_value : Pointer[CLong]);

external gst_query_new_segment(
    format : GstFormat) : Pointer[GstQuery];

external gst_query_set_segment(
    query : Pointer[GstQuery],
    rate : Double,
    format : GstFormat,
    start_value : CLong,
    stop_value : CLong);

external gst_query_parse_segment(
    query : Pointer[GstQuery],
    rate : Pointer[Double],
    format : Pointer[GstFormat],
    start_value : Pointer[CLong],
    stop_value : Pointer[CLong]);

external gst_query_new_application(
    type : GstQueryType,
    structure : Pointer[GstStructure]) : Pointer[GstQuery];

external gst_query_get_structure(
    query : Pointer[GstQuery]) : Pointer[GstStructure];

external gst_query_new_seeking(
    format : GstFormat) : Pointer[GstQuery];

external gst_query_set_seeking(
    query : Pointer[GstQuery],
    format : GstFormat,
    seekable : Int,
    segment_start : CLong,
    segment_end : CLong);

external gst_query_parse_seeking(
    query : Pointer[GstQuery],
    format : Pointer[GstFormat],
    seekable : Pointer[Int],
    segment_start : Pointer[CLong],
    segment_end : Pointer[CLong]);

external gst_query_new_formats() : Pointer[GstQuery];

external gst_query_set_formats(
    query : Pointer[GstQuery],
    n_formats : Int,
    ..);

external gst_query_set_formatsv(
    query : Pointer[GstQuery],
    n_formats : Int,
    formats : Pointer[GstFormat]);

external gst_query_parse_formats_length(
    query : Pointer[GstQuery],
    n_formats : Pointer[UInt]);

external gst_query_parse_formats_nth(
    query : Pointer[GstQuery],
    nth : UInt,
    format : Pointer[GstFormat]);

external gst_query_new_buffering(
    format : GstFormat) : Pointer[GstQuery];

external gst_query_set_buffering_percent(
    query : Pointer[GstQuery],
    busy : Int,
    percent : Int);

external gst_query_parse_buffering_percent(
    query : Pointer[GstQuery],
    busy : Pointer[Int],
    percent : Pointer[Int]);

external gst_query_set_buffering_stats(
    query : Pointer[GstQuery],
    mode : GstBufferingMode,
    avg_in : Int,
    avg_out : Int,
    buffering_left : CLong);

external gst_query_parse_buffering_stats(
    query : Pointer[GstQuery],
    mode : Pointer[GstBufferingMode],
    avg_in : Pointer[Int],
    avg_out : Pointer[Int],
    buffering_left : Pointer[CLong]);

external gst_query_set_buffering_range(
    query : Pointer[GstQuery],
    format : GstFormat,
    start : CLong,
    stop : CLong,
    estimated_total : CLong);

external gst_query_parse_buffering_range(
    query : Pointer[GstQuery],
    format : Pointer[GstFormat],
    start : Pointer[CLong],
    stop : Pointer[CLong],
    estimated_total : Pointer[CLong]);

external gst_query_add_buffering_range(
    query : Pointer[GstQuery],
    start : CLong,
    stop : CLong) : Int;

external gst_query_get_n_buffering_ranges(
    query : Pointer[GstQuery]) : UInt;

external gst_query_parse_nth_buffering_range(
    query : Pointer[GstQuery],
    index : UInt,
    start : Pointer[CLong],
    stop : Pointer[CLong]) : Int;

external gst_query_new_uri() : Pointer[GstQuery];

external gst_query_parse_uri(
    query : Pointer[GstQuery],
    uri : Pointer[Pointer[CChar]]);

external gst_query_set_uri(
    query : Pointer[GstQuery],
    uri : Pointer[CChar]);

alias GstTaskPool = Struct__GstTaskPool;

alias GstTaskPoolClass = Struct__GstTaskPoolClass;

alias GstTaskPoolFunction = CCodePointer[[RawPointer],[]];

record Struct__GstTaskPool (
    object : GstObject,
    pool : Pointer[GThreadPool],
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstTaskPoolClass (
    parent_class : GstObjectClass,
    prepare : CCodePointer[[Pointer[Struct__GstTaskPool],Pointer[Pointer[Struct__GError]]],[]],
    cleanup : CCodePointer[[Pointer[Struct__GstTaskPool]],[]],
    push : CCodePointer[[Pointer[Struct__GstTaskPool],CCodePointer[[RawPointer],[]],RawPointer,Pointer[Pointer[Struct__GError]]],[RawPointer]],
    join : CCodePointer[[Pointer[Struct__GstTaskPool],RawPointer],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_task_pool_get_type() : CULong;

external gst_task_pool_new() : Pointer[GstTaskPool];

external gst_task_pool_prepare(
    pool : Pointer[GstTaskPool],
    error : Pointer[Pointer[GError]]);

external gst_task_pool_push(
    pool : Pointer[GstTaskPool],
    func : GstTaskPoolFunction,
    user_data : gpointer,
    error : Pointer[Pointer[GError]]) : gpointer;

external gst_task_pool_join(
    pool : Pointer[GstTaskPool],
    id : gpointer);

external gst_task_pool_cleanup(
    pool : Pointer[GstTaskPool]);

alias GstTaskFunction = CCodePointer[[RawPointer],[]];

alias GstTask = Struct__GstTask;

alias GstTaskClass = Struct__GstTaskClass;

alias GstTaskPrivate = Opaque;

alias GST_TASK_STARTED = 0;
alias GST_TASK_STOPPED = 1;
alias GST_TASK_PAUSED = 2;

alias GstTaskState = Int;

record UnnamedStruct12 (
    enter_thread : CCodePointer[[Pointer[Struct__GstTask],Pointer[Struct__GThread],RawPointer],[]],
    leave_thread : CCodePointer[[Pointer[Struct__GstTask],Pointer[Struct__GThread],RawPointer],[]],
    _gst_reserved : Array[gpointer,4],
);

alias GstTaskThreadCallbacks = UnnamedStruct12;

record Struct__GstTask (
    object : GstObject,
    state : GstTaskState,
    cond : Pointer[GCond],
    lock : Pointer[GStaticRecMutex],
    func : GstTaskFunction,
    data : gpointer,
    running : Int,
    abidata : AUnionType,
    priv : Pointer[GstTaskPrivate],
);

record Struct__GstTaskClass (
    parent_class : GstObjectClass,
    pool : Pointer[GstTaskPool],
    _gst_reserved : Array[gpointer,4],
);

external gst_task_cleanup_all();

external gst_task_get_type() : CULong;

external gst_task_create(
    func : GstTaskFunction,
    data : gpointer) : Pointer[GstTask];

external gst_task_set_lock(
    task : Pointer[GstTask],
    mutex : Pointer[GStaticRecMutex]);

external gst_task_set_priority(
    task : Pointer[GstTask],
    priority : GThreadPriority);

external gst_task_get_pool(
    task : Pointer[GstTask]) : Pointer[GstTaskPool];

external gst_task_set_pool(
    task : Pointer[GstTask],
    pool : Pointer[GstTaskPool]);

external gst_task_set_thread_callbacks(
    task : Pointer[GstTask],
    callbacks : Pointer[GstTaskThreadCallbacks],
    user_data : gpointer,
    notify : GDestroyNotify);

external gst_task_get_state(
    task : Pointer[GstTask]) : GstTaskState;

external gst_task_set_state(
    task : Pointer[GstTask],
    state : GstTaskState) : Int;

external gst_task_start(
    task : Pointer[GstTask]) : Int;

external gst_task_stop(
    task : Pointer[GstTask]) : Int;

external gst_task_pause(
    task : Pointer[GstTask]) : Int;

external gst_task_join(
    task : Pointer[GstTask]) : Int;

alias GstPad = Struct__GstPad;

alias GstPadPrivate = Opaque;

alias GstPadClass = Struct__GstPadClass;

alias GST_PAD_LINK_OK = 0;
alias GST_PAD_LINK_WRONG_HIERARCHY = 4294967295;
alias GST_PAD_LINK_WAS_LINKED = 4294967294;
alias GST_PAD_LINK_WRONG_DIRECTION = 4294967293;
alias GST_PAD_LINK_NOFORMAT = 4294967292;
alias GST_PAD_LINK_NOSCHED = 4294967291;
alias GST_PAD_LINK_REFUSED = 4294967290;

alias GstPadLinkReturn = Int;

alias GST_FLOW_CUSTOM_SUCCESS_2 = 102;
alias GST_FLOW_CUSTOM_SUCCESS_1 = 101;
alias GST_FLOW_CUSTOM_SUCCESS = 100;
alias GST_FLOW_RESEND = 1;
alias GST_FLOW_OK = 0;
alias GST_FLOW_NOT_LINKED = 4294967295;
alias GST_FLOW_WRONG_STATE = 4294967294;
alias GST_FLOW_UNEXPECTED = 4294967293;
alias GST_FLOW_NOT_NEGOTIATED = 4294967292;
alias GST_FLOW_ERROR = 4294967291;
alias GST_FLOW_NOT_SUPPORTED = 4294967290;
alias GST_FLOW_CUSTOM_ERROR = 4294967196;
alias GST_FLOW_CUSTOM_ERROR_1 = 4294967195;
alias GST_FLOW_CUSTOM_ERROR_2 = 4294967194;

alias GstFlowReturn = Int;

external gst_flow_get_name(
    ret : GstFlowReturn) : Pointer[CChar];

external gst_flow_to_quark(
    ret : GstFlowReturn) : UInt;

alias GST_PAD_LINK_CHECK_NOTHING = 0;
alias GST_PAD_LINK_CHECK_HIERARCHY = 1;
alias GST_PAD_LINK_CHECK_TEMPLATE_CAPS = 2;
alias GST_PAD_LINK_CHECK_CAPS = 4;

alias GstPadLinkCheck = Int;

alias GST_ACTIVATE_NONE = 0;
alias GST_ACTIVATE_PUSH = 1;
alias GST_ACTIVATE_PULL = 2;

alias GstActivateMode = Int;

alias GstPadActivateFunction = CCodePointer[[Pointer[Struct__GstPad]],[Int]];

alias GstPadActivateModeFunction = CCodePointer[[Pointer[Struct__GstPad],Int],[Int]];

alias GstPadChainFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstBuffer]],[Int]];

alias GstPadChainListFunction = CCodePointer[[Pointer[Struct__GstPad],OpaquePointer],[Int]];

alias GstPadGetRangeFunction = CCodePointer[[Pointer[Struct__GstPad],CULong,UInt,Pointer[Pointer[Struct__GstBuffer]]],[Int]];

alias GstPadEventFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstEvent]],[Int]];

alias GstPadCheckGetRangeFunction = CCodePointer[[Pointer[Struct__GstPad]],[Int]];

alias GstPadIntLinkFunction = CCodePointer[[Pointer[Struct__GstPad]],[Pointer[Struct__GList]]];

alias GstPadIterIntLinkFunction = CCodePointer[[Pointer[Struct__GstPad]],[Pointer[Struct__GstIterator]]];

alias GstPadQueryTypeFunction = CCodePointer[[Pointer[Struct__GstPad]],[Pointer[Int]]];

alias GstPadQueryFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstQuery]],[Int]];

alias GstPadLinkFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstPad]],[Int]];

alias GstPadUnlinkFunction = CCodePointer[[Pointer[Struct__GstPad]],[]];

alias GstPadGetCapsFunction = CCodePointer[[Pointer[Struct__GstPad]],[Pointer[Struct__GstCaps]]];

alias GstPadSetCapsFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstCaps]],[Int]];

alias GstPadAcceptCapsFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstCaps]],[Int]];

alias GstPadFixateCapsFunction = CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstCaps]],[]];

alias GstPadBufferAllocFunction = CCodePointer[[Pointer[Struct__GstPad],CULong,UInt,Pointer[Struct__GstCaps],Pointer[Pointer[Struct__GstBuffer]]],[Int]];

alias GstPadDispatcherFunction = CCodePointer[[Pointer[Struct__GstPad],RawPointer],[Int]];

alias GstPadBlockCallback = CCodePointer[[Pointer[Struct__GstPad],Int,RawPointer],[]];

alias GST_PAD_UNKNOWN = 0;
alias GST_PAD_SRC = 1;
alias GST_PAD_SINK = 2;

alias GstPadDirection = Int;

alias GST_PAD_BLOCKED = 16;
alias GST_PAD_FLUSHING = 32;
alias GST_PAD_IN_GETCAPS = 64;
alias GST_PAD_IN_SETCAPS = 128;
alias GST_PAD_BLOCKING = 256;
alias GST_PAD_FLAG_LAST = 4096;

alias GstPadFlags = Int;

alias GstPadTemplate = Struct__GstPadTemplate;

record Struct__GstPad (
    object : GstObject,
    element_private : gpointer,
    padtemplate : Pointer[GstPadTemplate],
    direction : GstPadDirection,
    stream_rec_lock : Pointer[GStaticRecMutex],
    task : Pointer[GstTask],
    preroll_lock : Pointer[GMutex],
    preroll_cond : Pointer[GCond],
    block_cond : Pointer[GCond],
    block_callback : GstPadBlockCallback,
    block_data : gpointer,
    caps : Pointer[GstCaps],
    getcapsfunc : GstPadGetCapsFunction,
    setcapsfunc : GstPadSetCapsFunction,
    acceptcapsfunc : GstPadAcceptCapsFunction,
    fixatecapsfunc : GstPadFixateCapsFunction,
    activatefunc : GstPadActivateFunction,
    activatepushfunc : GstPadActivateModeFunction,
    activatepullfunc : GstPadActivateModeFunction,
    linkfunc : GstPadLinkFunction,
    unlinkfunc : GstPadUnlinkFunction,
    peer : Pointer[GstPad],
    sched_private : gpointer,
    chainfunc : GstPadChainFunction,
    checkgetrangefunc : GstPadCheckGetRangeFunction,
    getrangefunc : GstPadGetRangeFunction,
    eventfunc : GstPadEventFunction,
    mode : GstActivateMode,
    querytypefunc : GstPadQueryTypeFunction,
    queryfunc : GstPadQueryFunction,
    intlinkfunc : GstPadIntLinkFunction,
    bufferallocfunc : GstPadBufferAllocFunction,
    do_buffer_signals : Int,
    do_event_signals : Int,
    iterintlinkfunc : GstPadIterIntLinkFunction,
    block_destroy_data : GDestroyNotify,
    abidata : AUnionType,
);

record Struct__GstPadClass (
    parent_class : GstObjectClass,
    linked : CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstPad]],[]],
    unlinked : CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstPad]],[]],
    request_link : CCodePointer[[Pointer[Struct__GstPad]],[]],
    have_data : CCodePointer[[Pointer[Struct__GstPad],Pointer[Struct__GstMiniObject]],[Int]],
    _gst_reserved : Array[gpointer,4],
);

alias GstPadTemplateClass = Struct__GstPadTemplateClass;

alias GstStaticPadTemplate = Struct__GstStaticPadTemplate;

alias GST_PAD_ALWAYS = 0;
alias GST_PAD_SOMETIMES = 1;
alias GST_PAD_REQUEST = 2;

alias GstPadPresence = Int;

alias GST_PAD_TEMPLATE_FIXED = 16;
alias GST_PAD_TEMPLATE_FLAG_LAST = 256;

alias GstPadTemplateFlags = Int;

record Struct__GstPadTemplate (
    object : GstObject,
    name_template : Pointer[CChar],
    direction : GstPadDirection,
    presence : GstPadPresence,
    caps : Pointer[GstCaps],
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstPadTemplateClass (
    parent_class : GstObjectClass,
    pad_created : CCodePointer[[Pointer[Struct__GstPadTemplate],Pointer[Struct__GstPad]],[]],
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstStaticPadTemplate (
    name_template : Pointer[CChar],
    direction : GstPadDirection,
    presence : GstPadPresence,
    static_caps : GstStaticCaps,
);

external gst_pad_template_get_type() : CULong;

external gst_static_pad_template_get_type() : CULong;

external gst_pad_template_new(
    name_template : Pointer[CChar],
    direction : GstPadDirection,
    presence : GstPadPresence,
    caps : Pointer[GstCaps]) : Pointer[GstPadTemplate];

external gst_static_pad_template_get(
    pad_template : Pointer[GstStaticPadTemplate]) : Pointer[GstPadTemplate];

external gst_static_pad_template_get_caps(
    templ : Pointer[GstStaticPadTemplate]) : Pointer[GstCaps];

external gst_pad_template_get_caps(
    templ : Pointer[GstPadTemplate]) : Pointer[GstCaps];

external gst_pad_template_pad_created(
    templ : Pointer[GstPadTemplate],
    pad : Pointer[GstPad]);

external gst_pad_get_type() : CULong;

external gst_pad_new(
    name : Pointer[CChar],
    direction : GstPadDirection) : Pointer[GstPad];

external gst_pad_new_from_template(
    templ : Pointer[GstPadTemplate],
    name : Pointer[CChar]) : Pointer[GstPad];

external gst_pad_new_from_static_template(
    templ : Pointer[GstStaticPadTemplate],
    name : Pointer[CChar]) : Pointer[GstPad];

external gst_pad_get_direction(
    pad : Pointer[GstPad]) : GstPadDirection;

external gst_pad_set_active(
    pad : Pointer[GstPad],
    active : Int) : Int;

external gst_pad_is_active(
    pad : Pointer[GstPad]) : Int;

external gst_pad_activate_pull(
    pad : Pointer[GstPad],
    active : Int) : Int;

external gst_pad_activate_push(
    pad : Pointer[GstPad],
    active : Int) : Int;

external gst_pad_set_blocked(
    pad : Pointer[GstPad],
    blocked : Int) : Int;

external gst_pad_set_blocked_async(
    pad : Pointer[GstPad],
    blocked : Int,
    callback : GstPadBlockCallback,
    user_data : gpointer) : Int;

external gst_pad_set_blocked_async_full(
    pad : Pointer[GstPad],
    blocked : Int,
    callback : GstPadBlockCallback,
    user_data : gpointer,
    destroy_data : GDestroyNotify) : Int;

external gst_pad_is_blocked(
    pad : Pointer[GstPad]) : Int;

external gst_pad_is_blocking(
    pad : Pointer[GstPad]) : Int;

external gst_pad_set_element_private(
    pad : Pointer[GstPad],
    priv : gpointer);

external gst_pad_get_element_private(
    pad : Pointer[GstPad]) : gpointer;

external gst_pad_get_pad_template(
    pad : Pointer[GstPad]) : Pointer[GstPadTemplate];

external gst_pad_set_bufferalloc_function(
    pad : Pointer[GstPad],
    bufalloc : GstPadBufferAllocFunction);

external gst_pad_alloc_buffer(
    pad : Pointer[GstPad],
    offset : CULong,
    size : Int,
    caps : Pointer[GstCaps],
    buf : Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external gst_pad_alloc_buffer_and_set_caps(
    pad : Pointer[GstPad],
    offset : CULong,
    size : Int,
    caps : Pointer[GstCaps],
    buf : Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external gst_pad_set_activate_function(
    pad : Pointer[GstPad],
    activate : GstPadActivateFunction);

external gst_pad_set_activatepull_function(
    pad : Pointer[GstPad],
    activatepull : GstPadActivateModeFunction);

external gst_pad_set_activatepush_function(
    pad : Pointer[GstPad],
    activatepush : GstPadActivateModeFunction);

external gst_pad_set_chain_function(
    pad : Pointer[GstPad],
    chain : GstPadChainFunction);

external gst_pad_set_chain_list_function(
    pad : Pointer[GstPad],
    chainlist : GstPadChainListFunction);

external gst_pad_set_getrange_function(
    pad : Pointer[GstPad],
    get : GstPadGetRangeFunction);

external gst_pad_set_checkgetrange_function(
    pad : Pointer[GstPad],
    check : GstPadCheckGetRangeFunction);

external gst_pad_set_event_function(
    pad : Pointer[GstPad],
    event : GstPadEventFunction);

external gst_pad_set_link_function(
    pad : Pointer[GstPad],
    link : GstPadLinkFunction);

external gst_pad_set_unlink_function(
    pad : Pointer[GstPad],
    unlink : GstPadUnlinkFunction);

external gst_pad_can_link(
    srcpad : Pointer[GstPad],
    sinkpad : Pointer[GstPad]) : Int;

external gst_pad_link(
    srcpad : Pointer[GstPad],
    sinkpad : Pointer[GstPad]) : GstPadLinkReturn;

external gst_pad_link_full(
    srcpad : Pointer[GstPad],
    sinkpad : Pointer[GstPad],
    flags : GstPadLinkCheck) : GstPadLinkReturn;

external gst_pad_unlink(
    srcpad : Pointer[GstPad],
    sinkpad : Pointer[GstPad]) : Int;

external gst_pad_is_linked(
    pad : Pointer[GstPad]) : Int;

external gst_pad_get_peer(
    pad : Pointer[GstPad]) : Pointer[GstPad];

external gst_pad_set_getcaps_function(
    pad : Pointer[GstPad],
    getcaps : GstPadGetCapsFunction);

external gst_pad_set_acceptcaps_function(
    pad : Pointer[GstPad],
    acceptcaps : GstPadAcceptCapsFunction);

external gst_pad_set_fixatecaps_function(
    pad : Pointer[GstPad],
    fixatecaps : GstPadFixateCapsFunction);

external gst_pad_set_setcaps_function(
    pad : Pointer[GstPad],
    setcaps : GstPadSetCapsFunction);

external gst_pad_get_pad_template_caps(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_get_caps_reffed(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_get_caps(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_fixate_caps(
    pad : Pointer[GstPad],
    caps : Pointer[GstCaps]);

external gst_pad_accept_caps(
    pad : Pointer[GstPad],
    caps : Pointer[GstCaps]) : Int;

external gst_pad_set_caps(
    pad : Pointer[GstPad],
    caps : Pointer[GstCaps]) : Int;

external gst_pad_peer_get_caps_reffed(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_peer_get_caps(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_peer_accept_caps(
    pad : Pointer[GstPad],
    caps : Pointer[GstCaps]) : Int;

external gst_pad_get_allowed_caps(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_get_negotiated_caps(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_push(
    pad : Pointer[GstPad],
    buffer : Pointer[GstBuffer]) : GstFlowReturn;

external gst_pad_push_list(
    pad : Pointer[GstPad],
    list : Pointer[GstBufferList]) : GstFlowReturn;

external gst_pad_check_pull_range(
    pad : Pointer[GstPad]) : Int;

external gst_pad_pull_range(
    pad : Pointer[GstPad],
    offset : CULong,
    size : UInt,
    buffer : Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external gst_pad_push_event(
    pad : Pointer[GstPad],
    event : Pointer[GstEvent]) : Int;

external gst_pad_event_default(
    pad : Pointer[GstPad],
    event : Pointer[GstEvent]) : Int;

external gst_pad_chain(
    pad : Pointer[GstPad],
    buffer : Pointer[GstBuffer]) : GstFlowReturn;

external gst_pad_chain_list(
    pad : Pointer[GstPad],
    list : Pointer[GstBufferList]) : GstFlowReturn;

external gst_pad_get_range(
    pad : Pointer[GstPad],
    offset : CULong,
    size : UInt,
    buffer : Pointer[Pointer[GstBuffer]]) : GstFlowReturn;

external gst_pad_send_event(
    pad : Pointer[GstPad],
    event : Pointer[GstEvent]) : Int;

external gst_pad_start_task(
    pad : Pointer[GstPad],
    func : GstTaskFunction,
    data : gpointer) : Int;

external gst_pad_pause_task(
    pad : Pointer[GstPad]) : Int;

external gst_pad_stop_task(
    pad : Pointer[GstPad]) : Int;

external gst_pad_set_internal_link_function(
    pad : Pointer[GstPad],
    intlink : GstPadIntLinkFunction);

external gst_pad_get_internal_links(
    pad : Pointer[GstPad]) : Pointer[GList];

external gst_pad_get_internal_links_default(
    pad : Pointer[GstPad]) : Pointer[GList];

external gst_pad_set_iterate_internal_links_function(
    pad : Pointer[GstPad],
    iterintlink : GstPadIterIntLinkFunction);

external gst_pad_iterate_internal_links(
    pad : Pointer[GstPad]) : Pointer[GstIterator];

external gst_pad_iterate_internal_links_default(
    pad : Pointer[GstPad]) : Pointer[GstIterator];

external gst_pad_set_query_type_function(
    pad : Pointer[GstPad],
    type_func : GstPadQueryTypeFunction);

external gst_pad_get_query_types(
    pad : Pointer[GstPad]) : Pointer[GstQueryType];

external gst_pad_get_query_types_default(
    pad : Pointer[GstPad]) : Pointer[GstQueryType];

external gst_pad_query(
    pad : Pointer[GstPad],
    query : Pointer[GstQuery]) : Int;

external gst_pad_peer_query(
    pad : Pointer[GstPad],
    query : Pointer[GstQuery]) : Int;

external gst_pad_set_query_function(
    pad : Pointer[GstPad],
    query : GstPadQueryFunction);

external gst_pad_query_default(
    pad : Pointer[GstPad],
    query : Pointer[GstQuery]) : Int;

external gst_pad_dispatcher(
    pad : Pointer[GstPad],
    dispatch : GstPadDispatcherFunction,
    data : gpointer) : Int;

external gst_pad_load_and_link(
    self : xmlNodePtr,
    parent : Pointer[GstObject]);

alias GstBus = Struct__GstBus;

alias GstBusPrivate = Opaque;

alias GstBusClass = Struct__GstBusClass;

alias GstMessage = Struct__GstMessage;

alias GstMessageClass = Struct__GstMessageClass;

alias GST_MESSAGE_UNKNOWN = 0;
alias GST_MESSAGE_EOS = 1;
alias GST_MESSAGE_ERROR = 2;
alias GST_MESSAGE_WARNING = 4;
alias GST_MESSAGE_INFO = 8;
alias GST_MESSAGE_TAG = 16;
alias GST_MESSAGE_BUFFERING = 32;
alias GST_MESSAGE_STATE_CHANGED = 64;
alias GST_MESSAGE_STATE_DIRTY = 128;
alias GST_MESSAGE_STEP_DONE = 256;
alias GST_MESSAGE_CLOCK_PROVIDE = 512;
alias GST_MESSAGE_CLOCK_LOST = 1024;
alias GST_MESSAGE_NEW_CLOCK = 2048;
alias GST_MESSAGE_STRUCTURE_CHANGE = 4096;
alias GST_MESSAGE_STREAM_STATUS = 8192;
alias GST_MESSAGE_APPLICATION = 16384;
alias GST_MESSAGE_ELEMENT = 32768;
alias GST_MESSAGE_SEGMENT_START = 65536;
alias GST_MESSAGE_SEGMENT_DONE = 131072;
alias GST_MESSAGE_DURATION = 262144;
alias GST_MESSAGE_LATENCY = 524288;
alias GST_MESSAGE_ASYNC_START = 1048576;
alias GST_MESSAGE_ASYNC_DONE = 2097152;
alias GST_MESSAGE_REQUEST_STATE = 4194304;
alias GST_MESSAGE_STEP_START = 8388608;
alias GST_MESSAGE_QOS = 16777216;
alias GST_MESSAGE_ANY = 4294967295;

alias GstMessageType = Int;

alias GST_STRUCTURE_CHANGE_TYPE_PAD_LINK = 0;
alias GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK = 1;

alias GstStructureChangeType = Int;

alias GST_STREAM_STATUS_TYPE_CREATE = 0;
alias GST_STREAM_STATUS_TYPE_ENTER = 1;
alias GST_STREAM_STATUS_TYPE_LEAVE = 2;
alias GST_STREAM_STATUS_TYPE_DESTROY = 3;
alias GST_STREAM_STATUS_TYPE_START = 8;
alias GST_STREAM_STATUS_TYPE_PAUSE = 9;
alias GST_STREAM_STATUS_TYPE_STOP = 10;

alias GstStreamStatusType = Int;

record Struct__GstMessage (
    mini_object : GstMiniObject,
    lock : Pointer[GMutex],
    cond : Pointer[GCond],
    type : GstMessageType,
    timestamp : CULong,
    src : Pointer[GstObject],
    structure : Pointer[GstStructure],
    abidata : AUnionType,
);

record Struct__GstMessageClass (
    mini_object_class : GstMiniObjectClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_message_get_type() : CULong;

external gst_message_type_get_name(
    type : GstMessageType) : Pointer[CChar];

external gst_message_type_to_quark(
    type : GstMessageType) : UInt;

external gst_message_get_seqnum(
    message : Pointer[GstMessage]) : UInt;

external gst_message_set_seqnum(
    message : Pointer[GstMessage],
    seqnum : UInt);

external gst_message_new_eos(
    src : Pointer[GstObject]) : Pointer[GstMessage];

external gst_message_new_error(
    src : Pointer[GstObject],
    error : Pointer[GError],
    debug : Pointer[CChar]) : Pointer[GstMessage];

external gst_message_parse_error(
    message : Pointer[GstMessage],
    gerror : Pointer[Pointer[GError]],
    debug : Pointer[Pointer[CChar]]);

external gst_message_new_warning(
    src : Pointer[GstObject],
    error : Pointer[GError],
    debug : Pointer[CChar]) : Pointer[GstMessage];

external gst_message_parse_warning(
    message : Pointer[GstMessage],
    gerror : Pointer[Pointer[GError]],
    debug : Pointer[Pointer[CChar]]);

external gst_message_new_info(
    src : Pointer[GstObject],
    error : Pointer[GError],
    debug : Pointer[CChar]) : Pointer[GstMessage];

external gst_message_parse_info(
    message : Pointer[GstMessage],
    gerror : Pointer[Pointer[GError]],
    debug : Pointer[Pointer[CChar]]);

external gst_message_new_tag(
    src : Pointer[GstObject],
    tag_list : Pointer[GstTagList]) : Pointer[GstMessage];

external gst_message_new_tag_full(
    src : Pointer[GstObject],
    pad : Pointer[GstPad],
    tag_list : Pointer[GstTagList]) : Pointer[GstMessage];

external gst_message_parse_tag(
    message : Pointer[GstMessage],
    tag_list : Pointer[Pointer[GstTagList]]);

external gst_message_parse_tag_full(
    message : Pointer[GstMessage],
    pad : Pointer[Pointer[GstPad]],
    tag_list : Pointer[Pointer[GstTagList]]);

external gst_message_new_buffering(
    src : Pointer[GstObject],
    percent : Int) : Pointer[GstMessage];

external gst_message_parse_buffering(
    message : Pointer[GstMessage],
    percent : Pointer[Int]);

external gst_message_set_buffering_stats(
    message : Pointer[GstMessage],
    mode : GstBufferingMode,
    avg_in : Int,
    avg_out : Int,
    buffering_left : CLong);

external gst_message_parse_buffering_stats(
    message : Pointer[GstMessage],
    mode : Pointer[GstBufferingMode],
    avg_in : Pointer[Int],
    avg_out : Pointer[Int],
    buffering_left : Pointer[CLong]);

external gst_message_new_state_changed(
    src : Pointer[GstObject],
    oldstate : GstState,
    newstate : GstState,
    pending : GstState) : Pointer[GstMessage];

external gst_message_parse_state_changed(
    message : Pointer[GstMessage],
    oldstate : Pointer[GstState],
    newstate : Pointer[GstState],
    pending : Pointer[GstState]);

external gst_message_new_state_dirty(
    src : Pointer[GstObject]) : Pointer[GstMessage];

external gst_message_new_step_done(
    src : Pointer[GstObject],
    format : GstFormat,
    amount : CULong,
    rate : Double,
    flush : Int,
    intermediate : Int,
    duration : CULong,
    eos : Int) : Pointer[GstMessage];

external gst_message_parse_step_done(
    message : Pointer[GstMessage],
    format : Pointer[GstFormat],
    amount : Pointer[CULong],
    rate : Pointer[Double],
    flush : Pointer[Int],
    intermediate : Pointer[Int],
    duration : Pointer[CULong],
    eos : Pointer[Int]);

external gst_message_new_clock_provide(
    src : Pointer[GstObject],
    clock : Pointer[GstClock],
    ready : Int) : Pointer[GstMessage];

external gst_message_parse_clock_provide(
    message : Pointer[GstMessage],
    clock : Pointer[Pointer[GstClock]],
    ready : Pointer[Int]);

external gst_message_new_clock_lost(
    src : Pointer[GstObject],
    clock : Pointer[GstClock]) : Pointer[GstMessage];

external gst_message_parse_clock_lost(
    message : Pointer[GstMessage],
    clock : Pointer[Pointer[GstClock]]);

external gst_message_new_new_clock(
    src : Pointer[GstObject],
    clock : Pointer[GstClock]) : Pointer[GstMessage];

external gst_message_parse_new_clock(
    message : Pointer[GstMessage],
    clock : Pointer[Pointer[GstClock]]);

external gst_message_new_application(
    src : Pointer[GstObject],
    structure : Pointer[GstStructure]) : Pointer[GstMessage];

external gst_message_new_element(
    src : Pointer[GstObject],
    structure : Pointer[GstStructure]) : Pointer[GstMessage];

external gst_message_new_segment_start(
    src : Pointer[GstObject],
    format : GstFormat,
    position : CLong) : Pointer[GstMessage];

external gst_message_parse_segment_start(
    message : Pointer[GstMessage],
    format : Pointer[GstFormat],
    position : Pointer[CLong]);

external gst_message_new_segment_done(
    src : Pointer[GstObject],
    format : GstFormat,
    position : CLong) : Pointer[GstMessage];

external gst_message_parse_segment_done(
    message : Pointer[GstMessage],
    format : Pointer[GstFormat],
    position : Pointer[CLong]);

external gst_message_new_duration(
    src : Pointer[GstObject],
    format : GstFormat,
    duration : CLong) : Pointer[GstMessage];

external gst_message_parse_duration(
    message : Pointer[GstMessage],
    format : Pointer[GstFormat],
    duration : Pointer[CLong]);

external gst_message_new_latency(
    src : Pointer[GstObject]) : Pointer[GstMessage];

external gst_message_new_async_start(
    src : Pointer[GstObject],
    new_base_time : Int) : Pointer[GstMessage];

external gst_message_parse_async_start(
    message : Pointer[GstMessage],
    new_base_time : Pointer[Int]);

external gst_message_new_async_done(
    src : Pointer[GstObject]) : Pointer[GstMessage];

external gst_message_new_structure_change(
    src : Pointer[GstObject],
    type : GstStructureChangeType,
    owner : Pointer[GstElement],
    busy : Int) : Pointer[GstMessage];

external gst_message_parse_structure_change(
    message : Pointer[GstMessage],
    type : Pointer[GstStructureChangeType],
    owner : Pointer[Pointer[GstElement]],
    busy : Pointer[Int]);

external gst_message_new_stream_status(
    src : Pointer[GstObject],
    type : GstStreamStatusType,
    owner : Pointer[GstElement]) : Pointer[GstMessage];

external gst_message_parse_stream_status(
    message : Pointer[GstMessage],
    type : Pointer[GstStreamStatusType],
    owner : Pointer[Pointer[GstElement]]);

external gst_message_set_stream_status_object(
    message : Pointer[GstMessage],
    object : Pointer[GValue]);

external gst_message_get_stream_status_object(
    message : Pointer[GstMessage]) : Pointer[GValue];

external gst_message_new_request_state(
    src : Pointer[GstObject],
    state : GstState) : Pointer[GstMessage];

external gst_message_parse_request_state(
    message : Pointer[GstMessage],
    state : Pointer[GstState]);

external gst_message_new_step_start(
    src : Pointer[GstObject],
    active : Int,
    format : GstFormat,
    amount : CULong,
    rate : Double,
    flush : Int,
    intermediate : Int) : Pointer[GstMessage];

external gst_message_parse_step_start(
    message : Pointer[GstMessage],
    active : Pointer[Int],
    format : Pointer[GstFormat],
    amount : Pointer[CULong],
    rate : Pointer[Double],
    flush : Pointer[Int],
    intermediate : Pointer[Int]);

external gst_message_new_qos(
    src : Pointer[GstObject],
    live : Int,
    running_time : CULong,
    stream_time : CULong,
    timestamp : CULong,
    duration : CULong) : Pointer[GstMessage];

external gst_message_set_qos_values(
    message : Pointer[GstMessage],
    jitter : CLong,
    proportion : Double,
    quality : Int);

external gst_message_set_qos_stats(
    message : Pointer[GstMessage],
    format : GstFormat,
    processed : CULong,
    dropped : CULong);

external gst_message_parse_qos(
    message : Pointer[GstMessage],
    live : Pointer[Int],
    running_time : Pointer[CULong],
    stream_time : Pointer[CULong],
    timestamp : Pointer[CULong],
    duration : Pointer[CULong]);

external gst_message_parse_qos_values(
    message : Pointer[GstMessage],
    jitter : Pointer[CLong],
    proportion : Pointer[Double],
    quality : Pointer[Int]);

external gst_message_parse_qos_stats(
    message : Pointer[GstMessage],
    format : Pointer[GstFormat],
    processed : Pointer[CULong],
    dropped : Pointer[CULong]);

external gst_message_new_custom(
    type : GstMessageType,
    src : Pointer[GstObject],
    structure : Pointer[GstStructure]) : Pointer[GstMessage];

external gst_message_get_structure(
    message : Pointer[GstMessage]) : Pointer[GstStructure];

alias GST_BUS_FLUSHING = 16;
alias GST_BUS_FLAG_LAST = 32;

alias GstBusFlags = Int;

alias GST_BUS_DROP = 0;
alias GST_BUS_PASS = 1;
alias GST_BUS_ASYNC = 2;

alias GstBusSyncReply = Int;

alias GstBusSyncHandler = CCodePointer[[Pointer[Struct__GstBus],Pointer[Struct__GstMessage],RawPointer],[Int]];

alias GstBusFunc = CCodePointer[[Pointer[Struct__GstBus],Pointer[Struct__GstMessage],RawPointer],[Int]];

record Struct__GstBus (
    object : GstObject,
    queue : Pointer[GQueue],
    queue_lock : Pointer[GMutex],
    sync_handler : GstBusSyncHandler,
    sync_handler_data : gpointer,
    signal_watch_id : UInt,
    num_signal_watchers : UInt,
    priv : Pointer[GstBusPrivate],
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstBusClass (
    parent_class : GstObjectClass,
    message : CCodePointer[[Pointer[Struct__GstBus],Pointer[Struct__GstMessage]],[]],
    sync_message : CCodePointer[[Pointer[Struct__GstBus],Pointer[Struct__GstMessage]],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_bus_get_type() : CULong;

external gst_bus_new() : Pointer[GstBus];

external gst_bus_post(
    bus : Pointer[GstBus],
    message : Pointer[GstMessage]) : Int;

external gst_bus_have_pending(
    bus : Pointer[GstBus]) : Int;

external gst_bus_peek(
    bus : Pointer[GstBus]) : Pointer[GstMessage];

external gst_bus_pop(
    bus : Pointer[GstBus]) : Pointer[GstMessage];

external gst_bus_pop_filtered(
    bus : Pointer[GstBus],
    types : GstMessageType) : Pointer[GstMessage];

external gst_bus_timed_pop(
    bus : Pointer[GstBus],
    timeout : CULong) : Pointer[GstMessage];

external gst_bus_timed_pop_filtered(
    bus : Pointer[GstBus],
    timeout : CULong,
    types : GstMessageType) : Pointer[GstMessage];

external gst_bus_set_flushing(
    bus : Pointer[GstBus],
    flushing : Int);

external gst_bus_set_sync_handler(
    bus : Pointer[GstBus],
    func : GstBusSyncHandler,
    data : gpointer);

external gst_bus_create_watch(
    bus : Pointer[GstBus]) : Pointer[GSource];

external gst_bus_add_watch_full(
    bus : Pointer[GstBus],
    priority : Int,
    func : GstBusFunc,
    user_data : gpointer,
    notify : GDestroyNotify) : UInt;

external gst_bus_add_watch(
    bus : Pointer[GstBus],
    func : GstBusFunc,
    user_data : gpointer) : UInt;

external gst_bus_poll(
    bus : Pointer[GstBus],
    events : GstMessageType,
    timeout : CLong) : Pointer[GstMessage];

external gst_bus_async_signal_func(
    bus : Pointer[GstBus],
    message : Pointer[GstMessage],
    data : gpointer) : Int;

external gst_bus_sync_signal_handler(
    bus : Pointer[GstBus],
    message : Pointer[GstMessage],
    data : gpointer) : GstBusSyncReply;

external gst_bus_add_signal_watch(
    bus : Pointer[GstBus]);

external gst_bus_add_signal_watch_full(
    bus : Pointer[GstBus],
    priority : Int);

external gst_bus_remove_signal_watch(
    bus : Pointer[GstBus]);

external gst_bus_enable_sync_message_emission(
    bus : Pointer[GstBus]);

external gst_bus_disable_sync_message_emission(
    bus : Pointer[GstBus]);

alias GstElementFactory = Struct__GstElementFactory;

alias GstElementFactoryClass = Struct__GstElementFactoryClass;

alias GstPlugin = Struct__GstPlugin;

alias GstPluginClass = Struct__GstPluginClass;

alias GstPluginPrivate = Opaque;

alias GstPluginDesc = Struct__GstPluginDesc;

external gst_plugin_error_quark() : UInt;

alias GST_PLUGIN_ERROR_MODULE = 0;
alias GST_PLUGIN_ERROR_DEPENDENCIES = 1;
alias GST_PLUGIN_ERROR_NAME_MISMATCH = 2;

alias GstPluginError = Int;

alias GST_PLUGIN_FLAG_CACHED = 1;
alias GST_PLUGIN_FLAG_BLACKLISTED = 2;

alias GstPluginFlags = Int;

alias GST_PLUGIN_DEPENDENCY_FLAG_NONE = 0;
alias GST_PLUGIN_DEPENDENCY_FLAG_RECURSE = 1;
alias GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY = 2;
alias GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX = 4;

alias GstPluginDependencyFlags = Int;

alias GstPluginInitFunc = CCodePointer[[Pointer[Struct__GstPlugin]],[Int]];

alias GstPluginInitFullFunc = CCodePointer[[Pointer[Struct__GstPlugin],RawPointer],[Int]];

record Struct__GstPluginDesc (
    major_version : Int,
    minor_version : Int,
    name : Pointer[CChar],
    description : Pointer[CChar],
    plugin_init : GstPluginInitFunc,
    version : Pointer[CChar],
    license : Pointer[CChar],
    source : Pointer[CChar],
    package : Pointer[CChar],
    origin : Pointer[CChar],
    release_datetime : Pointer[CChar],
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstPlugin (
    object : GstObject,
    desc : GstPluginDesc,
    orig_desc : Pointer[GstPluginDesc],
    flags : UInt,
    filename : Pointer[CChar],
    basename : Pointer[CChar],
    module : Pointer[GModule],
    file_size : CLong,
    file_mtime : CLong,
    registered : Int,
    priv : Pointer[GstPluginPrivate],
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstPluginClass (
    object_class : GstObjectClass,
    _gst_reserved : Array[gpointer,4],
);

alias GstPluginFilter = CCodePointer[[Pointer[Struct__GstPlugin],RawPointer],[Int]];

external gst_plugin_get_type() : CULong;

external _gst_plugin_register_static(
    desc : Pointer[GstPluginDesc]);

external gst_plugin_register_static(
    major_version : Int,
    minor_version : Int,
    name : Pointer[CChar],
    description : Pointer[CChar],
    init_func : GstPluginInitFunc,
    version : Pointer[CChar],
    license : Pointer[CChar],
    source : Pointer[CChar],
    package : Pointer[CChar],
    origin : Pointer[CChar]) : Int;

external gst_plugin_register_static_full(
    major_version : Int,
    minor_version : Int,
    name : Pointer[CChar],
    description : Pointer[CChar],
    init_full_func : GstPluginInitFullFunc,
    version : Pointer[CChar],
    license : Pointer[CChar],
    source : Pointer[CChar],
    package : Pointer[CChar],
    origin : Pointer[CChar],
    user_data : gpointer) : Int;

external gst_plugin_get_name(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_description(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_filename(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_version(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_license(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_source(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_package(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_origin(
    plugin : Pointer[GstPlugin]) : Pointer[CChar];

external gst_plugin_get_cache_data(
    plugin : Pointer[GstPlugin]) : Pointer[GstStructure];

external gst_plugin_set_cache_data(
    plugin : Pointer[GstPlugin],
    cache_data : Pointer[GstStructure]);

external gst_plugin_get_module(
    plugin : Pointer[GstPlugin]) : Pointer[GModule];

external gst_plugin_is_loaded(
    plugin : Pointer[GstPlugin]) : Int;

external gst_plugin_name_filter(
    plugin : Pointer[GstPlugin],
    name : Pointer[CChar]) : Int;

external gst_plugin_load_file(
    filename : Pointer[CChar],
    error : Pointer[Pointer[GError]]) : Pointer[GstPlugin];

external gst_plugin_load(
    plugin : Pointer[GstPlugin]) : Pointer[GstPlugin];

external gst_plugin_load_by_name(
    name : Pointer[CChar]) : Pointer[GstPlugin];

external gst_plugin_add_dependency(
    plugin : Pointer[GstPlugin],
    env_vars : Pointer[Pointer[CChar]],
    paths : Pointer[Pointer[CChar]],
    names : Pointer[Pointer[CChar]],
    flags : GstPluginDependencyFlags);

external gst_plugin_add_dependency_simple(
    plugin : Pointer[GstPlugin],
    env_vars : Pointer[CChar],
    paths : Pointer[CChar],
    names : Pointer[CChar],
    flags : GstPluginDependencyFlags);

external gst_plugin_list_free(
    list : Pointer[GList]);

alias GstPluginFeature = Struct__GstPluginFeature;

alias GstPluginFeatureClass = Struct__GstPluginFeatureClass;

alias GST_RANK_NONE = 0;
alias GST_RANK_MARGINAL = 64;
alias GST_RANK_SECONDARY = 128;
alias GST_RANK_PRIMARY = 256;

alias GstRank = Int;

record Struct__GstPluginFeature (
    object : GstObject,
    loaded : Int,
    name : Pointer[CChar],
    rank : UInt,
    plugin_name : Pointer[CChar],
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstPluginFeatureClass (
    parent_class : GstObjectClass,
    _gst_reserved : Array[gpointer,4],
);

record UnnamedStruct13 (
    name : Pointer[CChar],
    type : CULong,
);

alias GstTypeNameData = UnnamedStruct13;

alias GstPluginFeatureFilter = CCodePointer[[Pointer[Struct__GstPluginFeature],RawPointer],[Int]];

external gst_plugin_feature_get_type() : CULong;

external gst_plugin_feature_load(
    feature : Pointer[GstPluginFeature]) : Pointer[GstPluginFeature];

external gst_plugin_feature_type_name_filter(
    feature : Pointer[GstPluginFeature],
    data : Pointer[GstTypeNameData]) : Int;

external gst_plugin_feature_set_rank(
    feature : Pointer[GstPluginFeature],
    rank : UInt);

external gst_plugin_feature_set_name(
    feature : Pointer[GstPluginFeature],
    name : Pointer[CChar]);

external gst_plugin_feature_get_rank(
    feature : Pointer[GstPluginFeature]) : UInt;

external gst_plugin_feature_get_name(
    feature : Pointer[GstPluginFeature]) : Pointer[CChar];

external gst_plugin_feature_list_free(
    list : Pointer[GList]);

external gst_plugin_feature_list_copy(
    list : Pointer[GList]) : Pointer[GList];

external gst_plugin_feature_list_debug(
    list : Pointer[GList]);

external gst_plugin_feature_check_version(
    feature : Pointer[GstPluginFeature],
    min_major : UInt,
    min_minor : UInt,
    min_micro : UInt) : Int;

external gst_plugin_feature_rank_compare_func(
    p1 : gconstpointer,
    p2 : gconstpointer) : Int;

alias GstElementDetails = Struct__GstElementDetails;

record Struct__GstElementDetails (
    longname : Pointer[CChar],
    klass : Pointer[CChar],
    description : Pointer[CChar],
    author : Pointer[CChar],
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstElementFactory (
    parent : GstPluginFeature,
    type : CULong,
    details : GstElementDetails,
    staticpadtemplates : Pointer[GList],
    numpadtemplates : UInt,
    uri_type : UInt,
    uri_protocols : Pointer[Pointer[CChar]],
    interfaces : Pointer[GList],
    meta_data : gpointer,
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstElementFactoryClass (
    parent_class : GstPluginFeatureClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_element_factory_get_type() : CULong;

external gst_element_factory_find(
    name : Pointer[CChar]) : Pointer[GstElementFactory];

external gst_element_factory_get_element_type(
    factory : Pointer[GstElementFactory]) : CULong;

external gst_element_factory_get_longname(
    factory : Pointer[GstElementFactory]) : Pointer[CChar];

external gst_element_factory_get_klass(
    factory : Pointer[GstElementFactory]) : Pointer[CChar];

external gst_element_factory_get_description(
    factory : Pointer[GstElementFactory]) : Pointer[CChar];

external gst_element_factory_get_author(
    factory : Pointer[GstElementFactory]) : Pointer[CChar];

external gst_element_factory_get_documentation_uri(
    factory : Pointer[GstElementFactory]) : Pointer[CChar];

external gst_element_factory_get_icon_name(
    factory : Pointer[GstElementFactory]) : Pointer[CChar];

external gst_element_factory_get_num_pad_templates(
    factory : Pointer[GstElementFactory]) : UInt;

external gst_element_factory_get_static_pad_templates(
    factory : Pointer[GstElementFactory]) : Pointer[GList];

external gst_element_factory_get_uri_type(
    factory : Pointer[GstElementFactory]) : Int;

external gst_element_factory_get_uri_protocols(
    factory : Pointer[GstElementFactory]) : Pointer[Pointer[CChar]];

external gst_element_factory_has_interface(
    factory : Pointer[GstElementFactory],
    interfacename : Pointer[CChar]) : Int;

external gst_element_factory_create(
    factory : Pointer[GstElementFactory],
    name : Pointer[CChar]) : Pointer[GstElement];

external gst_element_factory_make(
    factoryname : Pointer[CChar],
    name : Pointer[CChar]) : Pointer[GstElement];

external __gst_element_factory_add_static_pad_template(
    elementfactory : Pointer[GstElementFactory],
    templ : Pointer[GstStaticPadTemplate]);

external __gst_element_factory_add_interface(
    elementfactory : Pointer[GstElementFactory],
    interfacename : Pointer[CChar]);

external gst_element_register(
    plugin : Pointer[GstPlugin],
    name : Pointer[CChar],
    rank : UInt,
    type : CULong) : Int;

alias GstElementFactoryListType = CULong;

external gst_element_factory_list_is_type(
    factory : Pointer[GstElementFactory],
    type : CULong) : Int;

external gst_element_factory_list_get_elements(
    type : CULong,
    minrank : GstRank) : Pointer[GList];

external gst_element_factory_list_filter(
    list : Pointer[GList],
    caps : Pointer[GstCaps],
    direction : GstPadDirection,
    subsetonly : Int) : Pointer[GList];

alias GstIndexEntry = Struct__GstIndexEntry;

alias GstIndexGroup = Struct__GstIndexGroup;

alias GstIndex = Struct__GstIndex;

alias GstIndexClass = Struct__GstIndexClass;

alias GST_INDEX_UNKNOWN = 0;
alias GST_INDEX_CERTAIN = 1;
alias GST_INDEX_FUZZY = 2;

alias GstIndexCertainty = Int;

alias GST_INDEX_ENTRY_ID = 0;
alias GST_INDEX_ENTRY_ASSOCIATION = 1;
alias GST_INDEX_ENTRY_OBJECT = 2;
alias GST_INDEX_ENTRY_FORMAT = 3;

alias GstIndexEntryType = Int;

alias GST_INDEX_LOOKUP_EXACT = 0;
alias GST_INDEX_LOOKUP_BEFORE = 1;
alias GST_INDEX_LOOKUP_AFTER = 2;

alias GstIndexLookupMethod = Int;

alias GstIndexAssociation = Struct__GstIndexAssociation;

record Struct__GstIndexAssociation (
    format : GstFormat,
    value : CLong,
);

alias GST_ASSOCIATION_FLAG_NONE = 0;
alias GST_ASSOCIATION_FLAG_KEY_UNIT = 1;
alias GST_ASSOCIATION_FLAG_DELTA_UNIT = 2;
alias GST_ASSOCIATION_FLAG_LAST = 256;

alias GstAssocFlags = Int;

record Struct__GstIndexEntry (
    type : GstIndexEntryType,
    id : Int,
    data : AUnionType,
);

record Struct__GstIndexGroup (
    groupnum : Int,
    entries : Pointer[GList],
    certainty : GstIndexCertainty,
    peergroup : Int,
);

alias GstIndexFilter = CCodePointer[[Pointer[Struct__GstIndex],Pointer[Struct__GstIndexEntry],RawPointer],[Int]];

alias GST_INDEX_RESOLVER_CUSTOM = 0;
alias GST_INDEX_RESOLVER_GTYPE = 1;
alias GST_INDEX_RESOLVER_PATH = 2;

alias GstIndexResolverMethod = Int;

alias GstIndexResolver = CCodePointer[[Pointer[Struct__GstIndex],Pointer[Struct__GstObject],Pointer[Pointer[CChar]],RawPointer],[Int]];

alias GST_INDEX_WRITABLE = 16;
alias GST_INDEX_READABLE = 32;
alias GST_INDEX_FLAG_LAST = 4096;

alias GstIndexFlags = Int;

record Struct__GstIndex (
    object : GstObject,
    groups : Pointer[GList],
    curgroup : Pointer[GstIndexGroup],
    maxgroup : Int,
    method : GstIndexResolverMethod,
    resolver : GstIndexResolver,
    resolver_user_data : gpointer,
    filter : GstIndexFilter,
    filter_user_data : gpointer,
    filter_user_data_destroy : GDestroyNotify,
    writers : Pointer[GHashTable],
    last_id : Int,
    resolver_user_data_destroy : GDestroyNotify,
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstIndexClass (
    parent_class : GstObjectClass,
    get_writer_id : CCodePointer[[Pointer[Struct__GstIndex],Pointer[Int],Pointer[CChar]],[Int]],
    commit : CCodePointer[[Pointer[Struct__GstIndex],Int],[]],
    add_entry : CCodePointer[[Pointer[Struct__GstIndex],Pointer[Struct__GstIndexEntry]],[]],
    get_assoc_entry : CCodePointer[[Pointer[Struct__GstIndex],Int,Int,Int,Int,CLong,CCodePointer[[RawPointer,RawPointer,RawPointer],[Int]],RawPointer],[Pointer[Struct__GstIndexEntry]]],
    entry_added : CCodePointer[[Pointer[Struct__GstIndex],Pointer[Struct__GstIndexEntry]],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_index_get_type() : CULong;

external gst_index_new() : Pointer[GstIndex];

external gst_index_commit(
    index : Pointer[GstIndex],
    id : Int);

external gst_index_get_group(
    index : Pointer[GstIndex]) : Int;

external gst_index_new_group(
    index : Pointer[GstIndex]) : Int;

external gst_index_set_group(
    index : Pointer[GstIndex],
    groupnum : Int) : Int;

external gst_index_set_certainty(
    index : Pointer[GstIndex],
    certainty : GstIndexCertainty);

external gst_index_get_certainty(
    index : Pointer[GstIndex]) : GstIndexCertainty;

external gst_index_set_filter(
    index : Pointer[GstIndex],
    filter : GstIndexFilter,
    user_data : gpointer);

external gst_index_set_filter_full(
    index : Pointer[GstIndex],
    filter : GstIndexFilter,
    user_data : gpointer,
    user_data_destroy : GDestroyNotify);

external gst_index_set_resolver(
    index : Pointer[GstIndex],
    resolver : GstIndexResolver,
    user_data : gpointer);

external gst_index_set_resolver_full(
    index : Pointer[GstIndex],
    resolver : GstIndexResolver,
    user_data : gpointer,
    user_data_destroy : GDestroyNotify);

external gst_index_get_writer_id(
    index : Pointer[GstIndex],
    writer : Pointer[GstObject],
    id : Pointer[Int]) : Int;

external gst_index_add_format(
    index : Pointer[GstIndex],
    id : Int,
    format : GstFormat) : Pointer[GstIndexEntry];

external gst_index_add_associationv(
    index : Pointer[GstIndex],
    id : Int,
    flags : GstAssocFlags,
    n : Int,
    list : Pointer[GstIndexAssociation]) : Pointer[GstIndexEntry];

external gst_index_add_association(
    index : Pointer[GstIndex],
    id : Int,
    flags : GstAssocFlags,
    format : GstFormat,
    value : CLong,
    ..) : Pointer[GstIndexEntry];

external gst_index_add_object(
    index : Pointer[GstIndex],
    id : Int,
    key : Pointer[CChar],
    type : CULong,
    object : gpointer) : Pointer[GstIndexEntry];

external gst_index_add_id(
    index : Pointer[GstIndex],
    id : Int,
    description : Pointer[CChar]) : Pointer[GstIndexEntry];

external gst_index_get_assoc_entry(
    index : Pointer[GstIndex],
    id : Int,
    method : GstIndexLookupMethod,
    flags : GstAssocFlags,
    format : GstFormat,
    value : CLong) : Pointer[GstIndexEntry];

external gst_index_get_assoc_entry_full(
    index : Pointer[GstIndex],
    id : Int,
    method : GstIndexLookupMethod,
    flags : GstAssocFlags,
    format : GstFormat,
    value : CLong,
    func : GCompareDataFunc,
    user_data : gpointer) : Pointer[GstIndexEntry];

external gst_index_entry_get_type() : CULong;

external gst_index_entry_copy(
    entry : Pointer[GstIndexEntry]) : Pointer[GstIndexEntry];

external gst_index_entry_free(
    entry : Pointer[GstIndexEntry]);

external gst_index_entry_assoc_map(
    entry : Pointer[GstIndexEntry],
    format : GstFormat,
    value : Pointer[CLong]) : Int;

alias GstIndexFactory = Struct__GstIndexFactory;

alias GstIndexFactoryClass = Struct__GstIndexFactoryClass;

record Struct__GstIndexFactory (
    feature : GstPluginFeature,
    longdesc : Pointer[CChar],
    type : CULong,
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstIndexFactoryClass (
    parent : GstPluginFeatureClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_index_factory_get_type() : CULong;

external gst_index_factory_new(
    name : Pointer[CChar],
    longdesc : Pointer[CChar],
    type : CULong) : Pointer[GstIndexFactory];

external gst_index_factory_destroy(
    factory : Pointer[GstIndexFactory]);

external gst_index_factory_find(
    name : Pointer[CChar]) : Pointer[GstIndexFactory];

external gst_index_factory_create(
    factory : Pointer[GstIndexFactory]) : Pointer[GstIndex];

external gst_index_factory_make(
    name : Pointer[CChar]) : Pointer[GstIndex];

alias GST_STATE_CHANGE_FAILURE = 0;
alias GST_STATE_CHANGE_SUCCESS = 1;
alias GST_STATE_CHANGE_ASYNC = 2;
alias GST_STATE_CHANGE_NO_PREROLL = 3;

alias GstStateChangeReturn = Int;

alias GST_STATE_CHANGE_NULL_TO_READY = 10;
alias GST_STATE_CHANGE_READY_TO_PAUSED = 19;
alias GST_STATE_CHANGE_PAUSED_TO_PLAYING = 28;
alias GST_STATE_CHANGE_PLAYING_TO_PAUSED = 35;
alias GST_STATE_CHANGE_PAUSED_TO_READY = 26;
alias GST_STATE_CHANGE_READY_TO_NULL = 17;

alias GstStateChange = Int;

alias GST_ELEMENT_LOCKED_STATE = 16;
alias GST_ELEMENT_IS_SINK = 32;
alias GST_ELEMENT_UNPARENTING = 64;
alias GST_ELEMENT_IS_SOURCE = 128;
alias GST_ELEMENT_FLAG_LAST = 1048576;

alias GstElementFlags = Int;

record Struct__GstElement (
    object : GstObject,
    state_lock : Pointer[GStaticRecMutex],
    state_cond : Pointer[GCond],
    state_cookie : UInt,
    current_state : GstState,
    next_state : GstState,
    pending_state : GstState,
    last_return : GstStateChangeReturn,
    bus : Pointer[GstBus],
    clock : Pointer[GstClock],
    base_time : CLong,
    numpads : UShort,
    pads : Pointer[GList],
    numsrcpads : UShort,
    srcpads : Pointer[GList],
    numsinkpads : UShort,
    sinkpads : Pointer[GList],
    pads_cookie : UInt,
    abidata : AUnionType,
);

record Struct__GstElementClass (
    parent_class : GstObjectClass,
    details : GstElementDetails,
    elementfactory : Pointer[GstElementFactory],
    padtemplates : Pointer[GList],
    numpadtemplates : Int,
    pad_templ_cookie : UInt,
    pad_added : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstPad]],[]],
    pad_removed : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstPad]],[]],
    no_more_pads : CCodePointer[[Pointer[Struct__GstElement]],[]],
    request_new_pad : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstPadTemplate],Pointer[CChar]],[Pointer[Struct__GstPad]]],
    release_pad : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstPad]],[]],
    get_state : CCodePointer[[Pointer[Struct__GstElement],Pointer[Int],Pointer[Int],CULong],[Int]],
    set_state : CCodePointer[[Pointer[Struct__GstElement],Int],[Int]],
    change_state : CCodePointer[[Pointer[Struct__GstElement],Int],[Int]],
    set_bus : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstBus]],[]],
    provide_clock : CCodePointer[[Pointer[Struct__GstElement]],[Pointer[Struct__GstClock]]],
    set_clock : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstClock]],[Int]],
    get_index : CCodePointer[[Pointer[Struct__GstElement]],[Pointer[Struct__GstIndex]]],
    set_index : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstIndex]],[]],
    send_event : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstEvent]],[Int]],
    get_query_types : CCodePointer[[Pointer[Struct__GstElement]],[Pointer[Int]]],
    query : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstQuery]],[Int]],
    meta_data : gpointer,
    request_new_pad_full : CCodePointer[[Pointer[Struct__GstElement],Pointer[Struct__GstPadTemplate],Pointer[CChar],Pointer[Struct__GstCaps]],[Pointer[Struct__GstPad]]],
    _gst_reserved : Array[gpointer,2],
);

external gst_element_class_add_pad_template(
    klass : Pointer[GstElementClass],
    templ : Pointer[GstPadTemplate]);

external gst_element_class_get_pad_template(
    element_class : Pointer[GstElementClass],
    name : Pointer[CChar]) : Pointer[GstPadTemplate];

external gst_element_class_get_pad_template_list(
    element_class : Pointer[GstElementClass]) : Pointer[GList];

external gst_element_class_set_documentation_uri(
    klass : Pointer[GstElementClass],
    uri : Pointer[CChar]);

external gst_element_class_set_icon_name(
    klass : Pointer[GstElementClass],
    name : Pointer[CChar]);

external gst_element_class_set_details(
    klass : Pointer[GstElementClass],
    details : Pointer[GstElementDetails]);

external gst_element_class_set_details_simple(
    klass : Pointer[GstElementClass],
    longname : Pointer[CChar],
    classification : Pointer[CChar],
    description : Pointer[CChar],
    author : Pointer[CChar]);

external gst_element_get_type() : CULong;

external gst_element_requires_clock(
    element : Pointer[GstElement]) : Int;

external gst_element_provides_clock(
    element : Pointer[GstElement]) : Int;

external gst_element_provide_clock(
    element : Pointer[GstElement]) : Pointer[GstClock];

external gst_element_get_clock(
    element : Pointer[GstElement]) : Pointer[GstClock];

external gst_element_set_clock(
    element : Pointer[GstElement],
    clock : Pointer[GstClock]) : Int;

external gst_element_set_base_time(
    element : Pointer[GstElement],
    time : CULong);

external gst_element_get_base_time(
    element : Pointer[GstElement]) : CULong;

external gst_element_set_start_time(
    element : Pointer[GstElement],
    time : CULong);

external gst_element_get_start_time(
    element : Pointer[GstElement]) : CULong;

external gst_element_is_indexable(
    element : Pointer[GstElement]) : Int;

external gst_element_set_index(
    element : Pointer[GstElement],
    index : Pointer[GstIndex]);

external gst_element_get_index(
    element : Pointer[GstElement]) : Pointer[GstIndex];

external gst_element_set_bus(
    element : Pointer[GstElement],
    bus : Pointer[GstBus]);

external gst_element_get_bus(
    element : Pointer[GstElement]) : Pointer[GstBus];

external gst_element_add_pad(
    element : Pointer[GstElement],
    pad : Pointer[GstPad]) : Int;

external gst_element_remove_pad(
    element : Pointer[GstElement],
    pad : Pointer[GstPad]) : Int;

external gst_element_no_more_pads(
    element : Pointer[GstElement]);

external gst_element_get_pad(
    element : Pointer[GstElement],
    name : Pointer[CChar]) : Pointer[GstPad];

external gst_element_get_static_pad(
    element : Pointer[GstElement],
    name : Pointer[CChar]) : Pointer[GstPad];

external gst_element_get_request_pad(
    element : Pointer[GstElement],
    name : Pointer[CChar]) : Pointer[GstPad];

external gst_element_request_pad(
    element : Pointer[GstElement],
    templ : Pointer[GstPadTemplate],
    name : Pointer[CChar],
    caps : Pointer[GstCaps]) : Pointer[GstPad];

external gst_element_release_request_pad(
    element : Pointer[GstElement],
    pad : Pointer[GstPad]);

external gst_element_iterate_pads(
    element : Pointer[GstElement]) : Pointer[GstIterator];

external gst_element_iterate_src_pads(
    element : Pointer[GstElement]) : Pointer[GstIterator];

external gst_element_iterate_sink_pads(
    element : Pointer[GstElement]) : Pointer[GstIterator];

external gst_element_send_event(
    element : Pointer[GstElement],
    event : Pointer[GstEvent]) : Int;

external gst_element_seek(
    element : Pointer[GstElement],
    rate : Double,
    format : GstFormat,
    flags : GstSeekFlags,
    cur_type : GstSeekType,
    cur : CLong,
    stop_type : GstSeekType,
    stop : CLong) : Int;

external gst_element_get_query_types(
    element : Pointer[GstElement]) : Pointer[GstQueryType];

external gst_element_query(
    element : Pointer[GstElement],
    query : Pointer[GstQuery]) : Int;

external gst_element_post_message(
    element : Pointer[GstElement],
    message : Pointer[GstMessage]) : Int;

external _gst_element_error_printf(
    format : Pointer[CChar],
    ..) : Pointer[CChar];

external gst_element_message_full(
    element : Pointer[GstElement],
    type : GstMessageType,
    domain : UInt,
    code : Int,
    text : Pointer[CChar],
    debug : Pointer[CChar],
    file : Pointer[CChar],
    function : Pointer[CChar],
    line : Int);

external gst_element_is_locked_state(
    element : Pointer[GstElement]) : Int;

external gst_element_set_locked_state(
    element : Pointer[GstElement],
    locked_state : Int) : Int;

external gst_element_sync_state_with_parent(
    element : Pointer[GstElement]) : Int;

external gst_element_get_state(
    element : Pointer[GstElement],
    state : Pointer[GstState],
    pending : Pointer[GstState],
    timeout : CULong) : GstStateChangeReturn;

external gst_element_set_state(
    element : Pointer[GstElement],
    state : GstState) : GstStateChangeReturn;

external gst_element_abort_state(
    element : Pointer[GstElement]);

external gst_element_change_state(
    element : Pointer[GstElement],
    transition : GstStateChange) : GstStateChangeReturn;

external gst_element_continue_state(
    element : Pointer[GstElement],
    ret : GstStateChangeReturn) : GstStateChangeReturn;

external gst_element_lost_state(
    element : Pointer[GstElement]);

external gst_element_lost_state_full(
    element : Pointer[GstElement],
    new_base_time : Int);

external gst_element_get_factory(
    element : Pointer[GstElement]) : Pointer[GstElementFactory];

alias GST_BIN_FLAG_LAST = 33554432;

alias GstBinFlags = Int;

alias GstBin = Struct__GstBin;

alias GstBinClass = Struct__GstBinClass;

alias GstBinPrivate = Opaque;

record Struct__GstBin (
    element : GstElement,
    numchildren : Int,
    children : Pointer[GList],
    children_cookie : UInt,
    child_bus : Pointer[GstBus],
    messages : Pointer[GList],
    polling : Int,
    state_dirty : Int,
    clock_dirty : Int,
    provided_clock : Pointer[GstClock],
    clock_provider : Pointer[GstElement],
    priv : Pointer[GstBinPrivate],
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstBinClass (
    parent_class : GstElementClass,
    pool : Pointer[GThreadPool],
    element_added : CCodePointer[[Pointer[Struct__GstBin],Pointer[Struct__GstElement]],[]],
    element_removed : CCodePointer[[Pointer[Struct__GstBin],Pointer[Struct__GstElement]],[]],
    add_element : CCodePointer[[Pointer[Struct__GstBin],Pointer[Struct__GstElement]],[Int]],
    remove_element : CCodePointer[[Pointer[Struct__GstBin],Pointer[Struct__GstElement]],[Int]],
    handle_message : CCodePointer[[Pointer[Struct__GstBin],Pointer[Struct__GstMessage]],[]],
    do_latency : CCodePointer[[Pointer[Struct__GstBin]],[Int]],
    _gst_reserved : Array[gpointer,3],
);

external gst_bin_get_type() : CULong;

external gst_bin_new(
    name : Pointer[CChar]) : Pointer[GstElement];

external gst_bin_add(
    bin : Pointer[GstBin],
    element : Pointer[GstElement]) : Int;

external gst_bin_remove(
    bin : Pointer[GstBin],
    element : Pointer[GstElement]) : Int;

external gst_bin_get_by_name(
    bin : Pointer[GstBin],
    name : Pointer[CChar]) : Pointer[GstElement];

external gst_bin_get_by_name_recurse_up(
    bin : Pointer[GstBin],
    name : Pointer[CChar]) : Pointer[GstElement];

external gst_bin_get_by_interface(
    bin : Pointer[GstBin],
    iface : CULong) : Pointer[GstElement];

external gst_bin_iterate_elements(
    bin : Pointer[GstBin]) : Pointer[GstIterator];

external gst_bin_iterate_sorted(
    bin : Pointer[GstBin]) : Pointer[GstIterator];

external gst_bin_iterate_recurse(
    bin : Pointer[GstBin]) : Pointer[GstIterator];

external gst_bin_iterate_sinks(
    bin : Pointer[GstBin]) : Pointer[GstIterator];

external gst_bin_iterate_sources(
    bin : Pointer[GstBin]) : Pointer[GstIterator];

external gst_bin_iterate_all_by_interface(
    bin : Pointer[GstBin],
    iface : CULong) : Pointer[GstIterator];

external gst_bin_recalculate_latency(
    bin : Pointer[GstBin]) : Int;

alias GstChildProxy = Opaque;

alias GstChildProxyInterface = Struct__GstChildProxyInterface;

record Struct__GstChildProxyInterface (
    parent : GTypeInterface,
    get_child_by_index : CCodePointer[[OpaquePointer,UInt],[Pointer[Struct__GstObject]]],
    get_children_count : CCodePointer[[OpaquePointer],[UInt]],
    child_added : CCodePointer[[OpaquePointer,Pointer[Struct__GstObject]],[]],
    child_removed : CCodePointer[[OpaquePointer,Pointer[Struct__GstObject]],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_child_proxy_get_type() : CULong;

external gst_child_proxy_get_child_by_name(
    parent : Pointer[GstChildProxy],
    name : Pointer[CChar]) : Pointer[GstObject];

external gst_child_proxy_get_child_by_index(
    parent : Pointer[GstChildProxy],
    index : UInt) : Pointer[GstObject];

external gst_child_proxy_get_children_count(
    parent : Pointer[GstChildProxy]) : UInt;

external gst_child_proxy_lookup(
    object : Pointer[GstObject],
    name : Pointer[CChar],
    target : Pointer[Pointer[GstObject]],
    pspec : Pointer[Pointer[GParamSpec]]) : Int;

external gst_child_proxy_get_property(
    object : Pointer[GstObject],
    name : Pointer[CChar],
    value : Pointer[GValue]);

external gst_child_proxy_get_valist(
    object : Pointer[GstObject],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gst_child_proxy_get(
    object : Pointer[GstObject],
    first_property_name : Pointer[CChar],
    ..);

external gst_child_proxy_set_property(
    object : Pointer[GstObject],
    name : Pointer[CChar],
    value : Pointer[GValue]);

external gst_child_proxy_set_valist(
    object : Pointer[GstObject],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gst_child_proxy_set(
    object : Pointer[GstObject],
    first_property_name : Pointer[CChar],
    ..);

external gst_child_proxy_child_added(
    object : Pointer[GstObject],
    child : Pointer[GstObject]);

external gst_child_proxy_child_removed(
    object : Pointer[GstObject],
    child : Pointer[GstObject]);

alias GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE = 1;
alias GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS = 2;
alias GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS = 4;
alias GST_DEBUG_GRAPH_SHOW_STATES = 8;
alias GST_DEBUG_GRAPH_SHOW_ALL = 15;

alias GstDebugGraphDetails = Int;

external _gst_debug_bin_to_dot_file(
    bin : Pointer[GstBin],
    details : GstDebugGraphDetails,
    file_name : Pointer[CChar]);

external _gst_debug_bin_to_dot_file_with_ts(
    bin : Pointer[GstBin],
    details : GstDebugGraphDetails,
    file_name : Pointer[CChar]);

alias GST_CORE_ERROR_FAILED = 1;
alias GST_CORE_ERROR_TOO_LAZY = 2;
alias GST_CORE_ERROR_NOT_IMPLEMENTED = 3;
alias GST_CORE_ERROR_STATE_CHANGE = 4;
alias GST_CORE_ERROR_PAD = 5;
alias GST_CORE_ERROR_THREAD = 6;
alias GST_CORE_ERROR_NEGOTIATION = 7;
alias GST_CORE_ERROR_EVENT = 8;
alias GST_CORE_ERROR_SEEK = 9;
alias GST_CORE_ERROR_CAPS = 10;
alias GST_CORE_ERROR_TAG = 11;
alias GST_CORE_ERROR_MISSING_PLUGIN = 12;
alias GST_CORE_ERROR_CLOCK = 13;
alias GST_CORE_ERROR_DISABLED = 14;
alias GST_CORE_ERROR_NUM_ERRORS = 15;

alias GstCoreError = Int;

alias GST_LIBRARY_ERROR_FAILED = 1;
alias GST_LIBRARY_ERROR_TOO_LAZY = 2;
alias GST_LIBRARY_ERROR_INIT = 3;
alias GST_LIBRARY_ERROR_SHUTDOWN = 4;
alias GST_LIBRARY_ERROR_SETTINGS = 5;
alias GST_LIBRARY_ERROR_ENCODE = 6;
alias GST_LIBRARY_ERROR_NUM_ERRORS = 7;

alias GstLibraryError = Int;

alias GST_RESOURCE_ERROR_FAILED = 1;
alias GST_RESOURCE_ERROR_TOO_LAZY = 2;
alias GST_RESOURCE_ERROR_NOT_FOUND = 3;
alias GST_RESOURCE_ERROR_BUSY = 4;
alias GST_RESOURCE_ERROR_OPEN_READ = 5;
alias GST_RESOURCE_ERROR_OPEN_WRITE = 6;
alias GST_RESOURCE_ERROR_OPEN_READ_WRITE = 7;
alias GST_RESOURCE_ERROR_CLOSE = 8;
alias GST_RESOURCE_ERROR_READ = 9;
alias GST_RESOURCE_ERROR_WRITE = 10;
alias GST_RESOURCE_ERROR_SEEK = 11;
alias GST_RESOURCE_ERROR_SYNC = 12;
alias GST_RESOURCE_ERROR_SETTINGS = 13;
alias GST_RESOURCE_ERROR_NO_SPACE_LEFT = 14;
alias GST_RESOURCE_ERROR_NUM_ERRORS = 15;

alias GstResourceError = Int;

alias GST_STREAM_ERROR_FAILED = 1;
alias GST_STREAM_ERROR_TOO_LAZY = 2;
alias GST_STREAM_ERROR_NOT_IMPLEMENTED = 3;
alias GST_STREAM_ERROR_TYPE_NOT_FOUND = 4;
alias GST_STREAM_ERROR_WRONG_TYPE = 5;
alias GST_STREAM_ERROR_CODEC_NOT_FOUND = 6;
alias GST_STREAM_ERROR_DECODE = 7;
alias GST_STREAM_ERROR_ENCODE = 8;
alias GST_STREAM_ERROR_DEMUX = 9;
alias GST_STREAM_ERROR_MUX = 10;
alias GST_STREAM_ERROR_FORMAT = 11;
alias GST_STREAM_ERROR_DECRYPT = 12;
alias GST_STREAM_ERROR_DECRYPT_NOKEY = 13;
alias GST_STREAM_ERROR_NUM_ERRORS = 14;

alias GstStreamError = Int;

external gst_g_error_get_type() : CULong;

external gst_error_get_message(
    domain : UInt,
    code : Int) : Pointer[CChar];

external gst_stream_error_quark() : UInt;

external gst_core_error_quark() : UInt;

external gst_resource_error_quark() : UInt;

external gst_library_error_quark() : UInt;

alias GstProxyPad = Struct__GstProxyPad;

alias GstProxyPadPrivate = Opaque;

alias GstProxyPadClass = Struct__GstProxyPadClass;

record Struct__GstProxyPad (
    pad : GstPad,
    priv : Pointer[GstProxyPadPrivate],
);

record Struct__GstProxyPadClass (
    parent_class : GstPadClass,
    _gst_reserved : Array[gpointer,1],
);

external gst_proxy_pad_get_type() : CULong;

alias GstGhostPad = Struct__GstGhostPad;

alias GstGhostPadPrivate = Opaque;

alias GstGhostPadClass = Struct__GstGhostPadClass;

record Struct__GstGhostPad (
    pad : GstProxyPad,
    priv : Pointer[GstGhostPadPrivate],
);

record Struct__GstGhostPadClass (
    parent_class : GstProxyPadClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_ghost_pad_get_type() : CULong;

external gst_ghost_pad_new(
    name : Pointer[CChar],
    target : Pointer[GstPad]) : Pointer[GstPad];

external gst_ghost_pad_new_no_target(
    name : Pointer[CChar],
    dir : GstPadDirection) : Pointer[GstPad];

external gst_ghost_pad_new_from_template(
    name : Pointer[CChar],
    target : Pointer[GstPad],
    templ : Pointer[GstPadTemplate]) : Pointer[GstPad];

external gst_ghost_pad_new_no_target_from_template(
    name : Pointer[CChar],
    templ : Pointer[GstPadTemplate]) : Pointer[GstPad];

external gst_ghost_pad_get_target(
    gpad : Pointer[GstGhostPad]) : Pointer[GstPad];

external gst_ghost_pad_set_target(
    gpad : Pointer[GstGhostPad],
    newtarget : Pointer[GstPad]) : Int;

external gst_ghost_pad_construct(
    gpad : Pointer[GstGhostPad]) : Int;

alias GST_LEVEL_NONE = 0;
alias GST_LEVEL_ERROR = 1;
alias GST_LEVEL_WARNING = 2;
alias GST_LEVEL_INFO = 3;
alias GST_LEVEL_DEBUG = 4;
alias GST_LEVEL_LOG = 5;
alias GST_LEVEL_FIXME = 6;
alias GST_LEVEL_TRACE = 7;
alias GST_LEVEL_MEMDUMP = 9;
alias GST_LEVEL_COUNT = 10;

alias GstDebugLevel = Int;

alias GST_DEBUG_FG_BLACK = 0;
alias GST_DEBUG_FG_RED = 1;
alias GST_DEBUG_FG_GREEN = 2;
alias GST_DEBUG_FG_YELLOW = 3;
alias GST_DEBUG_FG_BLUE = 4;
alias GST_DEBUG_FG_MAGENTA = 5;
alias GST_DEBUG_FG_CYAN = 6;
alias GST_DEBUG_FG_WHITE = 7;
alias GST_DEBUG_BG_BLACK = 0;
alias GST_DEBUG_BG_RED = 16;
alias GST_DEBUG_BG_GREEN = 32;
alias GST_DEBUG_BG_YELLOW = 48;
alias GST_DEBUG_BG_BLUE = 64;
alias GST_DEBUG_BG_MAGENTA = 80;
alias GST_DEBUG_BG_CYAN = 96;
alias GST_DEBUG_BG_WHITE = 112;
alias GST_DEBUG_BOLD = 256;
alias GST_DEBUG_UNDERLINE = 512;

alias GstDebugColorFlags = Int;

alias GstDebugCategory = Struct__GstDebugCategory;

record Struct__GstDebugCategory (
    threshold : Int,
    color : UInt,
    name : Pointer[CChar],
    description : Pointer[CChar],
);

alias GstDebugMessage = Opaque;

alias GstLogFunction = CCodePointer[[Pointer[Struct__GstDebugCategory],Int,Pointer[CChar],Pointer[CChar],Int,Pointer[Struct__GObject],OpaquePointer,RawPointer],[]];

external _gst_debug_init();

external gst_debug_log(
    category : Pointer[GstDebugCategory],
    level : GstDebugLevel,
    file : Pointer[CChar],
    function : Pointer[CChar],
    line : Int,
    object : Pointer[GObject],
    format : Pointer[CChar],
    ..);

external gst_debug_log_valist(
    category : Pointer[GstDebugCategory],
    level : GstDebugLevel,
    file : Pointer[CChar],
    function : Pointer[CChar],
    line : Int,
    object : Pointer[GObject],
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external _gst_debug_category_new(
    name : Pointer[CChar],
    color : UInt,
    description : Pointer[CChar]) : Pointer[GstDebugCategory];

external _gst_debug_get_category(
    name : Pointer[CChar]) : Pointer[GstDebugCategory];

external _gst_debug_dump_mem(
    cat : Pointer[GstDebugCategory],
    file : Pointer[CChar],
    func : Pointer[CChar],
    line : Int,
    obj : Pointer[GObject],
    msg : Pointer[CChar],
    data : Pointer[CUChar],
    length : UInt);

alias GstDebugFuncPtr = CCodePointer[[],[]];

external _gst_debug_register_funcptr(
    func : GstDebugFuncPtr,
    ptrname : Pointer[CChar]);

external _gst_debug_nameof_funcptr(
    func : GstDebugFuncPtr) : Pointer[CChar];

external gst_debug_message_get(
    message : Pointer[GstDebugMessage]) : Pointer[CChar];

external gst_debug_log_default(
    category : Pointer[GstDebugCategory],
    level : GstDebugLevel,
    file : Pointer[CChar],
    function : Pointer[CChar],
    line : Int,
    object : Pointer[GObject],
    message : Pointer[GstDebugMessage],
    unused : gpointer);

external gst_debug_level_get_name(
    level : GstDebugLevel) : Pointer[CChar];

external gst_debug_add_log_function(
    func : GstLogFunction,
    data : gpointer);

external gst_debug_remove_log_function(
    func : GstLogFunction) : UInt;

external gst_debug_remove_log_function_by_data(
    data : gpointer) : UInt;

external gst_debug_set_active(
    active : Int);

external gst_debug_is_active() : Int;

external gst_debug_set_colored(
    colored : Int);

external gst_debug_is_colored() : Int;

external gst_debug_set_default_threshold(
    level : GstDebugLevel);

external gst_debug_get_default_threshold() : GstDebugLevel;

external gst_debug_set_threshold_for_name(
    name : Pointer[CChar],
    level : GstDebugLevel);

external gst_debug_unset_threshold_for_name(
    name : Pointer[CChar]);

external gst_debug_category_free(
    category : Pointer[GstDebugCategory]);

external gst_debug_category_set_threshold(
    category : Pointer[GstDebugCategory],
    level : GstDebugLevel);

external gst_debug_category_reset_threshold(
    category : Pointer[GstDebugCategory]);

external gst_debug_category_get_threshold(
    category : Pointer[GstDebugCategory]) : GstDebugLevel;

external gst_debug_category_get_name(
    category : Pointer[GstDebugCategory]) : Pointer[CChar];

external gst_debug_category_get_color(
    category : Pointer[GstDebugCategory]) : UInt;

external gst_debug_category_get_description(
    category : Pointer[GstDebugCategory]) : Pointer[CChar];

external gst_debug_get_all_categories() : Pointer[GSList];

external gst_debug_construct_term_color(
    colorinfo : UInt) : Pointer[CChar];

external gst_debug_construct_win_color(
    colorinfo : UInt) : Int;

external GST_CAT_DEFAULT : Pointer[GstDebugCategory];

external __gst_debug_enabled : Int;

external __gst_debug_min : GstDebugLevel;

external gst_debug_print_stack_trace();

alias GstImplementsInterface = Opaque;

alias GstImplementsInterfaceClass = Struct__GstImplementsInterfaceClass;

record Struct__GstImplementsInterfaceClass (
    parent : GTypeInterface,
    supported : CCodePointer[[OpaquePointer,CULong],[Int]],
    _gst_reserved : Array[gpointer,4],
);

external gst_implements_interface_get_type() : CULong;

external gst_element_implements_interface(
    element : Pointer[GstElement],
    iface_type : CULong) : Int;

external gst_implements_interface_cast(
    from : gpointer,
    type : CULong) : gpointer;

external gst_implements_interface_check(
    from : gpointer,
    type : CULong) : Int;

external gst_marshal_VOID__BOXED_OBJECT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__POINTER_OBJECT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_OBJECT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_PARAM(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_BOXED(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_BOXED_STRING(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_OBJECT_STRING(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__OBJECT_STRING(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__INT_INT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__INT64(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_VOID__UINT_BOXED(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_BOOLEAN__VOID(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_BOOLEAN__POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_POINTER__POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gst_marshal_BOXED__BOXED(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

alias GstValueCompareFunc = CCodePointer[[Pointer[Struct__GValue],Pointer[Struct__GValue]],[Int]];

alias GstValueSerializeFunc = CCodePointer[[Pointer[Struct__GValue]],[Pointer[CChar]]];

alias GstValueDeserializeFunc = CCodePointer[[Pointer[Struct__GValue],Pointer[CChar]],[Int]];

alias GstValueUnionFunc = CCodePointer[[Pointer[Struct__GValue],Pointer[Struct__GValue],Pointer[Struct__GValue]],[Int]];

alias GstValueIntersectFunc = CCodePointer[[Pointer[Struct__GValue],Pointer[Struct__GValue],Pointer[Struct__GValue]],[Int]];

alias GstValueSubtractFunc = CCodePointer[[Pointer[Struct__GValue],Pointer[Struct__GValue],Pointer[Struct__GValue]],[Int]];

alias GstValueTable = Struct__GstValueTable;

record Struct__GstValueTable (
    type : CULong,
    compare : GstValueCompareFunc,
    serialize : GstValueSerializeFunc,
    deserialize : GstValueDeserializeFunc,
    _gst_reserved : Array[RawPointer,4],
);

external gst_int_range_get_type() : CULong;

external gst_int64_range_get_type() : CULong;

external gst_double_range_get_type() : CULong;

external gst_fraction_range_get_type() : CULong;

external gst_fourcc_get_type() : CULong;

external gst_fraction_get_type() : CULong;

external gst_value_list_get_type() : CULong;

external gst_value_array_get_type() : CULong;

external gst_date_get_type() : CULong;

external gst_date_time_get_type() : CULong;

external gst_value_register(
    table : Pointer[GstValueTable]);

external gst_value_init_and_copy(
    dest : Pointer[GValue],
    src : Pointer[GValue]);

external gst_value_serialize(
    value : Pointer[GValue]) : Pointer[CChar];

external gst_value_deserialize(
    dest : Pointer[GValue],
    src : Pointer[CChar]) : Int;

external gst_value_list_append_value(
    value : Pointer[GValue],
    append_value : Pointer[GValue]);

external gst_value_list_prepend_value(
    value : Pointer[GValue],
    prepend_value : Pointer[GValue]);

external gst_value_list_concat(
    dest : Pointer[GValue],
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]);

external gst_value_list_merge(
    dest : Pointer[GValue],
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]);

external gst_value_list_get_size(
    value : Pointer[GValue]) : UInt;

external gst_value_list_get_value(
    value : Pointer[GValue],
    index : UInt) : Pointer[GValue];

external gst_value_array_append_value(
    value : Pointer[GValue],
    append_value : Pointer[GValue]);

external gst_value_array_prepend_value(
    value : Pointer[GValue],
    prepend_value : Pointer[GValue]);

external gst_value_array_get_size(
    value : Pointer[GValue]) : UInt;

external gst_value_array_get_value(
    value : Pointer[GValue],
    index : UInt) : Pointer[GValue];

external gst_value_set_fourcc(
    value : Pointer[GValue],
    fourcc : UInt);

external gst_value_get_fourcc(
    value : Pointer[GValue]) : UInt;

external gst_value_set_int_range(
    value : Pointer[GValue],
    start : Int,
    end : Int);

external gst_value_get_int_range_min(
    value : Pointer[GValue]) : Int;

external gst_value_get_int_range_max(
    value : Pointer[GValue]) : Int;

external gst_value_set_int64_range(
    value : Pointer[GValue],
    start : CLong,
    end : CLong);

external gst_value_get_int64_range_min(
    value : Pointer[GValue]) : CLong;

external gst_value_get_int64_range_max(
    value : Pointer[GValue]) : CLong;

external gst_value_set_double_range(
    value : Pointer[GValue],
    start : Double,
    end : Double);

external gst_value_get_double_range_min(
    value : Pointer[GValue]) : Double;

external gst_value_get_double_range_max(
    value : Pointer[GValue]) : Double;

external gst_value_get_caps(
    value : Pointer[GValue]) : Pointer[GstCaps];

external gst_value_set_caps(
    value : Pointer[GValue],
    caps : Pointer[GstCaps]);

external gst_value_get_structure(
    value : Pointer[GValue]) : Pointer[GstStructure];

external gst_value_set_structure(
    value : Pointer[GValue],
    structure : Pointer[GstStructure]);

external gst_value_set_fraction(
    value : Pointer[GValue],
    numerator : Int,
    denominator : Int);

external gst_value_get_fraction_numerator(
    value : Pointer[GValue]) : Int;

external gst_value_get_fraction_denominator(
    value : Pointer[GValue]) : Int;

external gst_value_fraction_multiply(
    product : Pointer[GValue],
    factor1 : Pointer[GValue],
    factor2 : Pointer[GValue]) : Int;

external gst_value_fraction_subtract(
    dest : Pointer[GValue],
    minuend : Pointer[GValue],
    subtrahend : Pointer[GValue]) : Int;

external gst_value_set_fraction_range(
    value : Pointer[GValue],
    start : Pointer[GValue],
    end : Pointer[GValue]);

external gst_value_set_fraction_range_full(
    value : Pointer[GValue],
    numerator_start : Int,
    denominator_start : Int,
    numerator_end : Int,
    denominator_end : Int);

external gst_value_get_fraction_range_min(
    value : Pointer[GValue]) : Pointer[GValue];

external gst_value_get_fraction_range_max(
    value : Pointer[GValue]) : Pointer[GValue];

external gst_value_get_date(
    value : Pointer[GValue]) : Pointer[GDate];

external gst_value_set_date(
    value : Pointer[GValue],
    date : Pointer[GDate]);

external gst_value_compare(
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) : Int;

external gst_value_can_compare(
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) : Int;

external gst_value_union(
    dest : Pointer[GValue],
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) : Int;

external gst_value_can_union(
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) : Int;

external gst_value_register_union_func(
    type1 : CULong,
    type2 : CULong,
    func : GstValueUnionFunc);

external gst_value_intersect(
    dest : Pointer[GValue],
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) : Int;

external gst_value_can_intersect(
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) : Int;

external gst_value_register_intersect_func(
    type1 : CULong,
    type2 : CULong,
    func : GstValueIntersectFunc);

external gst_value_subtract(
    dest : Pointer[GValue],
    minuend : Pointer[GValue],
    subtrahend : Pointer[GValue]) : Int;

external gst_value_can_subtract(
    minuend : Pointer[GValue],
    subtrahend : Pointer[GValue]) : Int;

external gst_value_register_subtract_func(
    minuend_type : CULong,
    subtrahend_type : CULong,
    func : GstValueSubtractFunc);

external gst_value_is_fixed(
    value : Pointer[GValue]) : Int;

external gst_param_spec_fraction_get_type() : CULong;

alias GstParamSpecFraction = Struct__GstParamSpecFraction;

record Struct__GstParamSpecFraction (
    parent_instance : GParamSpec,
    min_num : Int,
    min_den : Int,
    max_num : Int,
    max_den : Int,
    def_num : Int,
    def_den : Int,
);

external gst_param_spec_fraction(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    min_num : Int,
    min_denom : Int,
    max_num : Int,
    max_denom : Int,
    default_num : Int,
    default_denom : Int,
    flags : GParamFlags) : Pointer[GParamSpec];

alias GstPipeline = Struct__GstPipeline;

alias GstPipelineClass = Struct__GstPipelineClass;

alias GstPipelinePrivate = Opaque;

alias GST_PIPELINE_FLAG_FIXED_CLOCK = 33554432;
alias GST_PIPELINE_FLAG_LAST = 536870912;

alias GstPipelineFlags = Int;

record Struct__GstPipeline (
    bin : GstBin,
    fixed_clock : Pointer[GstClock],
    stream_time : CULong,
    delay : CULong,
    priv : Pointer[GstPipelinePrivate],
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstPipelineClass (
    parent_class : GstBinClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_pipeline_get_type() : CULong;

external gst_pipeline_new(
    name : Pointer[CChar]) : Pointer[GstElement];

external gst_pipeline_get_bus(
    pipeline : Pointer[GstPipeline]) : Pointer[GstBus];

external gst_pipeline_set_new_stream_time(
    pipeline : Pointer[GstPipeline],
    time : CULong);

external gst_pipeline_get_last_stream_time(
    pipeline : Pointer[GstPipeline]) : CULong;

external gst_pipeline_use_clock(
    pipeline : Pointer[GstPipeline],
    clock : Pointer[GstClock]);

external gst_pipeline_set_clock(
    pipeline : Pointer[GstPipeline],
    clock : Pointer[GstClock]) : Int;

external gst_pipeline_get_clock(
    pipeline : Pointer[GstPipeline]) : Pointer[GstClock];

external gst_pipeline_auto_clock(
    pipeline : Pointer[GstPipeline]);

external gst_pipeline_set_delay(
    pipeline : Pointer[GstPipeline],
    delay : CULong);

external gst_pipeline_get_delay(
    pipeline : Pointer[GstPipeline]) : CULong;

external gst_pipeline_set_auto_flush_bus(
    pipeline : Pointer[GstPipeline],
    auto_flush : Int);

external gst_pipeline_get_auto_flush_bus(
    pipeline : Pointer[GstPipeline]) : Int;

alias GstPoll = Opaque;

record UnnamedStruct14 (
    fd : Int,
    idx : Int,
);

alias GstPollFD = UnnamedStruct14;

external gst_poll_new(
    controllable : Int) : Pointer[GstPoll];

external gst_poll_new_timer() : Pointer[GstPoll];

external gst_poll_free(
    set : Pointer[GstPoll]);

external gst_poll_get_read_gpollfd(
    set : Pointer[GstPoll],
    fd : Pointer[GPollFD]);

external gst_poll_fd_init(
    fd : Pointer[GstPollFD]);

external gst_poll_add_fd(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]) : Int;

external gst_poll_remove_fd(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]) : Int;

external gst_poll_fd_ctl_write(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD],
    active : Int) : Int;

external gst_poll_fd_ctl_read(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD],
    active : Int) : Int;

external gst_poll_fd_ignored(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]);

external gst_poll_fd_has_closed(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]) : Int;

external gst_poll_fd_has_error(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]) : Int;

external gst_poll_fd_can_read(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]) : Int;

external gst_poll_fd_can_write(
    set : Pointer[GstPoll],
    fd : Pointer[GstPollFD]) : Int;

external gst_poll_wait(
    set : Pointer[GstPoll],
    timeout : CULong) : Int;

external gst_poll_set_controllable(
    set : Pointer[GstPoll],
    controllable : Int) : Int;

external gst_poll_restart(
    set : Pointer[GstPoll]);

external gst_poll_set_flushing(
    set : Pointer[GstPoll],
    flushing : Int);

external gst_poll_write_control(
    set : Pointer[GstPoll]) : Int;

external gst_poll_read_control(
    set : Pointer[GstPoll]) : Int;

alias GstPreset = Opaque;

alias GstPresetInterface = Struct__GstPresetInterface;

record Struct__GstPresetInterface (
    parent : GTypeInterface,
    get_preset_names : CCodePointer[[OpaquePointer],[Pointer[Pointer[CChar]]]],
    get_property_names : CCodePointer[[OpaquePointer],[Pointer[Pointer[CChar]]]],
    load_preset : CCodePointer[[OpaquePointer,Pointer[CChar]],[Int]],
    save_preset : CCodePointer[[OpaquePointer,Pointer[CChar]],[Int]],
    rename_preset : CCodePointer[[OpaquePointer,Pointer[CChar],Pointer[CChar]],[Int]],
    delete_preset : CCodePointer[[OpaquePointer,Pointer[CChar]],[Int]],
    set_meta : CCodePointer[[OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar]],[Int]],
    get_meta : CCodePointer[[OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[Pointer[CChar]]],[Int]],
    _gst_reserved : Array[gpointer,4],
);

external gst_preset_get_type() : CULong;

external gst_preset_get_preset_names(
    preset : Pointer[GstPreset]) : Pointer[Pointer[CChar]];

external gst_preset_get_property_names(
    preset : Pointer[GstPreset]) : Pointer[Pointer[CChar]];

external gst_preset_load_preset(
    preset : Pointer[GstPreset],
    name : Pointer[CChar]) : Int;

external gst_preset_save_preset(
    preset : Pointer[GstPreset],
    name : Pointer[CChar]) : Int;

external gst_preset_rename_preset(
    preset : Pointer[GstPreset],
    old_name : Pointer[CChar],
    new_name : Pointer[CChar]) : Int;

external gst_preset_delete_preset(
    preset : Pointer[GstPreset],
    name : Pointer[CChar]) : Int;

external gst_preset_set_meta(
    preset : Pointer[GstPreset],
    name : Pointer[CChar],
    tag : Pointer[CChar],
    value : Pointer[CChar]) : Int;

external gst_preset_get_meta(
    preset : Pointer[GstPreset],
    name : Pointer[CChar],
    tag : Pointer[CChar],
    value : Pointer[Pointer[CChar]]) : Int;

alias GstRegistry = Struct__GstRegistry;

alias GstRegistryClass = Struct__GstRegistryClass;

alias GstRegistryPrivate = Opaque;

record Struct__GstRegistry (
    object : GstObject,
    plugins : Pointer[GList],
    features : Pointer[GList],
    paths : Pointer[GList],
    cache_file : Int,
    feature_hash : Pointer[GHashTable],
    basename_hash : Pointer[GHashTable],
    priv : Pointer[GstRegistryPrivate],
    _gst_reserved : Array[gpointer,1],
);

record Struct__GstRegistryClass (
    parent_class : GstObjectClass,
    plugin_added : CCodePointer[[Pointer[Struct__GstRegistry],Pointer[Struct__GstPlugin]],[]],
    feature_added : CCodePointer[[Pointer[Struct__GstRegistry],Pointer[Struct__GstPluginFeature]],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_registry_get_type() : CULong;

external gst_registry_get_default() : Pointer[GstRegistry];

external gst_registry_scan_path(
    registry : Pointer[GstRegistry],
    path : Pointer[CChar]) : Int;

external gst_registry_add_path(
    registry : Pointer[GstRegistry],
    path : Pointer[CChar]);

external gst_registry_get_path_list(
    registry : Pointer[GstRegistry]) : Pointer[GList];

external gst_registry_add_plugin(
    registry : Pointer[GstRegistry],
    plugin : Pointer[GstPlugin]) : Int;

external gst_registry_remove_plugin(
    registry : Pointer[GstRegistry],
    plugin : Pointer[GstPlugin]);

external gst_registry_add_feature(
    registry : Pointer[GstRegistry],
    feature : Pointer[GstPluginFeature]) : Int;

external gst_registry_remove_feature(
    registry : Pointer[GstRegistry],
    feature : Pointer[GstPluginFeature]);

external gst_registry_get_plugin_list(
    registry : Pointer[GstRegistry]) : Pointer[GList];

external gst_registry_plugin_filter(
    registry : Pointer[GstRegistry],
    filter : GstPluginFilter,
    first : Int,
    user_data : gpointer) : Pointer[GList];

external gst_registry_feature_filter(
    registry : Pointer[GstRegistry],
    filter : GstPluginFeatureFilter,
    first : Int,
    user_data : gpointer) : Pointer[GList];

external gst_registry_get_feature_list(
    registry : Pointer[GstRegistry],
    type : CULong) : Pointer[GList];

external gst_registry_get_feature_list_by_plugin(
    registry : Pointer[GstRegistry],
    name : Pointer[CChar]) : Pointer[GList];

external gst_registry_get_feature_list_cookie(
    registry : Pointer[GstRegistry]) : UInt;

external gst_registry_find_plugin(
    registry : Pointer[GstRegistry],
    name : Pointer[CChar]) : Pointer[GstPlugin];

external gst_registry_find_feature(
    registry : Pointer[GstRegistry],
    name : Pointer[CChar],
    type : CULong) : Pointer[GstPluginFeature];

external gst_registry_lookup(
    registry : Pointer[GstRegistry],
    filename : Pointer[CChar]) : Pointer[GstPlugin];

external gst_registry_lookup_feature(
    registry : Pointer[GstRegistry],
    name : Pointer[CChar]) : Pointer[GstPluginFeature];

external gst_registry_xml_read_cache(
    registry : Pointer[GstRegistry],
    location : Pointer[CChar]) : Int;

external gst_registry_xml_write_cache(
    registry : Pointer[GstRegistry],
    location : Pointer[CChar]) : Int;

external gst_default_registry_check_feature_version(
    feature_name : Pointer[CChar],
    min_major : UInt,
    min_minor : UInt,
    min_micro : UInt) : Int;

alias GstSegment = Struct__GstSegment;

record Struct__GstSegment (
    rate : Double,
    abs_rate : Double,
    format : GstFormat,
    flags : GstSeekFlags,
    start : CLong,
    stop : CLong,
    time : CLong,
    accum : CLong,
    last_stop : CLong,
    duration : CLong,
    applied_rate : Double,
    _gst_reserved : Array[CUChar,24],
);

external gst_segment_get_type() : CULong;

external gst_segment_new() : Pointer[GstSegment];

external gst_segment_copy(
    segment : Pointer[GstSegment]) : Pointer[GstSegment];

external gst_segment_free(
    segment : Pointer[GstSegment]);

external gst_segment_init(
    segment : Pointer[GstSegment],
    format : GstFormat);

external gst_segment_set_duration(
    segment : Pointer[GstSegment],
    format : GstFormat,
    duration : CLong);

external gst_segment_set_last_stop(
    segment : Pointer[GstSegment],
    format : GstFormat,
    position : CLong);

external gst_segment_set_seek(
    segment : Pointer[GstSegment],
    rate : Double,
    format : GstFormat,
    flags : GstSeekFlags,
    start_type : GstSeekType,
    start : CLong,
    stop_type : GstSeekType,
    stop : CLong,
    update : Pointer[Int]);

external gst_segment_set_newsegment(
    segment : Pointer[GstSegment],
    update : Int,
    rate : Double,
    format : GstFormat,
    start : CLong,
    stop : CLong,
    time : CLong);

external gst_segment_set_newsegment_full(
    segment : Pointer[GstSegment],
    update : Int,
    rate : Double,
    applied_rate : Double,
    format : GstFormat,
    start : CLong,
    stop : CLong,
    time : CLong);

external gst_segment_to_stream_time(
    segment : Pointer[GstSegment],
    format : GstFormat,
    position : CLong) : CLong;

external gst_segment_to_running_time(
    segment : Pointer[GstSegment],
    format : GstFormat,
    position : CLong) : CLong;

external gst_segment_to_position(
    segment : Pointer[GstSegment],
    format : GstFormat,
    running_time : CLong) : CLong;

external gst_segment_clip(
    segment : Pointer[GstSegment],
    format : GstFormat,
    start : CLong,
    stop : CLong,
    clip_start : Pointer[CLong],
    clip_stop : Pointer[CLong]) : Int;

external gst_segment_set_running_time(
    segment : Pointer[GstSegment],
    format : GstFormat,
    running_time : CLong) : Int;

alias GstSystemClock = Struct__GstSystemClock;

alias GstSystemClockClass = Struct__GstSystemClockClass;

alias GstSystemClockPrivate = Opaque;

alias GST_CLOCK_TYPE_REALTIME = 0;
alias GST_CLOCK_TYPE_MONOTONIC = 1;

alias GstClockType = Int;

record Struct__GstSystemClock (
    clock : GstClock,
    thread : Pointer[GThread],
    stopping : Int,
    priv : Pointer[GstSystemClockPrivate],
    _gst_reserved : Array[gpointer,3],
);

record Struct__GstSystemClockClass (
    parent_class : GstClockClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_system_clock_get_type() : CULong;

external gst_system_clock_obtain() : Pointer[GstClock];

alias GstTagSetter = Opaque;

alias GstTagSetterIFace = Struct__GstTagSetterIFace;

record Struct__GstTagSetterIFace (
    g_iface : GTypeInterface,
);

external gst_tag_setter_get_type() : CULong;

external gst_tag_setter_reset_tags(
    setter : Pointer[GstTagSetter]);

external gst_tag_setter_merge_tags(
    setter : Pointer[GstTagSetter],
    list : Pointer[GstTagList],
    mode : GstTagMergeMode);

external gst_tag_setter_add_tags(
    setter : Pointer[GstTagSetter],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    ..);

external gst_tag_setter_add_tag_values(
    setter : Pointer[GstTagSetter],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    ..);

external gst_tag_setter_add_tag_valist(
    setter : Pointer[GstTagSetter],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gst_tag_setter_add_tag_valist_values(
    setter : Pointer[GstTagSetter],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gst_tag_setter_add_tag_value(
    setter : Pointer[GstTagSetter],
    mode : GstTagMergeMode,
    tag : Pointer[CChar],
    value : Pointer[GValue]);

external gst_tag_setter_get_tag_list(
    setter : Pointer[GstTagSetter]) : Pointer[GstTagList];

external gst_tag_setter_set_tag_merge_mode(
    setter : Pointer[GstTagSetter],
    mode : GstTagMergeMode);

external gst_tag_setter_get_tag_merge_mode(
    setter : Pointer[GstTagSetter]) : GstTagMergeMode;

alias GST_ALLOC_TRACE_LIVE = 1;
alias GST_ALLOC_TRACE_MEM_LIVE = 2;

alias GstAllocTraceFlags = Int;

alias GstAllocTrace = Struct__GstAllocTrace;

record Struct__GstAllocTrace (
    name : Pointer[CChar],
    flags : Int,
    live : Int,
    mem_live : Pointer[GSList],
);

alias GstTrace = Struct__GstTrace;

alias GstTraceEntry = Struct__GstTraceEntry;

record Struct__GstTrace (
    filename : Pointer[CChar],
    fd : Int,
    buf : Pointer[GstTraceEntry],
    bufsize : Int,
    bufoffset : Int,
);

record Struct__GstTraceEntry (
    timestamp : CLong,
    sequence : UInt,
    data : UInt,
    message : Array[CChar,112],
);

external gst_trace_new(
    filename : Pointer[CChar],
    size : Int) : Pointer[GstTrace];

external gst_trace_destroy(
    trace : Pointer[GstTrace]);

external gst_trace_flush(
    trace : Pointer[GstTrace]);

external gst_trace_text_flush(
    trace : Pointer[GstTrace]);

external gst_trace_set_default(
    trace : Pointer[GstTrace]);

external _gst_trace_add_entry(
    trace : Pointer[GstTrace],
    seq : UInt,
    data : UInt,
    msg : Pointer[CChar]);

external gst_trace_read_tsc(
    dst : Pointer[CLong]);

external _gst_trace_mutex : GStaticMutex;

external gst_alloc_trace_available() : Int;

external gst_alloc_trace_list() : Pointer[GList];

external _gst_alloc_trace_register(
    name : Pointer[CChar]) : Pointer[GstAllocTrace];

external gst_alloc_trace_live_all() : Int;

external gst_alloc_trace_print_all();

external gst_alloc_trace_print_live();

external gst_alloc_trace_set_flags_all(
    flags : GstAllocTraceFlags);

external gst_alloc_trace_get(
    name : Pointer[CChar]) : Pointer[GstAllocTrace];

external gst_alloc_trace_print(
    trace : Pointer[GstAllocTrace]);

external gst_alloc_trace_set_flags(
    trace : Pointer[GstAllocTrace],
    flags : GstAllocTraceFlags);

external _gst_trace_on : Int;

alias GstTypeFind = Struct__GstTypeFind;

alias GstTypeFindFunction = CCodePointer[[Pointer[Struct__GstTypeFind],RawPointer],[]];

alias GST_TYPE_FIND_MINIMUM = 1;
alias GST_TYPE_FIND_POSSIBLE = 50;
alias GST_TYPE_FIND_LIKELY = 80;
alias GST_TYPE_FIND_NEARLY_CERTAIN = 99;
alias GST_TYPE_FIND_MAXIMUM = 100;

alias GstTypeFindProbability = Int;

record Struct__GstTypeFind (
    peek : CCodePointer[[RawPointer,CLong,UInt],[Pointer[CUChar]]],
    suggest : CCodePointer[[RawPointer,UInt,Pointer[Struct__GstCaps]],[]],
    data : gpointer,
    get_length : CCodePointer[[RawPointer],[CULong]],
    _gst_reserved : Array[gpointer,4],
);

external gst_type_find_get_type() : CULong;

external gst_type_find_peek(
    find : Pointer[GstTypeFind],
    offset : CLong,
    size : UInt) : Pointer[CUChar];

external gst_type_find_suggest(
    find : Pointer[GstTypeFind],
    probability : UInt,
    caps : Pointer[GstCaps]);

external gst_type_find_suggest_simple(
    find : Pointer[GstTypeFind],
    probability : UInt,
    media_type : Pointer[CChar],
    fieldname : Pointer[CChar],
    ..);

external gst_type_find_get_length(
    find : Pointer[GstTypeFind]) : CULong;

external gst_type_find_register(
    plugin : Pointer[GstPlugin],
    name : Pointer[CChar],
    rank : UInt,
    func : GstTypeFindFunction,
    extensions : Pointer[Pointer[CChar]],
    possible_caps : Pointer[GstCaps],
    data : gpointer,
    data_notify : GDestroyNotify) : Int;

alias GstTypeFindFactory = Struct__GstTypeFindFactory;

alias GstTypeFindFactoryClass = Struct__GstTypeFindFactoryClass;

record Struct__GstTypeFindFactory (
    feature : GstPluginFeature,
    function : GstTypeFindFunction,
    extensions : Pointer[Pointer[CChar]],
    caps : Pointer[GstCaps],
    user_data : gpointer,
    user_data_notify : GDestroyNotify,
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstTypeFindFactoryClass (
    parent : GstPluginFeatureClass,
    _gst_reserved : Array[gpointer,4],
);

external gst_type_find_factory_get_type() : CULong;

external gst_type_find_factory_get_list() : Pointer[GList];

external gst_type_find_factory_get_extensions(
    factory : Pointer[GstTypeFindFactory]) : Pointer[Pointer[CChar]];

external gst_type_find_factory_get_caps(
    factory : Pointer[GstTypeFindFactory]) : Pointer[GstCaps];

external gst_type_find_factory_call_function(
    factory : Pointer[GstTypeFindFactory],
    find : Pointer[GstTypeFind]);

alias GST_URI_UNKNOWN = 0;
alias GST_URI_SINK = 1;
alias GST_URI_SRC = 2;

alias GstURIType = Int;

alias GstURIHandler = Opaque;

alias GstURIHandlerInterface = Struct__GstURIHandlerInterface;

record Struct__GstURIHandlerInterface (
    parent : GTypeInterface,
    new_uri : CCodePointer[[OpaquePointer,Pointer[CChar]],[]],
    get_type : CCodePointer[[],[Int]],
    get_protocols : CCodePointer[[],[Pointer[Pointer[CChar]]]],
    get_uri : CCodePointer[[OpaquePointer],[Pointer[CChar]]],
    set_uri : CCodePointer[[OpaquePointer,Pointer[CChar]],[Int]],
    get_type_full : CCodePointer[[CULong],[Int]],
    get_protocols_full : CCodePointer[[CULong],[Pointer[Pointer[CChar]]]],
    _gst_reserved : Array[gpointer,2],
);

external gst_uri_protocol_is_valid(
    protocol : Pointer[CChar]) : Int;

external gst_uri_protocol_is_supported(
    type : GstURIType,
    protocol : Pointer[CChar]) : Int;

external gst_uri_is_valid(
    uri : Pointer[CChar]) : Int;

external gst_uri_get_protocol(
    uri : Pointer[CChar]) : Pointer[CChar];

external gst_uri_has_protocol(
    uri : Pointer[CChar],
    protocol : Pointer[CChar]) : Int;

external gst_uri_get_location(
    uri : Pointer[CChar]) : Pointer[CChar];

external gst_uri_construct(
    protocol : Pointer[CChar],
    location : Pointer[CChar]) : Pointer[CChar];

external gst_element_make_from_uri(
    type : GstURIType,
    uri : Pointer[CChar],
    elementname : Pointer[CChar]) : Pointer[GstElement];

external gst_uri_handler_get_type() : CULong;

external gst_uri_handler_get_uri_type(
    handler : Pointer[GstURIHandler]) : UInt;

external gst_uri_handler_get_protocols(
    handler : Pointer[GstURIHandler]) : Pointer[Pointer[CChar]];

external gst_uri_handler_get_uri(
    handler : Pointer[GstURIHandler]) : Pointer[CChar];

external gst_uri_handler_set_uri(
    handler : Pointer[GstURIHandler],
    uri : Pointer[CChar]) : Int;

external gst_uri_handler_new_uri(
    handler : Pointer[GstURIHandler],
    uri : Pointer[CChar]);

external gst_parse_error_quark() : UInt;

alias GST_PARSE_ERROR_SYNTAX = 0;
alias GST_PARSE_ERROR_NO_SUCH_ELEMENT = 1;
alias GST_PARSE_ERROR_NO_SUCH_PROPERTY = 2;
alias GST_PARSE_ERROR_LINK = 3;
alias GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY = 4;
alias GST_PARSE_ERROR_EMPTY_BIN = 5;
alias GST_PARSE_ERROR_EMPTY = 6;

alias GstParseError = Int;

alias GST_PARSE_FLAG_NONE = 0;
alias GST_PARSE_FLAG_FATAL_ERRORS = 1;

alias GstParseFlags = Int;

alias GstParseContext = Opaque;

external gst_parse_context_new() : Pointer[GstParseContext];

external gst_parse_context_get_missing_elements(
    context : Pointer[GstParseContext]) : Pointer[Pointer[CChar]];

external gst_parse_context_free(
    context : Pointer[GstParseContext]);

external gst_parse_launch(
    pipeline_description : Pointer[CChar],
    error : Pointer[Pointer[GError]]) : Pointer[GstElement];

external gst_parse_launchv(
    argv : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) : Pointer[GstElement];

external gst_parse_launch_full(
    pipeline_description : Pointer[CChar],
    context : Pointer[GstParseContext],
    flags : GstParseFlags,
    error : Pointer[Pointer[GError]]) : Pointer[GstElement];

external gst_parse_launchv_full(
    argv : Pointer[Pointer[CChar]],
    context : Pointer[GstParseContext],
    flags : GstParseFlags,
    error : Pointer[Pointer[GError]]) : Pointer[GstElement];

external gst_util_set_value_from_string(
    value : Pointer[GValue],
    value_str : Pointer[CChar]);

external gst_util_set_object_arg(
    object : Pointer[GObject],
    name : Pointer[CChar],
    value : Pointer[CChar]);

external gst_util_dump_mem(
    mem : Pointer[CUChar],
    size : UInt);

external gst_util_gdouble_to_guint64(
    value : Double) : CULong;

external gst_util_guint64_to_gdouble(
    value : CULong) : Double;

external gst_util_uint64_scale(
    val : CULong,
    num : CULong,
    denom : CULong) : CULong;

external gst_util_uint64_scale_round(
    val : CULong,
    num : CULong,
    denom : CULong) : CULong;

external gst_util_uint64_scale_ceil(
    val : CULong,
    num : CULong,
    denom : CULong) : CULong;

external gst_util_uint64_scale_int(
    val : CULong,
    num : Int,
    denom : Int) : CULong;

external gst_util_uint64_scale_int_round(
    val : CULong,
    num : Int,
    denom : Int) : CULong;

external gst_util_uint64_scale_int_ceil(
    val : CULong,
    num : Int,
    denom : Int) : CULong;

external gst_util_seqnum_next() : UInt;

external gst_util_seqnum_compare(
    s1 : UInt,
    s2 : UInt) : Int;

external gst_print_pad_caps(
    buf : Pointer[GString],
    indent : Int,
    pad : Pointer[GstPad]);

external gst_print_element_args(
    buf : Pointer[GString],
    indent : Int,
    element : Pointer[GstElement]);

external gst_type_register_static_full(
    parent_type : CULong,
    type_name : Pointer[CChar],
    class_size : UInt,
    base_init : GBaseInitFunc,
    base_finalize : GBaseFinalizeFunc,
    class_init : GClassInitFunc,
    class_finalize : GClassFinalizeFunc,
    class_data : gconstpointer,
    instance_size : UInt,
    n_preallocs : UShort,
    instance_init : GInstanceInitFunc,
    value_table : Pointer[GTypeValueTable],
    flags : GTypeFlags) : CULong;

external gst_object_default_error(
    source : Pointer[GstObject],
    error : Pointer[GError],
    debug : Pointer[CChar]);

external gst_element_create_all_pads(
    element : Pointer[GstElement]);

external gst_element_get_compatible_pad(
    element : Pointer[GstElement],
    pad : Pointer[GstPad],
    caps : Pointer[GstCaps]) : Pointer[GstPad];

external gst_element_get_compatible_pad_template(
    element : Pointer[GstElement],
    compattempl : Pointer[GstPadTemplate]) : Pointer[GstPadTemplate];

external gst_element_state_get_name(
    state : GstState) : Pointer[CChar];

external gst_element_state_change_return_get_name(
    state_ret : GstStateChangeReturn) : Pointer[CChar];

external gst_element_link(
    src : Pointer[GstElement],
    dest : Pointer[GstElement]) : Int;

external gst_element_link_many(
    element_1 : Pointer[GstElement],
    element_2 : Pointer[GstElement],
    ..) : Int;

external gst_element_link_filtered(
    src : Pointer[GstElement],
    dest : Pointer[GstElement],
    filter : Pointer[GstCaps]) : Int;

external gst_element_unlink(
    src : Pointer[GstElement],
    dest : Pointer[GstElement]);

external gst_element_unlink_many(
    element_1 : Pointer[GstElement],
    element_2 : Pointer[GstElement],
    ..);

external gst_element_link_pads(
    src : Pointer[GstElement],
    srcpadname : Pointer[CChar],
    dest : Pointer[GstElement],
    destpadname : Pointer[CChar]) : Int;

external gst_element_link_pads_full(
    src : Pointer[GstElement],
    srcpadname : Pointer[CChar],
    dest : Pointer[GstElement],
    destpadname : Pointer[CChar],
    flags : GstPadLinkCheck) : Int;

external gst_element_unlink_pads(
    src : Pointer[GstElement],
    srcpadname : Pointer[CChar],
    dest : Pointer[GstElement],
    destpadname : Pointer[CChar]);

external gst_element_link_pads_filtered(
    src : Pointer[GstElement],
    srcpadname : Pointer[CChar],
    dest : Pointer[GstElement],
    destpadname : Pointer[CChar],
    filter : Pointer[GstCaps]) : Int;

external gst_element_seek_simple(
    element : Pointer[GstElement],
    format : GstFormat,
    seek_flags : GstSeekFlags,
    seek_pos : CLong) : Int;

external gst_element_factory_can_src_caps(
    factory : Pointer[GstElementFactory],
    caps : Pointer[GstCaps]) : Int;

external gst_element_factory_can_sink_caps(
    factory : Pointer[GstElementFactory],
    caps : Pointer[GstCaps]) : Int;

external gst_element_query_position(
    element : Pointer[GstElement],
    format : Pointer[GstFormat],
    cur : Pointer[CLong]) : Int;

external gst_element_query_duration(
    element : Pointer[GstElement],
    format : Pointer[GstFormat],
    duration : Pointer[CLong]) : Int;

external gst_element_query_convert(
    element : Pointer[GstElement],
    src_format : GstFormat,
    src_val : CLong,
    dest_format : Pointer[GstFormat],
    dest_val : Pointer[CLong]) : Int;

external gst_element_class_install_std_props(
    klass : Pointer[GstElementClass],
    first_name : Pointer[CChar],
    ..);

external gst_pad_use_fixed_caps(
    pad : Pointer[GstPad]);

external gst_pad_get_fixed_caps_func(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_proxy_getcaps(
    pad : Pointer[GstPad]) : Pointer[GstCaps];

external gst_pad_proxy_setcaps(
    pad : Pointer[GstPad],
    caps : Pointer[GstCaps]) : Int;

external gst_pad_get_parent_element(
    pad : Pointer[GstPad]) : Pointer[GstElement];

external gst_pad_query_position(
    pad : Pointer[GstPad],
    format : Pointer[GstFormat],
    cur : Pointer[CLong]) : Int;

external gst_pad_query_duration(
    pad : Pointer[GstPad],
    format : Pointer[GstFormat],
    duration : Pointer[CLong]) : Int;

external gst_pad_query_convert(
    pad : Pointer[GstPad],
    src_format : GstFormat,
    src_val : CLong,
    dest_format : Pointer[GstFormat],
    dest_val : Pointer[CLong]) : Int;

external gst_pad_query_peer_position(
    pad : Pointer[GstPad],
    format : Pointer[GstFormat],
    cur : Pointer[CLong]) : Int;

external gst_pad_query_peer_duration(
    pad : Pointer[GstPad],
    format : Pointer[GstFormat],
    duration : Pointer[CLong]) : Int;

external gst_pad_query_peer_convert(
    pad : Pointer[GstPad],
    src_format : GstFormat,
    src_val : CLong,
    dest_format : Pointer[GstFormat],
    dest_val : Pointer[CLong]) : Int;

external gst_bin_add_many(
    bin : Pointer[GstBin],
    element_1 : Pointer[GstElement],
    ..);

external gst_bin_remove_many(
    bin : Pointer[GstBin],
    element_1 : Pointer[GstElement],
    ..);

external gst_bin_find_unlinked_pad(
    bin : Pointer[GstBin],
    direction : GstPadDirection) : Pointer[GstPad];

external gst_bin_find_unconnected_pad(
    bin : Pointer[GstBin],
    direction : GstPadDirection) : Pointer[GstPad];

external gst_buffer_merge(
    buf1 : Pointer[GstBuffer],
    buf2 : Pointer[GstBuffer]) : Pointer[GstBuffer];

external gst_buffer_join(
    buf1 : Pointer[GstBuffer],
    buf2 : Pointer[GstBuffer]) : Pointer[GstBuffer];

external gst_buffer_stamp(
    dest : Pointer[GstBuffer],
    src : Pointer[GstBuffer]);

external gst_atomic_int_set(
    atomic_int : Pointer[Int],
    value : Int);

external gst_pad_add_data_probe(
    pad : Pointer[GstPad],
    handler : GCallback,
    data : gpointer) : CULong;

external gst_pad_add_data_probe_full(
    pad : Pointer[GstPad],
    handler : GCallback,
    data : gpointer,
    notify : GDestroyNotify) : CULong;

external gst_pad_remove_data_probe(
    pad : Pointer[GstPad],
    handler_id : UInt);

external gst_pad_add_event_probe(
    pad : Pointer[GstPad],
    handler : GCallback,
    data : gpointer) : CULong;

external gst_pad_add_event_probe_full(
    pad : Pointer[GstPad],
    handler : GCallback,
    data : gpointer,
    notify : GDestroyNotify) : CULong;

external gst_pad_remove_event_probe(
    pad : Pointer[GstPad],
    handler_id : UInt);

external gst_pad_add_buffer_probe(
    pad : Pointer[GstPad],
    handler : GCallback,
    data : gpointer) : CULong;

external gst_pad_add_buffer_probe_full(
    pad : Pointer[GstPad],
    handler : GCallback,
    data : gpointer,
    notify : GDestroyNotify) : CULong;

external gst_pad_remove_buffer_probe(
    pad : Pointer[GstPad],
    handler_id : UInt);

external gst_element_found_tags_for_pad(
    element : Pointer[GstElement],
    pad : Pointer[GstPad],
    list : Pointer[GstTagList]);

external gst_element_found_tags(
    element : Pointer[GstElement],
    list : Pointer[GstTagList]);

external gst_parse_bin_from_description(
    bin_description : Pointer[CChar],
    ghost_unlinked_pads : Int,
    err : Pointer[Pointer[GError]]) : Pointer[GstElement];

external gst_parse_bin_from_description_full(
    bin_description : Pointer[CChar],
    ghost_unlinked_pads : Int,
    context : Pointer[GstParseContext],
    flags : GstParseFlags,
    err : Pointer[Pointer[GError]]) : Pointer[GstElement];

external gst_util_get_timestamp() : CULong;

alias GST_SEARCH_MODE_EXACT = 0;
alias GST_SEARCH_MODE_BEFORE = 1;
alias GST_SEARCH_MODE_AFTER = 2;

alias GstSearchMode = Int;

external gst_util_array_binary_search(
    array : gpointer,
    num_elements : UInt,
    element_size : CULong,
    search_func : GCompareDataFunc,
    mode : GstSearchMode,
    search_data : gconstpointer,
    user_data : gpointer) : gpointer;

external gst_util_greatest_common_divisor(
    a : Int,
    b : Int) : Int;

external gst_util_fraction_to_double(
    src_n : Int,
    src_d : Int,
    dest : Pointer[Double]);

external gst_util_double_to_fraction(
    src : Double,
    dest_n : Pointer[Int],
    dest_d : Pointer[Int]);

external gst_util_fraction_multiply(
    a_n : Int,
    a_d : Int,
    b_n : Int,
    b_d : Int,
    res_n : Pointer[Int],
    res_d : Pointer[Int]) : Int;

external gst_util_fraction_add(
    a_n : Int,
    a_d : Int,
    b_n : Int,
    b_d : Int,
    res_n : Pointer[Int],
    res_d : Pointer[Int]) : Int;

external gst_util_fraction_compare(
    a_n : Int,
    a_d : Int,
    b_n : Int,
    b_d : Int) : Int;

external gst_event_new_sink_message(
    msg : Pointer[GstMessage]) : Pointer[GstEvent];

external gst_event_parse_sink_message(
    event : Pointer[GstEvent],
    msg : Pointer[Pointer[GstMessage]]);

alias GstXML = Struct__GstXML;

alias GstXMLClass = Struct__GstXMLClass;

record Struct__GstXML (
    object : GstObject,
    topelements : Pointer[GList],
    ns : xmlNsPtr,
    _gst_reserved : Array[gpointer,4],
);

record Struct__GstXMLClass (
    parent_class : GstObjectClass,
    object_loaded : CCodePointer[[Pointer[Struct__GstXML],Pointer[Struct__GstObject],Pointer[Struct__xmlNode]],[]],
    object_saved : CCodePointer[[Pointer[Struct__GstXML],Pointer[Struct__GstObject],Pointer[Struct__xmlNode]],[]],
    _gst_reserved : Array[gpointer,4],
);

external gst_xml_get_type() : CULong;

external gst_xml_write(
    element : Pointer[GstElement]) : xmlDocPtr;

external gst_xml_write_file(
    element : Pointer[GstElement],
    out : Pointer[FILE]) : Int;

external gst_xml_new() : Pointer[GstXML];

external gst_xml_parse_doc(
    xml : Pointer[GstXML],
    doc : xmlDocPtr,
    root : Pointer[CUChar]) : Int;

external gst_xml_parse_file(
    xml : Pointer[GstXML],
    fname : Pointer[CUChar],
    root : Pointer[CUChar]) : Int;

external gst_xml_parse_memory(
    xml : Pointer[GstXML],
    buffer : Pointer[CUChar],
    size : UInt,
    root : Pointer[CChar]) : Int;

external gst_xml_get_element(
    xml : Pointer[GstXML],
    name : Pointer[CUChar]) : Pointer[GstElement];

external gst_xml_get_topelements(
    xml : Pointer[GstXML]) : Pointer[GList];

external gst_xml_make_element(
    cur : xmlNodePtr,
    parent : Pointer[GstObject]) : Pointer[GstElement];

external gst_init(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]);

external gst_init_check(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]],
    err : Pointer[Pointer[GError]]) : Int;

external gst_is_initialized() : Int;

external gst_init_get_option_group() : Pointer[GOptionGroup];

external gst_deinit();

external gst_version(
    major : Pointer[UInt],
    minor : Pointer[UInt],
    micro : Pointer[UInt],
    nano : Pointer[UInt]);

external gst_version_string() : Pointer[CChar];

external gst_segtrap_is_enabled() : Int;

external gst_segtrap_set_enabled(
    enabled : Int);

external gst_registry_fork_is_enabled() : Int;

external gst_registry_fork_set_enabled(
    enabled : Int);

external gst_update_registry() : Int;
