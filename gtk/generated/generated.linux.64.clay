// automatically generated by clay-bindgen
import glib.generated.*;
import gobject.generated.*;
import pango.generated.*;
import cairo.generated.*;
import gdkpixbuf.generated.*;
import gio.generated.*;

alias GdkPoint = Struct__GdkPoint;

alias GdkRectangle = Struct__GdkRectangle;

alias GdkSegment = Struct__GdkSegment;

alias GdkSpan = Struct__GdkSpan;

alias GdkWChar = guint32;

alias Struct__GdkAtom = Opaque;

alias GdkAtom = Pointer[Struct__GdkAtom];

alias GdkNativeWindow = guint32;

alias GdkColor = Struct__GdkColor;

alias GdkColormap = Struct__GdkColormap;

alias GdkCursor = Struct__GdkCursor;

alias GdkFont = Struct__GdkFont;

alias GdkGC = Struct__GdkGC;

alias GdkImage = Struct__GdkImage;

alias Struct__GdkRegion = Opaque;

alias GdkRegion = Struct__GdkRegion;

alias GdkVisual = Struct__GdkVisual;

alias GdkDrawable = Struct__GdkDrawable;

alias GdkBitmap = Struct__GdkDrawable;

alias GdkPixmap = Struct__GdkDrawable;

alias GdkWindow = Struct__GdkDrawable;

alias GdkDisplay = Struct__GdkDisplay;

alias GdkScreen = Struct__GdkScreen;


alias GdkByteOrder = CUInt;
alias GDK_LSB_FIRST = CUInt(0);
alias GDK_MSB_FIRST = CUInt(1);


alias GdkModifierType = CUInt;
alias GDK_SHIFT_MASK = CUInt(1);
alias GDK_LOCK_MASK = CUInt(2);
alias GDK_CONTROL_MASK = CUInt(4);
alias GDK_MOD1_MASK = CUInt(8);
alias GDK_MOD2_MASK = CUInt(16);
alias GDK_MOD3_MASK = CUInt(32);
alias GDK_MOD4_MASK = CUInt(64);
alias GDK_MOD5_MASK = CUInt(128);
alias GDK_BUTTON1_MASK = CUInt(256);
alias GDK_BUTTON2_MASK = CUInt(512);
alias GDK_BUTTON3_MASK = CUInt(1024);
alias GDK_BUTTON4_MASK = CUInt(2048);
alias GDK_BUTTON5_MASK = CUInt(4096);
alias GDK_SUPER_MASK = CUInt(67108864);
alias GDK_HYPER_MASK = CUInt(134217728);
alias GDK_META_MASK = CUInt(268435456);
alias GDK_RELEASE_MASK = CUInt(1073741824);
alias GDK_MODIFIER_MASK = CUInt(1543512063);


alias GdkInputCondition = CUInt;
alias GDK_INPUT_READ = CUInt(1);
alias GDK_INPUT_WRITE = CUInt(2);
alias GDK_INPUT_EXCEPTION = CUInt(4);


alias GdkStatus = CInt;
alias GDK_OK = CInt(0);
alias GDK_ERROR = CInt(-1);
alias GDK_ERROR_PARAM = CInt(-2);
alias GDK_ERROR_FILE = CInt(-3);
alias GDK_ERROR_MEM = CInt(-4);


alias GdkGrabStatus = CUInt;
alias GDK_GRAB_SUCCESS = CUInt(0);
alias GDK_GRAB_ALREADY_GRABBED = CUInt(1);
alias GDK_GRAB_INVALID_TIME = CUInt(2);
alias GDK_GRAB_NOT_VIEWABLE = CUInt(3);
alias GDK_GRAB_FROZEN = CUInt(4);

alias GdkInputFunction = CCodePointer[[gpointer, gint, GdkInputCondition],[]];

alias GdkDestroyNotify = CCodePointer[[gpointer],[]];

record Struct__GdkPoint (
    x : gint,
    y : gint,
);

record Struct__GdkRectangle (
    x : gint,
    y : gint,
    width : gint,
    height : gint,
);

record Struct__GdkSegment (
    x1 : gint,
    y1 : gint,
    x2 : gint,
    y2 : gint,
);

record Struct__GdkSpan (
    x : gint,
    y : gint,
    width : gint,
);

record Struct__GdkColor (
    pixel : guint32,
    red : guint16,
    green : guint16,
    blue : guint16,
);

alias GdkColormapClass = Struct__GdkColormapClass;

record Struct__GdkColormap (
    parent_instance : GObject,
    size : gint,
    colors : Pointer[GdkColor],
    visual : Pointer[GdkVisual],
    windowing_data : gpointer,
);

record Struct__GdkColormapClass (
    parent_class : GObjectClass,
);

external (cdecl) gdk_colormap_get_type() : GType;

external (cdecl) gdk_colormap_new(arg0:Pointer[GdkVisual], arg1:gboolean) : Pointer[GdkColormap];

external (cdecl) gdk_colormap_ref(arg0:Pointer[GdkColormap]) : Pointer[GdkColormap];

external (cdecl) gdk_colormap_unref(arg0:Pointer[GdkColormap]) : ;

external (cdecl) gdk_colormap_get_system() : Pointer[GdkColormap];

external (cdecl) gdk_colormap_get_screen(arg0:Pointer[GdkColormap]) : Pointer[GdkScreen];

external (cdecl) gdk_colormap_get_system_size() : gint;

external (cdecl) gdk_colormap_change(arg0:Pointer[GdkColormap], arg1:gint) : ;

external (cdecl) gdk_colormap_alloc_colors(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor], arg2:gint, arg3:gboolean, arg4:gboolean, arg5:Pointer[gboolean]) : gint;

external (cdecl) gdk_colormap_alloc_color(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor], arg2:gboolean, arg3:gboolean) : gboolean;

external (cdecl) gdk_colormap_free_colors(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor], arg2:gint) : ;

external (cdecl) gdk_colormap_query_color(arg0:Pointer[GdkColormap], arg1:gulong, arg2:Pointer[GdkColor]) : ;

external (cdecl) gdk_colormap_get_visual(arg0:Pointer[GdkColormap]) : Pointer[GdkVisual];

external (cdecl) gdk_color_copy(arg0:Pointer[GdkColor]) : Pointer[GdkColor];

external (cdecl) gdk_color_free(arg0:Pointer[GdkColor]) : ;

external (cdecl) gdk_color_parse(arg0:Pointer[gchar], arg1:Pointer[GdkColor]) : gboolean;

external (cdecl) gdk_color_hash(arg0:Pointer[GdkColor]) : guint;

external (cdecl) gdk_color_equal(arg0:Pointer[GdkColor], arg1:Pointer[GdkColor]) : gboolean;

external (cdecl) gdk_color_to_string(arg0:Pointer[GdkColor]) : Pointer[gchar];

external (cdecl) gdk_color_get_type() : GType;

external (cdecl) gdk_colors_store(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor], arg2:gint) : ;

external (cdecl) gdk_color_white(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor]) : gint;

external (cdecl) gdk_color_black(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor]) : gint;

external (cdecl) gdk_color_alloc(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor]) : gint;

external (cdecl) gdk_color_change(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor]) : gint;

external (cdecl) gdk_colors_alloc(arg0:Pointer[GdkColormap], arg1:gboolean, arg2:Pointer[gulong], arg3:gint, arg4:Pointer[gulong], arg5:gint) : gint;

external (cdecl) gdk_colors_free(arg0:Pointer[GdkColormap], arg1:Pointer[gulong], arg2:gint, arg3:gulong) : ;

alias GdkDragContext = Struct__GdkDragContext;


alias GdkDragAction = CUInt;
alias GDK_ACTION_DEFAULT = CUInt(1);
alias GDK_ACTION_COPY = CUInt(2);
alias GDK_ACTION_MOVE = CUInt(4);
alias GDK_ACTION_LINK = CUInt(8);
alias GDK_ACTION_PRIVATE = CUInt(16);
alias GDK_ACTION_ASK = CUInt(32);


alias GdkDragProtocol = CUInt;
alias GDK_DRAG_PROTO_MOTIF = CUInt(0);
alias GDK_DRAG_PROTO_XDND = CUInt(1);
alias GDK_DRAG_PROTO_ROOTWIN = CUInt(2);
alias GDK_DRAG_PROTO_NONE = CUInt(3);
alias GDK_DRAG_PROTO_WIN32_DROPFILES = CUInt(4);
alias GDK_DRAG_PROTO_OLE2 = CUInt(5);
alias GDK_DRAG_PROTO_LOCAL = CUInt(6);

alias GdkDragContextClass = Struct__GdkDragContextClass;

record Struct__GdkDragContext (
    parent_instance : GObject,
    protocol : GdkDragProtocol,
    is_source : gboolean,
    source_window : Pointer[GdkWindow],
    dest_window : Pointer[GdkWindow],
    targets : Pointer[GList],
    actions : GdkDragAction,
    suggested_action : GdkDragAction,
    action : GdkDragAction,
    start_time : guint32,
    windowing_data : gpointer,
);

record Struct__GdkDragContextClass (
    parent_class : GObjectClass,
);

external (cdecl) gdk_drag_context_get_type() : GType;

external (cdecl) gdk_drag_context_new() : Pointer[GdkDragContext];

external (cdecl) gdk_drag_context_list_targets(arg0:Pointer[GdkDragContext]) : Pointer[GList];

external (cdecl) gdk_drag_context_get_actions(arg0:Pointer[GdkDragContext]) : GdkDragAction;

external (cdecl) gdk_drag_context_get_suggested_action(arg0:Pointer[GdkDragContext]) : GdkDragAction;

external (cdecl) gdk_drag_context_get_selected_action(arg0:Pointer[GdkDragContext]) : GdkDragAction;

external (cdecl) gdk_drag_context_get_source_window(arg0:Pointer[GdkDragContext]) : Pointer[GdkWindow];

external (cdecl) gdk_drag_context_get_dest_window(arg0:Pointer[GdkDragContext]) : Pointer[GdkWindow];

external (cdecl) gdk_drag_context_get_protocol(arg0:Pointer[GdkDragContext]) : GdkDragProtocol;

external (cdecl) gdk_drag_context_ref(arg0:Pointer[GdkDragContext]) : ;

external (cdecl) gdk_drag_context_unref(arg0:Pointer[GdkDragContext]) : ;

external (cdecl) gdk_drag_status(arg0:Pointer[GdkDragContext], arg1:GdkDragAction, arg2:guint32) : ;

external (cdecl) gdk_drop_reply(arg0:Pointer[GdkDragContext], arg1:gboolean, arg2:guint32) : ;

external (cdecl) gdk_drop_finish(arg0:Pointer[GdkDragContext], arg1:gboolean, arg2:guint32) : ;

external (cdecl) gdk_drag_get_selection(arg0:Pointer[GdkDragContext]) : GdkAtom;

external (cdecl) gdk_drag_begin(arg0:Pointer[GdkWindow], arg1:Pointer[GList]) : Pointer[GdkDragContext];

external (cdecl) gdk_drag_get_protocol_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow, arg2:Pointer[GdkDragProtocol]) : GdkNativeWindow;

external (cdecl) gdk_drag_find_window_for_screen(arg0:Pointer[GdkDragContext], arg1:Pointer[GdkWindow], arg2:Pointer[GdkScreen], arg3:gint, arg4:gint, arg5:Pointer[Pointer[GdkWindow]], arg6:Pointer[GdkDragProtocol]) : ;

external (cdecl) gdk_drag_get_protocol(arg0:GdkNativeWindow, arg1:Pointer[GdkDragProtocol]) : GdkNativeWindow;

external (cdecl) gdk_drag_find_window(arg0:Pointer[GdkDragContext], arg1:Pointer[GdkWindow], arg2:gint, arg3:gint, arg4:Pointer[Pointer[GdkWindow]], arg5:Pointer[GdkDragProtocol]) : ;

external (cdecl) gdk_drag_motion(arg0:Pointer[GdkDragContext], arg1:Pointer[GdkWindow], arg2:GdkDragProtocol, arg3:gint, arg4:gint, arg5:GdkDragAction, arg6:GdkDragAction, arg7:guint32) : gboolean;

external (cdecl) gdk_drag_drop(arg0:Pointer[GdkDragContext], arg1:guint32) : ;

external (cdecl) gdk_drag_abort(arg0:Pointer[GdkDragContext], arg1:guint32) : ;

external (cdecl) gdk_drag_drop_succeeded(arg0:Pointer[GdkDragContext]) : gboolean;

alias GdkDeviceKey = Struct__GdkDeviceKey;

alias GdkDeviceAxis = Struct__GdkDeviceAxis;

alias GdkDevice = Struct__GdkDevice;

alias Struct__GdkDeviceClass = Opaque;

alias GdkDeviceClass = Struct__GdkDeviceClass;

alias GdkTimeCoord = Struct__GdkTimeCoord;


alias GdkExtensionMode = CUInt;
alias GDK_EXTENSION_EVENTS_NONE = CUInt(0);
alias GDK_EXTENSION_EVENTS_ALL = CUInt(1);
alias GDK_EXTENSION_EVENTS_CURSOR = CUInt(2);


alias GdkInputSource = CUInt;
alias GDK_SOURCE_MOUSE = CUInt(0);
alias GDK_SOURCE_PEN = CUInt(1);
alias GDK_SOURCE_ERASER = CUInt(2);
alias GDK_SOURCE_CURSOR = CUInt(3);


alias GdkInputMode = CUInt;
alias GDK_MODE_DISABLED = CUInt(0);
alias GDK_MODE_SCREEN = CUInt(1);
alias GDK_MODE_WINDOW = CUInt(2);


alias GdkAxisUse = CUInt;
alias GDK_AXIS_IGNORE = CUInt(0);
alias GDK_AXIS_X = CUInt(1);
alias GDK_AXIS_Y = CUInt(2);
alias GDK_AXIS_PRESSURE = CUInt(3);
alias GDK_AXIS_XTILT = CUInt(4);
alias GDK_AXIS_YTILT = CUInt(5);
alias GDK_AXIS_WHEEL = CUInt(6);
alias GDK_AXIS_LAST = CUInt(7);

record Struct__GdkDeviceKey (
    keyval : guint,
    modifiers : GdkModifierType,
);

record Struct__GdkDeviceAxis (
    use : GdkAxisUse,
    min : gdouble,
    max : gdouble,
);

record Struct__GdkDevice (
    parent_instance : GObject,
    name : Pointer[gchar],
    source : GdkInputSource,
    mode : GdkInputMode,
    has_cursor : gboolean,
    num_axes : gint,
    axes : Pointer[GdkDeviceAxis],
    num_keys : gint,
    keys : Pointer[GdkDeviceKey],
);

record Struct__GdkTimeCoord (
    time : guint32,
    axes : Array[gdouble, 128],
);

external (cdecl) gdk_device_get_type() : GType;

external (cdecl) gdk_devices_list() : Pointer[GList];

external (cdecl) gdk_device_get_name(arg0:Pointer[GdkDevice]) : Pointer[gchar];

external (cdecl) gdk_device_get_source(arg0:Pointer[GdkDevice]) : GdkInputSource;

external (cdecl) gdk_device_get_mode(arg0:Pointer[GdkDevice]) : GdkInputMode;

external (cdecl) gdk_device_get_has_cursor(arg0:Pointer[GdkDevice]) : gboolean;

external (cdecl) gdk_device_get_key(arg0:Pointer[GdkDevice], arg1:guint, arg2:Pointer[guint], arg3:Pointer[GdkModifierType]) : ;

external (cdecl) gdk_device_get_axis_use(arg0:Pointer[GdkDevice], arg1:guint) : GdkAxisUse;

external (cdecl) gdk_device_get_n_keys(arg0:Pointer[GdkDevice]) : gint;

external (cdecl) gdk_device_get_n_axes(arg0:Pointer[GdkDevice]) : gint;

external (cdecl) gdk_device_set_source(arg0:Pointer[GdkDevice], arg1:GdkInputSource) : ;

external (cdecl) gdk_device_set_mode(arg0:Pointer[GdkDevice], arg1:GdkInputMode) : gboolean;

external (cdecl) gdk_device_set_key(arg0:Pointer[GdkDevice], arg1:guint, arg2:guint, arg3:GdkModifierType) : ;

external (cdecl) gdk_device_set_axis_use(arg0:Pointer[GdkDevice], arg1:guint, arg2:GdkAxisUse) : ;

external (cdecl) gdk_device_get_state(arg0:Pointer[GdkDevice], arg1:Pointer[GdkWindow], arg2:Pointer[gdouble], arg3:Pointer[GdkModifierType]) : ;

external (cdecl) gdk_device_get_history(arg0:Pointer[GdkDevice], arg1:Pointer[GdkWindow], arg2:guint32, arg3:guint32, arg4:Pointer[Pointer[Pointer[GdkTimeCoord]]], arg5:Pointer[gint]) : gboolean;

external (cdecl) gdk_device_free_history(arg0:Pointer[Pointer[GdkTimeCoord]], arg1:gint) : ;

external (cdecl) gdk_device_get_axis(arg0:Pointer[GdkDevice], arg1:Pointer[gdouble], arg2:GdkAxisUse, arg3:Pointer[gdouble]) : gboolean;

external (cdecl) gdk_input_set_extension_events(arg0:Pointer[GdkWindow], arg1:gint, arg2:GdkExtensionMode) : ;

external (cdecl) gdk_device_get_core_pointer() : Pointer[GdkDevice];

alias GdkEventAny = Struct__GdkEventAny;

alias GdkEventExpose = Struct__GdkEventExpose;

alias GdkEventNoExpose = Struct__GdkEventNoExpose;

alias GdkEventVisibility = Struct__GdkEventVisibility;

alias GdkEventMotion = Struct__GdkEventMotion;

alias GdkEventButton = Struct__GdkEventButton;

alias GdkEventScroll = Struct__GdkEventScroll;

alias GdkEventKey = Struct__GdkEventKey;

alias GdkEventFocus = Struct__GdkEventFocus;

alias GdkEventCrossing = Struct__GdkEventCrossing;

alias GdkEventConfigure = Struct__GdkEventConfigure;

alias GdkEventProperty = Struct__GdkEventProperty;

alias GdkEventSelection = Struct__GdkEventSelection;

alias GdkEventOwnerChange = Struct__GdkEventOwnerChange;

alias GdkEventProximity = Struct__GdkEventProximity;

alias GdkEventClient = Struct__GdkEventClient;

alias GdkEventDND = Struct__GdkEventDND;

alias GdkEventWindowState = Struct__GdkEventWindowState;

alias GdkEventSetting = Struct__GdkEventSetting;

alias GdkEventGrabBroken = Struct__GdkEventGrabBroken;

alias GdkEvent = Union__GdkEvent;

alias GdkEventFunc = CCodePointer[[Pointer[GdkEvent], gpointer],[]];

alias GdkXEvent = /* unknown kind Void */ Opaque;


alias GdkFilterReturn = CUInt;
alias GDK_FILTER_CONTINUE = CUInt(0);
alias GDK_FILTER_TRANSLATE = CUInt(1);
alias GDK_FILTER_REMOVE = CUInt(2);

alias GdkFilterFunc = CCodePointer[[Pointer[GdkXEvent], Pointer[GdkEvent], gpointer],[GdkFilterReturn]];


alias GdkEventType = CInt;
alias GDK_NOTHING = CInt(-1);
alias GDK_DELETE = CInt(0);
alias GDK_DESTROY = CInt(1);
alias GDK_EXPOSE = CInt(2);
alias GDK_MOTION_NOTIFY = CInt(3);
alias GDK_BUTTON_PRESS = CInt(4);
alias GDK_2BUTTON_PRESS = CInt(5);
alias GDK_3BUTTON_PRESS = CInt(6);
alias GDK_BUTTON_RELEASE = CInt(7);
alias GDK_KEY_PRESS = CInt(8);
alias GDK_KEY_RELEASE = CInt(9);
alias GDK_ENTER_NOTIFY = CInt(10);
alias GDK_LEAVE_NOTIFY = CInt(11);
alias GDK_FOCUS_CHANGE = CInt(12);
alias GDK_CONFIGURE = CInt(13);
alias GDK_MAP = CInt(14);
alias GDK_UNMAP = CInt(15);
alias GDK_PROPERTY_NOTIFY = CInt(16);
alias GDK_SELECTION_CLEAR = CInt(17);
alias GDK_SELECTION_REQUEST = CInt(18);
alias GDK_SELECTION_NOTIFY = CInt(19);
alias GDK_PROXIMITY_IN = CInt(20);
alias GDK_PROXIMITY_OUT = CInt(21);
alias GDK_DRAG_ENTER = CInt(22);
alias GDK_DRAG_LEAVE = CInt(23);
alias GDK_DRAG_MOTION = CInt(24);
alias GDK_DRAG_STATUS = CInt(25);
alias GDK_DROP_START = CInt(26);
alias GDK_DROP_FINISHED = CInt(27);
alias GDK_CLIENT_EVENT = CInt(28);
alias GDK_VISIBILITY_NOTIFY = CInt(29);
alias GDK_NO_EXPOSE = CInt(30);
alias GDK_SCROLL = CInt(31);
alias GDK_WINDOW_STATE = CInt(32);
alias GDK_SETTING = CInt(33);
alias GDK_OWNER_CHANGE = CInt(34);
alias GDK_GRAB_BROKEN = CInt(35);
alias GDK_DAMAGE = CInt(36);
alias GDK_EVENT_LAST = CInt(37);


alias GdkEventMask = CUInt;
alias GDK_EXPOSURE_MASK = CUInt(2);
alias GDK_POINTER_MOTION_MASK = CUInt(4);
alias GDK_POINTER_MOTION_HINT_MASK = CUInt(8);
alias GDK_BUTTON_MOTION_MASK = CUInt(16);
alias GDK_BUTTON1_MOTION_MASK = CUInt(32);
alias GDK_BUTTON2_MOTION_MASK = CUInt(64);
alias GDK_BUTTON3_MOTION_MASK = CUInt(128);
alias GDK_BUTTON_PRESS_MASK = CUInt(256);
alias GDK_BUTTON_RELEASE_MASK = CUInt(512);
alias GDK_KEY_PRESS_MASK = CUInt(1024);
alias GDK_KEY_RELEASE_MASK = CUInt(2048);
alias GDK_ENTER_NOTIFY_MASK = CUInt(4096);
alias GDK_LEAVE_NOTIFY_MASK = CUInt(8192);
alias GDK_FOCUS_CHANGE_MASK = CUInt(16384);
alias GDK_STRUCTURE_MASK = CUInt(32768);
alias GDK_PROPERTY_CHANGE_MASK = CUInt(65536);
alias GDK_VISIBILITY_NOTIFY_MASK = CUInt(131072);
alias GDK_PROXIMITY_IN_MASK = CUInt(262144);
alias GDK_PROXIMITY_OUT_MASK = CUInt(524288);
alias GDK_SUBSTRUCTURE_MASK = CUInt(1048576);
alias GDK_SCROLL_MASK = CUInt(2097152);
alias GDK_ALL_EVENTS_MASK = CUInt(4194302);


alias GdkVisibilityState = CUInt;
alias GDK_VISIBILITY_UNOBSCURED = CUInt(0);
alias GDK_VISIBILITY_PARTIAL = CUInt(1);
alias GDK_VISIBILITY_FULLY_OBSCURED = CUInt(2);


alias GdkScrollDirection = CUInt;
alias GDK_SCROLL_UP = CUInt(0);
alias GDK_SCROLL_DOWN = CUInt(1);
alias GDK_SCROLL_LEFT = CUInt(2);
alias GDK_SCROLL_RIGHT = CUInt(3);


alias GdkNotifyType = CUInt;
alias GDK_NOTIFY_ANCESTOR = CUInt(0);
alias GDK_NOTIFY_VIRTUAL = CUInt(1);
alias GDK_NOTIFY_INFERIOR = CUInt(2);
alias GDK_NOTIFY_NONLINEAR = CUInt(3);
alias GDK_NOTIFY_NONLINEAR_VIRTUAL = CUInt(4);
alias GDK_NOTIFY_UNKNOWN = CUInt(5);


alias GdkCrossingMode = CUInt;
alias GDK_CROSSING_NORMAL = CUInt(0);
alias GDK_CROSSING_GRAB = CUInt(1);
alias GDK_CROSSING_UNGRAB = CUInt(2);
alias GDK_CROSSING_GTK_GRAB = CUInt(3);
alias GDK_CROSSING_GTK_UNGRAB = CUInt(4);
alias GDK_CROSSING_STATE_CHANGED = CUInt(5);


alias GdkPropertyState = CUInt;
alias GDK_PROPERTY_NEW_VALUE = CUInt(0);
alias GDK_PROPERTY_DELETE = CUInt(1);


alias GdkWindowState = CUInt;
alias GDK_WINDOW_STATE_WITHDRAWN = CUInt(1);
alias GDK_WINDOW_STATE_ICONIFIED = CUInt(2);
alias GDK_WINDOW_STATE_MAXIMIZED = CUInt(4);
alias GDK_WINDOW_STATE_STICKY = CUInt(8);
alias GDK_WINDOW_STATE_FULLSCREEN = CUInt(16);
alias GDK_WINDOW_STATE_ABOVE = CUInt(32);
alias GDK_WINDOW_STATE_BELOW = CUInt(64);


alias GdkSettingAction = CUInt;
alias GDK_SETTING_ACTION_NEW = CUInt(0);
alias GDK_SETTING_ACTION_CHANGED = CUInt(1);
alias GDK_SETTING_ACTION_DELETED = CUInt(2);


alias GdkOwnerChange = CUInt;
alias GDK_OWNER_CHANGE_NEW_OWNER = CUInt(0);
alias GDK_OWNER_CHANGE_DESTROY = CUInt(1);
alias GDK_OWNER_CHANGE_CLOSE = CUInt(2);

record Struct__GdkEventAny (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
);

record Struct__GdkEventExpose (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    area : GdkRectangle,
    region : Pointer[GdkRegion],
    count : gint,
);

record Struct__GdkEventNoExpose (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
);

record Struct__GdkEventVisibility (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    state : GdkVisibilityState,
);

record Struct__GdkEventMotion (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    time : guint32,
    x : gdouble,
    y : gdouble,
    axes : Pointer[gdouble],
    state : guint,
    is_hint : gint16,
    device : Pointer[GdkDevice],
    x_root : gdouble,
    y_root : gdouble,
);

record Struct__GdkEventButton (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    time : guint32,
    x : gdouble,
    y : gdouble,
    axes : Pointer[gdouble],
    state : guint,
    button : guint,
    device : Pointer[GdkDevice],
    x_root : gdouble,
    y_root : gdouble,
);

record Struct__GdkEventScroll (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    time : guint32,
    x : gdouble,
    y : gdouble,
    state : guint,
    direction : GdkScrollDirection,
    device : Pointer[GdkDevice],
    x_root : gdouble,
    y_root : gdouble,
);

record Struct__GdkEventKey (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    time : guint32,
    state : guint,
    keyval : guint,
    length : gint,
    string : Pointer[gchar],
    hardware_keycode : guint16,
    group : guint8,
    is_modifier : guint,
);

record Struct__GdkEventCrossing (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    subwindow : Pointer[GdkWindow],
    time : guint32,
    x : gdouble,
    y : gdouble,
    x_root : gdouble,
    y_root : gdouble,
    mode : GdkCrossingMode,
    detail : GdkNotifyType,
    focus : gboolean,
    state : guint,
);

record Struct__GdkEventFocus (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    in_ : gint16,
);

record Struct__GdkEventConfigure (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    x : gint,
    y : gint,
    width : gint,
    height : gint,
);

record Struct__GdkEventProperty (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    atom : GdkAtom,
    time : guint32,
    state : guint,
);

record Struct__GdkEventSelection (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    selection : GdkAtom,
    target : GdkAtom,
    property : GdkAtom,
    time : guint32,
    requestor : GdkNativeWindow,
);

record Struct__GdkEventOwnerChange (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    owner : GdkNativeWindow,
    reason : GdkOwnerChange,
    selection : GdkAtom,
    time : guint32,
    selection_time : guint32,
);

record Struct__GdkEventProximity (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    time : guint32,
    device : Pointer[GdkDevice],
);

record Struct__GdkEventClient (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    message_type : GdkAtom,
    data_format : gushort,
    data : Union_Unnamed1,
);

record Struct__GdkEventSetting (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    action : GdkSettingAction,
    name : Pointer[CChar],
);

record Struct__GdkEventWindowState (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    changed_mask : GdkWindowState,
    new_window_state : GdkWindowState,
);

record Struct__GdkEventGrabBroken (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    keyboard : gboolean,
    implicit : gboolean,
    grab_window : Pointer[GdkWindow],
);

record Struct__GdkEventDND (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : gint8,
    context : Pointer[GdkDragContext],
    time : guint32,
    x_root : gshort,
    y_root : gshort,
);

alias Union__GdkEvent = Union[
    /* type */ GdkEventType,
    /* any */ GdkEventAny,
    /* expose */ GdkEventExpose,
    /* no_expose */ GdkEventNoExpose,
    /* visibility */ GdkEventVisibility,
    /* motion */ GdkEventMotion,
    /* button */ GdkEventButton,
    /* scroll */ GdkEventScroll,
    /* key */ GdkEventKey,
    /* crossing */ GdkEventCrossing,
    /* focus_change */ GdkEventFocus,
    /* configure */ GdkEventConfigure,
    /* property */ GdkEventProperty,
    /* selection */ GdkEventSelection,
    /* owner_change */ GdkEventOwnerChange,
    /* proximity */ GdkEventProximity,
    /* client */ GdkEventClient,
    /* dnd */ GdkEventDND,
    /* window_state */ GdkEventWindowState,
    /* setting */ GdkEventSetting,
    /* grab_broken */ GdkEventGrabBroken,
];

external (cdecl) gdk_event_get_type() : GType;

external (cdecl) gdk_events_pending() : gboolean;

external (cdecl) gdk_event_get() : Pointer[GdkEvent];

external (cdecl) gdk_event_peek() : Pointer[GdkEvent];

external (cdecl) gdk_event_get_graphics_expose(arg0:Pointer[GdkWindow]) : Pointer[GdkEvent];

external (cdecl) gdk_event_put(arg0:Pointer[GdkEvent]) : ;

external (cdecl) gdk_event_new(arg0:GdkEventType) : Pointer[GdkEvent];

external (cdecl) gdk_event_copy(arg0:Pointer[GdkEvent]) : Pointer[GdkEvent];

external (cdecl) gdk_event_free(arg0:Pointer[GdkEvent]) : ;

external (cdecl) gdk_event_get_time(arg0:Pointer[GdkEvent]) : guint32;

external (cdecl) gdk_event_get_state(arg0:Pointer[GdkEvent], arg1:Pointer[GdkModifierType]) : gboolean;

external (cdecl) gdk_event_get_coords(arg0:Pointer[GdkEvent], arg1:Pointer[gdouble], arg2:Pointer[gdouble]) : gboolean;

external (cdecl) gdk_event_get_root_coords(arg0:Pointer[GdkEvent], arg1:Pointer[gdouble], arg2:Pointer[gdouble]) : gboolean;

external (cdecl) gdk_event_get_axis(arg0:Pointer[GdkEvent], arg1:GdkAxisUse, arg2:Pointer[gdouble]) : gboolean;

external (cdecl) gdk_event_request_motions(arg0:Pointer[GdkEventMotion]) : ;

external (cdecl) gdk_event_handler_set(arg0:GdkEventFunc, arg1:gpointer, arg2:GDestroyNotify) : ;

external (cdecl) gdk_event_set_screen(arg0:Pointer[GdkEvent], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gdk_event_get_screen(arg0:Pointer[GdkEvent]) : Pointer[GdkScreen];

external (cdecl) gdk_set_show_events(arg0:gboolean) : ;

external (cdecl) gdk_get_show_events() : gboolean;

external (cdecl) gdk_add_client_message_filter(arg0:GdkAtom, arg1:GdkFilterFunc, arg2:gpointer) : ;

external (cdecl) gdk_setting_get(arg0:Pointer[gchar], arg1:Pointer[GValue]) : gboolean;

alias GdkDisplayClass = Struct__GdkDisplayClass;

alias GdkDisplayPointerHooks = Struct__GdkDisplayPointerHooks;

record GdkKeyboardGrabInfo (
    window : Pointer[GdkWindow],
    native_window : Pointer[GdkWindow],
    serial : gulong,
    owner_events : gboolean,
    time : guint32,
);

record GdkPointerWindowInfo (
    toplevel_under_pointer : Pointer[GdkWindow],
    window_under_pointer : Pointer[GdkWindow],
    toplevel_x : gdouble,
    toplevel_y : gdouble,
    state : guint32,
    button : guint32,
    motion_hint_serial : gulong,
);

record Struct__GdkDisplay (
    parent_instance : GObject,
    queued_events : Pointer[GList],
    queued_tail : Pointer[GList],
    button_click_time : Array[guint32, 2],
    button_window : Array[Pointer[GdkWindow], 2],
    button_number : Array[gint, 2],
    double_click_time : guint,
    core_pointer : Pointer[GdkDevice],
    pointer_hooks : Pointer[GdkDisplayPointerHooks],
    closed : guint,
    ignore_core_events : guint,
    double_click_distance : guint,
    button_x : Array[gint, 2],
    button_y : Array[gint, 2],
    pointer_grabs : Pointer[GList],
    keyboard_grab : GdkKeyboardGrabInfo,
    pointer_info : GdkPointerWindowInfo,
    last_event_time : guint32,
);

record Struct__GdkDisplayClass (
    parent_class : GObjectClass,
    get_display_name : CCodePointer[[Pointer[GdkDisplay]],[Pointer[gchar]]],
    get_n_screens : CCodePointer[[Pointer[GdkDisplay]],[gint]],
    get_screen : CCodePointer[[Pointer[GdkDisplay], gint],[Pointer[GdkScreen]]],
    get_default_screen : CCodePointer[[Pointer[GdkDisplay]],[Pointer[GdkScreen]]],
    closed : CCodePointer[[Pointer[GdkDisplay], gboolean],[]],
);

record Struct__GdkDisplayPointerHooks (
    get_pointer : CCodePointer[[Pointer[GdkDisplay], Pointer[Pointer[GdkScreen]], Pointer[gint], Pointer[gint], Pointer[GdkModifierType]],[]],
    window_get_pointer : CCodePointer[[Pointer[GdkDisplay], Pointer[GdkWindow], Pointer[gint], Pointer[gint], Pointer[GdkModifierType]],[Pointer[GdkWindow]]],
    window_at_pointer : CCodePointer[[Pointer[GdkDisplay], Pointer[gint], Pointer[gint]],[Pointer[GdkWindow]]],
);

external (cdecl) gdk_display_get_type() : GType;

external (cdecl) gdk_display_open(arg0:Pointer[gchar]) : Pointer[GdkDisplay];

external (cdecl) gdk_display_get_name(arg0:Pointer[GdkDisplay]) : Pointer[gchar];

external (cdecl) gdk_display_get_n_screens(arg0:Pointer[GdkDisplay]) : gint;

external (cdecl) gdk_display_get_screen(arg0:Pointer[GdkDisplay], arg1:gint) : Pointer[GdkScreen];

external (cdecl) gdk_display_get_default_screen(arg0:Pointer[GdkDisplay]) : Pointer[GdkScreen];

external (cdecl) gdk_display_pointer_ungrab(arg0:Pointer[GdkDisplay], arg1:guint32) : ;

external (cdecl) gdk_display_keyboard_ungrab(arg0:Pointer[GdkDisplay], arg1:guint32) : ;

external (cdecl) gdk_display_pointer_is_grabbed(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_beep(arg0:Pointer[GdkDisplay]) : ;

external (cdecl) gdk_display_sync(arg0:Pointer[GdkDisplay]) : ;

external (cdecl) gdk_display_flush(arg0:Pointer[GdkDisplay]) : ;

external (cdecl) gdk_display_close(arg0:Pointer[GdkDisplay]) : ;

external (cdecl) gdk_display_is_closed(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_list_devices(arg0:Pointer[GdkDisplay]) : Pointer[GList];

external (cdecl) gdk_display_get_event(arg0:Pointer[GdkDisplay]) : Pointer[GdkEvent];

external (cdecl) gdk_display_peek_event(arg0:Pointer[GdkDisplay]) : Pointer[GdkEvent];

external (cdecl) gdk_display_put_event(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkEvent]) : ;

external (cdecl) gdk_display_add_client_message_filter(arg0:Pointer[GdkDisplay], arg1:GdkAtom, arg2:GdkFilterFunc, arg3:gpointer) : ;

external (cdecl) gdk_display_set_double_click_time(arg0:Pointer[GdkDisplay], arg1:guint) : ;

external (cdecl) gdk_display_set_double_click_distance(arg0:Pointer[GdkDisplay], arg1:guint) : ;

external (cdecl) gdk_display_get_default() : Pointer[GdkDisplay];

external (cdecl) gdk_display_get_core_pointer(arg0:Pointer[GdkDisplay]) : Pointer[GdkDevice];

external (cdecl) gdk_display_get_pointer(arg0:Pointer[GdkDisplay], arg1:Pointer[Pointer[GdkScreen]], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[GdkModifierType]) : ;

external (cdecl) gdk_display_get_window_at_pointer(arg0:Pointer[GdkDisplay], arg1:Pointer[gint], arg2:Pointer[gint]) : Pointer[GdkWindow];

external (cdecl) gdk_display_warp_pointer(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkScreen], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_display_set_pointer_hooks(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkDisplayPointerHooks]) : Pointer[GdkDisplayPointerHooks];

external (cdecl) gdk_display_open_default_libgtk_only() : Pointer[GdkDisplay];

external (cdecl) gdk_display_supports_cursor_alpha(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_supports_cursor_color(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_get_default_cursor_size(arg0:Pointer[GdkDisplay]) : guint;

external (cdecl) gdk_display_get_maximal_cursor_size(arg0:Pointer[GdkDisplay], arg1:Pointer[guint], arg2:Pointer[guint]) : ;

external (cdecl) gdk_display_get_default_group(arg0:Pointer[GdkDisplay]) : Pointer[GdkWindow];

external (cdecl) gdk_display_supports_selection_notification(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_request_selection_notification(arg0:Pointer[GdkDisplay], arg1:GdkAtom) : gboolean;

external (cdecl) gdk_display_supports_clipboard_persistence(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_store_clipboard(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkWindow], arg2:guint32, arg3:Pointer[GdkAtom], arg4:gint) : ;

external (cdecl) gdk_display_supports_shapes(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_supports_input_shapes(arg0:Pointer[GdkDisplay]) : gboolean;

external (cdecl) gdk_display_supports_composite(arg0:Pointer[GdkDisplay]) : gboolean;

alias GdkScreenClass = Struct__GdkScreenClass;

record Struct__GdkScreen (
    parent_instance : GObject,
    closed : guint,
    normal_gcs : Array[Pointer[GdkGC], 32],
    exposure_gcs : Array[Pointer[GdkGC], 32],
    subwindow_gcs : Array[Pointer[GdkGC], 32],
    font_options : Pointer[cairo_font_options_t],
    resolution : CDouble,
);

record Struct__GdkScreenClass (
    parent_class : GObjectClass,
    size_changed : CCodePointer[[Pointer[GdkScreen]],[]],
    composited_changed : CCodePointer[[Pointer[GdkScreen]],[]],
    monitors_changed : CCodePointer[[Pointer[GdkScreen]],[]],
);

external (cdecl) gdk_screen_get_type() : GType;

external (cdecl) gdk_screen_get_default_colormap(arg0:Pointer[GdkScreen]) : Pointer[GdkColormap];

external (cdecl) gdk_screen_set_default_colormap(arg0:Pointer[GdkScreen], arg1:Pointer[GdkColormap]) : ;

external (cdecl) gdk_screen_get_system_colormap(arg0:Pointer[GdkScreen]) : Pointer[GdkColormap];

external (cdecl) gdk_screen_get_system_visual(arg0:Pointer[GdkScreen]) : Pointer[GdkVisual];

external (cdecl) gdk_screen_get_rgb_colormap(arg0:Pointer[GdkScreen]) : Pointer[GdkColormap];

external (cdecl) gdk_screen_get_rgb_visual(arg0:Pointer[GdkScreen]) : Pointer[GdkVisual];

external (cdecl) gdk_screen_get_rgba_colormap(arg0:Pointer[GdkScreen]) : Pointer[GdkColormap];

external (cdecl) gdk_screen_get_rgba_visual(arg0:Pointer[GdkScreen]) : Pointer[GdkVisual];

external (cdecl) gdk_screen_is_composited(arg0:Pointer[GdkScreen]) : gboolean;

external (cdecl) gdk_screen_get_root_window(arg0:Pointer[GdkScreen]) : Pointer[GdkWindow];

external (cdecl) gdk_screen_get_display(arg0:Pointer[GdkScreen]) : Pointer[GdkDisplay];

external (cdecl) gdk_screen_get_number(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_get_width(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_get_height(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_get_width_mm(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_get_height_mm(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_list_visuals(arg0:Pointer[GdkScreen]) : Pointer[GList];

external (cdecl) gdk_screen_get_toplevel_windows(arg0:Pointer[GdkScreen]) : Pointer[GList];

external (cdecl) gdk_screen_make_display_name(arg0:Pointer[GdkScreen]) : Pointer[gchar];

external (cdecl) gdk_screen_get_n_monitors(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_get_primary_monitor(arg0:Pointer[GdkScreen]) : gint;

external (cdecl) gdk_screen_get_monitor_geometry(arg0:Pointer[GdkScreen], arg1:gint, arg2:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_screen_get_monitor_at_point(arg0:Pointer[GdkScreen], arg1:gint, arg2:gint) : gint;

external (cdecl) gdk_screen_get_monitor_at_window(arg0:Pointer[GdkScreen], arg1:Pointer[GdkWindow]) : gint;

external (cdecl) gdk_screen_get_monitor_width_mm(arg0:Pointer[GdkScreen], arg1:gint) : gint;

external (cdecl) gdk_screen_get_monitor_height_mm(arg0:Pointer[GdkScreen], arg1:gint) : gint;

external (cdecl) gdk_screen_get_monitor_plug_name(arg0:Pointer[GdkScreen], arg1:gint) : Pointer[gchar];

external (cdecl) gdk_screen_broadcast_client_message(arg0:Pointer[GdkScreen], arg1:Pointer[GdkEvent]) : ;

external (cdecl) gdk_screen_get_default() : Pointer[GdkScreen];

external (cdecl) gdk_screen_get_setting(arg0:Pointer[GdkScreen], arg1:Pointer[gchar], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gdk_screen_set_font_options(arg0:Pointer[GdkScreen], arg1:Pointer[cairo_font_options_t]) : ;

external (cdecl) gdk_screen_get_font_options(arg0:Pointer[GdkScreen]) : Pointer[cairo_font_options_t];

external (cdecl) gdk_screen_set_resolution(arg0:Pointer[GdkScreen], arg1:gdouble) : ;

external (cdecl) gdk_screen_get_resolution(arg0:Pointer[GdkScreen]) : gdouble;

external (cdecl) gdk_screen_get_active_window(arg0:Pointer[GdkScreen]) : Pointer[GdkWindow];

external (cdecl) gdk_screen_get_window_stack(arg0:Pointer[GdkScreen]) : Pointer[GList];

alias GdkAppLaunchContext = Struct_GdkAppLaunchContext;

alias GdkAppLaunchContextClass = Struct_GdkAppLaunchContextClass;

alias Struct_GdkAppLaunchContextPrivate = Opaque;

alias GdkAppLaunchContextPrivate = Struct_GdkAppLaunchContextPrivate;

record Struct_GdkAppLaunchContext (
    parent_instance : GAppLaunchContext,
    priv : Pointer[GdkAppLaunchContextPrivate],
);

record Struct_GdkAppLaunchContextClass (
    parent_class : GAppLaunchContextClass,
);

external (cdecl) gdk_app_launch_context_get_type() : GType;

external (cdecl) gdk_app_launch_context_new() : Pointer[GdkAppLaunchContext];

external (cdecl) gdk_app_launch_context_set_display(arg0:Pointer[GdkAppLaunchContext], arg1:Pointer[GdkDisplay]) : ;

external (cdecl) gdk_app_launch_context_set_screen(arg0:Pointer[GdkAppLaunchContext], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gdk_app_launch_context_set_desktop(arg0:Pointer[GdkAppLaunchContext], arg1:gint) : ;

external (cdecl) gdk_app_launch_context_set_timestamp(arg0:Pointer[GdkAppLaunchContext], arg1:guint32) : ;

external (cdecl) gdk_app_launch_context_set_icon(arg0:Pointer[GdkAppLaunchContext], arg1:Pointer[GIcon]) : ;

external (cdecl) gdk_app_launch_context_set_icon_name(arg0:Pointer[GdkAppLaunchContext], arg1:Pointer[CChar]) : ;

alias GdkRgbCmap = Struct__GdkRgbCmap;


alias GdkRgbDither = CUInt;
alias GDK_RGB_DITHER_NONE = CUInt(0);
alias GDK_RGB_DITHER_NORMAL = CUInt(1);
alias GDK_RGB_DITHER_MAX = CUInt(2);

record Struct__GdkRgbCmap (
    colors : Array[guint32, 256],
    n_colors : gint,
    info_list : Pointer[GSList],
);

external (cdecl) gdk_rgb_init() : ;

external (cdecl) gdk_rgb_xpixel_from_rgb(arg0:guint32) : gulong;

external (cdecl) gdk_rgb_gc_set_foreground(arg0:Pointer[GdkGC], arg1:guint32) : ;

external (cdecl) gdk_rgb_gc_set_background(arg0:Pointer[GdkGC], arg1:guint32) : ;

external (cdecl) gdk_rgb_find_color(arg0:Pointer[GdkColormap], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_draw_rgb_image(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:GdkRgbDither, arg7:Pointer[guchar], arg8:gint) : ;

external (cdecl) gdk_draw_rgb_image_dithalign(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:GdkRgbDither, arg7:Pointer[guchar], arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gdk_draw_rgb_32_image(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:GdkRgbDither, arg7:Pointer[guchar], arg8:gint) : ;

external (cdecl) gdk_draw_rgb_32_image_dithalign(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:GdkRgbDither, arg7:Pointer[guchar], arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gdk_draw_gray_image(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:GdkRgbDither, arg7:Pointer[guchar], arg8:gint) : ;

external (cdecl) gdk_draw_indexed_image(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:GdkRgbDither, arg7:Pointer[guchar], arg8:gint, arg9:Pointer[GdkRgbCmap]) : ;

external (cdecl) gdk_rgb_cmap_new(arg0:Pointer[guint32], arg1:gint) : Pointer[GdkRgbCmap];

external (cdecl) gdk_rgb_cmap_free(arg0:Pointer[GdkRgbCmap]) : ;

external (cdecl) gdk_rgb_set_verbose(arg0:gboolean) : ;

external (cdecl) gdk_rgb_set_install(arg0:gboolean) : ;

external (cdecl) gdk_rgb_set_min_colors(arg0:gint) : ;

external (cdecl) gdk_rgb_get_colormap() : Pointer[GdkColormap];

external (cdecl) gdk_rgb_get_visual() : Pointer[GdkVisual];

external (cdecl) gdk_rgb_ditherable() : gboolean;

external (cdecl) gdk_rgb_colormap_ditherable(arg0:Pointer[GdkColormap]) : gboolean;

external (cdecl) gdk_pixbuf_render_threshold_alpha(arg0:Pointer[GdkPixbuf], arg1:Pointer[GdkBitmap], arg2:CInt, arg3:CInt, arg4:CInt, arg5:CInt, arg6:CInt, arg7:CInt, arg8:CInt) : ;

external (cdecl) gdk_pixbuf_render_to_drawable(arg0:Pointer[GdkPixbuf], arg1:Pointer[GdkDrawable], arg2:Pointer[GdkGC], arg3:CInt, arg4:CInt, arg5:CInt, arg6:CInt, arg7:CInt, arg8:CInt, arg9:GdkRgbDither, arg10:CInt, arg11:CInt) : ;

external (cdecl) gdk_pixbuf_render_to_drawable_alpha(arg0:Pointer[GdkPixbuf], arg1:Pointer[GdkDrawable], arg2:CInt, arg3:CInt, arg4:CInt, arg5:CInt, arg6:CInt, arg7:CInt, arg8:GdkPixbufAlphaMode, arg9:CInt, arg10:GdkRgbDither, arg11:CInt, arg12:CInt) : ;

external (cdecl) gdk_pixbuf_render_pixmap_and_mask_for_colormap(arg0:Pointer[GdkPixbuf], arg1:Pointer[GdkColormap], arg2:Pointer[Pointer[GdkPixmap]], arg3:Pointer[Pointer[GdkBitmap]], arg4:CInt) : ;

external (cdecl) gdk_pixbuf_render_pixmap_and_mask(arg0:Pointer[GdkPixbuf], arg1:Pointer[Pointer[GdkPixmap]], arg2:Pointer[Pointer[GdkBitmap]], arg3:CInt) : ;

external (cdecl) gdk_pixbuf_get_from_drawable(arg0:Pointer[GdkPixbuf], arg1:Pointer[GdkDrawable], arg2:Pointer[GdkColormap], arg3:CInt, arg4:CInt, arg5:CInt, arg6:CInt, arg7:CInt, arg8:CInt) : Pointer[GdkPixbuf];

external (cdecl) gdk_pixbuf_get_from_image(arg0:Pointer[GdkPixbuf], arg1:Pointer[GdkImage], arg2:Pointer[GdkColormap], arg3:CInt, arg4:CInt, arg5:CInt, arg6:CInt, arg7:CInt, arg8:CInt) : Pointer[GdkPixbuf];

external (cdecl) gdk_cairo_create(arg0:Pointer[GdkDrawable]) : Pointer[cairo_t];

external (cdecl) gdk_cairo_reset_clip(arg0:Pointer[cairo_t], arg1:Pointer[GdkDrawable]) : ;

external (cdecl) gdk_cairo_set_source_color(arg0:Pointer[cairo_t], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_cairo_set_source_pixbuf(arg0:Pointer[cairo_t], arg1:Pointer[GdkPixbuf], arg2:CDouble, arg3:CDouble) : ;

external (cdecl) gdk_cairo_set_source_pixmap(arg0:Pointer[cairo_t], arg1:Pointer[GdkPixmap], arg2:CDouble, arg3:CDouble) : ;

external (cdecl) gdk_cairo_set_source_window(arg0:Pointer[cairo_t], arg1:Pointer[GdkWindow], arg2:CDouble, arg3:CDouble) : ;

external (cdecl) gdk_cairo_rectangle(arg0:Pointer[cairo_t], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_cairo_region(arg0:Pointer[cairo_t], arg1:Pointer[GdkRegion]) : ;


alias GdkCursorType = CInt;
alias GDK_X_CURSOR = CInt(0);
alias GDK_ARROW = CInt(2);
alias GDK_BASED_ARROW_DOWN = CInt(4);
alias GDK_BASED_ARROW_UP = CInt(6);
alias GDK_BOAT = CInt(8);
alias GDK_BOGOSITY = CInt(10);
alias GDK_BOTTOM_LEFT_CORNER = CInt(12);
alias GDK_BOTTOM_RIGHT_CORNER = CInt(14);
alias GDK_BOTTOM_SIDE = CInt(16);
alias GDK_BOTTOM_TEE = CInt(18);
alias GDK_BOX_SPIRAL = CInt(20);
alias GDK_CENTER_PTR = CInt(22);
alias GDK_CIRCLE = CInt(24);
alias GDK_CLOCK = CInt(26);
alias GDK_COFFEE_MUG = CInt(28);
alias GDK_CROSS = CInt(30);
alias GDK_CROSS_REVERSE = CInt(32);
alias GDK_CROSSHAIR = CInt(34);
alias GDK_DIAMOND_CROSS = CInt(36);
alias GDK_DOT = CInt(38);
alias GDK_DOTBOX = CInt(40);
alias GDK_DOUBLE_ARROW = CInt(42);
alias GDK_DRAFT_LARGE = CInt(44);
alias GDK_DRAFT_SMALL = CInt(46);
alias GDK_DRAPED_BOX = CInt(48);
alias GDK_EXCHANGE = CInt(50);
alias GDK_FLEUR = CInt(52);
alias GDK_GOBBLER = CInt(54);
alias GDK_GUMBY = CInt(56);
alias GDK_HAND1 = CInt(58);
alias GDK_HAND2 = CInt(60);
alias GDK_HEART = CInt(62);
alias GDK_ICON = CInt(64);
alias GDK_IRON_CROSS = CInt(66);
alias GDK_LEFT_PTR = CInt(68);
alias GDK_LEFT_SIDE = CInt(70);
alias GDK_LEFT_TEE = CInt(72);
alias GDK_LEFTBUTTON = CInt(74);
alias GDK_LL_ANGLE = CInt(76);
alias GDK_LR_ANGLE = CInt(78);
alias GDK_MAN = CInt(80);
alias GDK_MIDDLEBUTTON = CInt(82);
alias GDK_MOUSE = CInt(84);
alias GDK_PENCIL = CInt(86);
alias GDK_PIRATE = CInt(88);
alias GDK_PLUS = CInt(90);
alias GDK_QUESTION_ARROW = CInt(92);
alias GDK_RIGHT_PTR = CInt(94);
alias GDK_RIGHT_SIDE = CInt(96);
alias GDK_RIGHT_TEE = CInt(98);
alias GDK_RIGHTBUTTON = CInt(100);
alias GDK_RTL_LOGO = CInt(102);
alias GDK_SAILBOAT = CInt(104);
alias GDK_SB_DOWN_ARROW = CInt(106);
alias GDK_SB_H_DOUBLE_ARROW = CInt(108);
alias GDK_SB_LEFT_ARROW = CInt(110);
alias GDK_SB_RIGHT_ARROW = CInt(112);
alias GDK_SB_UP_ARROW = CInt(114);
alias GDK_SB_V_DOUBLE_ARROW = CInt(116);
alias GDK_SHUTTLE = CInt(118);
alias GDK_SIZING = CInt(120);
alias GDK_SPIDER = CInt(122);
alias GDK_SPRAYCAN = CInt(124);
alias GDK_STAR = CInt(126);
alias GDK_TARGET = CInt(128);
alias GDK_TCROSS = CInt(130);
alias GDK_TOP_LEFT_ARROW = CInt(132);
alias GDK_TOP_LEFT_CORNER = CInt(134);
alias GDK_TOP_RIGHT_CORNER = CInt(136);
alias GDK_TOP_SIDE = CInt(138);
alias GDK_TOP_TEE = CInt(140);
alias GDK_TREK = CInt(142);
alias GDK_UL_ANGLE = CInt(144);
alias GDK_UMBRELLA = CInt(146);
alias GDK_UR_ANGLE = CInt(148);
alias GDK_WATCH = CInt(150);
alias GDK_XTERM = CInt(152);
alias GDK_LAST_CURSOR = CInt(153);
alias GDK_BLANK_CURSOR = CInt(-2);
alias GDK_CURSOR_IS_PIXMAP = CInt(-1);

record Struct__GdkCursor (
    type : GdkCursorType,
    ref_count : guint,
);

external (cdecl) gdk_cursor_get_type() : GType;

external (cdecl) gdk_cursor_new_for_display(arg0:Pointer[GdkDisplay], arg1:GdkCursorType) : Pointer[GdkCursor];

external (cdecl) gdk_cursor_new(arg0:GdkCursorType) : Pointer[GdkCursor];

external (cdecl) gdk_cursor_new_from_pixmap(arg0:Pointer[GdkPixmap], arg1:Pointer[GdkPixmap], arg2:Pointer[GdkColor], arg3:Pointer[GdkColor], arg4:gint, arg5:gint) : Pointer[GdkCursor];

external (cdecl) gdk_cursor_new_from_pixbuf(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkPixbuf], arg2:gint, arg3:gint) : Pointer[GdkCursor];

external (cdecl) gdk_cursor_get_display(arg0:Pointer[GdkCursor]) : Pointer[GdkDisplay];

external (cdecl) gdk_cursor_ref(arg0:Pointer[GdkCursor]) : Pointer[GdkCursor];

external (cdecl) gdk_cursor_unref(arg0:Pointer[GdkCursor]) : ;

external (cdecl) gdk_cursor_new_from_name(arg0:Pointer[GdkDisplay], arg1:Pointer[gchar]) : Pointer[GdkCursor];

external (cdecl) gdk_cursor_get_image(arg0:Pointer[GdkCursor]) : Pointer[GdkPixbuf];

external (cdecl) gdk_cursor_get_cursor_type(arg0:Pointer[GdkCursor]) : GdkCursorType;

alias Struct__GdkDisplayManager = Opaque;

alias GdkDisplayManager = Struct__GdkDisplayManager;

alias GdkDisplayManagerClass = Struct__GdkDisplayManagerClass;

record Struct__GdkDisplayManagerClass (
    parent_class : GObjectClass,
    display_opened : CCodePointer[[Pointer[GdkDisplayManager], Pointer[GdkDisplay]],[]],
);

external (cdecl) gdk_display_manager_get_type() : GType;

external (cdecl) gdk_display_manager_get() : Pointer[GdkDisplayManager];

external (cdecl) gdk_display_manager_get_default_display(arg0:Pointer[GdkDisplayManager]) : Pointer[GdkDisplay];

external (cdecl) gdk_display_manager_set_default_display(arg0:Pointer[GdkDisplayManager], arg1:Pointer[GdkDisplay]) : ;

external (cdecl) gdk_display_manager_list_displays(arg0:Pointer[GdkDisplayManager]) : Pointer[GSList];

alias GdkGCValues = Struct__GdkGCValues;

alias GdkGCClass = Struct__GdkGCClass;


alias GdkCapStyle = CUInt;
alias GDK_CAP_NOT_LAST = CUInt(0);
alias GDK_CAP_BUTT = CUInt(1);
alias GDK_CAP_ROUND = CUInt(2);
alias GDK_CAP_PROJECTING = CUInt(3);


alias GdkFill = CUInt;
alias GDK_SOLID = CUInt(0);
alias GDK_TILED = CUInt(1);
alias GDK_STIPPLED = CUInt(2);
alias GDK_OPAQUE_STIPPLED = CUInt(3);


alias GdkFunction = CUInt;
alias GDK_COPY = CUInt(0);
alias GDK_INVERT = CUInt(1);
alias GDK_XOR = CUInt(2);
alias GDK_CLEAR = CUInt(3);
alias GDK_AND = CUInt(4);
alias GDK_AND_REVERSE = CUInt(5);
alias GDK_AND_INVERT = CUInt(6);
alias GDK_NOOP = CUInt(7);
alias GDK_OR = CUInt(8);
alias GDK_EQUIV = CUInt(9);
alias GDK_OR_REVERSE = CUInt(10);
alias GDK_COPY_INVERT = CUInt(11);
alias GDK_OR_INVERT = CUInt(12);
alias GDK_NAND = CUInt(13);
alias GDK_NOR = CUInt(14);
alias GDK_SET = CUInt(15);


alias GdkJoinStyle = CUInt;
alias GDK_JOIN_MITER = CUInt(0);
alias GDK_JOIN_ROUND = CUInt(1);
alias GDK_JOIN_BEVEL = CUInt(2);


alias GdkLineStyle = CUInt;
alias GDK_LINE_SOLID = CUInt(0);
alias GDK_LINE_ON_OFF_DASH = CUInt(1);
alias GDK_LINE_DOUBLE_DASH = CUInt(2);


alias GdkSubwindowMode = CUInt;
alias GDK_CLIP_BY_CHILDREN = CUInt(0);
alias GDK_INCLUDE_INFERIORS = CUInt(1);


alias GdkGCValuesMask = CUInt;
alias GDK_GC_FOREGROUND = CUInt(1);
alias GDK_GC_BACKGROUND = CUInt(2);
alias GDK_GC_FONT = CUInt(4);
alias GDK_GC_FUNCTION = CUInt(8);
alias GDK_GC_FILL = CUInt(16);
alias GDK_GC_TILE = CUInt(32);
alias GDK_GC_STIPPLE = CUInt(64);
alias GDK_GC_CLIP_MASK = CUInt(128);
alias GDK_GC_SUBWINDOW = CUInt(256);
alias GDK_GC_TS_X_ORIGIN = CUInt(512);
alias GDK_GC_TS_Y_ORIGIN = CUInt(1024);
alias GDK_GC_CLIP_X_ORIGIN = CUInt(2048);
alias GDK_GC_CLIP_Y_ORIGIN = CUInt(4096);
alias GDK_GC_EXPOSURES = CUInt(8192);
alias GDK_GC_LINE_WIDTH = CUInt(16384);
alias GDK_GC_LINE_STYLE = CUInt(32768);
alias GDK_GC_CAP_STYLE = CUInt(65536);
alias GDK_GC_JOIN_STYLE = CUInt(131072);

record Struct__GdkGCValues (
    foreground : GdkColor,
    background : GdkColor,
    font : Pointer[GdkFont],
    function : GdkFunction,
    fill : GdkFill,
    tile : Pointer[GdkPixmap],
    stipple : Pointer[GdkPixmap],
    clip_mask : Pointer[GdkPixmap],
    subwindow_mode : GdkSubwindowMode,
    ts_x_origin : gint,
    ts_y_origin : gint,
    clip_x_origin : gint,
    clip_y_origin : gint,
    graphics_exposures : gint,
    line_width : gint,
    line_style : GdkLineStyle,
    cap_style : GdkCapStyle,
    join_style : GdkJoinStyle,
);

record Struct__GdkGC (
    parent_instance : GObject,
    clip_x_origin : gint,
    clip_y_origin : gint,
    ts_x_origin : gint,
    ts_y_origin : gint,
    colormap : Pointer[GdkColormap],
);

record Struct__GdkGCClass (
    parent_class : GObjectClass,
    get_values : CCodePointer[[Pointer[GdkGC], Pointer[GdkGCValues]],[]],
    set_values : CCodePointer[[Pointer[GdkGC], Pointer[GdkGCValues], GdkGCValuesMask],[]],
    set_dashes : CCodePointer[[Pointer[GdkGC], gint, Pointer[gint8], gint],[]],
    _gdk_reserved1 : CCodePointer[[],[]],
    _gdk_reserved2 : CCodePointer[[],[]],
    _gdk_reserved3 : CCodePointer[[],[]],
    _gdk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gdk_gc_get_type() : GType;

external (cdecl) gdk_gc_new(arg0:Pointer[GdkDrawable]) : Pointer[GdkGC];

external (cdecl) gdk_gc_new_with_values(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGCValues], arg2:GdkGCValuesMask) : Pointer[GdkGC];

external (cdecl) gdk_gc_ref(arg0:Pointer[GdkGC]) : Pointer[GdkGC];

external (cdecl) gdk_gc_unref(arg0:Pointer[GdkGC]) : ;

external (cdecl) gdk_gc_get_values(arg0:Pointer[GdkGC], arg1:Pointer[GdkGCValues]) : ;

external (cdecl) gdk_gc_set_values(arg0:Pointer[GdkGC], arg1:Pointer[GdkGCValues], arg2:GdkGCValuesMask) : ;

external (cdecl) gdk_gc_set_foreground(arg0:Pointer[GdkGC], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_gc_set_background(arg0:Pointer[GdkGC], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_gc_set_font(arg0:Pointer[GdkGC], arg1:Pointer[GdkFont]) : ;

external (cdecl) gdk_gc_set_function(arg0:Pointer[GdkGC], arg1:GdkFunction) : ;

external (cdecl) gdk_gc_set_fill(arg0:Pointer[GdkGC], arg1:GdkFill) : ;

external (cdecl) gdk_gc_set_tile(arg0:Pointer[GdkGC], arg1:Pointer[GdkPixmap]) : ;

external (cdecl) gdk_gc_set_stipple(arg0:Pointer[GdkGC], arg1:Pointer[GdkPixmap]) : ;

external (cdecl) gdk_gc_set_ts_origin(arg0:Pointer[GdkGC], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_gc_set_clip_origin(arg0:Pointer[GdkGC], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_gc_set_clip_mask(arg0:Pointer[GdkGC], arg1:Pointer[GdkBitmap]) : ;

external (cdecl) gdk_gc_set_clip_rectangle(arg0:Pointer[GdkGC], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_gc_set_clip_region(arg0:Pointer[GdkGC], arg1:Pointer[GdkRegion]) : ;

external (cdecl) gdk_gc_set_subwindow(arg0:Pointer[GdkGC], arg1:GdkSubwindowMode) : ;

external (cdecl) gdk_gc_set_exposures(arg0:Pointer[GdkGC], arg1:gboolean) : ;

external (cdecl) gdk_gc_set_line_attributes(arg0:Pointer[GdkGC], arg1:gint, arg2:GdkLineStyle, arg3:GdkCapStyle, arg4:GdkJoinStyle) : ;

external (cdecl) gdk_gc_set_dashes(arg0:Pointer[GdkGC], arg1:gint, arg2:Pointer[gint8], arg3:gint) : ;

external (cdecl) gdk_gc_offset(arg0:Pointer[GdkGC], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_gc_copy(arg0:Pointer[GdkGC], arg1:Pointer[GdkGC]) : ;

external (cdecl) gdk_gc_set_colormap(arg0:Pointer[GdkGC], arg1:Pointer[GdkColormap]) : ;

external (cdecl) gdk_gc_get_colormap(arg0:Pointer[GdkGC]) : Pointer[GdkColormap];

external (cdecl) gdk_gc_set_rgb_fg_color(arg0:Pointer[GdkGC], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_gc_set_rgb_bg_color(arg0:Pointer[GdkGC], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_gc_get_screen(arg0:Pointer[GdkGC]) : Pointer[GdkScreen];

alias GdkDrawableClass = Struct__GdkDrawableClass;

alias GdkTrapezoid = Struct__GdkTrapezoid;

record Struct__GdkDrawable (
    parent_instance : GObject,
);

record Struct__GdkDrawableClass (
    parent_class : GObjectClass,
    create_gc : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGCValues], GdkGCValuesMask],[Pointer[GdkGC]]],
    draw_rectangle : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], gboolean, gint, gint, gint, gint],[]],
    draw_arc : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], gboolean, gint, gint, gint, gint, gint, gint],[]],
    draw_polygon : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], gboolean, Pointer[GdkPoint], gint],[]],
    draw_text : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkFont], Pointer[GdkGC], gint, gint, Pointer[gchar], gint],[]],
    draw_text_wc : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkFont], Pointer[GdkGC], gint, gint, Pointer[GdkWChar], gint],[]],
    draw_drawable : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkDrawable], gint, gint, gint, gint, gint, gint],[]],
    draw_points : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkPoint], gint],[]],
    draw_segments : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkSegment], gint],[]],
    draw_lines : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkPoint], gint],[]],
    draw_glyphs : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[PangoFont], gint, gint, Pointer[PangoGlyphString]],[]],
    draw_image : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkImage], gint, gint, gint, gint, gint, gint],[]],
    get_depth : CCodePointer[[Pointer[GdkDrawable]],[gint]],
    get_size : CCodePointer[[Pointer[GdkDrawable], Pointer[gint], Pointer[gint]],[]],
    set_colormap : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkColormap]],[]],
    get_colormap : CCodePointer[[Pointer[GdkDrawable]],[Pointer[GdkColormap]]],
    get_visual : CCodePointer[[Pointer[GdkDrawable]],[Pointer[GdkVisual]]],
    get_screen : CCodePointer[[Pointer[GdkDrawable]],[Pointer[GdkScreen]]],
    get_image : CCodePointer[[Pointer[GdkDrawable], gint, gint, gint, gint],[Pointer[GdkImage]]],
    get_clip_region : CCodePointer[[Pointer[GdkDrawable]],[Pointer[GdkRegion]]],
    get_visible_region : CCodePointer[[Pointer[GdkDrawable]],[Pointer[GdkRegion]]],
    get_composite_drawable : CCodePointer[[Pointer[GdkDrawable], gint, gint, gint, gint, Pointer[gint], Pointer[gint]],[Pointer[GdkDrawable]]],
    draw_pixbuf : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkPixbuf], gint, gint, gint, gint, gint, gint, GdkRgbDither, gint, gint],[]],
    _copy_to_image : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkImage], gint, gint, gint, gint, gint, gint],[Pointer[GdkImage]]],
    draw_glyphs_transformed : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[PangoMatrix], Pointer[PangoFont], gint, gint, Pointer[PangoGlyphString]],[]],
    draw_trapezoids : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkTrapezoid], gint],[]],
    ref_cairo_surface : CCodePointer[[Pointer[GdkDrawable]],[Pointer[cairo_surface_t]]],
    get_source_drawable : CCodePointer[[Pointer[GdkDrawable]],[Pointer[GdkDrawable]]],
    set_cairo_clip : CCodePointer[[Pointer[GdkDrawable], Pointer[cairo_t]],[]],
    create_cairo_surface : CCodePointer[[Pointer[GdkDrawable], CInt, CInt],[Pointer[cairo_surface_t]]],
    draw_drawable_with_src : CCodePointer[[Pointer[GdkDrawable], Pointer[GdkGC], Pointer[GdkDrawable], gint, gint, gint, gint, gint, gint, Pointer[GdkDrawable]],[]],
    _gdk_reserved7 : CCodePointer[[],[]],
    _gdk_reserved9 : CCodePointer[[],[]],
    _gdk_reserved10 : CCodePointer[[],[]],
    _gdk_reserved11 : CCodePointer[[],[]],
    _gdk_reserved12 : CCodePointer[[],[]],
    _gdk_reserved13 : CCodePointer[[],[]],
    _gdk_reserved14 : CCodePointer[[],[]],
    _gdk_reserved15 : CCodePointer[[],[]],
);

record Struct__GdkTrapezoid (
    y1 : CDouble,
    x11 : CDouble,
    x21 : CDouble,
    y2 : CDouble,
    x12 : CDouble,
    x22 : CDouble,
);

external (cdecl) gdk_drawable_get_type() : GType;

external (cdecl) gdk_drawable_set_data(arg0:Pointer[GdkDrawable], arg1:Pointer[gchar], arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gdk_drawable_get_data(arg0:Pointer[GdkDrawable], arg1:Pointer[gchar]) : gpointer;

external (cdecl) gdk_drawable_set_colormap(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkColormap]) : ;

external (cdecl) gdk_drawable_get_colormap(arg0:Pointer[GdkDrawable]) : Pointer[GdkColormap];

external (cdecl) gdk_drawable_get_depth(arg0:Pointer[GdkDrawable]) : gint;

external (cdecl) gdk_drawable_get_size(arg0:Pointer[GdkDrawable], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gdk_drawable_get_visual(arg0:Pointer[GdkDrawable]) : Pointer[GdkVisual];

external (cdecl) gdk_drawable_get_screen(arg0:Pointer[GdkDrawable]) : Pointer[GdkScreen];

external (cdecl) gdk_drawable_get_display(arg0:Pointer[GdkDrawable]) : Pointer[GdkDisplay];

external (cdecl) gdk_drawable_ref(arg0:Pointer[GdkDrawable]) : Pointer[GdkDrawable];

external (cdecl) gdk_drawable_unref(arg0:Pointer[GdkDrawable]) : ;

external (cdecl) gdk_draw_point(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_draw_line(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:gint, arg5:gint) : ;

external (cdecl) gdk_draw_rectangle(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gboolean, arg3:gint, arg4:gint, arg5:gint, arg6:gint) : ;

external (cdecl) gdk_draw_arc(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gboolean, arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gdk_draw_polygon(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gboolean, arg3:Pointer[GdkPoint], arg4:gint) : ;

external (cdecl) gdk_draw_string(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkFont], arg2:Pointer[GdkGC], arg3:gint, arg4:gint, arg5:Pointer[gchar]) : ;

external (cdecl) gdk_draw_text(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkFont], arg2:Pointer[GdkGC], arg3:gint, arg4:gint, arg5:Pointer[gchar], arg6:gint) : ;

external (cdecl) gdk_draw_text_wc(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkFont], arg2:Pointer[GdkGC], arg3:gint, arg4:gint, arg5:Pointer[GdkWChar], arg6:gint) : ;

external (cdecl) gdk_draw_drawable(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkDrawable], arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gdk_draw_image(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkImage], arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gdk_draw_points(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkPoint], arg3:gint) : ;

external (cdecl) gdk_draw_segments(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkSegment], arg3:gint) : ;

external (cdecl) gdk_draw_lines(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkPoint], arg3:gint) : ;

external (cdecl) gdk_draw_pixbuf(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkPixbuf], arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:gint, arg9:GdkRgbDither, arg10:gint, arg11:gint) : ;

external (cdecl) gdk_draw_glyphs(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[PangoFont], arg3:gint, arg4:gint, arg5:Pointer[PangoGlyphString]) : ;

external (cdecl) gdk_draw_layout_line(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:Pointer[PangoLayoutLine]) : ;

external (cdecl) gdk_draw_layout(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:Pointer[PangoLayout]) : ;

external (cdecl) gdk_draw_layout_line_with_colors(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:Pointer[PangoLayoutLine], arg5:Pointer[GdkColor], arg6:Pointer[GdkColor]) : ;

external (cdecl) gdk_draw_layout_with_colors(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:gint, arg3:gint, arg4:Pointer[PangoLayout], arg5:Pointer[GdkColor], arg6:Pointer[GdkColor]) : ;

external (cdecl) gdk_draw_glyphs_transformed(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[PangoMatrix], arg3:Pointer[PangoFont], arg4:gint, arg5:gint, arg6:Pointer[PangoGlyphString]) : ;

external (cdecl) gdk_draw_trapezoids(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkGC], arg2:Pointer[GdkTrapezoid], arg3:gint) : ;

external (cdecl) gdk_drawable_get_image(arg0:Pointer[GdkDrawable], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : Pointer[GdkImage];

external (cdecl) gdk_drawable_copy_to_image(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkImage], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : Pointer[GdkImage];

external (cdecl) gdk_drawable_get_clip_region(arg0:Pointer[GdkDrawable]) : Pointer[GdkRegion];

external (cdecl) gdk_drawable_get_visible_region(arg0:Pointer[GdkDrawable]) : Pointer[GdkRegion];

external (cdecl) gdk_cursor_type_get_type() : GType;

external (cdecl) gdk_drag_action_get_type() : GType;

external (cdecl) gdk_drag_protocol_get_type() : GType;

external (cdecl) gdk_filter_return_get_type() : GType;

external (cdecl) gdk_event_type_get_type() : GType;

external (cdecl) gdk_event_mask_get_type() : GType;

external (cdecl) gdk_visibility_state_get_type() : GType;

external (cdecl) gdk_scroll_direction_get_type() : GType;

external (cdecl) gdk_notify_type_get_type() : GType;

external (cdecl) gdk_crossing_mode_get_type() : GType;

external (cdecl) gdk_property_state_get_type() : GType;

external (cdecl) gdk_window_state_get_type() : GType;

external (cdecl) gdk_setting_action_get_type() : GType;

external (cdecl) gdk_owner_change_get_type() : GType;

external (cdecl) gdk_font_type_get_type() : GType;

external (cdecl) gdk_cap_style_get_type() : GType;

external (cdecl) gdk_fill_get_type() : GType;

external (cdecl) gdk_function_get_type() : GType;

external (cdecl) gdk_join_style_get_type() : GType;

external (cdecl) gdk_line_style_get_type() : GType;

external (cdecl) gdk_subwindow_mode_get_type() : GType;

external (cdecl) gdk_gc_values_mask_get_type() : GType;

external (cdecl) gdk_image_type_get_type() : GType;

external (cdecl) gdk_extension_mode_get_type() : GType;

external (cdecl) gdk_input_source_get_type() : GType;

external (cdecl) gdk_input_mode_get_type() : GType;

external (cdecl) gdk_axis_use_get_type() : GType;

external (cdecl) gdk_prop_mode_get_type() : GType;

external (cdecl) gdk_fill_rule_get_type() : GType;

external (cdecl) gdk_overlap_type_get_type() : GType;

external (cdecl) gdk_rgb_dither_get_type() : GType;

external (cdecl) gdk_byte_order_get_type() : GType;

external (cdecl) gdk_modifier_type_get_type() : GType;

external (cdecl) gdk_input_condition_get_type() : GType;

external (cdecl) gdk_status_get_type() : GType;

external (cdecl) gdk_grab_status_get_type() : GType;

external (cdecl) gdk_visual_type_get_type() : GType;

external (cdecl) gdk_window_class_get_type() : GType;

external (cdecl) gdk_window_type_get_type() : GType;

external (cdecl) gdk_window_attributes_type_get_type() : GType;

external (cdecl) gdk_window_hints_get_type() : GType;

external (cdecl) gdk_window_type_hint_get_type() : GType;

external (cdecl) gdk_wm_decoration_get_type() : GType;

external (cdecl) gdk_wm_function_get_type() : GType;

external (cdecl) gdk_gravity_get_type() : GType;

external (cdecl) gdk_window_edge_get_type() : GType;


alias GdkFontType = CUInt;
alias GDK_FONT_FONT = CUInt(0);
alias GDK_FONT_FONTSET = CUInt(1);

record Struct__GdkFont (
    type : GdkFontType,
    ascent : gint,
    descent : gint,
);

external (cdecl) gdk_font_get_type() : GType;

external (cdecl) gdk_font_ref(arg0:Pointer[GdkFont]) : Pointer[GdkFont];

external (cdecl) gdk_font_unref(arg0:Pointer[GdkFont]) : ;

external (cdecl) gdk_font_id(arg0:Pointer[GdkFont]) : gint;

external (cdecl) gdk_font_equal(arg0:Pointer[GdkFont], arg1:Pointer[GdkFont]) : gboolean;

external (cdecl) gdk_font_load_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[gchar]) : Pointer[GdkFont];

external (cdecl) gdk_fontset_load_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[gchar]) : Pointer[GdkFont];

external (cdecl) gdk_font_from_description_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[PangoFontDescription]) : Pointer[GdkFont];

external (cdecl) gdk_font_load(arg0:Pointer[gchar]) : Pointer[GdkFont];

external (cdecl) gdk_fontset_load(arg0:Pointer[gchar]) : Pointer[GdkFont];

external (cdecl) gdk_font_from_description(arg0:Pointer[PangoFontDescription]) : Pointer[GdkFont];

external (cdecl) gdk_string_width(arg0:Pointer[GdkFont], arg1:Pointer[gchar]) : gint;

external (cdecl) gdk_text_width(arg0:Pointer[GdkFont], arg1:Pointer[gchar], arg2:gint) : gint;

external (cdecl) gdk_text_width_wc(arg0:Pointer[GdkFont], arg1:Pointer[GdkWChar], arg2:gint) : gint;

external (cdecl) gdk_char_width(arg0:Pointer[GdkFont], arg1:gchar) : gint;

external (cdecl) gdk_char_width_wc(arg0:Pointer[GdkFont], arg1:GdkWChar) : gint;

external (cdecl) gdk_string_measure(arg0:Pointer[GdkFont], arg1:Pointer[gchar]) : gint;

external (cdecl) gdk_text_measure(arg0:Pointer[GdkFont], arg1:Pointer[gchar], arg2:gint) : gint;

external (cdecl) gdk_char_measure(arg0:Pointer[GdkFont], arg1:gchar) : gint;

external (cdecl) gdk_string_height(arg0:Pointer[GdkFont], arg1:Pointer[gchar]) : gint;

external (cdecl) gdk_text_height(arg0:Pointer[GdkFont], arg1:Pointer[gchar], arg2:gint) : gint;

external (cdecl) gdk_char_height(arg0:Pointer[GdkFont], arg1:gchar) : gint;

external (cdecl) gdk_text_extents(arg0:Pointer[GdkFont], arg1:Pointer[gchar], arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint], arg5:Pointer[gint], arg6:Pointer[gint], arg7:Pointer[gint]) : ;

external (cdecl) gdk_text_extents_wc(arg0:Pointer[GdkFont], arg1:Pointer[GdkWChar], arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint], arg5:Pointer[gint], arg6:Pointer[gint], arg7:Pointer[gint]) : ;

external (cdecl) gdk_string_extents(arg0:Pointer[GdkFont], arg1:Pointer[gchar], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[gint], arg5:Pointer[gint], arg6:Pointer[gint]) : ;

external (cdecl) gdk_font_get_display(arg0:Pointer[GdkFont]) : Pointer[GdkDisplay];


alias GdkImageType = CUInt;
alias GDK_IMAGE_NORMAL = CUInt(0);
alias GDK_IMAGE_SHARED = CUInt(1);
alias GDK_IMAGE_FASTEST = CUInt(2);

alias GdkImageClass = Struct__GdkImageClass;

record Struct__GdkImage (
    parent_instance : GObject,
    type : GdkImageType,
    visual : Pointer[GdkVisual],
    byte_order : GdkByteOrder,
    width : gint,
    height : gint,
    depth : guint16,
    bpp : guint16,
    bpl : guint16,
    bits_per_pixel : guint16,
    mem : gpointer,
    colormap : Pointer[GdkColormap],
    windowing_data : gpointer,
);

record Struct__GdkImageClass (
    parent_class : GObjectClass,
);

external (cdecl) gdk_image_get_type() : GType;

external (cdecl) gdk_image_new(arg0:GdkImageType, arg1:Pointer[GdkVisual], arg2:gint, arg3:gint) : Pointer[GdkImage];

external (cdecl) gdk_image_get(arg0:Pointer[GdkDrawable], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : Pointer[GdkImage];

external (cdecl) gdk_image_ref(arg0:Pointer[GdkImage]) : Pointer[GdkImage];

external (cdecl) gdk_image_unref(arg0:Pointer[GdkImage]) : ;

external (cdecl) gdk_image_put_pixel(arg0:Pointer[GdkImage], arg1:gint, arg2:gint, arg3:guint32) : ;

external (cdecl) gdk_image_get_pixel(arg0:Pointer[GdkImage], arg1:gint, arg2:gint) : guint32;

external (cdecl) gdk_image_set_colormap(arg0:Pointer[GdkImage], arg1:Pointer[GdkColormap]) : ;

external (cdecl) gdk_image_get_colormap(arg0:Pointer[GdkImage]) : Pointer[GdkColormap];

external (cdecl) gdk_image_get_image_type(arg0:Pointer[GdkImage]) : GdkImageType;

external (cdecl) gdk_image_get_visual(arg0:Pointer[GdkImage]) : Pointer[GdkVisual];

external (cdecl) gdk_image_get_byte_order(arg0:Pointer[GdkImage]) : GdkByteOrder;

external (cdecl) gdk_image_get_width(arg0:Pointer[GdkImage]) : gint;

external (cdecl) gdk_image_get_height(arg0:Pointer[GdkImage]) : gint;

external (cdecl) gdk_image_get_depth(arg0:Pointer[GdkImage]) : guint16;

external (cdecl) gdk_image_get_bytes_per_pixel(arg0:Pointer[GdkImage]) : guint16;

external (cdecl) gdk_image_get_bytes_per_line(arg0:Pointer[GdkImage]) : guint16;

external (cdecl) gdk_image_get_bits_per_pixel(arg0:Pointer[GdkImage]) : guint16;

external (cdecl) gdk_image_get_pixels(arg0:Pointer[GdkImage]) : gpointer;

alias GdkKeymapKey = Struct__GdkKeymapKey;

record Struct__GdkKeymapKey (
    keycode : guint,
    group : gint,
    level : gint,
);

alias GdkKeymap = Struct__GdkKeymap;

alias GdkKeymapClass = Struct__GdkKeymapClass;

record Struct__GdkKeymap (
    parent_instance : GObject,
    display : Pointer[GdkDisplay],
);

record Struct__GdkKeymapClass (
    parent_class : GObjectClass,
    direction_changed : CCodePointer[[Pointer[GdkKeymap]],[]],
    keys_changed : CCodePointer[[Pointer[GdkKeymap]],[]],
    state_changed : CCodePointer[[Pointer[GdkKeymap]],[]],
);

external (cdecl) gdk_keymap_get_type() : GType;

external (cdecl) gdk_keymap_get_default() : Pointer[GdkKeymap];

external (cdecl) gdk_keymap_get_for_display(arg0:Pointer[GdkDisplay]) : Pointer[GdkKeymap];

external (cdecl) gdk_keymap_lookup_key(arg0:Pointer[GdkKeymap], arg1:Pointer[GdkKeymapKey]) : guint;

external (cdecl) gdk_keymap_translate_keyboard_state(arg0:Pointer[GdkKeymap], arg1:guint, arg2:GdkModifierType, arg3:gint, arg4:Pointer[guint], arg5:Pointer[gint], arg6:Pointer[gint], arg7:Pointer[GdkModifierType]) : gboolean;

external (cdecl) gdk_keymap_get_entries_for_keyval(arg0:Pointer[GdkKeymap], arg1:guint, arg2:Pointer[Pointer[GdkKeymapKey]], arg3:Pointer[gint]) : gboolean;

external (cdecl) gdk_keymap_get_entries_for_keycode(arg0:Pointer[GdkKeymap], arg1:guint, arg2:Pointer[Pointer[GdkKeymapKey]], arg3:Pointer[Pointer[guint]], arg4:Pointer[gint]) : gboolean;

external (cdecl) gdk_keymap_get_direction(arg0:Pointer[GdkKeymap]) : PangoDirection;

external (cdecl) gdk_keymap_have_bidi_layouts(arg0:Pointer[GdkKeymap]) : gboolean;

external (cdecl) gdk_keymap_get_caps_lock_state(arg0:Pointer[GdkKeymap]) : gboolean;

external (cdecl) gdk_keymap_add_virtual_modifiers(arg0:Pointer[GdkKeymap], arg1:Pointer[GdkModifierType]) : ;

external (cdecl) gdk_keymap_map_virtual_modifiers(arg0:Pointer[GdkKeymap], arg1:Pointer[GdkModifierType]) : gboolean;

external (cdecl) gdk_keyval_name(arg0:guint) : Pointer[gchar];

external (cdecl) gdk_keyval_from_name(arg0:Pointer[gchar]) : guint;

external (cdecl) gdk_keyval_convert_case(arg0:guint, arg1:Pointer[guint], arg2:Pointer[guint]) : ;

external (cdecl) gdk_keyval_to_upper(arg0:guint) : guint;

external (cdecl) gdk_keyval_to_lower(arg0:guint) : guint;

external (cdecl) gdk_keyval_is_upper(arg0:guint) : gboolean;

external (cdecl) gdk_keyval_is_lower(arg0:guint) : gboolean;

external (cdecl) gdk_keyval_to_unicode(arg0:guint) : guint32;

external (cdecl) gdk_unicode_to_keyval(arg0:guint32) : guint;

alias GdkPangoRenderer = Struct__GdkPangoRenderer;

alias GdkPangoRendererClass = Struct__GdkPangoRendererClass;

alias Struct__GdkPangoRendererPrivate = Opaque;

alias GdkPangoRendererPrivate = Struct__GdkPangoRendererPrivate;

record Struct__GdkPangoRenderer (
    parent_instance : PangoRenderer,
    priv : Pointer[GdkPangoRendererPrivate],
);

record Struct__GdkPangoRendererClass (
    parent_class : PangoRendererClass,
);

external (cdecl) gdk_pango_renderer_get_type() : GType;

external (cdecl) gdk_pango_renderer_new(arg0:Pointer[GdkScreen]) : Pointer[PangoRenderer];

external (cdecl) gdk_pango_renderer_get_default(arg0:Pointer[GdkScreen]) : Pointer[PangoRenderer];

external (cdecl) gdk_pango_renderer_set_drawable(arg0:Pointer[GdkPangoRenderer], arg1:Pointer[GdkDrawable]) : ;

external (cdecl) gdk_pango_renderer_set_gc(arg0:Pointer[GdkPangoRenderer], arg1:Pointer[GdkGC]) : ;

external (cdecl) gdk_pango_renderer_set_stipple(arg0:Pointer[GdkPangoRenderer], arg1:PangoRenderPart, arg2:Pointer[GdkBitmap]) : ;

external (cdecl) gdk_pango_renderer_set_override_color(arg0:Pointer[GdkPangoRenderer], arg1:PangoRenderPart, arg2:Pointer[GdkColor]) : ;

external (cdecl) gdk_pango_context_get_for_screen(arg0:Pointer[GdkScreen]) : Pointer[PangoContext];

external (cdecl) gdk_pango_context_get() : Pointer[PangoContext];

external (cdecl) gdk_pango_context_set_colormap(arg0:Pointer[PangoContext], arg1:Pointer[GdkColormap]) : ;

external (cdecl) gdk_pango_layout_line_get_clip_region(arg0:Pointer[PangoLayoutLine], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:gint) : Pointer[GdkRegion];

external (cdecl) gdk_pango_layout_get_clip_region(arg0:Pointer[PangoLayout], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:gint) : Pointer[GdkRegion];

alias GdkPangoAttrStipple = Struct__GdkPangoAttrStipple;

alias GdkPangoAttrEmbossed = Struct__GdkPangoAttrEmbossed;

alias GdkPangoAttrEmbossColor = Struct__GdkPangoAttrEmbossColor;

record Struct__GdkPangoAttrStipple (
    attr : PangoAttribute,
    stipple : Pointer[GdkBitmap],
);

record Struct__GdkPangoAttrEmbossed (
    attr : PangoAttribute,
    embossed : gboolean,
);

record Struct__GdkPangoAttrEmbossColor (
    attr : PangoAttribute,
    color : PangoColor,
);

external (cdecl) gdk_pango_attr_stipple_new(arg0:Pointer[GdkBitmap]) : Pointer[PangoAttribute];

external (cdecl) gdk_pango_attr_embossed_new(arg0:gboolean) : Pointer[PangoAttribute];

external (cdecl) gdk_pango_attr_emboss_color_new(arg0:Pointer[GdkColor]) : Pointer[PangoAttribute];

alias GdkPixmapObject = Struct__GdkPixmapObject;

alias GdkPixmapObjectClass = Struct__GdkPixmapObjectClass;

record Struct__GdkPixmapObject (
    parent_instance : GdkDrawable,
    impl : Pointer[GdkDrawable],
    depth : gint,
);

record Struct__GdkPixmapObjectClass (
    parent_class : GdkDrawableClass,
);

external (cdecl) gdk_pixmap_get_type() : GType;

external (cdecl) gdk_pixmap_new(arg0:Pointer[GdkDrawable], arg1:gint, arg2:gint, arg3:gint) : Pointer[GdkPixmap];

external (cdecl) gdk_bitmap_create_from_data(arg0:Pointer[GdkDrawable], arg1:Pointer[gchar], arg2:gint, arg3:gint) : Pointer[GdkBitmap];

external (cdecl) gdk_pixmap_create_from_data(arg0:Pointer[GdkDrawable], arg1:Pointer[gchar], arg2:gint, arg3:gint, arg4:gint, arg5:Pointer[GdkColor], arg6:Pointer[GdkColor]) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_create_from_xpm(arg0:Pointer[GdkDrawable], arg1:Pointer[Pointer[GdkBitmap]], arg2:Pointer[GdkColor], arg3:Pointer[gchar]) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_colormap_create_from_xpm(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkColormap], arg2:Pointer[Pointer[GdkBitmap]], arg3:Pointer[GdkColor], arg4:Pointer[gchar]) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_create_from_xpm_d(arg0:Pointer[GdkDrawable], arg1:Pointer[Pointer[GdkBitmap]], arg2:Pointer[GdkColor], arg3:Pointer[Pointer[gchar]]) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_colormap_create_from_xpm_d(arg0:Pointer[GdkDrawable], arg1:Pointer[GdkColormap], arg2:Pointer[Pointer[GdkBitmap]], arg3:Pointer[GdkColor], arg4:Pointer[Pointer[gchar]]) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_get_size(arg0:Pointer[GdkPixmap], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gdk_pixmap_foreign_new(arg0:GdkNativeWindow) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_lookup(arg0:GdkNativeWindow) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_foreign_new_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_lookup_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow) : Pointer[GdkPixmap];

external (cdecl) gdk_pixmap_foreign_new_for_screen(arg0:Pointer[GdkScreen], arg1:GdkNativeWindow, arg2:gint, arg3:gint, arg4:gint) : Pointer[GdkPixmap];


alias GdkPropMode = CUInt;
alias GDK_PROP_MODE_REPLACE = CUInt(0);
alias GDK_PROP_MODE_PREPEND = CUInt(1);
alias GDK_PROP_MODE_APPEND = CUInt(2);

external (cdecl) gdk_atom_intern(arg0:Pointer[gchar], arg1:gboolean) : GdkAtom;

external (cdecl) gdk_atom_intern_static_string(arg0:Pointer[gchar]) : GdkAtom;

external (cdecl) gdk_atom_name(arg0:GdkAtom) : Pointer[gchar];

external (cdecl) gdk_property_get(arg0:Pointer[GdkWindow], arg1:GdkAtom, arg2:GdkAtom, arg3:gulong, arg4:gulong, arg5:gint, arg6:Pointer[GdkAtom], arg7:Pointer[gint], arg8:Pointer[gint], arg9:Pointer[Pointer[guchar]]) : gboolean;

external (cdecl) gdk_property_change(arg0:Pointer[GdkWindow], arg1:GdkAtom, arg2:GdkAtom, arg3:gint, arg4:GdkPropMode, arg5:Pointer[guchar], arg6:gint) : ;

external (cdecl) gdk_property_delete(arg0:Pointer[GdkWindow], arg1:GdkAtom) : ;

external (cdecl) gdk_text_property_to_text_list(arg0:GdkAtom, arg1:gint, arg2:Pointer[guchar], arg3:gint, arg4:Pointer[Pointer[Pointer[gchar]]]) : gint;

external (cdecl) gdk_utf8_to_compound_text(arg0:Pointer[gchar], arg1:Pointer[GdkAtom], arg2:Pointer[gint], arg3:Pointer[Pointer[guchar]], arg4:Pointer[gint]) : gboolean;

external (cdecl) gdk_string_to_compound_text(arg0:Pointer[gchar], arg1:Pointer[GdkAtom], arg2:Pointer[gint], arg3:Pointer[Pointer[guchar]], arg4:Pointer[gint]) : gint;

external (cdecl) gdk_text_property_to_utf8_list(arg0:GdkAtom, arg1:gint, arg2:Pointer[guchar], arg3:gint, arg4:Pointer[Pointer[Pointer[gchar]]]) : gint;

external (cdecl) gdk_text_property_to_utf8_list_for_display(arg0:Pointer[GdkDisplay], arg1:GdkAtom, arg2:gint, arg3:Pointer[guchar], arg4:gint, arg5:Pointer[Pointer[Pointer[gchar]]]) : gint;

external (cdecl) gdk_utf8_to_string_target(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gdk_text_property_to_text_list_for_display(arg0:Pointer[GdkDisplay], arg1:GdkAtom, arg2:gint, arg3:Pointer[guchar], arg4:gint, arg5:Pointer[Pointer[Pointer[gchar]]]) : gint;

external (cdecl) gdk_string_to_compound_text_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[gchar], arg2:Pointer[GdkAtom], arg3:Pointer[gint], arg4:Pointer[Pointer[guchar]], arg5:Pointer[gint]) : gint;

external (cdecl) gdk_utf8_to_compound_text_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[gchar], arg2:Pointer[GdkAtom], arg3:Pointer[gint], arg4:Pointer[Pointer[guchar]], arg5:Pointer[gint]) : gboolean;

external (cdecl) gdk_free_text_list(arg0:Pointer[Pointer[gchar]]) : ;

external (cdecl) gdk_free_compound_text(arg0:Pointer[guchar]) : ;


alias GdkFillRule = CUInt;
alias GDK_EVEN_ODD_RULE = CUInt(0);
alias GDK_WINDING_RULE = CUInt(1);


alias GdkOverlapType = CUInt;
alias GDK_OVERLAP_RECTANGLE_IN = CUInt(0);
alias GDK_OVERLAP_RECTANGLE_OUT = CUInt(1);
alias GDK_OVERLAP_RECTANGLE_PART = CUInt(2);

alias GdkSpanFunc = CCodePointer[[Pointer[GdkSpan], gpointer],[]];

external (cdecl) gdk_region_new() : Pointer[GdkRegion];

external (cdecl) gdk_region_polygon(arg0:Pointer[GdkPoint], arg1:gint, arg2:GdkFillRule) : Pointer[GdkRegion];

external (cdecl) gdk_region_copy(arg0:Pointer[GdkRegion]) : Pointer[GdkRegion];

external (cdecl) gdk_region_rectangle(arg0:Pointer[GdkRectangle]) : Pointer[GdkRegion];

external (cdecl) gdk_region_destroy(arg0:Pointer[GdkRegion]) : ;

external (cdecl) gdk_region_get_clipbox(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_region_get_rectangles(arg0:Pointer[GdkRegion], arg1:Pointer[Pointer[GdkRectangle]], arg2:Pointer[gint]) : ;

external (cdecl) gdk_region_empty(arg0:Pointer[GdkRegion]) : gboolean;

external (cdecl) gdk_region_equal(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRegion]) : gboolean;

external (cdecl) gdk_region_rect_equal(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRectangle]) : gboolean;

external (cdecl) gdk_region_point_in(arg0:Pointer[GdkRegion], arg1:CInt, arg2:CInt) : gboolean;

external (cdecl) gdk_region_rect_in(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRectangle]) : GdkOverlapType;

external (cdecl) gdk_region_offset(arg0:Pointer[GdkRegion], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_region_shrink(arg0:Pointer[GdkRegion], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_region_union_with_rect(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_region_intersect(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRegion]) : ;

external (cdecl) gdk_region_union(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRegion]) : ;

external (cdecl) gdk_region_subtract(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRegion]) : ;

external (cdecl) gdk_region_xor(arg0:Pointer[GdkRegion], arg1:Pointer[GdkRegion]) : ;

external (cdecl) gdk_region_spans_intersect_foreach(arg0:Pointer[GdkRegion], arg1:Pointer[GdkSpan], arg2:CInt, arg3:gboolean, arg4:GdkSpanFunc, arg5:gpointer) : ;

alias GdkSelection = GdkAtom;

alias GdkTarget = GdkAtom;

alias GdkSelectionType = GdkAtom;

external (cdecl) gdk_selection_owner_set(arg0:Pointer[GdkWindow], arg1:GdkAtom, arg2:guint32, arg3:gboolean) : gboolean;

external (cdecl) gdk_selection_owner_get(arg0:GdkAtom) : Pointer[GdkWindow];

external (cdecl) gdk_selection_owner_set_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkWindow], arg2:GdkAtom, arg3:guint32, arg4:gboolean) : gboolean;

external (cdecl) gdk_selection_owner_get_for_display(arg0:Pointer[GdkDisplay], arg1:GdkAtom) : Pointer[GdkWindow];

external (cdecl) gdk_selection_convert(arg0:Pointer[GdkWindow], arg1:GdkAtom, arg2:GdkAtom, arg3:guint32) : ;

external (cdecl) gdk_selection_property_get(arg0:Pointer[GdkWindow], arg1:Pointer[Pointer[guchar]], arg2:Pointer[GdkAtom], arg3:Pointer[gint]) : gint;

external (cdecl) gdk_selection_send_notify(arg0:GdkNativeWindow, arg1:GdkAtom, arg2:GdkAtom, arg3:GdkAtom, arg4:guint32) : ;

external (cdecl) gdk_selection_send_notify_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow, arg2:GdkAtom, arg3:GdkAtom, arg4:GdkAtom, arg5:guint32) : ;

external (cdecl) gdk_spawn_on_screen(arg0:Pointer[GdkScreen], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]], arg4:GSpawnFlags, arg5:GSpawnChildSetupFunc, arg6:gpointer, arg7:Pointer[gint], arg8:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gdk_spawn_on_screen_with_pipes(arg0:Pointer[GdkScreen], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]], arg4:GSpawnFlags, arg5:GSpawnChildSetupFunc, arg6:gpointer, arg7:Pointer[gint], arg8:Pointer[gint], arg9:Pointer[gint], arg10:Pointer[gint], arg11:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gdk_spawn_command_line_on_screen(arg0:Pointer[GdkScreen], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

alias GdkGeometry = Struct__GdkGeometry;

alias GdkWindowAttr = Struct__GdkWindowAttr;

alias GdkPointerHooks = Struct__GdkPointerHooks;

alias Struct__GdkWindowRedirect = Opaque;

alias GdkWindowRedirect = Struct__GdkWindowRedirect;


alias GdkWindowClass = CUInt;
alias GDK_INPUT_OUTPUT = CUInt(0);
alias GDK_INPUT_ONLY = CUInt(1);


alias GdkWindowType = CUInt;
alias GDK_WINDOW_ROOT = CUInt(0);
alias GDK_WINDOW_TOPLEVEL = CUInt(1);
alias GDK_WINDOW_CHILD = CUInt(2);
alias GDK_WINDOW_DIALOG = CUInt(3);
alias GDK_WINDOW_TEMP = CUInt(4);
alias GDK_WINDOW_FOREIGN = CUInt(5);
alias GDK_WINDOW_OFFSCREEN = CUInt(6);


alias GdkWindowAttributesType = CUInt;
alias GDK_WA_TITLE = CUInt(2);
alias GDK_WA_X = CUInt(4);
alias GDK_WA_Y = CUInt(8);
alias GDK_WA_CURSOR = CUInt(16);
alias GDK_WA_COLORMAP = CUInt(32);
alias GDK_WA_VISUAL = CUInt(64);
alias GDK_WA_WMCLASS = CUInt(128);
alias GDK_WA_NOREDIR = CUInt(256);
alias GDK_WA_TYPE_HINT = CUInt(512);


alias GdkWindowHints = CUInt;
alias GDK_HINT_POS = CUInt(1);
alias GDK_HINT_MIN_SIZE = CUInt(2);
alias GDK_HINT_MAX_SIZE = CUInt(4);
alias GDK_HINT_BASE_SIZE = CUInt(8);
alias GDK_HINT_ASPECT = CUInt(16);
alias GDK_HINT_RESIZE_INC = CUInt(32);
alias GDK_HINT_WIN_GRAVITY = CUInt(64);
alias GDK_HINT_USER_POS = CUInt(128);
alias GDK_HINT_USER_SIZE = CUInt(256);


alias GdkWindowTypeHint = CUInt;
alias GDK_WINDOW_TYPE_HINT_NORMAL = CUInt(0);
alias GDK_WINDOW_TYPE_HINT_DIALOG = CUInt(1);
alias GDK_WINDOW_TYPE_HINT_MENU = CUInt(2);
alias GDK_WINDOW_TYPE_HINT_TOOLBAR = CUInt(3);
alias GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = CUInt(4);
alias GDK_WINDOW_TYPE_HINT_UTILITY = CUInt(5);
alias GDK_WINDOW_TYPE_HINT_DOCK = CUInt(6);
alias GDK_WINDOW_TYPE_HINT_DESKTOP = CUInt(7);
alias GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = CUInt(8);
alias GDK_WINDOW_TYPE_HINT_POPUP_MENU = CUInt(9);
alias GDK_WINDOW_TYPE_HINT_TOOLTIP = CUInt(10);
alias GDK_WINDOW_TYPE_HINT_NOTIFICATION = CUInt(11);
alias GDK_WINDOW_TYPE_HINT_COMBO = CUInt(12);
alias GDK_WINDOW_TYPE_HINT_DND = CUInt(13);


alias GdkWMDecoration = CUInt;
alias GDK_DECOR_ALL = CUInt(1);
alias GDK_DECOR_BORDER = CUInt(2);
alias GDK_DECOR_RESIZEH = CUInt(4);
alias GDK_DECOR_TITLE = CUInt(8);
alias GDK_DECOR_MENU = CUInt(16);
alias GDK_DECOR_MINIMIZE = CUInt(32);
alias GDK_DECOR_MAXIMIZE = CUInt(64);


alias GdkWMFunction = CUInt;
alias GDK_FUNC_ALL = CUInt(1);
alias GDK_FUNC_RESIZE = CUInt(2);
alias GDK_FUNC_MOVE = CUInt(4);
alias GDK_FUNC_MINIMIZE = CUInt(8);
alias GDK_FUNC_MAXIMIZE = CUInt(16);
alias GDK_FUNC_CLOSE = CUInt(32);


alias GdkGravity = CUInt;
alias GDK_GRAVITY_NORTH_WEST = CUInt(1);
alias GDK_GRAVITY_NORTH = CUInt(2);
alias GDK_GRAVITY_NORTH_EAST = CUInt(3);
alias GDK_GRAVITY_WEST = CUInt(4);
alias GDK_GRAVITY_CENTER = CUInt(5);
alias GDK_GRAVITY_EAST = CUInt(6);
alias GDK_GRAVITY_SOUTH_WEST = CUInt(7);
alias GDK_GRAVITY_SOUTH = CUInt(8);
alias GDK_GRAVITY_SOUTH_EAST = CUInt(9);
alias GDK_GRAVITY_STATIC = CUInt(10);


alias GdkWindowEdge = CUInt;
alias GDK_WINDOW_EDGE_NORTH_WEST = CUInt(0);
alias GDK_WINDOW_EDGE_NORTH = CUInt(1);
alias GDK_WINDOW_EDGE_NORTH_EAST = CUInt(2);
alias GDK_WINDOW_EDGE_WEST = CUInt(3);
alias GDK_WINDOW_EDGE_EAST = CUInt(4);
alias GDK_WINDOW_EDGE_SOUTH_WEST = CUInt(5);
alias GDK_WINDOW_EDGE_SOUTH = CUInt(6);
alias GDK_WINDOW_EDGE_SOUTH_EAST = CUInt(7);

record Struct__GdkWindowAttr (
    title : Pointer[gchar],
    event_mask : gint,
    x : gint,
    y : gint,
    width : gint,
    height : gint,
    wclass : GdkWindowClass,
    visual : Pointer[GdkVisual],
    colormap : Pointer[GdkColormap],
    window_type : GdkWindowType,
    cursor : Pointer[GdkCursor],
    wmclass_name : Pointer[gchar],
    wmclass_class : Pointer[gchar],
    override_redirect : gboolean,
    type_hint : GdkWindowTypeHint,
);

record Struct__GdkGeometry (
    min_width : gint,
    min_height : gint,
    max_width : gint,
    max_height : gint,
    base_width : gint,
    base_height : gint,
    width_inc : gint,
    height_inc : gint,
    min_aspect : gdouble,
    max_aspect : gdouble,
    win_gravity : GdkGravity,
);

record Struct__GdkPointerHooks (
    get_pointer : CCodePointer[[Pointer[GdkWindow], Pointer[gint], Pointer[gint], Pointer[GdkModifierType]],[Pointer[GdkWindow]]],
    window_at_pointer : CCodePointer[[Pointer[GdkScreen], Pointer[gint], Pointer[gint]],[Pointer[GdkWindow]]],
);

alias GdkWindowObject = Struct__GdkWindowObject;

alias GdkWindowObjectClass = Struct__GdkWindowObjectClass;

record Struct__GdkWindowObject (
    parent_instance : GdkDrawable,
    impl : Pointer[GdkDrawable],
    parent : Pointer[GdkWindowObject],
    user_data : gpointer,
    x : gint,
    y : gint,
    extension_events : gint,
    filters : Pointer[GList],
    children : Pointer[GList],
    bg_color : GdkColor,
    bg_pixmap : Pointer[GdkPixmap],
    paint_stack : Pointer[GSList],
    update_area : Pointer[GdkRegion],
    update_freeze_count : guint,
    window_type : guint8,
    depth : guint8,
    resize_count : guint8,
    state : GdkWindowState,
    guffaw_gravity : guint,
    input_only : guint,
    modal_hint : guint,
    composited : guint,
    destroyed : guint,
    accept_focus : guint,
    focus_on_map : guint,
    shaped : guint,
    event_mask : GdkEventMask,
    update_and_descendants_freeze_count : guint,
    redirect : Pointer[GdkWindowRedirect],
);

record Struct__GdkWindowObjectClass (
    parent_class : GdkDrawableClass,
);

external (cdecl) gdk_window_object_get_type() : GType;

external (cdecl) gdk_window_new(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindowAttr], arg2:gint) : Pointer[GdkWindow];

external (cdecl) gdk_window_destroy(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_get_window_type(arg0:Pointer[GdkWindow]) : GdkWindowType;

external (cdecl) gdk_window_is_destroyed(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_get_screen(arg0:Pointer[GdkWindow]) : Pointer[GdkScreen];

external (cdecl) gdk_window_get_display(arg0:Pointer[GdkWindow]) : Pointer[GdkDisplay];

external (cdecl) gdk_window_get_visual(arg0:Pointer[GdkWindow]) : Pointer[GdkVisual];

external (cdecl) gdk_window_get_width(arg0:Pointer[GdkWindow]) : CInt;

external (cdecl) gdk_window_get_height(arg0:Pointer[GdkWindow]) : CInt;

external (cdecl) gdk_window_at_pointer(arg0:Pointer[gint], arg1:Pointer[gint]) : Pointer[GdkWindow];

external (cdecl) gdk_window_show(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_hide(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_withdraw(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_show_unraised(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_move(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_window_resize(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_window_move_resize(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gdk_window_reparent(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindow], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_window_clear(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_clear_area(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gdk_window_clear_area_e(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gdk_window_raise(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_lower(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_restack(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindow], arg2:gboolean) : ;

external (cdecl) gdk_window_focus(arg0:Pointer[GdkWindow], arg1:guint32) : ;

external (cdecl) gdk_window_set_user_data(arg0:Pointer[GdkWindow], arg1:gpointer) : ;

external (cdecl) gdk_window_set_override_redirect(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_get_accept_focus(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_set_accept_focus(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_get_focus_on_map(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_set_focus_on_map(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_add_filter(arg0:Pointer[GdkWindow], arg1:GdkFilterFunc, arg2:gpointer) : ;

external (cdecl) gdk_window_remove_filter(arg0:Pointer[GdkWindow], arg1:GdkFilterFunc, arg2:gpointer) : ;

external (cdecl) gdk_window_scroll(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) gdk_window_move_region(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRegion], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_window_ensure_native(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_shape_combine_mask(arg0:Pointer[GdkWindow], arg1:Pointer[GdkBitmap], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_window_shape_combine_region(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRegion], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_window_set_child_shapes(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_get_composited(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_set_composited(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_merge_child_shapes(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_input_shape_combine_mask(arg0:Pointer[GdkWindow], arg1:Pointer[GdkBitmap], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_window_input_shape_combine_region(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRegion], arg2:gint, arg3:gint) : ;

external (cdecl) gdk_window_set_child_input_shapes(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_merge_child_input_shapes(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_is_visible(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_is_viewable(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_is_input_only(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_is_shaped(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_get_state(arg0:Pointer[GdkWindow]) : GdkWindowState;

external (cdecl) gdk_window_set_static_gravities(arg0:Pointer[GdkWindow], arg1:gboolean) : gboolean;

external (cdecl) gdk_window_foreign_new(arg0:GdkNativeWindow) : Pointer[GdkWindow];

external (cdecl) gdk_window_lookup(arg0:GdkNativeWindow) : Pointer[GdkWindow];

external (cdecl) gdk_window_foreign_new_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow) : Pointer[GdkWindow];

external (cdecl) gdk_window_lookup_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow) : Pointer[GdkWindow];

external (cdecl) gdk_window_has_native(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_set_hints(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gdk_window_set_type_hint(arg0:Pointer[GdkWindow], arg1:GdkWindowTypeHint) : ;

external (cdecl) gdk_window_get_type_hint(arg0:Pointer[GdkWindow]) : GdkWindowTypeHint;

external (cdecl) gdk_window_get_modal_hint(arg0:Pointer[GdkWindow]) : gboolean;

external (cdecl) gdk_window_set_modal_hint(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_skip_taskbar_hint(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_skip_pager_hint(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_urgency_hint(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_geometry_hints(arg0:Pointer[GdkWindow], arg1:Pointer[GdkGeometry], arg2:GdkWindowHints) : ;

external (cdecl) gdk_set_sm_client_id(arg0:Pointer[gchar]) : ;

external (cdecl) gdk_window_begin_paint_rect(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_window_begin_paint_region(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRegion]) : ;

external (cdecl) gdk_window_end_paint(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_flush(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_set_title(arg0:Pointer[GdkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gdk_window_set_role(arg0:Pointer[GdkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gdk_window_set_startup_id(arg0:Pointer[GdkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gdk_window_set_transient_for(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_set_background(arg0:Pointer[GdkWindow], arg1:Pointer[GdkColor]) : ;

external (cdecl) gdk_window_set_back_pixmap(arg0:Pointer[GdkWindow], arg1:Pointer[GdkPixmap], arg2:gboolean) : ;

external (cdecl) gdk_window_get_background_pattern(arg0:Pointer[GdkWindow]) : Pointer[cairo_pattern_t];

external (cdecl) gdk_window_set_cursor(arg0:Pointer[GdkWindow], arg1:Pointer[GdkCursor]) : ;

external (cdecl) gdk_window_get_cursor(arg0:Pointer[GdkWindow]) : Pointer[GdkCursor];

external (cdecl) gdk_window_get_user_data(arg0:Pointer[GdkWindow], arg1:Pointer[gpointer]) : ;

external (cdecl) gdk_window_get_geometry(arg0:Pointer[GdkWindow], arg1:Pointer[gint], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[gint], arg5:Pointer[gint]) : ;

external (cdecl) gdk_window_get_position(arg0:Pointer[GdkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gdk_window_get_origin(arg0:Pointer[GdkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : gint;

external (cdecl) gdk_window_get_root_coords(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gdk_window_coords_to_parent(arg0:Pointer[GdkWindow], arg1:gdouble, arg2:gdouble, arg3:Pointer[gdouble], arg4:Pointer[gdouble]) : ;

external (cdecl) gdk_window_coords_from_parent(arg0:Pointer[GdkWindow], arg1:gdouble, arg2:gdouble, arg3:Pointer[gdouble], arg4:Pointer[gdouble]) : ;

external (cdecl) gdk_window_get_deskrelative_origin(arg0:Pointer[GdkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : gboolean;

external (cdecl) gdk_window_get_root_origin(arg0:Pointer[GdkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gdk_window_get_frame_extents(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_window_get_pointer(arg0:Pointer[GdkWindow], arg1:Pointer[gint], arg2:Pointer[gint], arg3:Pointer[GdkModifierType]) : Pointer[GdkWindow];

external (cdecl) gdk_window_get_parent(arg0:Pointer[GdkWindow]) : Pointer[GdkWindow];

external (cdecl) gdk_window_get_toplevel(arg0:Pointer[GdkWindow]) : Pointer[GdkWindow];

external (cdecl) gdk_window_get_effective_parent(arg0:Pointer[GdkWindow]) : Pointer[GdkWindow];

external (cdecl) gdk_window_get_effective_toplevel(arg0:Pointer[GdkWindow]) : Pointer[GdkWindow];

external (cdecl) gdk_window_get_children(arg0:Pointer[GdkWindow]) : Pointer[GList];

external (cdecl) gdk_window_peek_children(arg0:Pointer[GdkWindow]) : Pointer[GList];

external (cdecl) gdk_window_get_events(arg0:Pointer[GdkWindow]) : GdkEventMask;

external (cdecl) gdk_window_set_events(arg0:Pointer[GdkWindow], arg1:GdkEventMask) : ;

external (cdecl) gdk_window_set_icon_list(arg0:Pointer[GdkWindow], arg1:Pointer[GList]) : ;

external (cdecl) gdk_window_set_icon(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindow], arg2:Pointer[GdkPixmap], arg3:Pointer[GdkBitmap]) : ;

external (cdecl) gdk_window_set_icon_name(arg0:Pointer[GdkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gdk_window_set_group(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_get_group(arg0:Pointer[GdkWindow]) : Pointer[GdkWindow];

external (cdecl) gdk_window_set_decorations(arg0:Pointer[GdkWindow], arg1:GdkWMDecoration) : ;

external (cdecl) gdk_window_get_decorations(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWMDecoration]) : gboolean;

external (cdecl) gdk_window_set_functions(arg0:Pointer[GdkWindow], arg1:GdkWMFunction) : ;

external (cdecl) gdk_window_get_toplevels() : Pointer[GList];

external (cdecl) gdk_window_create_similar_surface(arg0:Pointer[GdkWindow], arg1:cairo_content_t, arg2:CInt, arg3:CInt) : Pointer[cairo_surface_t];

external (cdecl) gdk_window_beep(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_iconify(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_deiconify(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_stick(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_unstick(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_maximize(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_unmaximize(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_fullscreen(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_unfullscreen(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_set_keep_above(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_keep_below(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_opacity(arg0:Pointer[GdkWindow], arg1:gdouble) : ;

external (cdecl) gdk_window_register_dnd(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_begin_resize_drag(arg0:Pointer[GdkWindow], arg1:GdkWindowEdge, arg2:gint, arg3:gint, arg4:gint, arg5:guint32) : ;

external (cdecl) gdk_window_begin_move_drag(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:guint32) : ;

external (cdecl) gdk_window_invalidate_rect(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRectangle], arg2:gboolean) : ;

external (cdecl) gdk_window_invalidate_region(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRegion], arg2:gboolean) : ;

external (cdecl) gdk_window_invalidate_maybe_recurse(arg0:Pointer[GdkWindow], arg1:Pointer[GdkRegion], arg2:CCodePointer[[Pointer[GdkWindow], gpointer],[gboolean]], arg3:gpointer) : ;

external (cdecl) gdk_window_get_update_area(arg0:Pointer[GdkWindow]) : Pointer[GdkRegion];

external (cdecl) gdk_window_freeze_updates(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_thaw_updates(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_freeze_toplevel_updates_libgtk_only(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_thaw_toplevel_updates_libgtk_only(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_process_all_updates() : ;

external (cdecl) gdk_window_process_updates(arg0:Pointer[GdkWindow], arg1:gboolean) : ;

external (cdecl) gdk_window_set_debug_updates(arg0:gboolean) : ;

external (cdecl) gdk_window_constrain_size(arg0:Pointer[GdkGeometry], arg1:guint, arg2:gint, arg3:gint, arg4:Pointer[gint], arg5:Pointer[gint]) : ;

external (cdecl) gdk_window_get_internal_paint_info(arg0:Pointer[GdkWindow], arg1:Pointer[Pointer[GdkDrawable]], arg2:Pointer[gint], arg3:Pointer[gint]) : ;

external (cdecl) gdk_window_enable_synchronized_configure(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_configure_finished(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_get_default_root_window() : Pointer[GdkWindow];

external (cdecl) gdk_offscreen_window_get_pixmap(arg0:Pointer[GdkWindow]) : Pointer[GdkPixmap];

external (cdecl) gdk_offscreen_window_set_embedder(arg0:Pointer[GdkWindow], arg1:Pointer[GdkWindow]) : ;

external (cdecl) gdk_offscreen_window_get_embedder(arg0:Pointer[GdkWindow]) : Pointer[GdkWindow];

external (cdecl) gdk_window_geometry_changed(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_window_redirect_to_drawable(arg0:Pointer[GdkWindow], arg1:Pointer[GdkDrawable], arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gdk_window_remove_redirection(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_set_pointer_hooks(arg0:Pointer[GdkPointerHooks]) : Pointer[GdkPointerHooks];

external (cdecl) gdk_test_render_sync(arg0:Pointer[GdkWindow]) : ;

external (cdecl) gdk_test_simulate_key(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:guint, arg4:GdkModifierType, arg5:GdkEventType) : gboolean;

external (cdecl) gdk_test_simulate_button(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:guint, arg4:GdkModifierType, arg5:GdkEventType) : gboolean;

alias Struct__GdkVisualClass = Opaque;

alias GdkVisualClass = Struct__GdkVisualClass;


alias GdkVisualType = CUInt;
alias GDK_VISUAL_STATIC_GRAY = CUInt(0);
alias GDK_VISUAL_GRAYSCALE = CUInt(1);
alias GDK_VISUAL_STATIC_COLOR = CUInt(2);
alias GDK_VISUAL_PSEUDO_COLOR = CUInt(3);
alias GDK_VISUAL_TRUE_COLOR = CUInt(4);
alias GDK_VISUAL_DIRECT_COLOR = CUInt(5);

record Struct__GdkVisual (
    parent_instance : GObject,
    type : GdkVisualType,
    depth : gint,
    byte_order : GdkByteOrder,
    colormap_size : gint,
    bits_per_rgb : gint,
    red_mask : guint32,
    red_shift : gint,
    red_prec : gint,
    green_mask : guint32,
    green_shift : gint,
    green_prec : gint,
    blue_mask : guint32,
    blue_shift : gint,
    blue_prec : gint,
);

external (cdecl) gdk_visual_get_type() : GType;

external (cdecl) gdk_visual_get_best_depth() : gint;

external (cdecl) gdk_visual_get_best_type() : GdkVisualType;

external (cdecl) gdk_visual_get_system() : Pointer[GdkVisual];

external (cdecl) gdk_visual_get_best() : Pointer[GdkVisual];

external (cdecl) gdk_visual_get_best_with_depth(arg0:gint) : Pointer[GdkVisual];

external (cdecl) gdk_visual_get_best_with_type(arg0:GdkVisualType) : Pointer[GdkVisual];

external (cdecl) gdk_visual_get_best_with_both(arg0:gint, arg1:GdkVisualType) : Pointer[GdkVisual];

external (cdecl) gdk_query_depths(arg0:Pointer[Pointer[gint]], arg1:Pointer[gint]) : ;

external (cdecl) gdk_query_visual_types(arg0:Pointer[Pointer[GdkVisualType]], arg1:Pointer[gint]) : ;

external (cdecl) gdk_list_visuals() : Pointer[GList];

external (cdecl) gdk_visual_get_screen(arg0:Pointer[GdkVisual]) : Pointer[GdkScreen];

external (cdecl) gdk_visual_get_visual_type(arg0:Pointer[GdkVisual]) : GdkVisualType;

external (cdecl) gdk_visual_get_depth(arg0:Pointer[GdkVisual]) : gint;

external (cdecl) gdk_visual_get_byte_order(arg0:Pointer[GdkVisual]) : GdkByteOrder;

external (cdecl) gdk_visual_get_colormap_size(arg0:Pointer[GdkVisual]) : gint;

external (cdecl) gdk_visual_get_bits_per_rgb(arg0:Pointer[GdkVisual]) : gint;

external (cdecl) gdk_visual_get_red_pixel_details(arg0:Pointer[GdkVisual], arg1:Pointer[guint32], arg2:Pointer[gint], arg3:Pointer[gint]) : ;

external (cdecl) gdk_visual_get_green_pixel_details(arg0:Pointer[GdkVisual], arg1:Pointer[guint32], arg2:Pointer[gint], arg3:Pointer[gint]) : ;

external (cdecl) gdk_visual_get_blue_pixel_details(arg0:Pointer[GdkVisual], arg1:Pointer[guint32], arg2:Pointer[gint], arg3:Pointer[gint]) : ;

external (cdecl) gdk_parse_args(arg0:Pointer[gint], arg1:Pointer[Pointer[Pointer[gchar]]]) : ;

external (cdecl) gdk_init(arg0:Pointer[gint], arg1:Pointer[Pointer[Pointer[gchar]]]) : ;

external (cdecl) gdk_init_check(arg0:Pointer[gint], arg1:Pointer[Pointer[Pointer[gchar]]]) : gboolean;

external (cdecl) gdk_add_option_entries_libgtk_only(arg0:Pointer[GOptionGroup]) : ;

external (cdecl) gdk_pre_parse_libgtk_only() : ;

external (cdecl) gdk_exit(arg0:gint) : ;

external (cdecl) gdk_set_locale() : Pointer[gchar];

external (cdecl) gdk_get_program_class() : Pointer[CChar];

external (cdecl) gdk_set_program_class(arg0:Pointer[CChar]) : ;

external (cdecl) gdk_error_trap_push() : ;

external (cdecl) gdk_error_trap_pop() : gint;

external (cdecl) gdk_set_use_xshm(arg0:gboolean) : ;

external (cdecl) gdk_get_use_xshm() : gboolean;

external (cdecl) gdk_get_display() : Pointer[gchar];

external (cdecl) gdk_get_display_arg_name() : Pointer[gchar];

external (cdecl) gdk_input_add_full(arg0:gint, arg1:GdkInputCondition, arg2:GdkInputFunction, arg3:gpointer, arg4:GDestroyNotify) : gint;

external (cdecl) gdk_input_add(arg0:gint, arg1:GdkInputCondition, arg2:GdkInputFunction, arg3:gpointer) : gint;

external (cdecl) gdk_input_remove(arg0:gint) : ;

external (cdecl) gdk_pointer_grab(arg0:Pointer[GdkWindow], arg1:gboolean, arg2:GdkEventMask, arg3:Pointer[GdkWindow], arg4:Pointer[GdkCursor], arg5:guint32) : GdkGrabStatus;

external (cdecl) gdk_keyboard_grab(arg0:Pointer[GdkWindow], arg1:gboolean, arg2:guint32) : GdkGrabStatus;

external (cdecl) gdk_pointer_grab_info_libgtk_only(arg0:Pointer[GdkDisplay], arg1:Pointer[Pointer[GdkWindow]], arg2:Pointer[gboolean]) : gboolean;

external (cdecl) gdk_keyboard_grab_info_libgtk_only(arg0:Pointer[GdkDisplay], arg1:Pointer[Pointer[GdkWindow]], arg2:Pointer[gboolean]) : gboolean;

external (cdecl) gdk_pointer_ungrab(arg0:guint32) : ;

external (cdecl) gdk_keyboard_ungrab(arg0:guint32) : ;

external (cdecl) gdk_pointer_is_grabbed() : gboolean;

external (cdecl) gdk_screen_width() : gint;

external (cdecl) gdk_screen_height() : gint;

external (cdecl) gdk_screen_width_mm() : gint;

external (cdecl) gdk_screen_height_mm() : gint;

external (cdecl) gdk_beep() : ;

external (cdecl) gdk_flush() : ;

external (cdecl) gdk_set_double_click_time(arg0:guint) : ;

external (cdecl) gdk_rectangle_intersect(arg0:Pointer[GdkRectangle], arg1:Pointer[GdkRectangle], arg2:Pointer[GdkRectangle]) : gboolean;

external (cdecl) gdk_rectangle_union(arg0:Pointer[GdkRectangle], arg1:Pointer[GdkRectangle], arg2:Pointer[GdkRectangle]) : ;

external (cdecl) gdk_rectangle_get_type() : GType;

external (cdecl) gdk_wcstombs(arg0:Pointer[GdkWChar]) : Pointer[gchar];

external (cdecl) gdk_mbstowcs(arg0:Pointer[GdkWChar], arg1:Pointer[gchar], arg2:gint) : gint;

external (cdecl) gdk_event_send_client_message(arg0:Pointer[GdkEvent], arg1:GdkNativeWindow) : gboolean;

external (cdecl) gdk_event_send_clientmessage_toall(arg0:Pointer[GdkEvent]) : ;

external (cdecl) gdk_event_send_client_message_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[GdkEvent], arg2:GdkNativeWindow) : gboolean;

external (cdecl) gdk_notify_startup_complete() : ;

external (cdecl) gdk_notify_startup_complete_with_id(arg0:Pointer[gchar]) : ;

external gdk_threads_mutex : Pointer[GMutex];

external gdk_threads_lock : GCallback;

external gdk_threads_unlock : GCallback;

external (cdecl) gdk_threads_enter() : ;

external (cdecl) gdk_threads_leave() : ;

external (cdecl) gdk_threads_init() : ;

external (cdecl) gdk_threads_set_lock_functions(arg0:GCallback, arg1:GCallback) : ;

external (cdecl) gdk_threads_add_idle_full(arg0:gint, arg1:GSourceFunc, arg2:gpointer, arg3:GDestroyNotify) : guint;

external (cdecl) gdk_threads_add_idle(arg0:GSourceFunc, arg1:gpointer) : guint;

external (cdecl) gdk_threads_add_timeout_full(arg0:gint, arg1:guint, arg2:GSourceFunc, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) gdk_threads_add_timeout(arg0:guint, arg1:GSourceFunc, arg2:gpointer) : guint;

external (cdecl) gdk_threads_add_timeout_seconds_full(arg0:gint, arg1:guint, arg2:GSourceFunc, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) gdk_threads_add_timeout_seconds(arg0:guint, arg1:GSourceFunc, arg2:gpointer) : guint;


alias GtkAnchorType = CUInt;
alias GTK_ANCHOR_CENTER = CUInt(0);
alias GTK_ANCHOR_NORTH = CUInt(1);
alias GTK_ANCHOR_NORTH_WEST = CUInt(2);
alias GTK_ANCHOR_NORTH_EAST = CUInt(3);
alias GTK_ANCHOR_SOUTH = CUInt(4);
alias GTK_ANCHOR_SOUTH_WEST = CUInt(5);
alias GTK_ANCHOR_SOUTH_EAST = CUInt(6);
alias GTK_ANCHOR_WEST = CUInt(7);
alias GTK_ANCHOR_EAST = CUInt(8);
alias GTK_ANCHOR_N = CUInt(1);
alias GTK_ANCHOR_NW = CUInt(2);
alias GTK_ANCHOR_NE = CUInt(3);
alias GTK_ANCHOR_S = CUInt(4);
alias GTK_ANCHOR_SW = CUInt(5);
alias GTK_ANCHOR_SE = CUInt(6);
alias GTK_ANCHOR_W = CUInt(7);
alias GTK_ANCHOR_E = CUInt(8);


alias GtkArrowPlacement = CUInt;
alias GTK_ARROWS_BOTH = CUInt(0);
alias GTK_ARROWS_START = CUInt(1);
alias GTK_ARROWS_END = CUInt(2);


alias GtkArrowType = CUInt;
alias GTK_ARROW_UP = CUInt(0);
alias GTK_ARROW_DOWN = CUInt(1);
alias GTK_ARROW_LEFT = CUInt(2);
alias GTK_ARROW_RIGHT = CUInt(3);
alias GTK_ARROW_NONE = CUInt(4);


alias GtkAttachOptions = CUInt;
alias GTK_EXPAND = CUInt(1);
alias GTK_SHRINK = CUInt(2);
alias GTK_FILL = CUInt(4);


alias GtkButtonBoxStyle = CUInt;
alias GTK_BUTTONBOX_DEFAULT_STYLE = CUInt(0);
alias GTK_BUTTONBOX_SPREAD = CUInt(1);
alias GTK_BUTTONBOX_EDGE = CUInt(2);
alias GTK_BUTTONBOX_START = CUInt(3);
alias GTK_BUTTONBOX_END = CUInt(4);
alias GTK_BUTTONBOX_CENTER = CUInt(5);


alias GtkCurveType = CUInt;
alias GTK_CURVE_TYPE_LINEAR = CUInt(0);
alias GTK_CURVE_TYPE_SPLINE = CUInt(1);
alias GTK_CURVE_TYPE_FREE = CUInt(2);


alias GtkDeleteType = CUInt;
alias GTK_DELETE_CHARS = CUInt(0);
alias GTK_DELETE_WORD_ENDS = CUInt(1);
alias GTK_DELETE_WORDS = CUInt(2);
alias GTK_DELETE_DISPLAY_LINES = CUInt(3);
alias GTK_DELETE_DISPLAY_LINE_ENDS = CUInt(4);
alias GTK_DELETE_PARAGRAPH_ENDS = CUInt(5);
alias GTK_DELETE_PARAGRAPHS = CUInt(6);
alias GTK_DELETE_WHITESPACE = CUInt(7);


alias GtkDirectionType = CUInt;
alias GTK_DIR_TAB_FORWARD = CUInt(0);
alias GTK_DIR_TAB_BACKWARD = CUInt(1);
alias GTK_DIR_UP = CUInt(2);
alias GTK_DIR_DOWN = CUInt(3);
alias GTK_DIR_LEFT = CUInt(4);
alias GTK_DIR_RIGHT = CUInt(5);


alias GtkExpanderStyle = CUInt;
alias GTK_EXPANDER_COLLAPSED = CUInt(0);
alias GTK_EXPANDER_SEMI_COLLAPSED = CUInt(1);
alias GTK_EXPANDER_SEMI_EXPANDED = CUInt(2);
alias GTK_EXPANDER_EXPANDED = CUInt(3);


alias GtkIconSize = CUInt;
alias GTK_ICON_SIZE_INVALID = CUInt(0);
alias GTK_ICON_SIZE_MENU = CUInt(1);
alias GTK_ICON_SIZE_SMALL_TOOLBAR = CUInt(2);
alias GTK_ICON_SIZE_LARGE_TOOLBAR = CUInt(3);
alias GTK_ICON_SIZE_BUTTON = CUInt(4);
alias GTK_ICON_SIZE_DND = CUInt(5);
alias GTK_ICON_SIZE_DIALOG = CUInt(6);


alias GtkSensitivityType = CUInt;
alias GTK_SENSITIVITY_AUTO = CUInt(0);
alias GTK_SENSITIVITY_ON = CUInt(1);
alias GTK_SENSITIVITY_OFF = CUInt(2);


alias GtkSideType = CUInt;
alias GTK_SIDE_TOP = CUInt(0);
alias GTK_SIDE_BOTTOM = CUInt(1);
alias GTK_SIDE_LEFT = CUInt(2);
alias GTK_SIDE_RIGHT = CUInt(3);


alias GtkTextDirection = CUInt;
alias GTK_TEXT_DIR_NONE = CUInt(0);
alias GTK_TEXT_DIR_LTR = CUInt(1);
alias GTK_TEXT_DIR_RTL = CUInt(2);


alias GtkJustification = CUInt;
alias GTK_JUSTIFY_LEFT = CUInt(0);
alias GTK_JUSTIFY_RIGHT = CUInt(1);
alias GTK_JUSTIFY_CENTER = CUInt(2);
alias GTK_JUSTIFY_FILL = CUInt(3);


alias GtkMatchType = CUInt;
alias GTK_MATCH_ALL = CUInt(0);
alias GTK_MATCH_ALL_TAIL = CUInt(1);
alias GTK_MATCH_HEAD = CUInt(2);
alias GTK_MATCH_TAIL = CUInt(3);
alias GTK_MATCH_EXACT = CUInt(4);
alias GTK_MATCH_LAST = CUInt(5);


alias GtkMenuDirectionType = CUInt;
alias GTK_MENU_DIR_PARENT = CUInt(0);
alias GTK_MENU_DIR_CHILD = CUInt(1);
alias GTK_MENU_DIR_NEXT = CUInt(2);
alias GTK_MENU_DIR_PREV = CUInt(3);


alias GtkMessageType = CUInt;
alias GTK_MESSAGE_INFO = CUInt(0);
alias GTK_MESSAGE_WARNING = CUInt(1);
alias GTK_MESSAGE_QUESTION = CUInt(2);
alias GTK_MESSAGE_ERROR = CUInt(3);
alias GTK_MESSAGE_OTHER = CUInt(4);


alias GtkMetricType = CUInt;
alias GTK_PIXELS = CUInt(0);
alias GTK_INCHES = CUInt(1);
alias GTK_CENTIMETERS = CUInt(2);


alias GtkMovementStep = CUInt;
alias GTK_MOVEMENT_LOGICAL_POSITIONS = CUInt(0);
alias GTK_MOVEMENT_VISUAL_POSITIONS = CUInt(1);
alias GTK_MOVEMENT_WORDS = CUInt(2);
alias GTK_MOVEMENT_DISPLAY_LINES = CUInt(3);
alias GTK_MOVEMENT_DISPLAY_LINE_ENDS = CUInt(4);
alias GTK_MOVEMENT_PARAGRAPHS = CUInt(5);
alias GTK_MOVEMENT_PARAGRAPH_ENDS = CUInt(6);
alias GTK_MOVEMENT_PAGES = CUInt(7);
alias GTK_MOVEMENT_BUFFER_ENDS = CUInt(8);
alias GTK_MOVEMENT_HORIZONTAL_PAGES = CUInt(9);


alias GtkScrollStep = CUInt;
alias GTK_SCROLL_STEPS = CUInt(0);
alias GTK_SCROLL_PAGES = CUInt(1);
alias GTK_SCROLL_ENDS = CUInt(2);
alias GTK_SCROLL_HORIZONTAL_STEPS = CUInt(3);
alias GTK_SCROLL_HORIZONTAL_PAGES = CUInt(4);
alias GTK_SCROLL_HORIZONTAL_ENDS = CUInt(5);


alias GtkOrientation = CUInt;
alias GTK_ORIENTATION_HORIZONTAL = CUInt(0);
alias GTK_ORIENTATION_VERTICAL = CUInt(1);


alias GtkCornerType = CUInt;
alias GTK_CORNER_TOP_LEFT = CUInt(0);
alias GTK_CORNER_BOTTOM_LEFT = CUInt(1);
alias GTK_CORNER_TOP_RIGHT = CUInt(2);
alias GTK_CORNER_BOTTOM_RIGHT = CUInt(3);


alias GtkPackType = CUInt;
alias GTK_PACK_START = CUInt(0);
alias GTK_PACK_END = CUInt(1);


alias GtkPathPriorityType = CUInt;
alias GTK_PATH_PRIO_LOWEST = CUInt(0);
alias GTK_PATH_PRIO_GTK = CUInt(4);
alias GTK_PATH_PRIO_APPLICATION = CUInt(8);
alias GTK_PATH_PRIO_THEME = CUInt(10);
alias GTK_PATH_PRIO_RC = CUInt(12);
alias GTK_PATH_PRIO_HIGHEST = CUInt(15);


alias GtkPathType = CUInt;
alias GTK_PATH_WIDGET = CUInt(0);
alias GTK_PATH_WIDGET_CLASS = CUInt(1);
alias GTK_PATH_CLASS = CUInt(2);


alias GtkPolicyType = CUInt;
alias GTK_POLICY_ALWAYS = CUInt(0);
alias GTK_POLICY_AUTOMATIC = CUInt(1);
alias GTK_POLICY_NEVER = CUInt(2);


alias GtkPositionType = CUInt;
alias GTK_POS_LEFT = CUInt(0);
alias GTK_POS_RIGHT = CUInt(1);
alias GTK_POS_TOP = CUInt(2);
alias GTK_POS_BOTTOM = CUInt(3);


alias GtkPreviewType = CUInt;
alias GTK_PREVIEW_COLOR = CUInt(0);
alias GTK_PREVIEW_GRAYSCALE = CUInt(1);


alias GtkReliefStyle = CUInt;
alias GTK_RELIEF_NORMAL = CUInt(0);
alias GTK_RELIEF_HALF = CUInt(1);
alias GTK_RELIEF_NONE = CUInt(2);


alias GtkResizeMode = CUInt;
alias GTK_RESIZE_PARENT = CUInt(0);
alias GTK_RESIZE_QUEUE = CUInt(1);
alias GTK_RESIZE_IMMEDIATE = CUInt(2);


alias GtkSignalRunType = CUInt;
alias GTK_RUN_FIRST = CUInt(1);
alias GTK_RUN_LAST = CUInt(2);
alias GTK_RUN_BOTH = CUInt(3);
alias GTK_RUN_NO_RECURSE = CUInt(8);
alias GTK_RUN_ACTION = CUInt(32);
alias GTK_RUN_NO_HOOKS = CUInt(64);


alias GtkScrollType = CUInt;
alias GTK_SCROLL_NONE = CUInt(0);
alias GTK_SCROLL_JUMP = CUInt(1);
alias GTK_SCROLL_STEP_BACKWARD = CUInt(2);
alias GTK_SCROLL_STEP_FORWARD = CUInt(3);
alias GTK_SCROLL_PAGE_BACKWARD = CUInt(4);
alias GTK_SCROLL_PAGE_FORWARD = CUInt(5);
alias GTK_SCROLL_STEP_UP = CUInt(6);
alias GTK_SCROLL_STEP_DOWN = CUInt(7);
alias GTK_SCROLL_PAGE_UP = CUInt(8);
alias GTK_SCROLL_PAGE_DOWN = CUInt(9);
alias GTK_SCROLL_STEP_LEFT = CUInt(10);
alias GTK_SCROLL_STEP_RIGHT = CUInt(11);
alias GTK_SCROLL_PAGE_LEFT = CUInt(12);
alias GTK_SCROLL_PAGE_RIGHT = CUInt(13);
alias GTK_SCROLL_START = CUInt(14);
alias GTK_SCROLL_END = CUInt(15);


alias GtkSelectionMode = CUInt;
alias GTK_SELECTION_NONE = CUInt(0);
alias GTK_SELECTION_SINGLE = CUInt(1);
alias GTK_SELECTION_BROWSE = CUInt(2);
alias GTK_SELECTION_MULTIPLE = CUInt(3);
alias GTK_SELECTION_EXTENDED = CUInt(3);


alias GtkShadowType = CUInt;
alias GTK_SHADOW_NONE = CUInt(0);
alias GTK_SHADOW_IN = CUInt(1);
alias GTK_SHADOW_OUT = CUInt(2);
alias GTK_SHADOW_ETCHED_IN = CUInt(3);
alias GTK_SHADOW_ETCHED_OUT = CUInt(4);


alias GtkStateType = CUInt;
alias GTK_STATE_NORMAL = CUInt(0);
alias GTK_STATE_ACTIVE = CUInt(1);
alias GTK_STATE_PRELIGHT = CUInt(2);
alias GTK_STATE_SELECTED = CUInt(3);
alias GTK_STATE_INSENSITIVE = CUInt(4);


alias GtkSubmenuDirection = CUInt;
alias GTK_DIRECTION_LEFT = CUInt(0);
alias GTK_DIRECTION_RIGHT = CUInt(1);


alias GtkSubmenuPlacement = CUInt;
alias GTK_TOP_BOTTOM = CUInt(0);
alias GTK_LEFT_RIGHT = CUInt(1);


alias GtkToolbarStyle = CUInt;
alias GTK_TOOLBAR_ICONS = CUInt(0);
alias GTK_TOOLBAR_TEXT = CUInt(1);
alias GTK_TOOLBAR_BOTH = CUInt(2);
alias GTK_TOOLBAR_BOTH_HORIZ = CUInt(3);


alias GtkUpdateType = CUInt;
alias GTK_UPDATE_CONTINUOUS = CUInt(0);
alias GTK_UPDATE_DISCONTINUOUS = CUInt(1);
alias GTK_UPDATE_DELAYED = CUInt(2);


alias GtkVisibility = CUInt;
alias GTK_VISIBILITY_NONE = CUInt(0);
alias GTK_VISIBILITY_PARTIAL = CUInt(1);
alias GTK_VISIBILITY_FULL = CUInt(2);


alias GtkWindowPosition = CUInt;
alias GTK_WIN_POS_NONE = CUInt(0);
alias GTK_WIN_POS_CENTER = CUInt(1);
alias GTK_WIN_POS_MOUSE = CUInt(2);
alias GTK_WIN_POS_CENTER_ALWAYS = CUInt(3);
alias GTK_WIN_POS_CENTER_ON_PARENT = CUInt(4);


alias GtkWindowType = CUInt;
alias GTK_WINDOW_TOPLEVEL = CUInt(0);
alias GTK_WINDOW_POPUP = CUInt(1);


alias GtkWrapMode = CUInt;
alias GTK_WRAP_NONE = CUInt(0);
alias GTK_WRAP_CHAR = CUInt(1);
alias GTK_WRAP_WORD = CUInt(2);
alias GTK_WRAP_WORD_CHAR = CUInt(3);


alias GtkSortType = CUInt;
alias GTK_SORT_ASCENDING = CUInt(0);
alias GTK_SORT_DESCENDING = CUInt(1);


alias GtkIMPreeditStyle = CUInt;
alias GTK_IM_PREEDIT_NOTHING = CUInt(0);
alias GTK_IM_PREEDIT_CALLBACK = CUInt(1);
alias GTK_IM_PREEDIT_NONE = CUInt(2);


alias GtkIMStatusStyle = CUInt;
alias GTK_IM_STATUS_NOTHING = CUInt(0);
alias GTK_IM_STATUS_CALLBACK = CUInt(1);
alias GTK_IM_STATUS_NONE = CUInt(2);


alias GtkPackDirection = CUInt;
alias GTK_PACK_DIRECTION_LTR = CUInt(0);
alias GTK_PACK_DIRECTION_RTL = CUInt(1);
alias GTK_PACK_DIRECTION_TTB = CUInt(2);
alias GTK_PACK_DIRECTION_BTT = CUInt(3);


alias GtkPrintPages = CUInt;
alias GTK_PRINT_PAGES_ALL = CUInt(0);
alias GTK_PRINT_PAGES_CURRENT = CUInt(1);
alias GTK_PRINT_PAGES_RANGES = CUInt(2);
alias GTK_PRINT_PAGES_SELECTION = CUInt(3);


alias GtkPageSet = CUInt;
alias GTK_PAGE_SET_ALL = CUInt(0);
alias GTK_PAGE_SET_EVEN = CUInt(1);
alias GTK_PAGE_SET_ODD = CUInt(2);


alias GtkNumberUpLayout = CUInt;
alias GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = CUInt(0);
alias GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = CUInt(1);
alias GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = CUInt(2);
alias GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = CUInt(3);
alias GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = CUInt(4);
alias GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = CUInt(5);
alias GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = CUInt(6);
alias GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = CUInt(7);


alias GtkPageOrientation = CUInt;
alias GTK_PAGE_ORIENTATION_PORTRAIT = CUInt(0);
alias GTK_PAGE_ORIENTATION_LANDSCAPE = CUInt(1);
alias GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = CUInt(2);
alias GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = CUInt(3);


alias GtkPrintQuality = CUInt;
alias GTK_PRINT_QUALITY_LOW = CUInt(0);
alias GTK_PRINT_QUALITY_NORMAL = CUInt(1);
alias GTK_PRINT_QUALITY_HIGH = CUInt(2);
alias GTK_PRINT_QUALITY_DRAFT = CUInt(3);


alias GtkPrintDuplex = CUInt;
alias GTK_PRINT_DUPLEX_SIMPLEX = CUInt(0);
alias GTK_PRINT_DUPLEX_HORIZONTAL = CUInt(1);
alias GTK_PRINT_DUPLEX_VERTICAL = CUInt(2);


alias GtkUnit = CUInt;
alias GTK_UNIT_PIXEL = CUInt(0);
alias GTK_UNIT_POINTS = CUInt(1);
alias GTK_UNIT_INCH = CUInt(2);
alias GTK_UNIT_MM = CUInt(3);


alias GtkTreeViewGridLines = CUInt;
alias GTK_TREE_VIEW_GRID_LINES_NONE = CUInt(0);
alias GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = CUInt(1);
alias GTK_TREE_VIEW_GRID_LINES_VERTICAL = CUInt(2);
alias GTK_TREE_VIEW_GRID_LINES_BOTH = CUInt(3);


alias GtkDragResult = CUInt;
alias GTK_DRAG_RESULT_SUCCESS = CUInt(0);
alias GTK_DRAG_RESULT_NO_TARGET = CUInt(1);
alias GTK_DRAG_RESULT_USER_CANCELLED = CUInt(2);
alias GTK_DRAG_RESULT_TIMEOUT_EXPIRED = CUInt(3);
alias GTK_DRAG_RESULT_GRAB_BROKEN = CUInt(4);
alias GTK_DRAG_RESULT_ERROR = CUInt(5);


alias GtkAccelFlags = CUInt;
alias GTK_ACCEL_VISIBLE = CUInt(1);
alias GTK_ACCEL_LOCKED = CUInt(2);
alias GTK_ACCEL_MASK = CUInt(7);

alias GtkAccelGroup = Struct__GtkAccelGroup;

alias GtkAccelGroupClass = Struct__GtkAccelGroupClass;

alias GtkAccelKey = Struct__GtkAccelKey;

alias GtkAccelGroupEntry = Struct__GtkAccelGroupEntry;

alias GtkAccelGroupActivate = CCodePointer[[Pointer[GtkAccelGroup], Pointer[GObject], guint, GdkModifierType],[gboolean]];

alias GtkAccelGroupFindFunc = CCodePointer[[Pointer[GtkAccelKey], Pointer[GClosure], gpointer],[gboolean]];

record Struct__GtkAccelGroup (
    parent : GObject,
    lock_count : guint,
    modifier_mask : GdkModifierType,
    acceleratables : Pointer[GSList],
    n_accels : guint,
    priv_accels : Pointer[GtkAccelGroupEntry],
);

record Struct__GtkAccelGroupClass (
    parent_class : GObjectClass,
    accel_changed : CCodePointer[[Pointer[GtkAccelGroup], guint, GdkModifierType, Pointer[GClosure]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkAccelKey (
    accel_key : guint,
    accel_mods : GdkModifierType,
    accel_flags : guint,
);

external (cdecl) gtk_accel_group_get_type() : GType;

external (cdecl) gtk_accel_group_new() : Pointer[GtkAccelGroup];

external (cdecl) gtk_accel_group_get_is_locked(arg0:Pointer[GtkAccelGroup]) : gboolean;

external (cdecl) gtk_accel_group_get_modifier_mask(arg0:Pointer[GtkAccelGroup]) : GdkModifierType;

external (cdecl) gtk_accel_group_lock(arg0:Pointer[GtkAccelGroup]) : ;

external (cdecl) gtk_accel_group_unlock(arg0:Pointer[GtkAccelGroup]) : ;

external (cdecl) gtk_accel_group_connect(arg0:Pointer[GtkAccelGroup], arg1:guint, arg2:GdkModifierType, arg3:GtkAccelFlags, arg4:Pointer[GClosure]) : ;

external (cdecl) gtk_accel_group_connect_by_path(arg0:Pointer[GtkAccelGroup], arg1:Pointer[gchar], arg2:Pointer[GClosure]) : ;

external (cdecl) gtk_accel_group_disconnect(arg0:Pointer[GtkAccelGroup], arg1:Pointer[GClosure]) : gboolean;

external (cdecl) gtk_accel_group_disconnect_key(arg0:Pointer[GtkAccelGroup], arg1:guint, arg2:GdkModifierType) : gboolean;

external (cdecl) gtk_accel_group_activate(arg0:Pointer[GtkAccelGroup], arg1:GQuark, arg2:Pointer[GObject], arg3:guint, arg4:GdkModifierType) : gboolean;

external (cdecl) _gtk_accel_group_attach(arg0:Pointer[GtkAccelGroup], arg1:Pointer[GObject]) : ;

external (cdecl) _gtk_accel_group_detach(arg0:Pointer[GtkAccelGroup], arg1:Pointer[GObject]) : ;

external (cdecl) gtk_accel_groups_activate(arg0:Pointer[GObject], arg1:guint, arg2:GdkModifierType) : gboolean;

external (cdecl) gtk_accel_groups_from_object(arg0:Pointer[GObject]) : Pointer[GSList];

external (cdecl) gtk_accel_group_find(arg0:Pointer[GtkAccelGroup], arg1:GtkAccelGroupFindFunc, arg2:gpointer) : Pointer[GtkAccelKey];

external (cdecl) gtk_accel_group_from_accel_closure(arg0:Pointer[GClosure]) : Pointer[GtkAccelGroup];

external (cdecl) gtk_accelerator_valid(arg0:guint, arg1:GdkModifierType) : gboolean;

external (cdecl) gtk_accelerator_parse(arg0:Pointer[gchar], arg1:Pointer[guint], arg2:Pointer[GdkModifierType]) : ;

external (cdecl) gtk_accelerator_name(arg0:guint, arg1:GdkModifierType) : Pointer[gchar];

external (cdecl) gtk_accelerator_get_label(arg0:guint, arg1:GdkModifierType) : Pointer[gchar];

external (cdecl) gtk_accelerator_set_default_mod_mask(arg0:GdkModifierType) : ;

external (cdecl) gtk_accelerator_get_default_mod_mask() : guint;

external (cdecl) gtk_accel_group_query(arg0:Pointer[GtkAccelGroup], arg1:guint, arg2:GdkModifierType, arg3:Pointer[guint]) : Pointer[GtkAccelGroupEntry];

external (cdecl) _gtk_accel_group_reconnect(arg0:Pointer[GtkAccelGroup], arg1:GQuark) : ;

record Struct__GtkAccelGroupEntry (
    key : GtkAccelKey,
    closure : Pointer[GClosure],
    accel_path_quark : GQuark,
);

external (cdecl) gtk_accel_flags_get_type() : GType;

external (cdecl) gtk_assistant_page_type_get_type() : GType;

external (cdecl) gtk_builder_error_get_type() : GType;

external (cdecl) gtk_calendar_display_options_get_type() : GType;

external (cdecl) gtk_cell_renderer_state_get_type() : GType;

external (cdecl) gtk_cell_renderer_mode_get_type() : GType;

external (cdecl) gtk_cell_renderer_accel_mode_get_type() : GType;

external (cdecl) gtk_debug_flag_get_type() : GType;

external (cdecl) gtk_dialog_flags_get_type() : GType;

external (cdecl) gtk_response_type_get_type() : GType;

external (cdecl) gtk_dest_defaults_get_type() : GType;

external (cdecl) gtk_target_flags_get_type() : GType;

external (cdecl) gtk_entry_icon_position_get_type() : GType;

external (cdecl) gtk_anchor_type_get_type() : GType;

external (cdecl) gtk_arrow_placement_get_type() : GType;

external (cdecl) gtk_arrow_type_get_type() : GType;

external (cdecl) gtk_attach_options_get_type() : GType;

external (cdecl) gtk_button_box_style_get_type() : GType;

external (cdecl) gtk_curve_type_get_type() : GType;

external (cdecl) gtk_delete_type_get_type() : GType;

external (cdecl) gtk_direction_type_get_type() : GType;

external (cdecl) gtk_expander_style_get_type() : GType;

external (cdecl) gtk_icon_size_get_type() : GType;

external (cdecl) gtk_sensitivity_type_get_type() : GType;

external (cdecl) gtk_side_type_get_type() : GType;

external (cdecl) gtk_text_direction_get_type() : GType;

external (cdecl) gtk_justification_get_type() : GType;

external (cdecl) gtk_match_type_get_type() : GType;

external (cdecl) gtk_menu_direction_type_get_type() : GType;

external (cdecl) gtk_message_type_get_type() : GType;

external (cdecl) gtk_metric_type_get_type() : GType;

external (cdecl) gtk_movement_step_get_type() : GType;

external (cdecl) gtk_scroll_step_get_type() : GType;

external (cdecl) gtk_orientation_get_type() : GType;

external (cdecl) gtk_corner_type_get_type() : GType;

external (cdecl) gtk_pack_type_get_type() : GType;

external (cdecl) gtk_path_priority_type_get_type() : GType;

external (cdecl) gtk_path_type_get_type() : GType;

external (cdecl) gtk_policy_type_get_type() : GType;

external (cdecl) gtk_position_type_get_type() : GType;

external (cdecl) gtk_preview_type_get_type() : GType;

external (cdecl) gtk_relief_style_get_type() : GType;

external (cdecl) gtk_resize_mode_get_type() : GType;

external (cdecl) gtk_signal_run_type_get_type() : GType;

external (cdecl) gtk_scroll_type_get_type() : GType;

external (cdecl) gtk_selection_mode_get_type() : GType;

external (cdecl) gtk_shadow_type_get_type() : GType;

external (cdecl) gtk_state_type_get_type() : GType;

external (cdecl) gtk_submenu_direction_get_type() : GType;

external (cdecl) gtk_submenu_placement_get_type() : GType;

external (cdecl) gtk_toolbar_style_get_type() : GType;

external (cdecl) gtk_update_type_get_type() : GType;

external (cdecl) gtk_visibility_get_type() : GType;

external (cdecl) gtk_window_position_get_type() : GType;

external (cdecl) gtk_window_type_get_type() : GType;

external (cdecl) gtk_wrap_mode_get_type() : GType;

external (cdecl) gtk_sort_type_get_type() : GType;

external (cdecl) gtk_im_preedit_style_get_type() : GType;

external (cdecl) gtk_im_status_style_get_type() : GType;

external (cdecl) gtk_pack_direction_get_type() : GType;

external (cdecl) gtk_print_pages_get_type() : GType;

external (cdecl) gtk_page_set_get_type() : GType;

external (cdecl) gtk_number_up_layout_get_type() : GType;

external (cdecl) gtk_page_orientation_get_type() : GType;

external (cdecl) gtk_print_quality_get_type() : GType;

external (cdecl) gtk_print_duplex_get_type() : GType;

external (cdecl) gtk_unit_get_type() : GType;

external (cdecl) gtk_tree_view_grid_lines_get_type() : GType;

external (cdecl) gtk_drag_result_get_type() : GType;

external (cdecl) gtk_file_chooser_action_get_type() : GType;

external (cdecl) gtk_file_chooser_confirmation_get_type() : GType;

external (cdecl) gtk_file_chooser_error_get_type() : GType;

external (cdecl) gtk_file_filter_flags_get_type() : GType;

external (cdecl) gtk_icon_lookup_flags_get_type() : GType;

external (cdecl) gtk_icon_theme_error_get_type() : GType;

external (cdecl) gtk_icon_view_drop_position_get_type() : GType;

external (cdecl) gtk_image_type_get_type() : GType;

external (cdecl) gtk_buttons_type_get_type() : GType;

external (cdecl) gtk_notebook_tab_get_type() : GType;

external (cdecl) gtk_object_flags_get_type() : GType;

external (cdecl) gtk_arg_flags_get_type() : GType;

external (cdecl) gtk_print_status_get_type() : GType;

external (cdecl) gtk_print_operation_result_get_type() : GType;

external (cdecl) gtk_print_operation_action_get_type() : GType;

external (cdecl) gtk_print_error_get_type() : GType;

external (cdecl) gtk_private_flags_get_type() : GType;

external (cdecl) gtk_progress_bar_style_get_type() : GType;

external (cdecl) gtk_progress_bar_orientation_get_type() : GType;

external (cdecl) gtk_rc_flags_get_type() : GType;

external (cdecl) gtk_rc_token_type_get_type() : GType;

external (cdecl) gtk_recent_sort_type_get_type() : GType;

external (cdecl) gtk_recent_chooser_error_get_type() : GType;

external (cdecl) gtk_recent_filter_flags_get_type() : GType;

external (cdecl) gtk_recent_manager_error_get_type() : GType;

external (cdecl) gtk_size_group_mode_get_type() : GType;

external (cdecl) gtk_spin_button_update_policy_get_type() : GType;

external (cdecl) gtk_spin_type_get_type() : GType;

external (cdecl) gtk_text_buffer_target_info_get_type() : GType;

external (cdecl) gtk_text_search_flags_get_type() : GType;

external (cdecl) gtk_text_window_type_get_type() : GType;

external (cdecl) gtk_toolbar_child_type_get_type() : GType;

external (cdecl) gtk_toolbar_space_style_get_type() : GType;

external (cdecl) gtk_tool_palette_drag_targets_get_type() : GType;

external (cdecl) gtk_tree_model_flags_get_type() : GType;

external (cdecl) gtk_tree_view_drop_position_get_type() : GType;

external (cdecl) gtk_tree_view_column_sizing_get_type() : GType;

external (cdecl) gtk_ui_manager_item_type_get_type() : GType;

external (cdecl) gtk_widget_flags_get_type() : GType;

external (cdecl) gtk_widget_help_type_get_type() : GType;

external (cdecl) gtk_tree_view_mode_get_type() : GType;

external (cdecl) gtk_cell_type_get_type() : GType;

external (cdecl) gtk_clist_drag_pos_get_type() : GType;

external (cdecl) gtk_button_action_get_type() : GType;

external (cdecl) gtk_ctree_pos_get_type() : GType;

external (cdecl) gtk_ctree_line_style_get_type() : GType;

external (cdecl) gtk_ctree_expander_style_get_type() : GType;

external (cdecl) gtk_ctree_expansion_type_get_type() : GType;

external (cdecl) gtk_identifier_get_type() : GType;

alias GtkArg = Struct__GtkArg;

alias GtkObject = Struct__GtkObject;

alias GtkFunction = CCodePointer[[gpointer],[gboolean]];

alias GtkCallbackMarshal = CCodePointer[[Pointer[GtkObject], gpointer, guint, Pointer[GtkArg]],[]];

alias GtkTranslateFunc = CCodePointer[[Pointer[gchar], gpointer],[Pointer[gchar]]];

alias GtkFundamentalType = GType;

alias GtkType = GType;

alias GtkTypeObject = GTypeInstance;

alias GtkTypeClass = GTypeClass;

alias GtkClassInitFunc = GBaseInitFunc;

alias GtkObjectInitFunc = GInstanceInitFunc;

alias GtkSignalMarshaller = GSignalCMarshaller;

alias GtkDestroyNotify = CCodePointer[[gpointer],[]];

alias GtkSignalFunc = CCodePointer[[],[]];

record Struct__GtkArg (
    type : GType,
    name : Pointer[gchar],
    d : Union_Unnamed2,
);

alias GtkTypeInfo = Struct__GtkTypeInfo;

record Struct__GtkTypeInfo (
    type_name : Pointer[gchar],
    object_size : guint,
    class_size : guint,
    class_init_func : GtkClassInitFunc,
    object_init_func : GtkObjectInitFunc,
    reserved_1 : gpointer,
    reserved_2 : gpointer,
    base_class_init_func : GtkClassInitFunc,
);

external (cdecl) gtk_type_init(arg0:GTypeDebugFlags) : ;

external (cdecl) gtk_type_unique(arg0:GtkType, arg1:Pointer[GtkTypeInfo]) : GtkType;

external (cdecl) gtk_type_class(arg0:GtkType) : gpointer;

external (cdecl) gtk_type_new(arg0:GtkType) : gpointer;

alias GtkEnumValue = GEnumValue;

alias GtkFlagValue = GFlagsValue;

external (cdecl) gtk_type_enum_get_values(arg0:GtkType) : Pointer[GtkEnumValue];

external (cdecl) gtk_type_flags_get_values(arg0:GtkType) : Pointer[GtkFlagValue];

external (cdecl) gtk_type_enum_find_value(arg0:GtkType, arg1:Pointer[gchar]) : Pointer[GtkEnumValue];

external (cdecl) gtk_type_flags_find_value(arg0:GtkType, arg1:Pointer[gchar]) : Pointer[GtkFlagValue];


alias GtkDebugFlag = CUInt;
alias GTK_DEBUG_MISC = CUInt(1);
alias GTK_DEBUG_PLUGSOCKET = CUInt(2);
alias GTK_DEBUG_TEXT = CUInt(4);
alias GTK_DEBUG_TREE = CUInt(8);
alias GTK_DEBUG_UPDATES = CUInt(16);
alias GTK_DEBUG_KEYBINDINGS = CUInt(32);
alias GTK_DEBUG_MULTIHEAD = CUInt(64);
alias GTK_DEBUG_MODULES = CUInt(128);
alias GTK_DEBUG_GEOMETRY = CUInt(256);
alias GTK_DEBUG_ICONTHEME = CUInt(512);
alias GTK_DEBUG_PRINTING = CUInt(1024);
alias GTK_DEBUG_BUILDER = CUInt(2048);

external gtk_debug_flags : guint;


alias GtkObjectFlags = CUInt;
alias GTK_IN_DESTRUCTION = CUInt(1);
alias GTK_FLOATING = CUInt(2);
alias GTK_RESERVED_1 = CUInt(4);
alias GTK_RESERVED_2 = CUInt(8);

alias GtkObjectClass = Struct__GtkObjectClass;

record Struct__GtkObject (
    parent_instance : GInitiallyUnowned,
    flags : guint32,
);

record Struct__GtkObjectClass (
    parent_class : GInitiallyUnownedClass,
    set_arg : CCodePointer[[Pointer[GtkObject], Pointer[GtkArg], guint],[]],
    get_arg : CCodePointer[[Pointer[GtkObject], Pointer[GtkArg], guint],[]],
    destroy : CCodePointer[[Pointer[GtkObject]],[]],
);

external (cdecl) gtk_object_get_type() : GType;

external (cdecl) gtk_object_sink(arg0:Pointer[GtkObject]) : ;

external (cdecl) gtk_object_destroy(arg0:Pointer[GtkObject]) : ;

external (cdecl) gtk_object_new(arg0:GType, arg1:Pointer[gchar], ..) : Pointer[GtkObject];

external (cdecl) gtk_object_ref(arg0:Pointer[GtkObject]) : Pointer[GtkObject];

external (cdecl) gtk_object_unref(arg0:Pointer[GtkObject]) : ;

external (cdecl) gtk_object_weakref(arg0:Pointer[GtkObject], arg1:GDestroyNotify, arg2:gpointer) : ;

external (cdecl) gtk_object_weakunref(arg0:Pointer[GtkObject], arg1:GDestroyNotify, arg2:gpointer) : ;

external (cdecl) gtk_object_set_data(arg0:Pointer[GtkObject], arg1:Pointer[gchar], arg2:gpointer) : ;

external (cdecl) gtk_object_set_data_full(arg0:Pointer[GtkObject], arg1:Pointer[gchar], arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_object_remove_data(arg0:Pointer[GtkObject], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_object_get_data(arg0:Pointer[GtkObject], arg1:Pointer[gchar]) : gpointer;

external (cdecl) gtk_object_remove_no_notify(arg0:Pointer[GtkObject], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_object_set_user_data(arg0:Pointer[GtkObject], arg1:gpointer) : ;

external (cdecl) gtk_object_get_user_data(arg0:Pointer[GtkObject]) : gpointer;

external (cdecl) gtk_object_set_data_by_id(arg0:Pointer[GtkObject], arg1:GQuark, arg2:gpointer) : ;

external (cdecl) gtk_object_set_data_by_id_full(arg0:Pointer[GtkObject], arg1:GQuark, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_object_get_data_by_id(arg0:Pointer[GtkObject], arg1:GQuark) : gpointer;

external (cdecl) gtk_object_remove_data_by_id(arg0:Pointer[GtkObject], arg1:GQuark) : ;

external (cdecl) gtk_object_remove_no_notify_by_id(arg0:Pointer[GtkObject], arg1:GQuark) : ;


alias GtkArgFlags = CUInt;
alias GTK_ARG_READABLE = CUInt(1);
alias GTK_ARG_WRITABLE = CUInt(2);
alias GTK_ARG_CONSTRUCT = CUInt(4);
alias GTK_ARG_CONSTRUCT_ONLY = CUInt(8);
alias GTK_ARG_CHILD_ARG = CUInt(16);

external (cdecl) gtk_object_get(arg0:Pointer[GtkObject], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_object_set(arg0:Pointer[GtkObject], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_object_add_arg_type(arg0:Pointer[gchar], arg1:GType, arg2:guint, arg3:guint) : ;

alias GtkAdjustment = Struct__GtkAdjustment;

alias GtkAdjustmentClass = Struct__GtkAdjustmentClass;

record Struct__GtkAdjustment (
    parent_instance : GtkObject,
    lower : gdouble,
    upper : gdouble,
    value : gdouble,
    step_increment : gdouble,
    page_increment : gdouble,
    page_size : gdouble,
);

record Struct__GtkAdjustmentClass (
    parent_class : GtkObjectClass,
    changed : CCodePointer[[Pointer[GtkAdjustment]],[]],
    value_changed : CCodePointer[[Pointer[GtkAdjustment]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_adjustment_get_type() : GType;

external (cdecl) gtk_adjustment_new(arg0:gdouble, arg1:gdouble, arg2:gdouble, arg3:gdouble, arg4:gdouble, arg5:gdouble) : Pointer[GtkObject];

external (cdecl) gtk_adjustment_changed(arg0:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_adjustment_value_changed(arg0:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_adjustment_clamp_page(arg0:Pointer[GtkAdjustment], arg1:gdouble, arg2:gdouble) : ;

external (cdecl) gtk_adjustment_get_value(arg0:Pointer[GtkAdjustment]) : gdouble;

external (cdecl) gtk_adjustment_set_value(arg0:Pointer[GtkAdjustment], arg1:gdouble) : ;

external (cdecl) gtk_adjustment_get_lower(arg0:Pointer[GtkAdjustment]) : gdouble;

external (cdecl) gtk_adjustment_set_lower(arg0:Pointer[GtkAdjustment], arg1:gdouble) : ;

external (cdecl) gtk_adjustment_get_upper(arg0:Pointer[GtkAdjustment]) : gdouble;

external (cdecl) gtk_adjustment_set_upper(arg0:Pointer[GtkAdjustment], arg1:gdouble) : ;

external (cdecl) gtk_adjustment_get_step_increment(arg0:Pointer[GtkAdjustment]) : gdouble;

external (cdecl) gtk_adjustment_set_step_increment(arg0:Pointer[GtkAdjustment], arg1:gdouble) : ;

external (cdecl) gtk_adjustment_get_page_increment(arg0:Pointer[GtkAdjustment]) : gdouble;

external (cdecl) gtk_adjustment_set_page_increment(arg0:Pointer[GtkAdjustment], arg1:gdouble) : ;

external (cdecl) gtk_adjustment_get_page_size(arg0:Pointer[GtkAdjustment]) : gdouble;

external (cdecl) gtk_adjustment_set_page_size(arg0:Pointer[GtkAdjustment], arg1:gdouble) : ;

external (cdecl) gtk_adjustment_configure(arg0:Pointer[GtkAdjustment], arg1:gdouble, arg2:gdouble, arg3:gdouble, arg4:gdouble, arg5:gdouble, arg6:gdouble) : ;

alias GtkBorder = Struct__GtkBorder;

alias GtkStyle = Struct__GtkStyle;

alias GtkStyleClass = Struct__GtkStyleClass;

alias Struct__GtkThemeEngine = Opaque;

alias GtkThemeEngine = Struct__GtkThemeEngine;

alias GtkRcStyle = Struct__GtkRcStyle;

alias Struct__GtkIconSet = Opaque;

alias GtkIconSet = Struct__GtkIconSet;

alias Struct__GtkIconSource = Opaque;

alias GtkIconSource = Struct__GtkIconSource;

alias GtkRcProperty = Struct__GtkRcProperty;

alias GtkSettings = Struct__GtkSettings;

alias GtkRcPropertyParser = CCodePointer[[Pointer[GParamSpec], Pointer[GString], Pointer[GValue]],[gboolean]];

alias GtkWidget = Struct__GtkWidget;

record Struct__GtkStyle (
    parent_instance : GObject,
    fg : Array[GdkColor, 5],
    bg : Array[GdkColor, 5],
    light : Array[GdkColor, 5],
    dark : Array[GdkColor, 5],
    mid : Array[GdkColor, 5],
    text : Array[GdkColor, 5],
    base : Array[GdkColor, 5],
    text_aa : Array[GdkColor, 5],
    black : GdkColor,
    white : GdkColor,
    font_desc : Pointer[PangoFontDescription],
    xthickness : gint,
    ythickness : gint,
    fg_gc : Array[Pointer[GdkGC], 5],
    bg_gc : Array[Pointer[GdkGC], 5],
    light_gc : Array[Pointer[GdkGC], 5],
    dark_gc : Array[Pointer[GdkGC], 5],
    mid_gc : Array[Pointer[GdkGC], 5],
    text_gc : Array[Pointer[GdkGC], 5],
    base_gc : Array[Pointer[GdkGC], 5],
    text_aa_gc : Array[Pointer[GdkGC], 5],
    black_gc : Pointer[GdkGC],
    white_gc : Pointer[GdkGC],
    bg_pixmap : Array[Pointer[GdkPixmap], 5],
    attach_count : gint,
    depth : gint,
    colormap : Pointer[GdkColormap],
    private_font : Pointer[GdkFont],
    private_font_desc : Pointer[PangoFontDescription],
    rc_style : Pointer[GtkRcStyle],
    styles : Pointer[GSList],
    property_cache : Pointer[GArray],
    icon_factories : Pointer[GSList],
);

record Struct__GtkStyleClass (
    parent_class : GObjectClass,
    realize : CCodePointer[[Pointer[GtkStyle]],[]],
    unrealize : CCodePointer[[Pointer[GtkStyle]],[]],
    copy : CCodePointer[[Pointer[GtkStyle], Pointer[GtkStyle]],[]],
    clone : CCodePointer[[Pointer[GtkStyle]],[Pointer[GtkStyle]]],
    init_from_rc : CCodePointer[[Pointer[GtkStyle], Pointer[GtkRcStyle]],[]],
    set_background : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType],[]],
    render_icon : CCodePointer[[Pointer[GtkStyle], Pointer[GtkIconSource], GtkTextDirection, GtkStateType, GtkIconSize, Pointer[GtkWidget], Pointer[gchar]],[Pointer[GdkPixbuf]]],
    draw_hline : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint],[]],
    draw_vline : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint],[]],
    draw_shadow : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_polygon : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], Pointer[GdkPoint], gint, gboolean],[]],
    draw_arrow : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], GtkArrowType, gboolean, gint, gint, gint, gint],[]],
    draw_diamond : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_string : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, Pointer[gchar]],[]],
    draw_box : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_flat_box : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_check : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_option : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_tab : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_shadow_gap : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint, GtkPositionType, gint, gint],[]],
    draw_box_gap : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint, GtkPositionType, gint, gint],[]],
    draw_extension : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint, GtkPositionType],[]],
    draw_focus : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint],[]],
    draw_slider : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint, GtkOrientation],[]],
    draw_handle : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, GtkShadowType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, gint, gint, GtkOrientation],[]],
    draw_expander : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, GtkExpanderStyle],[]],
    draw_layout : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, gboolean, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], gint, gint, Pointer[PangoLayout]],[]],
    draw_resize_grip : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], GdkWindowEdge, gint, gint, gint, gint],[]],
    draw_spinner : CCodePointer[[Pointer[GtkStyle], Pointer[GdkWindow], GtkStateType, Pointer[GdkRectangle], Pointer[GtkWidget], Pointer[gchar], guint, gint, gint, gint, gint],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
    _gtk_reserved7 : CCodePointer[[],[]],
    _gtk_reserved8 : CCodePointer[[],[]],
    _gtk_reserved9 : CCodePointer[[],[]],
    _gtk_reserved10 : CCodePointer[[],[]],
    _gtk_reserved11 : CCodePointer[[],[]],
);

record Struct__GtkBorder (
    left : gint,
    right : gint,
    top : gint,
    bottom : gint,
);

external (cdecl) gtk_style_get_type() : GType;

external (cdecl) gtk_style_new() : Pointer[GtkStyle];

external (cdecl) gtk_style_copy(arg0:Pointer[GtkStyle]) : Pointer[GtkStyle];

external (cdecl) gtk_style_attach(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow]) : Pointer[GtkStyle];

external (cdecl) gtk_style_detach(arg0:Pointer[GtkStyle]) : ;

external (cdecl) gtk_style_ref(arg0:Pointer[GtkStyle]) : Pointer[GtkStyle];

external (cdecl) gtk_style_unref(arg0:Pointer[GtkStyle]) : ;

external (cdecl) gtk_style_get_font(arg0:Pointer[GtkStyle]) : Pointer[GdkFont];

external (cdecl) gtk_style_set_font(arg0:Pointer[GtkStyle], arg1:Pointer[GdkFont]) : ;

external (cdecl) gtk_style_set_background(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType) : ;

external (cdecl) gtk_style_apply_default_background(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:gboolean, arg3:GtkStateType, arg4:Pointer[GdkRectangle], arg5:gint, arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gtk_style_lookup_icon_set(arg0:Pointer[GtkStyle], arg1:Pointer[gchar]) : Pointer[GtkIconSet];

external (cdecl) gtk_style_lookup_color(arg0:Pointer[GtkStyle], arg1:Pointer[gchar], arg2:Pointer[GdkColor]) : gboolean;

external (cdecl) gtk_style_render_icon(arg0:Pointer[GtkStyle], arg1:Pointer[GtkIconSource], arg2:GtkTextDirection, arg3:GtkStateType, arg4:GtkIconSize, arg5:Pointer[GtkWidget], arg6:Pointer[gchar]) : Pointer[GdkPixbuf];

external (cdecl) gtk_draw_hline(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:gint, arg4:gint, arg5:gint) : ;

external (cdecl) gtk_draw_vline(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:gint, arg4:gint, arg5:gint) : ;

external (cdecl) gtk_draw_shadow(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_polygon(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkPoint], arg5:gint, arg6:gboolean) : ;

external (cdecl) gtk_draw_arrow(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:GtkArrowType, arg5:gboolean, arg6:gint, arg7:gint, arg8:gint, arg9:gint) : ;

external (cdecl) gtk_draw_diamond(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_box(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_flat_box(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_check(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_option(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_tab(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_draw_shadow_gap(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:GtkPositionType, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_draw_box_gap(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:GtkPositionType, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_draw_extension(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:GtkPositionType) : ;

external (cdecl) gtk_draw_focus(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:gint, arg3:gint, arg4:gint, arg5:gint) : ;

external (cdecl) gtk_draw_slider(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:GtkOrientation) : ;

external (cdecl) gtk_draw_handle(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:GtkOrientation) : ;

external (cdecl) gtk_draw_expander(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:gint, arg4:gint, arg5:GtkExpanderStyle) : ;

external (cdecl) gtk_draw_layout(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:gboolean, arg4:gint, arg5:gint, arg6:Pointer[PangoLayout]) : ;

external (cdecl) gtk_draw_resize_grip(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GdkWindowEdge, arg4:gint, arg5:gint, arg6:gint, arg7:gint) : ;

external (cdecl) gtk_paint_hline(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gtk_paint_vline(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gtk_paint_shadow(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_polygon(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:Pointer[GdkPoint], arg8:gint, arg9:gboolean) : ;

external (cdecl) gtk_paint_arrow(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:GtkArrowType, arg8:gboolean, arg9:gint, arg10:gint, arg11:gint, arg12:gint) : ;

external (cdecl) gtk_paint_diamond(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_box(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_flat_box(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_check(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_option(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_tab(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_shadow_gap(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint, arg11:GtkPositionType, arg12:gint, arg13:gint) : ;

external (cdecl) gtk_paint_box_gap(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint, arg11:GtkPositionType, arg12:gint, arg13:gint) : ;

external (cdecl) gtk_paint_extension(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint, arg11:GtkPositionType) : ;

external (cdecl) gtk_paint_focus(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:gint, arg7:gint, arg8:gint, arg9:gint) : ;

external (cdecl) gtk_paint_slider(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint, arg11:GtkOrientation) : ;

external (cdecl) gtk_paint_handle(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:gint, arg10:gint, arg11:GtkOrientation) : ;

external (cdecl) gtk_paint_expander(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:gint, arg7:gint, arg8:GtkExpanderStyle) : ;

external (cdecl) gtk_paint_layout(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:gboolean, arg4:Pointer[GdkRectangle], arg5:Pointer[GtkWidget], arg6:Pointer[gchar], arg7:gint, arg8:gint, arg9:Pointer[PangoLayout]) : ;

external (cdecl) gtk_paint_resize_grip(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:GdkWindowEdge, arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_paint_spinner(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:guint, arg7:gint, arg8:gint, arg9:gint, arg10:gint) : ;

external (cdecl) gtk_border_get_type() : GType;

external (cdecl) gtk_border_new() : Pointer[GtkBorder];

external (cdecl) gtk_border_copy(arg0:Pointer[GtkBorder]) : Pointer[GtkBorder];

external (cdecl) gtk_border_free(arg0:Pointer[GtkBorder]) : ;

external (cdecl) gtk_style_get_style_property(arg0:Pointer[GtkStyle], arg1:GType, arg2:Pointer[gchar], arg3:Pointer[GValue]) : ;

external (cdecl) gtk_style_get_valist(arg0:Pointer[GtkStyle], arg1:GType, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_style_get(arg0:Pointer[GtkStyle], arg1:GType, arg2:Pointer[gchar], ..) : ;

external (cdecl) _gtk_style_peek_property_value(arg0:Pointer[GtkStyle], arg1:GType, arg2:Pointer[GParamSpec], arg3:GtkRcPropertyParser) : Pointer[GValue];

external (cdecl) _gtk_style_init_for_settings(arg0:Pointer[GtkStyle], arg1:Pointer[GtkSettings]) : ;

external (cdecl) _gtk_style_shade(arg0:Pointer[GdkColor], arg1:Pointer[GdkColor], arg2:gdouble) : ;

external (cdecl) gtk_draw_string(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:gint, arg4:gint, arg5:Pointer[gchar]) : ;

external (cdecl) gtk_paint_string(arg0:Pointer[GtkStyle], arg1:Pointer[GdkWindow], arg2:GtkStateType, arg3:Pointer[GdkRectangle], arg4:Pointer[GtkWidget], arg5:Pointer[gchar], arg6:gint, arg7:gint, arg8:Pointer[gchar]) : ;

external (cdecl) gtk_draw_insertion_cursor(arg0:Pointer[GtkWidget], arg1:Pointer[GdkDrawable], arg2:Pointer[GdkRectangle], arg3:Pointer[GdkRectangle], arg4:gboolean, arg5:GtkTextDirection, arg6:gboolean) : ;

external (cdecl) _gtk_widget_get_cursor_gc(arg0:Pointer[GtkWidget]) : Pointer[GdkGC];

external (cdecl) _gtk_widget_get_cursor_color(arg0:Pointer[GtkWidget], arg1:Pointer[GdkColor]) : ;

alias GtkIconFactory = Struct__GtkIconFactory;

alias Struct__GtkRcContext = Opaque;

alias GtkRcContext = Struct__GtkRcContext;

alias GtkRcStyleClass = Struct__GtkRcStyleClass;


alias GtkRcFlags = CUInt;
alias GTK_RC_FG = CUInt(1);
alias GTK_RC_BG = CUInt(2);
alias GTK_RC_TEXT = CUInt(4);
alias GTK_RC_BASE = CUInt(8);

record Struct__GtkRcStyle (
    parent_instance : GObject,
    name : Pointer[gchar],
    bg_pixmap_name : Array[Pointer[gchar], 5],
    font_desc : Pointer[PangoFontDescription],
    color_flags : Array[GtkRcFlags, 5],
    fg : Array[GdkColor, 5],
    bg : Array[GdkColor, 5],
    text : Array[GdkColor, 5],
    base : Array[GdkColor, 5],
    xthickness : gint,
    ythickness : gint,
    rc_properties : Pointer[GArray],
    rc_style_lists : Pointer[GSList],
    icon_factories : Pointer[GSList],
    engine_specified : guint,
);

record Struct__GtkRcStyleClass (
    parent_class : GObjectClass,
    create_rc_style : CCodePointer[[Pointer[GtkRcStyle]],[Pointer[GtkRcStyle]]],
    parse : CCodePointer[[Pointer[GtkRcStyle], Pointer[GtkSettings], Pointer[GScanner]],[guint]],
    merge : CCodePointer[[Pointer[GtkRcStyle], Pointer[GtkRcStyle]],[]],
    create_style : CCodePointer[[Pointer[GtkRcStyle]],[Pointer[GtkStyle]]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) _gtk_rc_init() : ;

external (cdecl) _gtk_rc_parse_widget_class_path(arg0:Pointer[gchar]) : Pointer[GSList];

external (cdecl) _gtk_rc_free_widget_class_path(arg0:Pointer[GSList]) : ;

external (cdecl) _gtk_rc_match_widget_class(arg0:Pointer[GSList], arg1:gint, arg2:Pointer[gchar], arg3:Pointer[gchar]) : gboolean;

external (cdecl) gtk_rc_add_default_file(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_rc_set_default_files(arg0:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_rc_get_default_files() : Pointer[Pointer[gchar]];

external (cdecl) gtk_rc_get_style(arg0:Pointer[GtkWidget]) : Pointer[GtkStyle];

external (cdecl) gtk_rc_get_style_by_paths(arg0:Pointer[GtkSettings], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:GType) : Pointer[GtkStyle];

external (cdecl) gtk_rc_reparse_all_for_settings(arg0:Pointer[GtkSettings], arg1:gboolean) : gboolean;

external (cdecl) gtk_rc_reset_styles(arg0:Pointer[GtkSettings]) : ;

external (cdecl) gtk_rc_find_pixmap_in_path(arg0:Pointer[GtkSettings], arg1:Pointer[GScanner], arg2:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gtk_rc_parse(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_rc_parse_string(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_rc_reparse_all() : gboolean;

external (cdecl) gtk_rc_add_widget_name_style(arg0:Pointer[GtkRcStyle], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_rc_add_widget_class_style(arg0:Pointer[GtkRcStyle], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_rc_add_class_style(arg0:Pointer[GtkRcStyle], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_rc_style_get_type() : GType;

external (cdecl) gtk_rc_style_new() : Pointer[GtkRcStyle];

external (cdecl) gtk_rc_style_copy(arg0:Pointer[GtkRcStyle]) : Pointer[GtkRcStyle];

external (cdecl) gtk_rc_style_ref(arg0:Pointer[GtkRcStyle]) : ;

external (cdecl) gtk_rc_style_unref(arg0:Pointer[GtkRcStyle]) : ;

external (cdecl) gtk_rc_find_module_in_path(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gtk_rc_get_theme_dir() : Pointer[gchar];

external (cdecl) gtk_rc_get_module_dir() : Pointer[gchar];

external (cdecl) gtk_rc_get_im_module_path() : Pointer[gchar];

external (cdecl) gtk_rc_get_im_module_file() : Pointer[gchar];


alias GtkRcTokenType = CUInt;
alias GTK_RC_TOKEN_INVALID = CUInt(270);
alias GTK_RC_TOKEN_INCLUDE = CUInt(271);
alias GTK_RC_TOKEN_NORMAL = CUInt(272);
alias GTK_RC_TOKEN_ACTIVE = CUInt(273);
alias GTK_RC_TOKEN_PRELIGHT = CUInt(274);
alias GTK_RC_TOKEN_SELECTED = CUInt(275);
alias GTK_RC_TOKEN_INSENSITIVE = CUInt(276);
alias GTK_RC_TOKEN_FG = CUInt(277);
alias GTK_RC_TOKEN_BG = CUInt(278);
alias GTK_RC_TOKEN_TEXT = CUInt(279);
alias GTK_RC_TOKEN_BASE = CUInt(280);
alias GTK_RC_TOKEN_XTHICKNESS = CUInt(281);
alias GTK_RC_TOKEN_YTHICKNESS = CUInt(282);
alias GTK_RC_TOKEN_FONT = CUInt(283);
alias GTK_RC_TOKEN_FONTSET = CUInt(284);
alias GTK_RC_TOKEN_FONT_NAME = CUInt(285);
alias GTK_RC_TOKEN_BG_PIXMAP = CUInt(286);
alias GTK_RC_TOKEN_PIXMAP_PATH = CUInt(287);
alias GTK_RC_TOKEN_STYLE = CUInt(288);
alias GTK_RC_TOKEN_BINDING = CUInt(289);
alias GTK_RC_TOKEN_BIND = CUInt(290);
alias GTK_RC_TOKEN_WIDGET = CUInt(291);
alias GTK_RC_TOKEN_WIDGET_CLASS = CUInt(292);
alias GTK_RC_TOKEN_CLASS = CUInt(293);
alias GTK_RC_TOKEN_LOWEST = CUInt(294);
alias GTK_RC_TOKEN_GTK = CUInt(295);
alias GTK_RC_TOKEN_APPLICATION = CUInt(296);
alias GTK_RC_TOKEN_THEME = CUInt(297);
alias GTK_RC_TOKEN_RC = CUInt(298);
alias GTK_RC_TOKEN_HIGHEST = CUInt(299);
alias GTK_RC_TOKEN_ENGINE = CUInt(300);
alias GTK_RC_TOKEN_MODULE_PATH = CUInt(301);
alias GTK_RC_TOKEN_IM_MODULE_PATH = CUInt(302);
alias GTK_RC_TOKEN_IM_MODULE_FILE = CUInt(303);
alias GTK_RC_TOKEN_STOCK = CUInt(304);
alias GTK_RC_TOKEN_LTR = CUInt(305);
alias GTK_RC_TOKEN_RTL = CUInt(306);
alias GTK_RC_TOKEN_COLOR = CUInt(307);
alias GTK_RC_TOKEN_UNBIND = CUInt(308);
alias GTK_RC_TOKEN_LAST = CUInt(309);

external (cdecl) gtk_rc_scanner_new() : Pointer[GScanner];

external (cdecl) gtk_rc_parse_color(arg0:Pointer[GScanner], arg1:Pointer[GdkColor]) : guint;

external (cdecl) gtk_rc_parse_color_full(arg0:Pointer[GScanner], arg1:Pointer[GtkRcStyle], arg2:Pointer[GdkColor]) : guint;

external (cdecl) gtk_rc_parse_state(arg0:Pointer[GScanner], arg1:Pointer[GtkStateType]) : guint;

external (cdecl) gtk_rc_parse_priority(arg0:Pointer[GScanner], arg1:Pointer[GtkPathPriorityType]) : guint;

record Struct__GtkRcProperty (
    type_name : GQuark,
    property_name : GQuark,
    origin : Pointer[gchar],
    value : GValue,
);

external (cdecl) _gtk_rc_style_lookup_rc_property(arg0:Pointer[GtkRcStyle], arg1:GQuark, arg2:GQuark) : Pointer[GtkRcProperty];

external (cdecl) _gtk_rc_style_set_rc_property(arg0:Pointer[GtkRcStyle], arg1:Pointer[GtkRcProperty]) : ;

external (cdecl) _gtk_rc_style_unset_rc_property(arg0:Pointer[GtkRcStyle], arg1:GQuark, arg2:GQuark) : ;

external (cdecl) _gtk_rc_style_get_color_hashes(arg0:Pointer[GtkRcStyle]) : Pointer[GSList];

external (cdecl) _gtk_rc_context_get_default_font_name(arg0:Pointer[GtkSettings]) : Pointer[gchar];

external (cdecl) _gtk_rc_context_destroy(arg0:Pointer[GtkSettings]) : ;

alias GtkSettingsClass = Struct__GtkSettingsClass;

alias GtkSettingsValue = Struct__GtkSettingsValue;

alias Struct__GtkSettingsPropertyValue = Opaque;

alias GtkSettingsPropertyValue = Struct__GtkSettingsPropertyValue;

record Struct__GtkSettings (
    parent_instance : GObject,
    queued_settings : Pointer[GData],
    property_values : Pointer[GtkSettingsPropertyValue],
    rc_context : Pointer[GtkRcContext],
    screen : Pointer[GdkScreen],
);

record Struct__GtkSettingsClass (
    parent_class : GObjectClass,
);

record Struct__GtkSettingsValue (
    origin : Pointer[gchar],
    value : GValue,
);

external (cdecl) gtk_settings_get_type() : GType;

external (cdecl) gtk_settings_get_default() : Pointer[GtkSettings];

external (cdecl) gtk_settings_get_for_screen(arg0:Pointer[GdkScreen]) : Pointer[GtkSettings];

external (cdecl) gtk_settings_install_property(arg0:Pointer[GParamSpec]) : ;

external (cdecl) gtk_settings_install_property_parser(arg0:Pointer[GParamSpec], arg1:GtkRcPropertyParser) : ;

external (cdecl) gtk_rc_property_parse_color(arg0:Pointer[GParamSpec], arg1:Pointer[GString], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gtk_rc_property_parse_enum(arg0:Pointer[GParamSpec], arg1:Pointer[GString], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gtk_rc_property_parse_flags(arg0:Pointer[GParamSpec], arg1:Pointer[GString], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gtk_rc_property_parse_requisition(arg0:Pointer[GParamSpec], arg1:Pointer[GString], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gtk_rc_property_parse_border(arg0:Pointer[GParamSpec], arg1:Pointer[GString], arg2:Pointer[GValue]) : gboolean;

external (cdecl) gtk_settings_set_property_value(arg0:Pointer[GtkSettings], arg1:Pointer[gchar], arg2:Pointer[GtkSettingsValue]) : ;

external (cdecl) gtk_settings_set_string_property(arg0:Pointer[GtkSettings], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) gtk_settings_set_long_property(arg0:Pointer[GtkSettings], arg1:Pointer[gchar], arg2:glong, arg3:Pointer[gchar]) : ;

external (cdecl) gtk_settings_set_double_property(arg0:Pointer[GtkSettings], arg1:Pointer[gchar], arg2:gdouble, arg3:Pointer[gchar]) : ;

external (cdecl) _gtk_settings_set_property_value_from_rc(arg0:Pointer[GtkSettings], arg1:Pointer[gchar], arg2:Pointer[GtkSettingsValue]) : ;

external (cdecl) _gtk_settings_reset_rc_values(arg0:Pointer[GtkSettings]) : ;

external (cdecl) _gtk_settings_handle_event(arg0:Pointer[GdkEventSetting]) : ;

external (cdecl) _gtk_rc_property_parser_from_type(arg0:GType) : GtkRcPropertyParser;

external (cdecl) _gtk_settings_parse_convert(arg0:GtkRcPropertyParser, arg1:Pointer[GValue], arg2:Pointer[GParamSpec], arg3:Pointer[GValue]) : gboolean;


alias GtkWidgetFlags = CUInt;
alias GTK_TOPLEVEL = CUInt(16);
alias GTK_NO_WINDOW = CUInt(32);
alias GTK_REALIZED = CUInt(64);
alias GTK_MAPPED = CUInt(128);
alias GTK_VISIBLE = CUInt(256);
alias GTK_SENSITIVE = CUInt(512);
alias GTK_PARENT_SENSITIVE = CUInt(1024);
alias GTK_CAN_FOCUS = CUInt(2048);
alias GTK_HAS_FOCUS = CUInt(4096);
alias GTK_CAN_DEFAULT = CUInt(8192);
alias GTK_HAS_DEFAULT = CUInt(16384);
alias GTK_HAS_GRAB = CUInt(32768);
alias GTK_RC_STYLE = CUInt(65536);
alias GTK_COMPOSITE_CHILD = CUInt(131072);
alias GTK_NO_REPARENT = CUInt(262144);
alias GTK_APP_PAINTABLE = CUInt(524288);
alias GTK_RECEIVES_DEFAULT = CUInt(1048576);
alias GTK_DOUBLE_BUFFERED = CUInt(2097152);
alias GTK_NO_SHOW_ALL = CUInt(4194304);


alias GtkWidgetHelpType = CUInt;
alias GTK_WIDGET_HELP_TOOLTIP = CUInt(0);
alias GTK_WIDGET_HELP_WHATS_THIS = CUInt(1);

alias GtkRequisition = Struct__GtkRequisition;

alias GtkSelectionData = Struct__GtkSelectionData;

alias GtkWidgetClass = Struct__GtkWidgetClass;

alias GtkWidgetAuxInfo = Struct__GtkWidgetAuxInfo;

alias GtkWidgetShapeInfo = Struct__GtkWidgetShapeInfo;

alias Struct__GtkClipboard = Opaque;

alias GtkClipboard = Struct__GtkClipboard;

alias Struct__GtkTooltip = Opaque;

alias GtkTooltip = Struct__GtkTooltip;

alias GtkWindow = Struct__GtkWindow;

alias GtkAllocation = GdkRectangle;

alias GtkCallback = CCodePointer[[Pointer[GtkWidget], gpointer],[]];

record Struct__GtkRequisition (
    width : gint,
    height : gint,
);

record Struct__GtkWidget (
    object : GtkObject,
    private_flags : guint16,
    state : guint8,
    saved_state : guint8,
    name : Pointer[gchar],
    style : Pointer[GtkStyle],
    requisition : GtkRequisition,
    allocation : GtkAllocation,
    window : Pointer[GdkWindow],
    parent : Pointer[GtkWidget],
);

record Struct__GtkWidgetClass (
    parent_class : GtkObjectClass,
    activate_signal : guint,
    set_scroll_adjustments_signal : guint,
    dispatch_child_properties_changed : CCodePointer[[Pointer[GtkWidget], guint, Pointer[Pointer[GParamSpec]]],[]],
    show : CCodePointer[[Pointer[GtkWidget]],[]],
    show_all : CCodePointer[[Pointer[GtkWidget]],[]],
    hide : CCodePointer[[Pointer[GtkWidget]],[]],
    hide_all : CCodePointer[[Pointer[GtkWidget]],[]],
    map : CCodePointer[[Pointer[GtkWidget]],[]],
    unmap : CCodePointer[[Pointer[GtkWidget]],[]],
    realize : CCodePointer[[Pointer[GtkWidget]],[]],
    unrealize : CCodePointer[[Pointer[GtkWidget]],[]],
    size_request : CCodePointer[[Pointer[GtkWidget], Pointer[GtkRequisition]],[]],
    size_allocate : CCodePointer[[Pointer[GtkWidget], Pointer[GtkAllocation]],[]],
    state_changed : CCodePointer[[Pointer[GtkWidget], GtkStateType],[]],
    parent_set : CCodePointer[[Pointer[GtkWidget], Pointer[GtkWidget]],[]],
    hierarchy_changed : CCodePointer[[Pointer[GtkWidget], Pointer[GtkWidget]],[]],
    style_set : CCodePointer[[Pointer[GtkWidget], Pointer[GtkStyle]],[]],
    direction_changed : CCodePointer[[Pointer[GtkWidget], GtkTextDirection],[]],
    grab_notify : CCodePointer[[Pointer[GtkWidget], gboolean],[]],
    child_notify : CCodePointer[[Pointer[GtkWidget], Pointer[GParamSpec]],[]],
    mnemonic_activate : CCodePointer[[Pointer[GtkWidget], gboolean],[gboolean]],
    grab_focus : CCodePointer[[Pointer[GtkWidget]],[]],
    focus : CCodePointer[[Pointer[GtkWidget], GtkDirectionType],[gboolean]],
    event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEvent]],[gboolean]],
    button_press_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventButton]],[gboolean]],
    button_release_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventButton]],[gboolean]],
    scroll_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventScroll]],[gboolean]],
    motion_notify_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventMotion]],[gboolean]],
    delete_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventAny]],[gboolean]],
    destroy_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventAny]],[gboolean]],
    expose_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventExpose]],[gboolean]],
    key_press_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventKey]],[gboolean]],
    key_release_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventKey]],[gboolean]],
    enter_notify_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventCrossing]],[gboolean]],
    leave_notify_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventCrossing]],[gboolean]],
    configure_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventConfigure]],[gboolean]],
    focus_in_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventFocus]],[gboolean]],
    focus_out_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventFocus]],[gboolean]],
    map_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventAny]],[gboolean]],
    unmap_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventAny]],[gboolean]],
    property_notify_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventProperty]],[gboolean]],
    selection_clear_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventSelection]],[gboolean]],
    selection_request_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventSelection]],[gboolean]],
    selection_notify_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventSelection]],[gboolean]],
    proximity_in_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventProximity]],[gboolean]],
    proximity_out_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventProximity]],[gboolean]],
    visibility_notify_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventVisibility]],[gboolean]],
    client_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventClient]],[gboolean]],
    no_expose_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventAny]],[gboolean]],
    window_state_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventWindowState]],[gboolean]],
    selection_get : CCodePointer[[Pointer[GtkWidget], Pointer[GtkSelectionData], guint, guint],[]],
    selection_received : CCodePointer[[Pointer[GtkWidget], Pointer[GtkSelectionData], guint],[]],
    drag_begin : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext]],[]],
    drag_end : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext]],[]],
    drag_data_get : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext], Pointer[GtkSelectionData], guint, guint],[]],
    drag_data_delete : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext]],[]],
    drag_leave : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext], guint],[]],
    drag_motion : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext], gint, gint, guint],[gboolean]],
    drag_drop : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext], gint, gint, guint],[gboolean]],
    drag_data_received : CCodePointer[[Pointer[GtkWidget], Pointer[GdkDragContext], gint, gint, Pointer[GtkSelectionData], guint, guint],[]],
    popup_menu : CCodePointer[[Pointer[GtkWidget]],[gboolean]],
    show_help : CCodePointer[[Pointer[GtkWidget], GtkWidgetHelpType],[gboolean]],
    get_accessible : CCodePointer[[Pointer[GtkWidget]],[Pointer[AtkObject]]],
    screen_changed : CCodePointer[[Pointer[GtkWidget], Pointer[GdkScreen]],[]],
    can_activate_accel : CCodePointer[[Pointer[GtkWidget], guint],[gboolean]],
    grab_broken_event : CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventGrabBroken]],[gboolean]],
    composited_changed : CCodePointer[[Pointer[GtkWidget]],[]],
    query_tooltip : CCodePointer[[Pointer[GtkWidget], gint, gint, gboolean, Pointer[GtkTooltip]],[gboolean]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
    _gtk_reserved7 : CCodePointer[[],[]],
);

record Struct__GtkWidgetAuxInfo (
    x : gint,
    y : gint,
    width : gint,
    height : gint,
    x_set : guint,
    y_set : guint,
);

record Struct__GtkWidgetShapeInfo (
    offset_x : gint16,
    offset_y : gint16,
    shape_mask : Pointer[GdkBitmap],
);

external (cdecl) gtk_widget_get_type() : GType;

external (cdecl) gtk_widget_new(arg0:GType, arg1:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_widget_destroy(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_destroyed(arg0:Pointer[GtkWidget], arg1:Pointer[Pointer[GtkWidget]]) : ;

external (cdecl) gtk_widget_ref(arg0:Pointer[GtkWidget]) : Pointer[GtkWidget];

external (cdecl) gtk_widget_unref(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_widget_hide_all(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_unparent(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_show(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_show_now(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_hide(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_show_all(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_no_show_all(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_no_show_all(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_map(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_unmap(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_realize(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_unrealize(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_queue_draw(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_queue_draw_area(arg0:Pointer[GtkWidget], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_widget_queue_clear(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_queue_clear_area(arg0:Pointer[GtkWidget], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_widget_queue_resize(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_queue_resize_no_redraw(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_draw(arg0:Pointer[GtkWidget], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_widget_size_request(arg0:Pointer[GtkWidget], arg1:Pointer[GtkRequisition]) : ;

external (cdecl) gtk_widget_size_allocate(arg0:Pointer[GtkWidget], arg1:Pointer[GtkAllocation]) : ;

external (cdecl) gtk_widget_get_child_requisition(arg0:Pointer[GtkWidget], arg1:Pointer[GtkRequisition]) : ;

external (cdecl) gtk_widget_add_accelerator(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:Pointer[GtkAccelGroup], arg3:guint, arg4:GdkModifierType, arg5:GtkAccelFlags) : ;

external (cdecl) gtk_widget_remove_accelerator(arg0:Pointer[GtkWidget], arg1:Pointer[GtkAccelGroup], arg2:guint, arg3:GdkModifierType) : gboolean;

external (cdecl) gtk_widget_set_accel_path(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:Pointer[GtkAccelGroup]) : ;

external (cdecl) _gtk_widget_get_accel_path(arg0:Pointer[GtkWidget], arg1:Pointer[gboolean]) : Pointer[gchar];

external (cdecl) gtk_widget_list_accel_closures(arg0:Pointer[GtkWidget]) : Pointer[GList];

external (cdecl) gtk_widget_can_activate_accel(arg0:Pointer[GtkWidget], arg1:guint) : gboolean;

external (cdecl) gtk_widget_mnemonic_activate(arg0:Pointer[GtkWidget], arg1:gboolean) : gboolean;

external (cdecl) gtk_widget_event(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEvent]) : gboolean;

external (cdecl) gtk_widget_send_expose(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEvent]) : gint;

external (cdecl) gtk_widget_send_focus_change(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEvent]) : gboolean;

external (cdecl) gtk_widget_activate(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_scroll_adjustments(arg0:Pointer[GtkWidget], arg1:Pointer[GtkAdjustment], arg2:Pointer[GtkAdjustment]) : gboolean;

external (cdecl) gtk_widget_reparent(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_intersect(arg0:Pointer[GtkWidget], arg1:Pointer[GdkRectangle], arg2:Pointer[GdkRectangle]) : gboolean;

external (cdecl) gtk_widget_region_intersect(arg0:Pointer[GtkWidget], arg1:Pointer[GdkRegion]) : Pointer[GdkRegion];

external (cdecl) gtk_widget_freeze_child_notify(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_child_notify(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_widget_thaw_child_notify(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_can_focus(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_can_focus(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_has_focus(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_is_focus(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_grab_focus(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_can_default(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_can_default(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_has_default(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_grab_default(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_receives_default(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_receives_default(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_has_grab(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_name(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_widget_get_name(arg0:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_widget_set_state(arg0:Pointer[GtkWidget], arg1:GtkStateType) : ;

external (cdecl) gtk_widget_get_state(arg0:Pointer[GtkWidget]) : GtkStateType;

external (cdecl) gtk_widget_set_sensitive(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_sensitive(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_is_sensitive(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_visible(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_visible(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_has_window(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_has_window(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_is_toplevel(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_is_drawable(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_realized(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_realized(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_mapped(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_mapped(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_app_paintable(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_app_paintable(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_double_buffered(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_double_buffered(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_redraw_on_allocate(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_set_parent(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_get_parent(arg0:Pointer[GtkWidget]) : Pointer[GtkWidget];

external (cdecl) gtk_widget_set_parent_window(arg0:Pointer[GtkWidget], arg1:Pointer[GdkWindow]) : ;

external (cdecl) gtk_widget_get_parent_window(arg0:Pointer[GtkWidget]) : Pointer[GdkWindow];

external (cdecl) gtk_widget_set_child_visible(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_child_visible(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_window(arg0:Pointer[GtkWidget], arg1:Pointer[GdkWindow]) : ;

external (cdecl) gtk_widget_get_window(arg0:Pointer[GtkWidget]) : Pointer[GdkWindow];

external (cdecl) gtk_widget_get_allocation(arg0:Pointer[GtkWidget], arg1:Pointer[GtkAllocation]) : ;

external (cdecl) gtk_widget_set_allocation(arg0:Pointer[GtkWidget], arg1:Pointer[GtkAllocation]) : ;

external (cdecl) gtk_widget_get_requisition(arg0:Pointer[GtkWidget], arg1:Pointer[GtkRequisition]) : ;

external (cdecl) gtk_widget_child_focus(arg0:Pointer[GtkWidget], arg1:GtkDirectionType) : gboolean;

external (cdecl) gtk_widget_keynav_failed(arg0:Pointer[GtkWidget], arg1:GtkDirectionType) : gboolean;

external (cdecl) gtk_widget_error_bell(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_size_request(arg0:Pointer[GtkWidget], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_widget_get_size_request(arg0:Pointer[GtkWidget], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_widget_set_uposition(arg0:Pointer[GtkWidget], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_widget_set_usize(arg0:Pointer[GtkWidget], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_widget_set_events(arg0:Pointer[GtkWidget], arg1:gint) : ;

external (cdecl) gtk_widget_add_events(arg0:Pointer[GtkWidget], arg1:gint) : ;

external (cdecl) gtk_widget_set_extension_events(arg0:Pointer[GtkWidget], arg1:GdkExtensionMode) : ;

external (cdecl) gtk_widget_get_extension_events(arg0:Pointer[GtkWidget]) : GdkExtensionMode;

external (cdecl) gtk_widget_get_toplevel(arg0:Pointer[GtkWidget]) : Pointer[GtkWidget];

external (cdecl) gtk_widget_get_ancestor(arg0:Pointer[GtkWidget], arg1:GType) : Pointer[GtkWidget];

external (cdecl) gtk_widget_get_colormap(arg0:Pointer[GtkWidget]) : Pointer[GdkColormap];

external (cdecl) gtk_widget_get_visual(arg0:Pointer[GtkWidget]) : Pointer[GdkVisual];

external (cdecl) gtk_widget_get_screen(arg0:Pointer[GtkWidget]) : Pointer[GdkScreen];

external (cdecl) gtk_widget_has_screen(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_get_display(arg0:Pointer[GtkWidget]) : Pointer[GdkDisplay];

external (cdecl) gtk_widget_get_root_window(arg0:Pointer[GtkWidget]) : Pointer[GdkWindow];

external (cdecl) gtk_widget_get_settings(arg0:Pointer[GtkWidget]) : Pointer[GtkSettings];

external (cdecl) gtk_widget_get_clipboard(arg0:Pointer[GtkWidget], arg1:GdkAtom) : Pointer[GtkClipboard];

external (cdecl) gtk_widget_get_snapshot(arg0:Pointer[GtkWidget], arg1:Pointer[GdkRectangle]) : Pointer[GdkPixmap];

external (cdecl) gtk_widget_get_accessible(arg0:Pointer[GtkWidget]) : Pointer[AtkObject];

external (cdecl) gtk_widget_set_colormap(arg0:Pointer[GtkWidget], arg1:Pointer[GdkColormap]) : ;

external (cdecl) gtk_widget_get_events(arg0:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_widget_get_pointer(arg0:Pointer[GtkWidget], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_widget_is_ancestor(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_translate_coordinates(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint, arg4:Pointer[gint], arg5:Pointer[gint]) : gboolean;

external (cdecl) gtk_widget_hide_on_delete(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_style_attach(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_has_rc_style(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_set_style(arg0:Pointer[GtkWidget], arg1:Pointer[GtkStyle]) : ;

external (cdecl) gtk_widget_ensure_style(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_get_style(arg0:Pointer[GtkWidget]) : Pointer[GtkStyle];

external (cdecl) gtk_widget_modify_style(arg0:Pointer[GtkWidget], arg1:Pointer[GtkRcStyle]) : ;

external (cdecl) gtk_widget_get_modifier_style(arg0:Pointer[GtkWidget]) : Pointer[GtkRcStyle];

external (cdecl) gtk_widget_modify_fg(arg0:Pointer[GtkWidget], arg1:GtkStateType, arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_widget_modify_bg(arg0:Pointer[GtkWidget], arg1:GtkStateType, arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_widget_modify_text(arg0:Pointer[GtkWidget], arg1:GtkStateType, arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_widget_modify_base(arg0:Pointer[GtkWidget], arg1:GtkStateType, arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_widget_modify_cursor(arg0:Pointer[GtkWidget], arg1:Pointer[GdkColor], arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_widget_modify_font(arg0:Pointer[GtkWidget], arg1:Pointer[PangoFontDescription]) : ;

external (cdecl) gtk_widget_create_pango_context(arg0:Pointer[GtkWidget]) : Pointer[PangoContext];

external (cdecl) gtk_widget_get_pango_context(arg0:Pointer[GtkWidget]) : Pointer[PangoContext];

external (cdecl) gtk_widget_create_pango_layout(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : Pointer[PangoLayout];

external (cdecl) gtk_widget_render_icon(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:GtkIconSize, arg3:Pointer[gchar]) : Pointer[GdkPixbuf];

external (cdecl) gtk_widget_set_composite_name(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_widget_get_composite_name(arg0:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_widget_reset_rc_styles(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_push_colormap(arg0:Pointer[GdkColormap]) : ;

external (cdecl) gtk_widget_push_composite_child() : ;

external (cdecl) gtk_widget_pop_composite_child() : ;

external (cdecl) gtk_widget_pop_colormap() : ;

external (cdecl) gtk_widget_class_install_style_property(arg0:Pointer[GtkWidgetClass], arg1:Pointer[GParamSpec]) : ;

external (cdecl) gtk_widget_class_install_style_property_parser(arg0:Pointer[GtkWidgetClass], arg1:Pointer[GParamSpec], arg2:GtkRcPropertyParser) : ;

external (cdecl) gtk_widget_class_find_style_property(arg0:Pointer[GtkWidgetClass], arg1:Pointer[gchar]) : Pointer[GParamSpec];

external (cdecl) gtk_widget_class_list_style_properties(arg0:Pointer[GtkWidgetClass], arg1:Pointer[guint]) : Pointer[Pointer[GParamSpec]];

external (cdecl) gtk_widget_style_get_property(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) gtk_widget_style_get_valist(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_widget_style_get(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_widget_set_default_colormap(arg0:Pointer[GdkColormap]) : ;

external (cdecl) gtk_widget_get_default_style() : Pointer[GtkStyle];

external (cdecl) gtk_widget_get_default_colormap() : Pointer[GdkColormap];

external (cdecl) gtk_widget_get_default_visual() : Pointer[GdkVisual];

external (cdecl) gtk_widget_set_direction(arg0:Pointer[GtkWidget], arg1:GtkTextDirection) : ;

external (cdecl) gtk_widget_get_direction(arg0:Pointer[GtkWidget]) : GtkTextDirection;

external (cdecl) gtk_widget_set_default_direction(arg0:GtkTextDirection) : ;

external (cdecl) gtk_widget_get_default_direction() : GtkTextDirection;

external (cdecl) gtk_widget_is_composited(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_widget_shape_combine_mask(arg0:Pointer[GtkWidget], arg1:Pointer[GdkBitmap], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_widget_input_shape_combine_mask(arg0:Pointer[GtkWidget], arg1:Pointer[GdkBitmap], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_widget_reset_shapes(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_path(arg0:Pointer[GtkWidget], arg1:Pointer[guint], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_widget_class_path(arg0:Pointer[GtkWidget], arg1:Pointer[guint], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_widget_list_mnemonic_labels(arg0:Pointer[GtkWidget]) : Pointer[GList];

external (cdecl) gtk_widget_add_mnemonic_label(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_remove_mnemonic_label(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_tooltip_window(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWindow]) : ;

external (cdecl) gtk_widget_get_tooltip_window(arg0:Pointer[GtkWidget]) : Pointer[GtkWindow];

external (cdecl) gtk_widget_trigger_tooltip_query(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_widget_set_tooltip_text(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_widget_get_tooltip_text(arg0:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_widget_set_tooltip_markup(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_widget_get_tooltip_markup(arg0:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_widget_set_has_tooltip(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_widget_get_has_tooltip(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_requisition_get_type() : GType;

external (cdecl) gtk_requisition_copy(arg0:Pointer[GtkRequisition]) : Pointer[GtkRequisition];

external (cdecl) gtk_requisition_free(arg0:Pointer[GtkRequisition]) : ;

external (cdecl) _gtk_widget_set_has_default(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) _gtk_widget_set_has_grab(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) _gtk_widget_set_is_toplevel(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) _gtk_widget_grab_notify(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) _gtk_widget_get_aux_info(arg0:Pointer[GtkWidget], arg1:gboolean) : Pointer[GtkWidgetAuxInfo];

external (cdecl) _gtk_widget_propagate_hierarchy_changed(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_widget_propagate_screen_changed(arg0:Pointer[GtkWidget], arg1:Pointer[GdkScreen]) : ;

external (cdecl) _gtk_widget_propagate_composited_changed(arg0:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_widget_set_pointer_window(arg0:Pointer[GtkWidget], arg1:Pointer[GdkWindow]) : ;

external (cdecl) _gtk_widget_get_pointer_window(arg0:Pointer[GtkWidget]) : Pointer[GdkWindow];

external (cdecl) _gtk_widget_is_pointer_widget(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) _gtk_widget_synthesize_crossing(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget], arg2:GdkCrossingMode) : ;

external (cdecl) _gtk_widget_peek_colormap() : Pointer[GdkColormap];

external (cdecl) _gtk_widget_buildable_finish_accelerator(arg0:Pointer[GtkWidget], arg1:Pointer[GtkWidget], arg2:gpointer) : ;

alias GtkContainer = Struct__GtkContainer;

alias GtkContainerClass = Struct__GtkContainerClass;

record Struct__GtkContainer (
    widget : GtkWidget,
    focus_child : Pointer[GtkWidget],
    border_width : guint,
    need_resize : guint,
    resize_mode : guint,
    reallocate_redraws : guint,
    has_focus_chain : guint,
);

record Struct__GtkContainerClass (
    parent_class : GtkWidgetClass,
    add : CCodePointer[[Pointer[GtkContainer], Pointer[GtkWidget]],[]],
    remove : CCodePointer[[Pointer[GtkContainer], Pointer[GtkWidget]],[]],
    check_resize : CCodePointer[[Pointer[GtkContainer]],[]],
    forall : CCodePointer[[Pointer[GtkContainer], gboolean, GtkCallback, gpointer],[]],
    set_focus_child : CCodePointer[[Pointer[GtkContainer], Pointer[GtkWidget]],[]],
    child_type : CCodePointer[[Pointer[GtkContainer]],[GType]],
    composite_name : CCodePointer[[Pointer[GtkContainer], Pointer[GtkWidget]],[Pointer[gchar]]],
    set_child_property : CCodePointer[[Pointer[GtkContainer], Pointer[GtkWidget], guint, Pointer[GValue], Pointer[GParamSpec]],[]],
    get_child_property : CCodePointer[[Pointer[GtkContainer], Pointer[GtkWidget], guint, Pointer[GValue], Pointer[GParamSpec]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_container_get_type() : GType;

external (cdecl) gtk_container_set_border_width(arg0:Pointer[GtkContainer], arg1:guint) : ;

external (cdecl) gtk_container_get_border_width(arg0:Pointer[GtkContainer]) : guint;

external (cdecl) gtk_container_add(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_container_remove(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_container_set_resize_mode(arg0:Pointer[GtkContainer], arg1:GtkResizeMode) : ;

external (cdecl) gtk_container_get_resize_mode(arg0:Pointer[GtkContainer]) : GtkResizeMode;

external (cdecl) gtk_container_check_resize(arg0:Pointer[GtkContainer]) : ;

external (cdecl) gtk_container_foreach(arg0:Pointer[GtkContainer], arg1:GtkCallback, arg2:gpointer) : ;

external (cdecl) gtk_container_foreach_full(arg0:Pointer[GtkContainer], arg1:GtkCallback, arg2:GtkCallbackMarshal, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_container_get_children(arg0:Pointer[GtkContainer]) : Pointer[GList];

external (cdecl) gtk_container_propagate_expose(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[GdkEventExpose]) : ;

external (cdecl) gtk_container_set_focus_chain(arg0:Pointer[GtkContainer], arg1:Pointer[GList]) : ;

external (cdecl) gtk_container_get_focus_chain(arg0:Pointer[GtkContainer], arg1:Pointer[Pointer[GList]]) : gboolean;

external (cdecl) gtk_container_unset_focus_chain(arg0:Pointer[GtkContainer]) : ;

external (cdecl) gtk_container_set_reallocate_redraws(arg0:Pointer[GtkContainer], arg1:gboolean) : ;

external (cdecl) gtk_container_set_focus_child(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_container_get_focus_child(arg0:Pointer[GtkContainer]) : Pointer[GtkWidget];

external (cdecl) gtk_container_set_focus_vadjustment(arg0:Pointer[GtkContainer], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_container_get_focus_vadjustment(arg0:Pointer[GtkContainer]) : Pointer[GtkAdjustment];

external (cdecl) gtk_container_set_focus_hadjustment(arg0:Pointer[GtkContainer], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_container_get_focus_hadjustment(arg0:Pointer[GtkContainer]) : Pointer[GtkAdjustment];

external (cdecl) gtk_container_resize_children(arg0:Pointer[GtkContainer]) : ;

external (cdecl) gtk_container_child_type(arg0:Pointer[GtkContainer]) : GType;

external (cdecl) gtk_container_class_install_child_property(arg0:Pointer[GtkContainerClass], arg1:guint, arg2:Pointer[GParamSpec]) : ;

external (cdecl) gtk_container_class_find_child_property(arg0:Pointer[GObjectClass], arg1:Pointer[gchar]) : Pointer[GParamSpec];

external (cdecl) gtk_container_class_list_child_properties(arg0:Pointer[GObjectClass], arg1:Pointer[guint]) : Pointer[Pointer[GParamSpec]];

external (cdecl) gtk_container_add_with_properties(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], ..) : ;

external (cdecl) gtk_container_child_set(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], ..) : ;

external (cdecl) gtk_container_child_get(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], ..) : ;

external (cdecl) gtk_container_child_set_valist(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_container_child_get_valist(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_container_child_set_property(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], arg3:Pointer[GValue]) : ;

external (cdecl) gtk_container_child_get_property(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], arg3:Pointer[GValue]) : ;

external (cdecl) gtk_container_forall(arg0:Pointer[GtkContainer], arg1:GtkCallback, arg2:gpointer) : ;

external (cdecl) _gtk_container_queue_resize(arg0:Pointer[GtkContainer]) : ;

external (cdecl) _gtk_container_clear_resize_widgets(arg0:Pointer[GtkContainer]) : ;

external (cdecl) _gtk_container_child_composite_name(arg0:Pointer[GtkContainer], arg1:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) _gtk_container_dequeue_resize_handler(arg0:Pointer[GtkContainer]) : ;

external (cdecl) _gtk_container_focus_sort(arg0:Pointer[GtkContainer], arg1:Pointer[GList], arg2:GtkDirectionType, arg3:Pointer[GtkWidget]) : Pointer[GList];

alias GtkBin = Struct__GtkBin;

alias GtkBinClass = Struct__GtkBinClass;

record Struct__GtkBin (
    container : GtkContainer,
    child : Pointer[GtkWidget],
);

record Struct__GtkBinClass (
    parent_class : GtkContainerClass,
);

external (cdecl) gtk_bin_get_type() : GType;

external (cdecl) gtk_bin_get_child(arg0:Pointer[GtkBin]) : Pointer[GtkWidget];

alias GtkWindowClass = Struct__GtkWindowClass;

alias Struct__GtkWindowGeometryInfo = Opaque;

alias GtkWindowGeometryInfo = Struct__GtkWindowGeometryInfo;

alias GtkWindowGroup = Struct__GtkWindowGroup;

alias GtkWindowGroupClass = Struct__GtkWindowGroupClass;

record Struct__GtkWindow (
    bin : GtkBin,
    title : Pointer[gchar],
    wmclass_name : Pointer[gchar],
    wmclass_class : Pointer[gchar],
    wm_role : Pointer[gchar],
    focus_widget : Pointer[GtkWidget],
    default_widget : Pointer[GtkWidget],
    transient_parent : Pointer[GtkWindow],
    geometry_info : Pointer[GtkWindowGeometryInfo],
    frame : Pointer[GdkWindow],
    group : Pointer[GtkWindowGroup],
    configure_request_count : guint16,
    allow_shrink : guint,
    allow_grow : guint,
    configure_notify_received : guint,
    need_default_position : guint,
    need_default_size : guint,
    position : guint,
    type : guint,
    has_user_ref_count : guint,
    has_focus : guint,
    modal : guint,
    destroy_with_parent : guint,
    has_frame : guint,
    iconify_initially : guint,
    stick_initially : guint,
    maximize_initially : guint,
    decorated : guint,
    type_hint : guint,
    gravity : guint,
    is_active : guint,
    has_toplevel_focus : guint,
    frame_left : guint,
    frame_top : guint,
    frame_right : guint,
    frame_bottom : guint,
    keys_changed_handler : guint,
    mnemonic_modifier : GdkModifierType,
    screen : Pointer[GdkScreen],
);

record Struct__GtkWindowClass (
    parent_class : GtkBinClass,
    set_focus : CCodePointer[[Pointer[GtkWindow], Pointer[GtkWidget]],[]],
    frame_event : CCodePointer[[Pointer[GtkWindow], Pointer[GdkEvent]],[gboolean]],
    activate_focus : CCodePointer[[Pointer[GtkWindow]],[]],
    activate_default : CCodePointer[[Pointer[GtkWindow]],[]],
    move_focus : CCodePointer[[Pointer[GtkWindow], GtkDirectionType],[]],
    keys_changed : CCodePointer[[Pointer[GtkWindow]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkWindowGroup (
    parent_instance : GObject,
    grabs : Pointer[GSList],
);

record Struct__GtkWindowGroupClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_window_get_type() : GType;

external (cdecl) gtk_window_new(arg0:GtkWindowType) : Pointer[GtkWidget];

external (cdecl) gtk_window_set_title(arg0:Pointer[GtkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_window_get_title(arg0:Pointer[GtkWindow]) : Pointer[gchar];

external (cdecl) gtk_window_set_wmclass(arg0:Pointer[GtkWindow], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_window_set_role(arg0:Pointer[GtkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_window_set_startup_id(arg0:Pointer[GtkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_window_get_role(arg0:Pointer[GtkWindow]) : Pointer[gchar];

external (cdecl) gtk_window_add_accel_group(arg0:Pointer[GtkWindow], arg1:Pointer[GtkAccelGroup]) : ;

external (cdecl) gtk_window_remove_accel_group(arg0:Pointer[GtkWindow], arg1:Pointer[GtkAccelGroup]) : ;

external (cdecl) gtk_window_set_position(arg0:Pointer[GtkWindow], arg1:GtkWindowPosition) : ;

external (cdecl) gtk_window_activate_focus(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_focus(arg0:Pointer[GtkWindow], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_window_get_focus(arg0:Pointer[GtkWindow]) : Pointer[GtkWidget];

external (cdecl) gtk_window_set_default(arg0:Pointer[GtkWindow], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_window_get_default_widget(arg0:Pointer[GtkWindow]) : Pointer[GtkWidget];

external (cdecl) gtk_window_activate_default(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_transient_for(arg0:Pointer[GtkWindow], arg1:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_get_transient_for(arg0:Pointer[GtkWindow]) : Pointer[GtkWindow];

external (cdecl) gtk_window_set_opacity(arg0:Pointer[GtkWindow], arg1:gdouble) : ;

external (cdecl) gtk_window_get_opacity(arg0:Pointer[GtkWindow]) : gdouble;

external (cdecl) gtk_window_set_type_hint(arg0:Pointer[GtkWindow], arg1:GdkWindowTypeHint) : ;

external (cdecl) gtk_window_get_type_hint(arg0:Pointer[GtkWindow]) : GdkWindowTypeHint;

external (cdecl) gtk_window_set_skip_taskbar_hint(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_skip_taskbar_hint(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_skip_pager_hint(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_skip_pager_hint(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_urgency_hint(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_urgency_hint(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_accept_focus(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_accept_focus(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_focus_on_map(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_focus_on_map(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_destroy_with_parent(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_destroy_with_parent(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_mnemonics_visible(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_mnemonics_visible(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_resizable(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_resizable(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_gravity(arg0:Pointer[GtkWindow], arg1:GdkGravity) : ;

external (cdecl) gtk_window_get_gravity(arg0:Pointer[GtkWindow]) : GdkGravity;

external (cdecl) gtk_window_set_geometry_hints(arg0:Pointer[GtkWindow], arg1:Pointer[GtkWidget], arg2:Pointer[GdkGeometry], arg3:GdkWindowHints) : ;

external (cdecl) gtk_window_set_screen(arg0:Pointer[GtkWindow], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_window_get_screen(arg0:Pointer[GtkWindow]) : Pointer[GdkScreen];

external (cdecl) gtk_window_is_active(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_has_toplevel_focus(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_has_frame(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_has_frame(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_frame_dimensions(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_window_get_frame_dimensions(arg0:Pointer[GtkWindow], arg1:Pointer[gint], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_window_set_decorated(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_decorated(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_deletable(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_deletable(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_set_icon_list(arg0:Pointer[GtkWindow], arg1:Pointer[GList]) : ;

external (cdecl) gtk_window_get_icon_list(arg0:Pointer[GtkWindow]) : Pointer[GList];

external (cdecl) gtk_window_set_icon(arg0:Pointer[GtkWindow], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_window_set_icon_name(arg0:Pointer[GtkWindow], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_window_set_icon_from_file(arg0:Pointer[GtkWindow], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_window_get_icon(arg0:Pointer[GtkWindow]) : Pointer[GdkPixbuf];

external (cdecl) gtk_window_get_icon_name(arg0:Pointer[GtkWindow]) : Pointer[gchar];

external (cdecl) gtk_window_set_default_icon_list(arg0:Pointer[GList]) : ;

external (cdecl) gtk_window_get_default_icon_list() : Pointer[GList];

external (cdecl) gtk_window_set_default_icon(arg0:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_window_set_default_icon_name(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_window_get_default_icon_name() : Pointer[gchar];

external (cdecl) gtk_window_set_default_icon_from_file(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_window_set_auto_startup_notification(arg0:gboolean) : ;

external (cdecl) gtk_window_set_modal(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_get_modal(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_list_toplevels() : Pointer[GList];

external (cdecl) gtk_window_add_mnemonic(arg0:Pointer[GtkWindow], arg1:guint, arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_window_remove_mnemonic(arg0:Pointer[GtkWindow], arg1:guint, arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_window_mnemonic_activate(arg0:Pointer[GtkWindow], arg1:guint, arg2:GdkModifierType) : gboolean;

external (cdecl) gtk_window_set_mnemonic_modifier(arg0:Pointer[GtkWindow], arg1:GdkModifierType) : ;

external (cdecl) gtk_window_get_mnemonic_modifier(arg0:Pointer[GtkWindow]) : GdkModifierType;

external (cdecl) gtk_window_activate_key(arg0:Pointer[GtkWindow], arg1:Pointer[GdkEventKey]) : gboolean;

external (cdecl) gtk_window_propagate_key_event(arg0:Pointer[GtkWindow], arg1:Pointer[GdkEventKey]) : gboolean;

external (cdecl) gtk_window_present(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_present_with_time(arg0:Pointer[GtkWindow], arg1:guint32) : ;

external (cdecl) gtk_window_iconify(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_deiconify(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_stick(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_unstick(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_maximize(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_unmaximize(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_fullscreen(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_unfullscreen(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_set_keep_above(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_set_keep_below(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) gtk_window_begin_resize_drag(arg0:Pointer[GtkWindow], arg1:GdkWindowEdge, arg2:gint, arg3:gint, arg4:gint, arg5:guint32) : ;

external (cdecl) gtk_window_begin_move_drag(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint, arg3:gint, arg4:guint32) : ;

external (cdecl) gtk_window_set_policy(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint, arg3:gint) : ;

external (cdecl) gtk_window_set_default_size(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_window_get_default_size(arg0:Pointer[GtkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_window_resize(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_window_get_size(arg0:Pointer[GtkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_window_move(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_window_get_position(arg0:Pointer[GtkWindow], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_window_parse_geometry(arg0:Pointer[GtkWindow], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_window_get_group(arg0:Pointer[GtkWindow]) : Pointer[GtkWindowGroup];

external (cdecl) gtk_window_has_group(arg0:Pointer[GtkWindow]) : gboolean;

external (cdecl) gtk_window_reshow_with_initial_size(arg0:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_get_window_type(arg0:Pointer[GtkWindow]) : GtkWindowType;

external (cdecl) gtk_window_group_get_type() : GType;

external (cdecl) gtk_window_group_new() : Pointer[GtkWindowGroup];

external (cdecl) gtk_window_group_add_window(arg0:Pointer[GtkWindowGroup], arg1:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_group_remove_window(arg0:Pointer[GtkWindowGroup], arg1:Pointer[GtkWindow]) : ;

external (cdecl) gtk_window_group_list_windows(arg0:Pointer[GtkWindowGroup]) : Pointer[GList];

external (cdecl) _gtk_window_internal_set_focus(arg0:Pointer[GtkWindow], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_window_remove_embedded_xid(arg0:Pointer[GtkWindow], arg1:GdkNativeWindow) : ;

external (cdecl) gtk_window_add_embedded_xid(arg0:Pointer[GtkWindow], arg1:GdkNativeWindow) : ;

external (cdecl) _gtk_window_reposition(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint) : ;

external (cdecl) _gtk_window_constrain_size(arg0:Pointer[GtkWindow], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_window_group_get_current_grab(arg0:Pointer[GtkWindowGroup]) : Pointer[GtkWidget];

external (cdecl) _gtk_window_set_has_toplevel_focus(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) _gtk_window_unset_focus_and_default(arg0:Pointer[GtkWindow], arg1:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_window_set_is_active(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

external (cdecl) _gtk_window_set_is_toplevel(arg0:Pointer[GtkWindow], arg1:gboolean) : ;

alias GtkWindowKeysForeachFunc = CCodePointer[[Pointer[GtkWindow], guint, GdkModifierType, gboolean, gpointer],[]];

external (cdecl) _gtk_window_keys_foreach(arg0:Pointer[GtkWindow], arg1:GtkWindowKeysForeachFunc, arg2:gpointer) : ;

external (cdecl) _gtk_window_query_nonaccels(arg0:Pointer[GtkWindow], arg1:guint, arg2:GdkModifierType) : gboolean;


alias GtkDialogFlags = CUInt;
alias GTK_DIALOG_MODAL = CUInt(1);
alias GTK_DIALOG_DESTROY_WITH_PARENT = CUInt(2);
alias GTK_DIALOG_NO_SEPARATOR = CUInt(4);


alias GtkResponseType = CInt;
alias GTK_RESPONSE_NONE = CInt(-1);
alias GTK_RESPONSE_REJECT = CInt(-2);
alias GTK_RESPONSE_ACCEPT = CInt(-3);
alias GTK_RESPONSE_DELETE_EVENT = CInt(-4);
alias GTK_RESPONSE_OK = CInt(-5);
alias GTK_RESPONSE_CANCEL = CInt(-6);
alias GTK_RESPONSE_CLOSE = CInt(-7);
alias GTK_RESPONSE_YES = CInt(-8);
alias GTK_RESPONSE_NO = CInt(-9);
alias GTK_RESPONSE_APPLY = CInt(-10);
alias GTK_RESPONSE_HELP = CInt(-11);

alias GtkDialog = Struct__GtkDialog;

alias GtkDialogClass = Struct__GtkDialogClass;

record Struct__GtkDialog (
    window : GtkWindow,
    vbox : Pointer[GtkWidget],
    action_area : Pointer[GtkWidget],
    separator : Pointer[GtkWidget],
);

record Struct__GtkDialogClass (
    parent_class : GtkWindowClass,
    response : CCodePointer[[Pointer[GtkDialog], gint],[]],
    close : CCodePointer[[Pointer[GtkDialog]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_dialog_get_type() : GType;

external (cdecl) gtk_dialog_new() : Pointer[GtkWidget];

external (cdecl) gtk_dialog_new_with_buttons(arg0:Pointer[gchar], arg1:Pointer[GtkWindow], arg2:GtkDialogFlags, arg3:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_dialog_add_action_widget(arg0:Pointer[GtkDialog], arg1:Pointer[GtkWidget], arg2:gint) : ;

external (cdecl) gtk_dialog_add_button(arg0:Pointer[GtkDialog], arg1:Pointer[gchar], arg2:gint) : Pointer[GtkWidget];

external (cdecl) gtk_dialog_add_buttons(arg0:Pointer[GtkDialog], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_dialog_set_response_sensitive(arg0:Pointer[GtkDialog], arg1:gint, arg2:gboolean) : ;

external (cdecl) gtk_dialog_set_default_response(arg0:Pointer[GtkDialog], arg1:gint) : ;

external (cdecl) gtk_dialog_get_widget_for_response(arg0:Pointer[GtkDialog], arg1:gint) : Pointer[GtkWidget];

external (cdecl) gtk_dialog_get_response_for_widget(arg0:Pointer[GtkDialog], arg1:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_dialog_set_has_separator(arg0:Pointer[GtkDialog], arg1:gboolean) : ;

external (cdecl) gtk_dialog_get_has_separator(arg0:Pointer[GtkDialog]) : gboolean;

external (cdecl) gtk_alternative_dialog_button_order(arg0:Pointer[GdkScreen]) : gboolean;

external (cdecl) gtk_dialog_set_alternative_button_order(arg0:Pointer[GtkDialog], arg1:gint, ..) : ;

external (cdecl) gtk_dialog_set_alternative_button_order_from_array(arg0:Pointer[GtkDialog], arg1:gint, arg2:Pointer[gint]) : ;

external (cdecl) gtk_dialog_response(arg0:Pointer[GtkDialog], arg1:gint) : ;

external (cdecl) gtk_dialog_run(arg0:Pointer[GtkDialog]) : gint;

external (cdecl) gtk_dialog_get_action_area(arg0:Pointer[GtkDialog]) : Pointer[GtkWidget];

external (cdecl) gtk_dialog_get_content_area(arg0:Pointer[GtkDialog]) : Pointer[GtkWidget];

external (cdecl) _gtk_dialog_set_ignore_separator(arg0:Pointer[GtkDialog], arg1:gboolean) : ;

alias GtkAboutDialog = Struct__GtkAboutDialog;

alias GtkAboutDialogClass = Struct__GtkAboutDialogClass;

record Struct__GtkAboutDialog (
    parent_instance : GtkDialog,
    private_data : gpointer,
);

record Struct__GtkAboutDialogClass (
    parent_class : GtkDialogClass,
    activate_link : CCodePointer[[Pointer[GtkAboutDialog], Pointer[gchar]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_about_dialog_get_type() : GType;

external (cdecl) gtk_about_dialog_new() : Pointer[GtkWidget];

external (cdecl) gtk_show_about_dialog(arg0:Pointer[GtkWindow], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_about_dialog_get_name(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_name(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_program_name(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_program_name(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_version(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_version(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_copyright(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_copyright(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_comments(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_comments(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_license(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_license(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_wrap_license(arg0:Pointer[GtkAboutDialog]) : gboolean;

external (cdecl) gtk_about_dialog_set_wrap_license(arg0:Pointer[GtkAboutDialog], arg1:gboolean) : ;

external (cdecl) gtk_about_dialog_get_website(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_website(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_website_label(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_website_label(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_authors(arg0:Pointer[GtkAboutDialog]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_about_dialog_set_authors(arg0:Pointer[GtkAboutDialog], arg1:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_about_dialog_get_documenters(arg0:Pointer[GtkAboutDialog]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_about_dialog_set_documenters(arg0:Pointer[GtkAboutDialog], arg1:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_about_dialog_get_artists(arg0:Pointer[GtkAboutDialog]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_about_dialog_set_artists(arg0:Pointer[GtkAboutDialog], arg1:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_about_dialog_get_translator_credits(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_translator_credits(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_about_dialog_get_logo(arg0:Pointer[GtkAboutDialog]) : Pointer[GdkPixbuf];

external (cdecl) gtk_about_dialog_set_logo(arg0:Pointer[GtkAboutDialog], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_about_dialog_get_logo_icon_name(arg0:Pointer[GtkAboutDialog]) : Pointer[gchar];

external (cdecl) gtk_about_dialog_set_logo_icon_name(arg0:Pointer[GtkAboutDialog], arg1:Pointer[gchar]) : ;

alias GtkAboutDialogActivateLinkFunc = CCodePointer[[Pointer[GtkAboutDialog], Pointer[gchar], gpointer],[]];

external (cdecl) gtk_about_dialog_set_email_hook(arg0:GtkAboutDialogActivateLinkFunc, arg1:gpointer, arg2:GDestroyNotify) : GtkAboutDialogActivateLinkFunc;

external (cdecl) gtk_about_dialog_set_url_hook(arg0:GtkAboutDialogActivateLinkFunc, arg1:gpointer, arg2:GDestroyNotify) : GtkAboutDialogActivateLinkFunc;

alias GtkMisc = Struct__GtkMisc;

alias GtkMiscClass = Struct__GtkMiscClass;

record Struct__GtkMisc (
    widget : GtkWidget,
    xalign : gfloat,
    yalign : gfloat,
    xpad : guint16,
    ypad : guint16,
);

record Struct__GtkMiscClass (
    parent_class : GtkWidgetClass,
);

external (cdecl) gtk_misc_get_type() : GType;

external (cdecl) gtk_misc_set_alignment(arg0:Pointer[GtkMisc], arg1:gfloat, arg2:gfloat) : ;

external (cdecl) gtk_misc_get_alignment(arg0:Pointer[GtkMisc], arg1:Pointer[gfloat], arg2:Pointer[gfloat]) : ;

external (cdecl) gtk_misc_set_padding(arg0:Pointer[GtkMisc], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_misc_get_padding(arg0:Pointer[GtkMisc], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

alias GtkMenuShell = Struct__GtkMenuShell;

alias GtkMenuShellClass = Struct__GtkMenuShellClass;

record Struct__GtkMenuShell (
    container : GtkContainer,
    children : Pointer[GList],
    active_menu_item : Pointer[GtkWidget],
    parent_menu_shell : Pointer[GtkWidget],
    button : guint,
    activate_time : guint32,
    active : guint,
    have_grab : guint,
    have_xgrab : guint,
    ignore_leave : guint,
    menu_flag : guint,
    ignore_enter : guint,
    keyboard_mode : guint,
);

record Struct__GtkMenuShellClass (
    parent_class : GtkContainerClass,
    submenu_placement : guint,
    deactivate : CCodePointer[[Pointer[GtkMenuShell]],[]],
    selection_done : CCodePointer[[Pointer[GtkMenuShell]],[]],
    move_current : CCodePointer[[Pointer[GtkMenuShell], GtkMenuDirectionType],[]],
    activate_current : CCodePointer[[Pointer[GtkMenuShell], gboolean],[]],
    cancel : CCodePointer[[Pointer[GtkMenuShell]],[]],
    select_item : CCodePointer[[Pointer[GtkMenuShell], Pointer[GtkWidget]],[]],
    insert : CCodePointer[[Pointer[GtkMenuShell], Pointer[GtkWidget], gint],[]],
    get_popup_delay : CCodePointer[[Pointer[GtkMenuShell]],[gint]],
    move_selected : CCodePointer[[Pointer[GtkMenuShell], gint],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
);

external (cdecl) gtk_menu_shell_get_type() : GType;

external (cdecl) gtk_menu_shell_append(arg0:Pointer[GtkMenuShell], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_shell_prepend(arg0:Pointer[GtkMenuShell], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_shell_insert(arg0:Pointer[GtkMenuShell], arg1:Pointer[GtkWidget], arg2:gint) : ;

external (cdecl) gtk_menu_shell_deactivate(arg0:Pointer[GtkMenuShell]) : ;

external (cdecl) gtk_menu_shell_select_item(arg0:Pointer[GtkMenuShell], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_shell_deselect(arg0:Pointer[GtkMenuShell]) : ;

external (cdecl) gtk_menu_shell_activate_item(arg0:Pointer[GtkMenuShell], arg1:Pointer[GtkWidget], arg2:gboolean) : ;

external (cdecl) gtk_menu_shell_select_first(arg0:Pointer[GtkMenuShell], arg1:gboolean) : ;

external (cdecl) _gtk_menu_shell_select_last(arg0:Pointer[GtkMenuShell], arg1:gboolean) : ;

external (cdecl) _gtk_menu_shell_activate(arg0:Pointer[GtkMenuShell]) : ;

external (cdecl) _gtk_menu_shell_get_popup_delay(arg0:Pointer[GtkMenuShell]) : gint;

external (cdecl) gtk_menu_shell_cancel(arg0:Pointer[GtkMenuShell]) : ;

external (cdecl) _gtk_menu_shell_add_mnemonic(arg0:Pointer[GtkMenuShell], arg1:guint, arg2:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_menu_shell_remove_mnemonic(arg0:Pointer[GtkMenuShell], arg1:guint, arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_shell_get_take_focus(arg0:Pointer[GtkMenuShell]) : gboolean;

external (cdecl) gtk_menu_shell_set_take_focus(arg0:Pointer[GtkMenuShell], arg1:gboolean) : ;

external (cdecl) _gtk_menu_shell_update_mnemonics(arg0:Pointer[GtkMenuShell]) : ;

external (cdecl) _gtk_menu_shell_set_keyboard_mode(arg0:Pointer[GtkMenuShell], arg1:gboolean) : ;

external (cdecl) _gtk_menu_shell_get_keyboard_mode(arg0:Pointer[GtkMenuShell]) : gboolean;

alias GtkMenu = Struct__GtkMenu;

alias GtkMenuClass = Struct__GtkMenuClass;

alias GtkMenuPositionFunc = CCodePointer[[Pointer[GtkMenu], Pointer[gint], Pointer[gint], Pointer[gboolean], gpointer],[]];

alias GtkMenuDetachFunc = CCodePointer[[Pointer[GtkWidget], Pointer[GtkMenu]],[]];

record Struct__GtkMenu (
    menu_shell : GtkMenuShell,
    parent_menu_item : Pointer[GtkWidget],
    old_active_menu_item : Pointer[GtkWidget],
    accel_group : Pointer[GtkAccelGroup],
    accel_path : Pointer[gchar],
    position_func : GtkMenuPositionFunc,
    position_func_data : gpointer,
    toggle_size : guint,
    toplevel : Pointer[GtkWidget],
    tearoff_window : Pointer[GtkWidget],
    tearoff_hbox : Pointer[GtkWidget],
    tearoff_scrollbar : Pointer[GtkWidget],
    tearoff_adjustment : Pointer[GtkAdjustment],
    view_window : Pointer[GdkWindow],
    bin_window : Pointer[GdkWindow],
    scroll_offset : gint,
    saved_scroll_offset : gint,
    scroll_step : gint,
    timeout_id : guint,
    navigation_region : Pointer[GdkRegion],
    navigation_timeout : guint,
    needs_destruction_ref_count : guint,
    torn_off : guint,
    tearoff_active : guint,
    scroll_fast : guint,
    upper_arrow_visible : guint,
    lower_arrow_visible : guint,
    upper_arrow_prelight : guint,
    lower_arrow_prelight : guint,
);

record Struct__GtkMenuClass (
    parent_class : GtkMenuShellClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_menu_get_type() : GType;

external (cdecl) gtk_menu_new() : Pointer[GtkWidget];

external (cdecl) gtk_menu_popup(arg0:Pointer[GtkMenu], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget], arg3:GtkMenuPositionFunc, arg4:gpointer, arg5:guint, arg6:guint32) : ;

external (cdecl) gtk_menu_reposition(arg0:Pointer[GtkMenu]) : ;

external (cdecl) gtk_menu_popdown(arg0:Pointer[GtkMenu]) : ;

external (cdecl) gtk_menu_get_active(arg0:Pointer[GtkMenu]) : Pointer[GtkWidget];

external (cdecl) gtk_menu_set_active(arg0:Pointer[GtkMenu], arg1:guint) : ;

external (cdecl) gtk_menu_set_accel_group(arg0:Pointer[GtkMenu], arg1:Pointer[GtkAccelGroup]) : ;

external (cdecl) gtk_menu_get_accel_group(arg0:Pointer[GtkMenu]) : Pointer[GtkAccelGroup];

external (cdecl) gtk_menu_set_accel_path(arg0:Pointer[GtkMenu], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_menu_get_accel_path(arg0:Pointer[GtkMenu]) : Pointer[gchar];

external (cdecl) gtk_menu_attach_to_widget(arg0:Pointer[GtkMenu], arg1:Pointer[GtkWidget], arg2:GtkMenuDetachFunc) : ;

external (cdecl) gtk_menu_detach(arg0:Pointer[GtkMenu]) : ;

external (cdecl) gtk_menu_get_attach_widget(arg0:Pointer[GtkMenu]) : Pointer[GtkWidget];

external (cdecl) gtk_menu_set_tearoff_state(arg0:Pointer[GtkMenu], arg1:gboolean) : ;

external (cdecl) gtk_menu_get_tearoff_state(arg0:Pointer[GtkMenu]) : gboolean;

external (cdecl) gtk_menu_set_title(arg0:Pointer[GtkMenu], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_menu_get_title(arg0:Pointer[GtkMenu]) : Pointer[gchar];

external (cdecl) gtk_menu_reorder_child(arg0:Pointer[GtkMenu], arg1:Pointer[GtkWidget], arg2:gint) : ;

external (cdecl) gtk_menu_set_screen(arg0:Pointer[GtkMenu], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_menu_attach(arg0:Pointer[GtkMenu], arg1:Pointer[GtkWidget], arg2:guint, arg3:guint, arg4:guint, arg5:guint) : ;

external (cdecl) gtk_menu_set_monitor(arg0:Pointer[GtkMenu], arg1:gint) : ;

external (cdecl) gtk_menu_get_monitor(arg0:Pointer[GtkMenu]) : gint;

external (cdecl) gtk_menu_get_for_attach_widget(arg0:Pointer[GtkWidget]) : Pointer[GList];

external (cdecl) gtk_menu_set_reserve_toggle_size(arg0:Pointer[GtkMenu], arg1:gboolean) : ;

external (cdecl) gtk_menu_get_reserve_toggle_size(arg0:Pointer[GtkMenu]) : gboolean;

alias GtkLabel = Struct__GtkLabel;

alias GtkLabelClass = Struct__GtkLabelClass;

alias Struct__GtkLabelSelectionInfo = Opaque;

alias GtkLabelSelectionInfo = Struct__GtkLabelSelectionInfo;

record Struct__GtkLabel (
    misc : GtkMisc,
    label : Pointer[gchar],
    jtype : guint,
    wrap : guint,
    use_underline : guint,
    use_markup : guint,
    ellipsize : guint,
    single_line_mode : guint,
    have_transform : guint,
    in_click : guint,
    wrap_mode : guint,
    pattern_set : guint,
    track_links : guint,
    mnemonic_keyval : guint,
    text : Pointer[gchar],
    attrs : Pointer[PangoAttrList],
    effective_attrs : Pointer[PangoAttrList],
    layout : Pointer[PangoLayout],
    mnemonic_widget : Pointer[GtkWidget],
    mnemonic_window : Pointer[GtkWindow],
    select_info : Pointer[GtkLabelSelectionInfo],
);

record Struct__GtkLabelClass (
    parent_class : GtkMiscClass,
    move_cursor : CCodePointer[[Pointer[GtkLabel], GtkMovementStep, gint, gboolean],[]],
    copy_clipboard : CCodePointer[[Pointer[GtkLabel]],[]],
    populate_popup : CCodePointer[[Pointer[GtkLabel], Pointer[GtkMenu]],[]],
    activate_link : CCodePointer[[Pointer[GtkLabel], Pointer[gchar]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_label_get_type() : GType;

external (cdecl) gtk_label_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_label_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_label_set_text(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_label_get_text(arg0:Pointer[GtkLabel]) : Pointer[gchar];

external (cdecl) gtk_label_set_attributes(arg0:Pointer[GtkLabel], arg1:Pointer[PangoAttrList]) : ;

external (cdecl) gtk_label_get_attributes(arg0:Pointer[GtkLabel]) : Pointer[PangoAttrList];

external (cdecl) gtk_label_set_label(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_label_get_label(arg0:Pointer[GtkLabel]) : Pointer[gchar];

external (cdecl) gtk_label_set_markup(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_label_set_use_markup(arg0:Pointer[GtkLabel], arg1:gboolean) : ;

external (cdecl) gtk_label_get_use_markup(arg0:Pointer[GtkLabel]) : gboolean;

external (cdecl) gtk_label_set_use_underline(arg0:Pointer[GtkLabel], arg1:gboolean) : ;

external (cdecl) gtk_label_get_use_underline(arg0:Pointer[GtkLabel]) : gboolean;

external (cdecl) gtk_label_set_markup_with_mnemonic(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_label_get_mnemonic_keyval(arg0:Pointer[GtkLabel]) : guint;

external (cdecl) gtk_label_set_mnemonic_widget(arg0:Pointer[GtkLabel], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_label_get_mnemonic_widget(arg0:Pointer[GtkLabel]) : Pointer[GtkWidget];

external (cdecl) gtk_label_set_text_with_mnemonic(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_label_set_justify(arg0:Pointer[GtkLabel], arg1:GtkJustification) : ;

external (cdecl) gtk_label_get_justify(arg0:Pointer[GtkLabel]) : GtkJustification;

external (cdecl) gtk_label_set_ellipsize(arg0:Pointer[GtkLabel], arg1:PangoEllipsizeMode) : ;

external (cdecl) gtk_label_get_ellipsize(arg0:Pointer[GtkLabel]) : PangoEllipsizeMode;

external (cdecl) gtk_label_set_width_chars(arg0:Pointer[GtkLabel], arg1:gint) : ;

external (cdecl) gtk_label_get_width_chars(arg0:Pointer[GtkLabel]) : gint;

external (cdecl) gtk_label_set_max_width_chars(arg0:Pointer[GtkLabel], arg1:gint) : ;

external (cdecl) gtk_label_get_max_width_chars(arg0:Pointer[GtkLabel]) : gint;

external (cdecl) gtk_label_set_pattern(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_label_set_line_wrap(arg0:Pointer[GtkLabel], arg1:gboolean) : ;

external (cdecl) gtk_label_get_line_wrap(arg0:Pointer[GtkLabel]) : gboolean;

external (cdecl) gtk_label_set_line_wrap_mode(arg0:Pointer[GtkLabel], arg1:PangoWrapMode) : ;

external (cdecl) gtk_label_get_line_wrap_mode(arg0:Pointer[GtkLabel]) : PangoWrapMode;

external (cdecl) gtk_label_set_selectable(arg0:Pointer[GtkLabel], arg1:gboolean) : ;

external (cdecl) gtk_label_get_selectable(arg0:Pointer[GtkLabel]) : gboolean;

external (cdecl) gtk_label_set_angle(arg0:Pointer[GtkLabel], arg1:gdouble) : ;

external (cdecl) gtk_label_get_angle(arg0:Pointer[GtkLabel]) : gdouble;

external (cdecl) gtk_label_select_region(arg0:Pointer[GtkLabel], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_label_get_selection_bounds(arg0:Pointer[GtkLabel], arg1:Pointer[gint], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_label_get_layout(arg0:Pointer[GtkLabel]) : Pointer[PangoLayout];

external (cdecl) gtk_label_get_layout_offsets(arg0:Pointer[GtkLabel], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_label_set_single_line_mode(arg0:Pointer[GtkLabel], arg1:gboolean) : ;

external (cdecl) gtk_label_get_single_line_mode(arg0:Pointer[GtkLabel]) : gboolean;

external (cdecl) gtk_label_get_current_uri(arg0:Pointer[GtkLabel]) : Pointer[gchar];

external (cdecl) gtk_label_set_track_visited_links(arg0:Pointer[GtkLabel], arg1:gboolean) : ;

external (cdecl) gtk_label_get_track_visited_links(arg0:Pointer[GtkLabel]) : gboolean;

external (cdecl) gtk_label_get(arg0:Pointer[GtkLabel], arg1:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_label_parse_uline(arg0:Pointer[GtkLabel], arg1:Pointer[gchar]) : guint;

external (cdecl) _gtk_label_mnemonics_visible_apply_recursively(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

alias GtkAccelLabel = Struct__GtkAccelLabel;

alias GtkAccelLabelClass = Struct__GtkAccelLabelClass;

record Struct__GtkAccelLabel (
    label : GtkLabel,
    gtk_reserved : guint,
    accel_padding : guint,
    accel_widget : Pointer[GtkWidget],
    accel_closure : Pointer[GClosure],
    accel_group : Pointer[GtkAccelGroup],
    accel_string : Pointer[gchar],
    accel_string_width : guint16,
);

record Struct__GtkAccelLabelClass (
    parent_class : GtkLabelClass,
    signal_quote1 : Pointer[gchar],
    signal_quote2 : Pointer[gchar],
    mod_name_shift : Pointer[gchar],
    mod_name_control : Pointer[gchar],
    mod_name_alt : Pointer[gchar],
    mod_separator : Pointer[gchar],
    accel_seperator : Pointer[gchar],
    latin1_to_char : guint,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_accel_label_get_type() : GType;

external (cdecl) gtk_accel_label_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_accel_label_get_accel_widget(arg0:Pointer[GtkAccelLabel]) : Pointer[GtkWidget];

external (cdecl) gtk_accel_label_get_accel_width(arg0:Pointer[GtkAccelLabel]) : guint;

external (cdecl) gtk_accel_label_set_accel_widget(arg0:Pointer[GtkAccelLabel], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_accel_label_set_accel_closure(arg0:Pointer[GtkAccelLabel], arg1:Pointer[GClosure]) : ;

external (cdecl) gtk_accel_label_refetch(arg0:Pointer[GtkAccelLabel]) : gboolean;

external (cdecl) _gtk_accel_label_class_get_accelerator_label(arg0:Pointer[GtkAccelLabelClass], arg1:guint, arg2:GdkModifierType) : Pointer[gchar];

alias Struct__GtkAccelMap = Opaque;

alias GtkAccelMap = Struct__GtkAccelMap;

alias Struct__GtkAccelMapClass = Opaque;

alias GtkAccelMapClass = Struct__GtkAccelMapClass;

alias GtkAccelMapForeach = CCodePointer[[gpointer, Pointer[gchar], guint, GdkModifierType, gboolean],[]];

external (cdecl) gtk_accel_map_add_entry(arg0:Pointer[gchar], arg1:guint, arg2:GdkModifierType) : ;

external (cdecl) gtk_accel_map_lookup_entry(arg0:Pointer[gchar], arg1:Pointer[GtkAccelKey]) : gboolean;

external (cdecl) gtk_accel_map_change_entry(arg0:Pointer[gchar], arg1:guint, arg2:GdkModifierType, arg3:gboolean) : gboolean;

external (cdecl) gtk_accel_map_load(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_accel_map_save(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_accel_map_foreach(arg0:gpointer, arg1:GtkAccelMapForeach) : ;

external (cdecl) gtk_accel_map_load_fd(arg0:gint) : ;

external (cdecl) gtk_accel_map_load_scanner(arg0:Pointer[GScanner]) : ;

external (cdecl) gtk_accel_map_save_fd(arg0:gint) : ;

external (cdecl) gtk_accel_map_lock_path(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_accel_map_unlock_path(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_accel_map_add_filter(arg0:Pointer[gchar]) : ;

external (cdecl) gtk_accel_map_foreach_unfiltered(arg0:gpointer, arg1:GtkAccelMapForeach) : ;

external (cdecl) gtk_accel_map_get_type() : GType;

external (cdecl) gtk_accel_map_get() : Pointer[GtkAccelMap];

external (cdecl) _gtk_accel_map_init() : ;

external (cdecl) _gtk_accel_map_add_group(arg0:Pointer[gchar], arg1:Pointer[GtkAccelGroup]) : ;

external (cdecl) _gtk_accel_map_remove_group(arg0:Pointer[gchar], arg1:Pointer[GtkAccelGroup]) : ;

external (cdecl) _gtk_accel_path_is_valid(arg0:Pointer[gchar]) : gboolean;

alias GtkAccessible = Struct__GtkAccessible;

alias GtkAccessibleClass = Struct__GtkAccessibleClass;

record Struct__GtkAccessible (
    parent : AtkObject,
    widget : Pointer[GtkWidget],
);

record Struct__GtkAccessibleClass (
    parent_class : AtkObjectClass,
    connect_widget_destroyed : CCodePointer[[Pointer[GtkAccessible]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_accessible_get_type() : GType;

external (cdecl) gtk_accessible_set_widget(arg0:Pointer[GtkAccessible], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_accessible_get_widget(arg0:Pointer[GtkAccessible]) : Pointer[GtkWidget];

external (cdecl) gtk_accessible_connect_widget_destroyed(arg0:Pointer[GtkAccessible]) : ;

alias GtkAction = Struct__GtkAction;

alias GtkActionClass = Struct__GtkActionClass;

alias Struct__GtkActionPrivate = Opaque;

alias GtkActionPrivate = Struct__GtkActionPrivate;

record Struct__GtkAction (
    object : GObject,
    private_data : Pointer[GtkActionPrivate],
);

record Struct__GtkActionClass (
    parent_class : GObjectClass,
    activate : CCodePointer[[Pointer[GtkAction]],[]],
    menu_item_type : GType,
    toolbar_item_type : GType,
    create_menu_item : CCodePointer[[Pointer[GtkAction]],[Pointer[GtkWidget]]],
    create_tool_item : CCodePointer[[Pointer[GtkAction]],[Pointer[GtkWidget]]],
    connect_proxy : CCodePointer[[Pointer[GtkAction], Pointer[GtkWidget]],[]],
    disconnect_proxy : CCodePointer[[Pointer[GtkAction], Pointer[GtkWidget]],[]],
    create_menu : CCodePointer[[Pointer[GtkAction]],[Pointer[GtkWidget]]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_action_get_type() : GType;

external (cdecl) gtk_action_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : Pointer[GtkAction];

external (cdecl) gtk_action_get_name(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_is_sensitive(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_get_sensitive(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_set_sensitive(arg0:Pointer[GtkAction], arg1:gboolean) : ;

external (cdecl) gtk_action_is_visible(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_get_visible(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_set_visible(arg0:Pointer[GtkAction], arg1:gboolean) : ;

external (cdecl) gtk_action_activate(arg0:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_create_icon(arg0:Pointer[GtkAction], arg1:GtkIconSize) : Pointer[GtkWidget];

external (cdecl) gtk_action_create_menu_item(arg0:Pointer[GtkAction]) : Pointer[GtkWidget];

external (cdecl) gtk_action_create_tool_item(arg0:Pointer[GtkAction]) : Pointer[GtkWidget];

external (cdecl) gtk_action_create_menu(arg0:Pointer[GtkAction]) : Pointer[GtkWidget];

external (cdecl) gtk_action_get_proxies(arg0:Pointer[GtkAction]) : Pointer[GSList];

external (cdecl) gtk_action_connect_accelerator(arg0:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_disconnect_accelerator(arg0:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_get_accel_path(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_get_accel_closure(arg0:Pointer[GtkAction]) : Pointer[GClosure];

external (cdecl) gtk_widget_get_action(arg0:Pointer[GtkWidget]) : Pointer[GtkAction];

external (cdecl) gtk_action_connect_proxy(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_action_disconnect_proxy(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_action_block_activate_from(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_action_unblock_activate_from(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_action_block_activate(arg0:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_unblock_activate(arg0:Pointer[GtkAction]) : ;

external (cdecl) _gtk_action_add_to_proxy_list(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_action_remove_from_proxy_list(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_action_emit_activate(arg0:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_set_accel_path(arg0:Pointer[GtkAction], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_set_accel_group(arg0:Pointer[GtkAction], arg1:Pointer[GtkAccelGroup]) : ;

external (cdecl) _gtk_action_sync_menu_visible(arg0:Pointer[GtkAction], arg1:Pointer[GtkWidget], arg2:gboolean) : ;

external (cdecl) gtk_action_set_label(arg0:Pointer[GtkAction], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_get_label(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_set_short_label(arg0:Pointer[GtkAction], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_get_short_label(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_set_tooltip(arg0:Pointer[GtkAction], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_get_tooltip(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_set_stock_id(arg0:Pointer[GtkAction], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_get_stock_id(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_set_gicon(arg0:Pointer[GtkAction], arg1:Pointer[GIcon]) : ;

external (cdecl) gtk_action_get_gicon(arg0:Pointer[GtkAction]) : Pointer[GIcon];

external (cdecl) gtk_action_set_icon_name(arg0:Pointer[GtkAction], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_get_icon_name(arg0:Pointer[GtkAction]) : Pointer[gchar];

external (cdecl) gtk_action_set_visible_horizontal(arg0:Pointer[GtkAction], arg1:gboolean) : ;

external (cdecl) gtk_action_get_visible_horizontal(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_set_visible_vertical(arg0:Pointer[GtkAction], arg1:gboolean) : ;

external (cdecl) gtk_action_get_visible_vertical(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_set_is_important(arg0:Pointer[GtkAction], arg1:gboolean) : ;

external (cdecl) gtk_action_get_is_important(arg0:Pointer[GtkAction]) : gboolean;

external (cdecl) gtk_action_set_always_show_image(arg0:Pointer[GtkAction], arg1:gboolean) : ;

external (cdecl) gtk_action_get_always_show_image(arg0:Pointer[GtkAction]) : gboolean;

alias GtkActionGroup = Struct__GtkActionGroup;

alias Struct__GtkActionGroupPrivate = Opaque;

alias GtkActionGroupPrivate = Struct__GtkActionGroupPrivate;

alias GtkActionGroupClass = Struct__GtkActionGroupClass;

alias GtkActionEntry = Struct__GtkActionEntry;

alias GtkToggleActionEntry = Struct__GtkToggleActionEntry;

alias GtkRadioActionEntry = Struct__GtkRadioActionEntry;

record Struct__GtkActionGroup (
    parent : GObject,
    private_data : Pointer[GtkActionGroupPrivate],
);

record Struct__GtkActionGroupClass (
    parent_class : GObjectClass,
    get_action : CCodePointer[[Pointer[GtkActionGroup], Pointer[gchar]],[Pointer[GtkAction]]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkActionEntry (
    name : Pointer[gchar],
    stock_id : Pointer[gchar],
    label : Pointer[gchar],
    accelerator : Pointer[gchar],
    tooltip : Pointer[gchar],
    callback : GCallback,
);

record Struct__GtkToggleActionEntry (
    name : Pointer[gchar],
    stock_id : Pointer[gchar],
    label : Pointer[gchar],
    accelerator : Pointer[gchar],
    tooltip : Pointer[gchar],
    callback : GCallback,
    is_active : gboolean,
);

record Struct__GtkRadioActionEntry (
    name : Pointer[gchar],
    stock_id : Pointer[gchar],
    label : Pointer[gchar],
    accelerator : Pointer[gchar],
    tooltip : Pointer[gchar],
    value : gint,
);

external (cdecl) gtk_action_group_get_type() : GType;

external (cdecl) gtk_action_group_new(arg0:Pointer[gchar]) : Pointer[GtkActionGroup];

external (cdecl) gtk_action_group_get_name(arg0:Pointer[GtkActionGroup]) : Pointer[gchar];

external (cdecl) gtk_action_group_get_sensitive(arg0:Pointer[GtkActionGroup]) : gboolean;

external (cdecl) gtk_action_group_set_sensitive(arg0:Pointer[GtkActionGroup], arg1:gboolean) : ;

external (cdecl) gtk_action_group_get_visible(arg0:Pointer[GtkActionGroup]) : gboolean;

external (cdecl) gtk_action_group_set_visible(arg0:Pointer[GtkActionGroup], arg1:gboolean) : ;

external (cdecl) gtk_action_group_get_action(arg0:Pointer[GtkActionGroup], arg1:Pointer[gchar]) : Pointer[GtkAction];

external (cdecl) gtk_action_group_list_actions(arg0:Pointer[GtkActionGroup]) : Pointer[GList];

external (cdecl) gtk_action_group_add_action(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_group_add_action_with_accel(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_action_group_remove_action(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction]) : ;

external (cdecl) gtk_action_group_add_actions(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkActionEntry], arg2:guint, arg3:gpointer) : ;

external (cdecl) gtk_action_group_add_toggle_actions(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkToggleActionEntry], arg2:guint, arg3:gpointer) : ;

external (cdecl) gtk_action_group_add_radio_actions(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkRadioActionEntry], arg2:guint, arg3:gint, arg4:GCallback, arg5:gpointer) : ;

external (cdecl) gtk_action_group_add_actions_full(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkActionEntry], arg2:guint, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_action_group_add_toggle_actions_full(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkToggleActionEntry], arg2:guint, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_action_group_add_radio_actions_full(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkRadioActionEntry], arg2:guint, arg3:gint, arg4:GCallback, arg5:gpointer, arg6:GDestroyNotify) : ;

external (cdecl) gtk_action_group_set_translate_func(arg0:Pointer[GtkActionGroup], arg1:GtkTranslateFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_action_group_set_translation_domain(arg0:Pointer[GtkActionGroup], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_action_group_translate_string(arg0:Pointer[GtkActionGroup], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) _gtk_action_group_emit_connect_proxy(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction], arg2:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_action_group_emit_disconnect_proxy(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction], arg2:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_action_group_emit_pre_activate(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction]) : ;

external (cdecl) _gtk_action_group_emit_post_activate(arg0:Pointer[GtkActionGroup], arg1:Pointer[GtkAction]) : ;

alias Struct__GtkActivatable = Opaque;

alias GtkActivatable = Struct__GtkActivatable;

alias GtkActivatableIface = Struct__GtkActivatableIface;

record Struct__GtkActivatableIface (
    g_iface : GTypeInterface,
    update : CCodePointer[[Pointer[GtkActivatable], Pointer[GtkAction], Pointer[gchar]],[]],
    sync_action_properties : CCodePointer[[Pointer[GtkActivatable], Pointer[GtkAction]],[]],
);

external (cdecl) gtk_activatable_get_type() : GType;

external (cdecl) gtk_activatable_sync_action_properties(arg0:Pointer[GtkActivatable], arg1:Pointer[GtkAction]) : ;

external (cdecl) gtk_activatable_set_related_action(arg0:Pointer[GtkActivatable], arg1:Pointer[GtkAction]) : ;

external (cdecl) gtk_activatable_get_related_action(arg0:Pointer[GtkActivatable]) : Pointer[GtkAction];

external (cdecl) gtk_activatable_set_use_action_appearance(arg0:Pointer[GtkActivatable], arg1:gboolean) : ;

external (cdecl) gtk_activatable_get_use_action_appearance(arg0:Pointer[GtkActivatable]) : gboolean;

external (cdecl) gtk_activatable_do_set_related_action(arg0:Pointer[GtkActivatable], arg1:Pointer[GtkAction]) : ;

alias GtkAlignment = Struct__GtkAlignment;

alias GtkAlignmentClass = Struct__GtkAlignmentClass;

alias Struct__GtkAlignmentPrivate = Opaque;

alias GtkAlignmentPrivate = Struct__GtkAlignmentPrivate;

record Struct__GtkAlignment (
    bin : GtkBin,
    xalign : gfloat,
    yalign : gfloat,
    xscale : gfloat,
    yscale : gfloat,
);

record Struct__GtkAlignmentClass (
    parent_class : GtkBinClass,
);

external (cdecl) gtk_alignment_get_type() : GType;

external (cdecl) gtk_alignment_new(arg0:gfloat, arg1:gfloat, arg2:gfloat, arg3:gfloat) : Pointer[GtkWidget];

external (cdecl) gtk_alignment_set(arg0:Pointer[GtkAlignment], arg1:gfloat, arg2:gfloat, arg3:gfloat, arg4:gfloat) : ;

external (cdecl) gtk_alignment_set_padding(arg0:Pointer[GtkAlignment], arg1:guint, arg2:guint, arg3:guint, arg4:guint) : ;

external (cdecl) gtk_alignment_get_padding(arg0:Pointer[GtkAlignment], arg1:Pointer[guint], arg2:Pointer[guint], arg3:Pointer[guint], arg4:Pointer[guint]) : ;

alias GtkArrow = Struct__GtkArrow;

alias GtkArrowClass = Struct__GtkArrowClass;

record Struct__GtkArrow (
    misc : GtkMisc,
    arrow_type : gint16,
    shadow_type : gint16,
);

record Struct__GtkArrowClass (
    parent_class : GtkMiscClass,
);

external (cdecl) gtk_arrow_get_type() : GType;

external (cdecl) gtk_arrow_new(arg0:GtkArrowType, arg1:GtkShadowType) : Pointer[GtkWidget];

external (cdecl) gtk_arrow_set(arg0:Pointer[GtkArrow], arg1:GtkArrowType, arg2:GtkShadowType) : ;

alias GtkFrame = Struct__GtkFrame;

alias GtkFrameClass = Struct__GtkFrameClass;

record Struct__GtkFrame (
    bin : GtkBin,
    label_widget : Pointer[GtkWidget],
    shadow_type : gint16,
    label_xalign : gfloat,
    label_yalign : gfloat,
    child_allocation : GtkAllocation,
);

record Struct__GtkFrameClass (
    parent_class : GtkBinClass,
    compute_child_allocation : CCodePointer[[Pointer[GtkFrame], Pointer[GtkAllocation]],[]],
);

external (cdecl) gtk_frame_get_type() : GType;

external (cdecl) gtk_frame_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_frame_set_label(arg0:Pointer[GtkFrame], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_frame_get_label(arg0:Pointer[GtkFrame]) : Pointer[gchar];

external (cdecl) gtk_frame_set_label_widget(arg0:Pointer[GtkFrame], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_frame_get_label_widget(arg0:Pointer[GtkFrame]) : Pointer[GtkWidget];

external (cdecl) gtk_frame_set_label_align(arg0:Pointer[GtkFrame], arg1:gfloat, arg2:gfloat) : ;

external (cdecl) gtk_frame_get_label_align(arg0:Pointer[GtkFrame], arg1:Pointer[gfloat], arg2:Pointer[gfloat]) : ;

external (cdecl) gtk_frame_set_shadow_type(arg0:Pointer[GtkFrame], arg1:GtkShadowType) : ;

external (cdecl) gtk_frame_get_shadow_type(arg0:Pointer[GtkFrame]) : GtkShadowType;

alias GtkAspectFrame = Struct__GtkAspectFrame;

alias GtkAspectFrameClass = Struct__GtkAspectFrameClass;

record Struct__GtkAspectFrame (
    frame : GtkFrame,
    xalign : gfloat,
    yalign : gfloat,
    ratio : gfloat,
    obey_child : gboolean,
    center_allocation : GtkAllocation,
);

record Struct__GtkAspectFrameClass (
    parent_class : GtkFrameClass,
);

external (cdecl) gtk_aspect_frame_get_type() : GType;

external (cdecl) gtk_aspect_frame_new(arg0:Pointer[gchar], arg1:gfloat, arg2:gfloat, arg3:gfloat, arg4:gboolean) : Pointer[GtkWidget];

external (cdecl) gtk_aspect_frame_set(arg0:Pointer[GtkAspectFrame], arg1:gfloat, arg2:gfloat, arg3:gfloat, arg4:gboolean) : ;


alias GtkAssistantPageType = CUInt;
alias GTK_ASSISTANT_PAGE_CONTENT = CUInt(0);
alias GTK_ASSISTANT_PAGE_INTRO = CUInt(1);
alias GTK_ASSISTANT_PAGE_CONFIRM = CUInt(2);
alias GTK_ASSISTANT_PAGE_SUMMARY = CUInt(3);
alias GTK_ASSISTANT_PAGE_PROGRESS = CUInt(4);

alias GtkAssistant = Struct__GtkAssistant;

alias Struct__GtkAssistantPrivate = Opaque;

alias GtkAssistantPrivate = Struct__GtkAssistantPrivate;

alias GtkAssistantClass = Struct__GtkAssistantClass;

record Struct__GtkAssistant (
    parent : GtkWindow,
    cancel : Pointer[GtkWidget],
    forward_ : Pointer[GtkWidget],
    back : Pointer[GtkWidget],
    apply : Pointer[GtkWidget],
    close : Pointer[GtkWidget],
    last : Pointer[GtkWidget],
    priv : Pointer[GtkAssistantPrivate],
);

record Struct__GtkAssistantClass (
    parent_class : GtkWindowClass,
    prepare : CCodePointer[[Pointer[GtkAssistant], Pointer[GtkWidget]],[]],
    apply : CCodePointer[[Pointer[GtkAssistant]],[]],
    close : CCodePointer[[Pointer[GtkAssistant]],[]],
    cancel : CCodePointer[[Pointer[GtkAssistant]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
);

alias GtkAssistantPageFunc = CCodePointer[[gint, gpointer],[gint]];

external (cdecl) gtk_assistant_get_type() : GType;

external (cdecl) gtk_assistant_new() : Pointer[GtkWidget];

external (cdecl) gtk_assistant_get_current_page(arg0:Pointer[GtkAssistant]) : gint;

external (cdecl) gtk_assistant_set_current_page(arg0:Pointer[GtkAssistant], arg1:gint) : ;

external (cdecl) gtk_assistant_get_n_pages(arg0:Pointer[GtkAssistant]) : gint;

external (cdecl) gtk_assistant_get_nth_page(arg0:Pointer[GtkAssistant], arg1:gint) : Pointer[GtkWidget];

external (cdecl) gtk_assistant_prepend_page(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_assistant_append_page(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_assistant_insert_page(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget], arg2:gint) : gint;

external (cdecl) gtk_assistant_set_forward_page_func(arg0:Pointer[GtkAssistant], arg1:GtkAssistantPageFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_assistant_set_page_type(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget], arg2:GtkAssistantPageType) : ;

external (cdecl) gtk_assistant_get_page_type(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : GtkAssistantPageType;

external (cdecl) gtk_assistant_set_page_title(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_assistant_get_page_title(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_assistant_set_page_header_image(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget], arg2:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_assistant_get_page_header_image(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : Pointer[GdkPixbuf];

external (cdecl) gtk_assistant_set_page_side_image(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget], arg2:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_assistant_get_page_side_image(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : Pointer[GdkPixbuf];

external (cdecl) gtk_assistant_set_page_complete(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget], arg2:gboolean) : ;

external (cdecl) gtk_assistant_get_page_complete(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_assistant_add_action_widget(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_assistant_remove_action_widget(arg0:Pointer[GtkAssistant], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_assistant_update_buttons_state(arg0:Pointer[GtkAssistant]) : ;

external (cdecl) gtk_assistant_commit(arg0:Pointer[GtkAssistant]) : ;

alias GtkBox = Struct__GtkBox;

alias GtkBoxClass = Struct__GtkBoxClass;

record Struct__GtkBox (
    container : GtkContainer,
    children : Pointer[GList],
    spacing : gint16,
    homogeneous : guint,
);

record Struct__GtkBoxClass (
    parent_class : GtkContainerClass,
);

alias GtkBoxChild = Struct__GtkBoxChild;

record Struct__GtkBoxChild (
    widget : Pointer[GtkWidget],
    padding : guint16,
    expand : guint,
    fill : guint,
    pack : guint,
    is_secondary : guint,
);

external (cdecl) gtk_box_get_type() : GType;

external (cdecl) _gtk_box_new(arg0:GtkOrientation, arg1:gboolean, arg2:gint) : Pointer[GtkWidget];

external (cdecl) gtk_box_pack_start(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget], arg2:gboolean, arg3:gboolean, arg4:guint) : ;

external (cdecl) gtk_box_pack_end(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget], arg2:gboolean, arg3:gboolean, arg4:guint) : ;

external (cdecl) gtk_box_pack_start_defaults(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_box_pack_end_defaults(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_box_set_homogeneous(arg0:Pointer[GtkBox], arg1:gboolean) : ;

external (cdecl) gtk_box_get_homogeneous(arg0:Pointer[GtkBox]) : gboolean;

external (cdecl) gtk_box_set_spacing(arg0:Pointer[GtkBox], arg1:gint) : ;

external (cdecl) gtk_box_get_spacing(arg0:Pointer[GtkBox]) : gint;

external (cdecl) gtk_box_reorder_child(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget], arg2:gint) : ;

external (cdecl) gtk_box_query_child_packing(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget], arg2:Pointer[gboolean], arg3:Pointer[gboolean], arg4:Pointer[guint], arg5:Pointer[GtkPackType]) : ;

external (cdecl) gtk_box_set_child_packing(arg0:Pointer[GtkBox], arg1:Pointer[GtkWidget], arg2:gboolean, arg3:gboolean, arg4:guint, arg5:GtkPackType) : ;

external (cdecl) _gtk_box_set_old_defaults(arg0:Pointer[GtkBox]) : ;

external (cdecl) _gtk_box_get_spacing_set(arg0:Pointer[GtkBox]) : gboolean;

external (cdecl) _gtk_box_set_spacing_set(arg0:Pointer[GtkBox], arg1:gboolean) : ;

alias GtkButtonBox = Struct__GtkButtonBox;

alias GtkButtonBoxClass = Struct__GtkButtonBoxClass;

record Struct__GtkButtonBox (
    box : GtkBox,
    child_min_width : gint,
    child_min_height : gint,
    child_ipad_x : gint,
    child_ipad_y : gint,
    layout_style : GtkButtonBoxStyle,
);

record Struct__GtkButtonBoxClass (
    parent_class : GtkBoxClass,
);

external (cdecl) gtk_button_box_get_type() : GType;

external (cdecl) gtk_button_box_get_layout(arg0:Pointer[GtkButtonBox]) : GtkButtonBoxStyle;

external (cdecl) gtk_button_box_set_layout(arg0:Pointer[GtkButtonBox], arg1:GtkButtonBoxStyle) : ;

external (cdecl) gtk_button_box_get_child_secondary(arg0:Pointer[GtkButtonBox], arg1:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_button_box_set_child_secondary(arg0:Pointer[GtkButtonBox], arg1:Pointer[GtkWidget], arg2:gboolean) : ;

external (cdecl) gtk_button_box_set_child_size(arg0:Pointer[GtkButtonBox], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_button_box_set_child_ipadding(arg0:Pointer[GtkButtonBox], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_button_box_get_child_size(arg0:Pointer[GtkButtonBox], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_button_box_get_child_ipadding(arg0:Pointer[GtkButtonBox], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) _gtk_button_box_child_requisition(arg0:Pointer[GtkWidget], arg1:Pointer[CInt], arg2:Pointer[CInt], arg3:Pointer[CInt], arg4:Pointer[CInt]) : ;

alias GtkBindingSet = Struct__GtkBindingSet;

alias GtkBindingEntry = Struct__GtkBindingEntry;

alias GtkBindingSignal = Struct__GtkBindingSignal;

alias GtkBindingArg = Struct__GtkBindingArg;

record Struct__GtkBindingSet (
    set_name : Pointer[gchar],
    priority : gint,
    widget_path_pspecs : Pointer[GSList],
    widget_class_pspecs : Pointer[GSList],
    class_branch_pspecs : Pointer[GSList],
    entries : Pointer[GtkBindingEntry],
    current : Pointer[GtkBindingEntry],
    parsed : guint,
);

record Struct__GtkBindingEntry (
    keyval : guint,
    modifiers : GdkModifierType,
    binding_set : Pointer[GtkBindingSet],
    destroyed : guint,
    in_emission : guint,
    marks_unbound : guint,
    set_next : Pointer[GtkBindingEntry],
    hash_next : Pointer[GtkBindingEntry],
    signals : Pointer[GtkBindingSignal],
);

record Struct__GtkBindingArg (
    arg_type : GType,
    d : Union_Unnamed3,
);

record Struct__GtkBindingSignal (
    next : Pointer[GtkBindingSignal],
    signal_name : Pointer[gchar],
    n_args : guint,
    args : Pointer[GtkBindingArg],
);

external (cdecl) gtk_binding_set_new(arg0:Pointer[gchar]) : Pointer[GtkBindingSet];

external (cdecl) gtk_binding_set_by_class(arg0:gpointer) : Pointer[GtkBindingSet];

external (cdecl) gtk_binding_set_find(arg0:Pointer[gchar]) : Pointer[GtkBindingSet];

external (cdecl) gtk_bindings_activate(arg0:Pointer[GtkObject], arg1:guint, arg2:GdkModifierType) : gboolean;

external (cdecl) gtk_bindings_activate_event(arg0:Pointer[GtkObject], arg1:Pointer[GdkEventKey]) : gboolean;

external (cdecl) gtk_binding_set_activate(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType, arg3:Pointer[GtkObject]) : gboolean;

external (cdecl) gtk_binding_entry_clear(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType) : ;

external (cdecl) gtk_binding_parse_binding(arg0:Pointer[GScanner]) : guint;

external (cdecl) gtk_binding_entry_skip(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType) : ;

external (cdecl) gtk_binding_entry_add_signal(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType, arg3:Pointer[gchar], arg4:guint, ..) : ;

external (cdecl) gtk_binding_entry_add_signall(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType, arg3:Pointer[gchar], arg4:Pointer[GSList]) : ;

external (cdecl) gtk_binding_entry_remove(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType) : ;

external (cdecl) gtk_binding_set_add_path(arg0:Pointer[GtkBindingSet], arg1:GtkPathType, arg2:Pointer[gchar], arg3:GtkPathPriorityType) : ;

external (cdecl) _gtk_binding_parse_binding(arg0:Pointer[GScanner]) : guint;

external (cdecl) _gtk_binding_reset_parsed() : ;

external (cdecl) _gtk_binding_entry_add_signall(arg0:Pointer[GtkBindingSet], arg1:guint, arg2:GdkModifierType, arg3:Pointer[gchar], arg4:Pointer[GSList]) : ;

alias GtkBuilder = Struct__GtkBuilder;

alias GtkBuilderClass = Struct__GtkBuilderClass;

alias Struct__GtkBuilderPrivate = Opaque;

alias GtkBuilderPrivate = Struct__GtkBuilderPrivate;


alias GtkBuilderError = CUInt;
alias GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = CUInt(0);
alias GTK_BUILDER_ERROR_UNHANDLED_TAG = CUInt(1);
alias GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = CUInt(2);
alias GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = CUInt(3);
alias GTK_BUILDER_ERROR_INVALID_TAG = CUInt(4);
alias GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = CUInt(5);
alias GTK_BUILDER_ERROR_INVALID_VALUE = CUInt(6);
alias GTK_BUILDER_ERROR_VERSION_MISMATCH = CUInt(7);
alias GTK_BUILDER_ERROR_DUPLICATE_ID = CUInt(8);

external (cdecl) gtk_builder_error_quark() : GQuark;

record Struct__GtkBuilder (
    parent_instance : GObject,
    priv : Pointer[GtkBuilderPrivate],
);

record Struct__GtkBuilderClass (
    parent_class : GObjectClass,
    get_type_from_name : CCodePointer[[Pointer[GtkBuilder], Pointer[CChar]],[GType]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
    _gtk_reserved7 : CCodePointer[[],[]],
    _gtk_reserved8 : CCodePointer[[],[]],
);

alias GtkBuilderConnectFunc = CCodePointer[[Pointer[GtkBuilder], Pointer[GObject], Pointer[gchar], Pointer[gchar], Pointer[GObject], GConnectFlags, gpointer],[]];

external (cdecl) gtk_builder_get_type() : GType;

external (cdecl) gtk_builder_new() : Pointer[GtkBuilder];

external (cdecl) gtk_builder_add_from_file(arg0:Pointer[GtkBuilder], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : guint;

external (cdecl) gtk_builder_add_from_string(arg0:Pointer[GtkBuilder], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[Pointer[GError]]) : guint;

external (cdecl) gtk_builder_add_objects_from_file(arg0:Pointer[GtkBuilder], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[GError]]) : guint;

external (cdecl) gtk_builder_add_objects_from_string(arg0:Pointer[GtkBuilder], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[Pointer[gchar]], arg4:Pointer[Pointer[GError]]) : guint;

external (cdecl) gtk_builder_get_object(arg0:Pointer[GtkBuilder], arg1:Pointer[gchar]) : Pointer[GObject];

external (cdecl) gtk_builder_get_objects(arg0:Pointer[GtkBuilder]) : Pointer[GSList];

external (cdecl) gtk_builder_connect_signals(arg0:Pointer[GtkBuilder], arg1:gpointer) : ;

external (cdecl) gtk_builder_connect_signals_full(arg0:Pointer[GtkBuilder], arg1:GtkBuilderConnectFunc, arg2:gpointer) : ;

external (cdecl) gtk_builder_set_translation_domain(arg0:Pointer[GtkBuilder], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_builder_get_translation_domain(arg0:Pointer[GtkBuilder]) : Pointer[gchar];

external (cdecl) gtk_builder_get_type_from_name(arg0:Pointer[GtkBuilder], arg1:Pointer[CChar]) : GType;

external (cdecl) gtk_builder_value_from_string(arg0:Pointer[GtkBuilder], arg1:Pointer[GParamSpec], arg2:Pointer[gchar], arg3:Pointer[GValue], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_builder_value_from_string_type(arg0:Pointer[GtkBuilder], arg1:GType, arg2:Pointer[gchar], arg3:Pointer[GValue], arg4:Pointer[Pointer[GError]]) : gboolean;

alias Struct__GtkBuildable = Opaque;

alias GtkBuildable = Struct__GtkBuildable;

alias GtkBuildableIface = Struct__GtkBuildableIface;

record Struct__GtkBuildableIface (
    g_iface : GTypeInterface,
    set_name : CCodePointer[[Pointer[GtkBuildable], Pointer[gchar]],[]],
    get_name : CCodePointer[[Pointer[GtkBuildable]],[Pointer[gchar]]],
    add_child : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[GObject], Pointer[gchar]],[]],
    set_buildable_property : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[gchar], Pointer[GValue]],[]],
    construct_child : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[gchar]],[Pointer[GObject]]],
    custom_tag_start : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[GObject], Pointer[gchar], Pointer[GMarkupParser], Pointer[gpointer]],[gboolean]],
    custom_tag_end : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[GObject], Pointer[gchar], Pointer[gpointer]],[]],
    custom_finished : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[GObject], Pointer[gchar], gpointer],[]],
    parser_finished : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder]],[]],
    get_internal_child : CCodePointer[[Pointer[GtkBuildable], Pointer[GtkBuilder], Pointer[gchar]],[Pointer[GObject]]],
);

external (cdecl) gtk_buildable_get_type() : GType;

external (cdecl) gtk_buildable_set_name(arg0:Pointer[GtkBuildable], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_buildable_get_name(arg0:Pointer[GtkBuildable]) : Pointer[gchar];

external (cdecl) gtk_buildable_add_child(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar]) : ;

external (cdecl) gtk_buildable_set_buildable_property(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[gchar], arg3:Pointer[GValue]) : ;

external (cdecl) gtk_buildable_construct_child(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[gchar]) : Pointer[GObject];

external (cdecl) gtk_buildable_custom_tag_start(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar], arg4:Pointer[GMarkupParser], arg5:Pointer[gpointer]) : gboolean;

external (cdecl) gtk_buildable_custom_tag_end(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar], arg4:Pointer[gpointer]) : ;

external (cdecl) gtk_buildable_custom_finished(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar], arg4:gpointer) : ;

external (cdecl) gtk_buildable_parser_finished(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder]) : ;

external (cdecl) gtk_buildable_get_internal_child(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[gchar]) : Pointer[GObject];

alias GtkImage = Struct__GtkImage;

alias GtkImageClass = Struct__GtkImageClass;

alias GtkImagePixmapData = Struct__GtkImagePixmapData;

alias GtkImageImageData = Struct__GtkImageImageData;

alias GtkImagePixbufData = Struct__GtkImagePixbufData;

alias GtkImageStockData = Struct__GtkImageStockData;

alias GtkImageIconSetData = Struct__GtkImageIconSetData;

alias GtkImageAnimationData = Struct__GtkImageAnimationData;

alias GtkImageIconNameData = Struct__GtkImageIconNameData;

alias GtkImageGIconData = Struct__GtkImageGIconData;

record Struct__GtkImagePixmapData (
    pixmap : Pointer[GdkPixmap],
);

record Struct__GtkImageImageData (
    image : Pointer[GdkImage],
);

record Struct__GtkImagePixbufData (
    pixbuf : Pointer[GdkPixbuf],
);

record Struct__GtkImageStockData (
    stock_id : Pointer[gchar],
);

record Struct__GtkImageIconSetData (
    icon_set : Pointer[GtkIconSet],
);

record Struct__GtkImageAnimationData (
    anim : Pointer[GdkPixbufAnimation],
    iter : Pointer[GdkPixbufAnimationIter],
    frame_timeout : guint,
);

record Struct__GtkImageIconNameData (
    icon_name : Pointer[gchar],
    pixbuf : Pointer[GdkPixbuf],
    theme_change_id : guint,
);

record Struct__GtkImageGIconData (
    icon : Pointer[GIcon],
    pixbuf : Pointer[GdkPixbuf],
    theme_change_id : guint,
);


alias GtkImageType = CUInt;
alias GTK_IMAGE_EMPTY = CUInt(0);
alias GTK_IMAGE_PIXMAP = CUInt(1);
alias GTK_IMAGE_IMAGE = CUInt(2);
alias GTK_IMAGE_PIXBUF = CUInt(3);
alias GTK_IMAGE_STOCK = CUInt(4);
alias GTK_IMAGE_ICON_SET = CUInt(5);
alias GTK_IMAGE_ANIMATION = CUInt(6);
alias GTK_IMAGE_ICON_NAME = CUInt(7);
alias GTK_IMAGE_GICON = CUInt(8);

record Struct__GtkImage (
    misc : GtkMisc,
    storage_type : GtkImageType,
    data : Union_Unnamed4,
    mask : Pointer[GdkBitmap],
    icon_size : GtkIconSize,
);

record Struct__GtkImageClass (
    parent_class : GtkMiscClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_image_get_type() : GType;

external (cdecl) gtk_image_new() : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_pixmap(arg0:Pointer[GdkPixmap], arg1:Pointer[GdkBitmap]) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_image(arg0:Pointer[GdkImage], arg1:Pointer[GdkBitmap]) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_file(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_pixbuf(arg0:Pointer[GdkPixbuf]) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_stock(arg0:Pointer[gchar], arg1:GtkIconSize) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_icon_set(arg0:Pointer[GtkIconSet], arg1:GtkIconSize) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_animation(arg0:Pointer[GdkPixbufAnimation]) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_icon_name(arg0:Pointer[gchar], arg1:GtkIconSize) : Pointer[GtkWidget];

external (cdecl) gtk_image_new_from_gicon(arg0:Pointer[GIcon], arg1:GtkIconSize) : Pointer[GtkWidget];

external (cdecl) gtk_image_clear(arg0:Pointer[GtkImage]) : ;

external (cdecl) gtk_image_set_from_pixmap(arg0:Pointer[GtkImage], arg1:Pointer[GdkPixmap], arg2:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_image_set_from_image(arg0:Pointer[GtkImage], arg1:Pointer[GdkImage], arg2:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_image_set_from_file(arg0:Pointer[GtkImage], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_image_set_from_pixbuf(arg0:Pointer[GtkImage], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_image_set_from_stock(arg0:Pointer[GtkImage], arg1:Pointer[gchar], arg2:GtkIconSize) : ;

external (cdecl) gtk_image_set_from_icon_set(arg0:Pointer[GtkImage], arg1:Pointer[GtkIconSet], arg2:GtkIconSize) : ;

external (cdecl) gtk_image_set_from_animation(arg0:Pointer[GtkImage], arg1:Pointer[GdkPixbufAnimation]) : ;

external (cdecl) gtk_image_set_from_icon_name(arg0:Pointer[GtkImage], arg1:Pointer[gchar], arg2:GtkIconSize) : ;

external (cdecl) gtk_image_set_from_gicon(arg0:Pointer[GtkImage], arg1:Pointer[GIcon], arg2:GtkIconSize) : ;

external (cdecl) gtk_image_set_pixel_size(arg0:Pointer[GtkImage], arg1:gint) : ;

external (cdecl) gtk_image_get_storage_type(arg0:Pointer[GtkImage]) : GtkImageType;

external (cdecl) gtk_image_get_pixmap(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[GdkPixmap]], arg2:Pointer[Pointer[GdkBitmap]]) : ;

external (cdecl) gtk_image_get_image(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[GdkImage]], arg2:Pointer[Pointer[GdkBitmap]]) : ;

external (cdecl) gtk_image_get_pixbuf(arg0:Pointer[GtkImage]) : Pointer[GdkPixbuf];

external (cdecl) gtk_image_get_stock(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[gchar]], arg2:Pointer[GtkIconSize]) : ;

external (cdecl) gtk_image_get_icon_set(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[GtkIconSet]], arg2:Pointer[GtkIconSize]) : ;

external (cdecl) gtk_image_get_animation(arg0:Pointer[GtkImage]) : Pointer[GdkPixbufAnimation];

external (cdecl) gtk_image_get_icon_name(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[gchar]], arg2:Pointer[GtkIconSize]) : ;

external (cdecl) gtk_image_get_gicon(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[GIcon]], arg2:Pointer[GtkIconSize]) : ;

external (cdecl) gtk_image_get_pixel_size(arg0:Pointer[GtkImage]) : gint;

external (cdecl) gtk_image_set(arg0:Pointer[GtkImage], arg1:Pointer[GdkImage], arg2:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_image_get(arg0:Pointer[GtkImage], arg1:Pointer[Pointer[GdkImage]], arg2:Pointer[Pointer[GdkBitmap]]) : ;

alias GtkButton = Struct__GtkButton;

alias GtkButtonClass = Struct__GtkButtonClass;

record Struct__GtkButton (
    bin : GtkBin,
    event_window : Pointer[GdkWindow],
    label_text : Pointer[gchar],
    activate_timeout : guint,
    constructed : guint,
    in_button : guint,
    button_down : guint,
    relief : guint,
    use_underline : guint,
    use_stock : guint,
    depressed : guint,
    depress_on_activate : guint,
    focus_on_click : guint,
);

record Struct__GtkButtonClass (
    parent_class : GtkBinClass,
    pressed : CCodePointer[[Pointer[GtkButton]],[]],
    released : CCodePointer[[Pointer[GtkButton]],[]],
    clicked : CCodePointer[[Pointer[GtkButton]],[]],
    enter : CCodePointer[[Pointer[GtkButton]],[]],
    leave : CCodePointer[[Pointer[GtkButton]],[]],
    activate : CCodePointer[[Pointer[GtkButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_button_get_type() : GType;

external (cdecl) gtk_button_new() : Pointer[GtkWidget];

external (cdecl) gtk_button_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_button_new_from_stock(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_button_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_button_pressed(arg0:Pointer[GtkButton]) : ;

external (cdecl) gtk_button_released(arg0:Pointer[GtkButton]) : ;

external (cdecl) gtk_button_clicked(arg0:Pointer[GtkButton]) : ;

external (cdecl) gtk_button_enter(arg0:Pointer[GtkButton]) : ;

external (cdecl) gtk_button_leave(arg0:Pointer[GtkButton]) : ;

external (cdecl) gtk_button_set_relief(arg0:Pointer[GtkButton], arg1:GtkReliefStyle) : ;

external (cdecl) gtk_button_get_relief(arg0:Pointer[GtkButton]) : GtkReliefStyle;

external (cdecl) gtk_button_set_label(arg0:Pointer[GtkButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_button_get_label(arg0:Pointer[GtkButton]) : Pointer[gchar];

external (cdecl) gtk_button_set_use_underline(arg0:Pointer[GtkButton], arg1:gboolean) : ;

external (cdecl) gtk_button_get_use_underline(arg0:Pointer[GtkButton]) : gboolean;

external (cdecl) gtk_button_set_use_stock(arg0:Pointer[GtkButton], arg1:gboolean) : ;

external (cdecl) gtk_button_get_use_stock(arg0:Pointer[GtkButton]) : gboolean;

external (cdecl) gtk_button_set_focus_on_click(arg0:Pointer[GtkButton], arg1:gboolean) : ;

external (cdecl) gtk_button_get_focus_on_click(arg0:Pointer[GtkButton]) : gboolean;

external (cdecl) gtk_button_set_alignment(arg0:Pointer[GtkButton], arg1:gfloat, arg2:gfloat) : ;

external (cdecl) gtk_button_get_alignment(arg0:Pointer[GtkButton], arg1:Pointer[gfloat], arg2:Pointer[gfloat]) : ;

external (cdecl) gtk_button_set_image(arg0:Pointer[GtkButton], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_button_get_image(arg0:Pointer[GtkButton]) : Pointer[GtkWidget];

external (cdecl) gtk_button_set_image_position(arg0:Pointer[GtkButton], arg1:GtkPositionType) : ;

external (cdecl) gtk_button_get_image_position(arg0:Pointer[GtkButton]) : GtkPositionType;

external (cdecl) gtk_button_get_event_window(arg0:Pointer[GtkButton]) : Pointer[GdkWindow];

external (cdecl) _gtk_button_set_depressed(arg0:Pointer[GtkButton], arg1:gboolean) : ;

external (cdecl) _gtk_button_paint(arg0:Pointer[GtkButton], arg1:Pointer[GdkRectangle], arg2:GtkStateType, arg3:GtkShadowType, arg4:Pointer[gchar], arg5:Pointer[gchar]) : ;

external (cdecl) gtk_marshal_BOOLEAN__VOID(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_BOOLEAN__POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_BOOLEAN__POINTER_INT_INT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_ENUM__ENUM(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_INT__POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_INT__POINTER_CHAR_CHAR(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__ENUM_FLOAT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__INT_INT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__INT_INT_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_INT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_POINTER_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_STRING_STRING(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_UINT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_UINT_ENUM(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_POINTER_UINT_UINT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__POINTER_UINT_UINT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__STRING_INT_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_marshal_VOID__UINT_STRING(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) gtk_signal_newv(arg0:Pointer[gchar], arg1:GtkSignalRunType, arg2:GType, arg3:guint, arg4:GSignalCMarshaller, arg5:GType, arg6:guint, arg7:Pointer[GType]) : guint;

external (cdecl) gtk_signal_new(arg0:Pointer[gchar], arg1:GtkSignalRunType, arg2:GType, arg3:guint, arg4:GSignalCMarshaller, arg5:GType, arg6:guint, ..) : guint;

external (cdecl) gtk_signal_emit_stop_by_name(arg0:Pointer[GtkObject], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_signal_connect_object_while_alive(arg0:Pointer[GtkObject], arg1:Pointer[gchar], arg2:GCallback, arg3:Pointer[GtkObject]) : ;

external (cdecl) gtk_signal_connect_while_alive(arg0:Pointer[GtkObject], arg1:Pointer[gchar], arg2:GCallback, arg3:gpointer, arg4:Pointer[GtkObject]) : ;

external (cdecl) gtk_signal_connect_full(arg0:Pointer[GtkObject], arg1:Pointer[gchar], arg2:GCallback, arg3:GtkCallbackMarshal, arg4:gpointer, arg5:GDestroyNotify, arg6:gint, arg7:gint) : gulong;

external (cdecl) gtk_signal_emitv(arg0:Pointer[GtkObject], arg1:guint, arg2:Pointer[GtkArg]) : ;

external (cdecl) gtk_signal_emit(arg0:Pointer[GtkObject], arg1:guint, ..) : ;

external (cdecl) gtk_signal_emit_by_name(arg0:Pointer[GtkObject], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_signal_emitv_by_name(arg0:Pointer[GtkObject], arg1:Pointer[gchar], arg2:Pointer[GtkArg]) : ;

external (cdecl) gtk_signal_compat_matched(arg0:Pointer[GtkObject], arg1:GCallback, arg2:gpointer, arg3:GSignalMatchType, arg4:guint) : ;

alias GtkCalendar = Struct__GtkCalendar;

alias GtkCalendarClass = Struct__GtkCalendarClass;

alias Struct__GtkCalendarPrivate = Opaque;

alias GtkCalendarPrivate = Struct__GtkCalendarPrivate;


alias GtkCalendarDisplayOptions = CUInt;
alias GTK_CALENDAR_SHOW_HEADING = CUInt(1);
alias GTK_CALENDAR_SHOW_DAY_NAMES = CUInt(2);
alias GTK_CALENDAR_NO_MONTH_CHANGE = CUInt(4);
alias GTK_CALENDAR_SHOW_WEEK_NUMBERS = CUInt(8);
alias GTK_CALENDAR_WEEK_START_MONDAY = CUInt(16);
alias GTK_CALENDAR_SHOW_DETAILS = CUInt(32);

alias GtkCalendarDetailFunc = CCodePointer[[Pointer[GtkCalendar], guint, guint, guint, gpointer],[Pointer[gchar]]];

record Struct__GtkCalendar (
    widget : GtkWidget,
    header_style : Pointer[GtkStyle],
    label_style : Pointer[GtkStyle],
    month : gint,
    year : gint,
    selected_day : gint,
    day_month : Array[Array[gint, 7], 6],
    day : Array[Array[gint, 7], 6],
    num_marked_dates : gint,
    marked_date : Array[gint, 31],
    display_flags : GtkCalendarDisplayOptions,
    marked_date_color : Array[GdkColor, 31],
    gc : Pointer[GdkGC],
    xor_gc : Pointer[GdkGC],
    focus_row : gint,
    focus_col : gint,
    highlight_row : gint,
    highlight_col : gint,
    priv : Pointer[GtkCalendarPrivate],
    grow_space : Array[gchar, 32],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkCalendarClass (
    parent_class : GtkWidgetClass,
    month_changed : CCodePointer[[Pointer[GtkCalendar]],[]],
    day_selected : CCodePointer[[Pointer[GtkCalendar]],[]],
    day_selected_double_click : CCodePointer[[Pointer[GtkCalendar]],[]],
    prev_month : CCodePointer[[Pointer[GtkCalendar]],[]],
    next_month : CCodePointer[[Pointer[GtkCalendar]],[]],
    prev_year : CCodePointer[[Pointer[GtkCalendar]],[]],
    next_year : CCodePointer[[Pointer[GtkCalendar]],[]],
);

external (cdecl) gtk_calendar_get_type() : GType;

external (cdecl) gtk_calendar_new() : Pointer[GtkWidget];

external (cdecl) gtk_calendar_select_month(arg0:Pointer[GtkCalendar], arg1:guint, arg2:guint) : gboolean;

external (cdecl) gtk_calendar_select_day(arg0:Pointer[GtkCalendar], arg1:guint) : ;

external (cdecl) gtk_calendar_mark_day(arg0:Pointer[GtkCalendar], arg1:guint) : gboolean;

external (cdecl) gtk_calendar_unmark_day(arg0:Pointer[GtkCalendar], arg1:guint) : gboolean;

external (cdecl) gtk_calendar_clear_marks(arg0:Pointer[GtkCalendar]) : ;

external (cdecl) gtk_calendar_set_display_options(arg0:Pointer[GtkCalendar], arg1:GtkCalendarDisplayOptions) : ;

external (cdecl) gtk_calendar_get_display_options(arg0:Pointer[GtkCalendar]) : GtkCalendarDisplayOptions;

external (cdecl) gtk_calendar_display_options(arg0:Pointer[GtkCalendar], arg1:GtkCalendarDisplayOptions) : ;

external (cdecl) gtk_calendar_get_date(arg0:Pointer[GtkCalendar], arg1:Pointer[guint], arg2:Pointer[guint], arg3:Pointer[guint]) : ;

external (cdecl) gtk_calendar_set_detail_func(arg0:Pointer[GtkCalendar], arg1:GtkCalendarDetailFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_calendar_set_detail_width_chars(arg0:Pointer[GtkCalendar], arg1:gint) : ;

external (cdecl) gtk_calendar_set_detail_height_rows(arg0:Pointer[GtkCalendar], arg1:gint) : ;

external (cdecl) gtk_calendar_get_detail_width_chars(arg0:Pointer[GtkCalendar]) : gint;

external (cdecl) gtk_calendar_get_detail_height_rows(arg0:Pointer[GtkCalendar]) : gint;

external (cdecl) gtk_calendar_freeze(arg0:Pointer[GtkCalendar]) : ;

external (cdecl) gtk_calendar_thaw(arg0:Pointer[GtkCalendar]) : ;

alias Struct__GtkCellEditable = Opaque;

alias GtkCellEditable = Struct__GtkCellEditable;

alias GtkCellEditableIface = Struct__GtkCellEditableIface;

record Struct__GtkCellEditableIface (
    g_iface : GTypeInterface,
    editing_done : CCodePointer[[Pointer[GtkCellEditable]],[]],
    remove_widget : CCodePointer[[Pointer[GtkCellEditable]],[]],
    start_editing : CCodePointer[[Pointer[GtkCellEditable], Pointer[GdkEvent]],[]],
);

external (cdecl) gtk_cell_editable_get_type() : GType;

external (cdecl) gtk_cell_editable_start_editing(arg0:Pointer[GtkCellEditable], arg1:Pointer[GdkEvent]) : ;

external (cdecl) gtk_cell_editable_editing_done(arg0:Pointer[GtkCellEditable]) : ;

external (cdecl) gtk_cell_editable_remove_widget(arg0:Pointer[GtkCellEditable]) : ;


alias GtkCellRendererState = CUInt;
alias GTK_CELL_RENDERER_SELECTED = CUInt(1);
alias GTK_CELL_RENDERER_PRELIT = CUInt(2);
alias GTK_CELL_RENDERER_INSENSITIVE = CUInt(4);
alias GTK_CELL_RENDERER_SORTED = CUInt(8);
alias GTK_CELL_RENDERER_FOCUSED = CUInt(16);


alias GtkCellRendererMode = CUInt;
alias GTK_CELL_RENDERER_MODE_INERT = CUInt(0);
alias GTK_CELL_RENDERER_MODE_ACTIVATABLE = CUInt(1);
alias GTK_CELL_RENDERER_MODE_EDITABLE = CUInt(2);

alias GtkCellRenderer = Struct__GtkCellRenderer;

alias GtkCellRendererClass = Struct__GtkCellRendererClass;

record Struct__GtkCellRenderer (
    parent : GtkObject,
    xalign : gfloat,
    yalign : gfloat,
    width : gint,
    height : gint,
    xpad : guint16,
    ypad : guint16,
    mode : guint,
    visible : guint,
    is_expander : guint,
    is_expanded : guint,
    cell_background_set : guint,
    sensitive : guint,
    editing : guint,
);

record Struct__GtkCellRendererClass (
    parent_class : GtkObjectClass,
    get_size : CCodePointer[[Pointer[GtkCellRenderer], Pointer[GtkWidget], Pointer[GdkRectangle], Pointer[gint], Pointer[gint], Pointer[gint], Pointer[gint]],[]],
    render : CCodePointer[[Pointer[GtkCellRenderer], Pointer[GdkDrawable], Pointer[GtkWidget], Pointer[GdkRectangle], Pointer[GdkRectangle], Pointer[GdkRectangle], GtkCellRendererState],[]],
    activate : CCodePointer[[Pointer[GtkCellRenderer], Pointer[GdkEvent], Pointer[GtkWidget], Pointer[gchar], Pointer[GdkRectangle], Pointer[GdkRectangle], GtkCellRendererState],[gboolean]],
    start_editing : CCodePointer[[Pointer[GtkCellRenderer], Pointer[GdkEvent], Pointer[GtkWidget], Pointer[gchar], Pointer[GdkRectangle], Pointer[GdkRectangle], GtkCellRendererState],[Pointer[GtkCellEditable]]],
    editing_canceled : CCodePointer[[Pointer[GtkCellRenderer]],[]],
    editing_started : CCodePointer[[Pointer[GtkCellRenderer], Pointer[GtkCellEditable], Pointer[gchar]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_get_type() : GType;

external (cdecl) gtk_cell_renderer_get_size(arg0:Pointer[GtkCellRenderer], arg1:Pointer[GtkWidget], arg2:Pointer[GdkRectangle], arg3:Pointer[gint], arg4:Pointer[gint], arg5:Pointer[gint], arg6:Pointer[gint]) : ;

external (cdecl) gtk_cell_renderer_render(arg0:Pointer[GtkCellRenderer], arg1:Pointer[GdkWindow], arg2:Pointer[GtkWidget], arg3:Pointer[GdkRectangle], arg4:Pointer[GdkRectangle], arg5:Pointer[GdkRectangle], arg6:GtkCellRendererState) : ;

external (cdecl) gtk_cell_renderer_activate(arg0:Pointer[GtkCellRenderer], arg1:Pointer[GdkEvent], arg2:Pointer[GtkWidget], arg3:Pointer[gchar], arg4:Pointer[GdkRectangle], arg5:Pointer[GdkRectangle], arg6:GtkCellRendererState) : gboolean;

external (cdecl) gtk_cell_renderer_start_editing(arg0:Pointer[GtkCellRenderer], arg1:Pointer[GdkEvent], arg2:Pointer[GtkWidget], arg3:Pointer[gchar], arg4:Pointer[GdkRectangle], arg5:Pointer[GdkRectangle], arg6:GtkCellRendererState) : Pointer[GtkCellEditable];

external (cdecl) gtk_cell_renderer_set_fixed_size(arg0:Pointer[GtkCellRenderer], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_cell_renderer_get_fixed_size(arg0:Pointer[GtkCellRenderer], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_cell_renderer_set_alignment(arg0:Pointer[GtkCellRenderer], arg1:gfloat, arg2:gfloat) : ;

external (cdecl) gtk_cell_renderer_get_alignment(arg0:Pointer[GtkCellRenderer], arg1:Pointer[gfloat], arg2:Pointer[gfloat]) : ;

external (cdecl) gtk_cell_renderer_set_padding(arg0:Pointer[GtkCellRenderer], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_cell_renderer_get_padding(arg0:Pointer[GtkCellRenderer], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_cell_renderer_set_visible(arg0:Pointer[GtkCellRenderer], arg1:gboolean) : ;

external (cdecl) gtk_cell_renderer_get_visible(arg0:Pointer[GtkCellRenderer]) : gboolean;

external (cdecl) gtk_cell_renderer_set_sensitive(arg0:Pointer[GtkCellRenderer], arg1:gboolean) : ;

external (cdecl) gtk_cell_renderer_get_sensitive(arg0:Pointer[GtkCellRenderer]) : gboolean;

external (cdecl) gtk_cell_renderer_editing_canceled(arg0:Pointer[GtkCellRenderer]) : ;

external (cdecl) gtk_cell_renderer_stop_editing(arg0:Pointer[GtkCellRenderer], arg1:gboolean) : ;

alias GtkTreeIter = Struct__GtkTreeIter;

alias Struct__GtkTreePath = Opaque;

alias GtkTreePath = Struct__GtkTreePath;

alias Struct__GtkTreeRowReference = Opaque;

alias GtkTreeRowReference = Struct__GtkTreeRowReference;

alias Struct__GtkTreeModel = Opaque;

alias GtkTreeModel = Struct__GtkTreeModel;

alias GtkTreeModelIface = Struct__GtkTreeModelIface;

alias GtkTreeModelForeachFunc = CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath], Pointer[GtkTreeIter], gpointer],[gboolean]];


alias GtkTreeModelFlags = CUInt;
alias GTK_TREE_MODEL_ITERS_PERSIST = CUInt(1);
alias GTK_TREE_MODEL_LIST_ONLY = CUInt(2);

record Struct__GtkTreeIter (
    stamp : gint,
    user_data : gpointer,
    user_data2 : gpointer,
    user_data3 : gpointer,
);

record Struct__GtkTreeModelIface (
    g_iface : GTypeInterface,
    row_changed : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath], Pointer[GtkTreeIter]],[]],
    row_inserted : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath], Pointer[GtkTreeIter]],[]],
    row_has_child_toggled : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath], Pointer[GtkTreeIter]],[]],
    row_deleted : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath]],[]],
    rows_reordered : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath], Pointer[GtkTreeIter], Pointer[gint]],[]],
    get_flags : CCodePointer[[Pointer[GtkTreeModel]],[GtkTreeModelFlags]],
    get_n_columns : CCodePointer[[Pointer[GtkTreeModel]],[gint]],
    get_column_type : CCodePointer[[Pointer[GtkTreeModel], gint],[GType]],
    get_iter : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], Pointer[GtkTreePath]],[gboolean]],
    get_path : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[Pointer[GtkTreePath]]],
    get_value : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], gint, Pointer[GValue]],[]],
    iter_next : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[gboolean]],
    iter_children : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], Pointer[GtkTreeIter]],[gboolean]],
    iter_has_child : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[gboolean]],
    iter_n_children : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[gint]],
    iter_nth_child : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], Pointer[GtkTreeIter], gint],[gboolean]],
    iter_parent : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], Pointer[GtkTreeIter]],[gboolean]],
    ref_node : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[]],
    unref_node : CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[]],
);

external (cdecl) gtk_tree_path_new() : Pointer[GtkTreePath];

external (cdecl) gtk_tree_path_new_from_string(arg0:Pointer[gchar]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_path_new_from_indices(arg0:gint, ..) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_path_to_string(arg0:Pointer[GtkTreePath]) : Pointer[gchar];

external (cdecl) gtk_tree_path_new_first() : Pointer[GtkTreePath];

external (cdecl) gtk_tree_path_append_index(arg0:Pointer[GtkTreePath], arg1:gint) : ;

external (cdecl) gtk_tree_path_prepend_index(arg0:Pointer[GtkTreePath], arg1:gint) : ;

external (cdecl) gtk_tree_path_get_depth(arg0:Pointer[GtkTreePath]) : gint;

external (cdecl) gtk_tree_path_get_indices(arg0:Pointer[GtkTreePath]) : Pointer[gint];

external (cdecl) gtk_tree_path_get_indices_with_depth(arg0:Pointer[GtkTreePath], arg1:Pointer[gint]) : Pointer[gint];

external (cdecl) gtk_tree_path_free(arg0:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_path_copy(arg0:Pointer[GtkTreePath]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_path_get_type() : GType;

external (cdecl) gtk_tree_path_compare(arg0:Pointer[GtkTreePath], arg1:Pointer[GtkTreePath]) : gint;

external (cdecl) gtk_tree_path_next(arg0:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_path_prev(arg0:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_path_up(arg0:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_path_down(arg0:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_path_is_ancestor(arg0:Pointer[GtkTreePath], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_path_is_descendant(arg0:Pointer[GtkTreePath], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_row_reference_get_type() : GType;

external (cdecl) gtk_tree_row_reference_new(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath]) : Pointer[GtkTreeRowReference];

external (cdecl) gtk_tree_row_reference_new_proxy(arg0:Pointer[GObject], arg1:Pointer[GtkTreeModel], arg2:Pointer[GtkTreePath]) : Pointer[GtkTreeRowReference];

external (cdecl) gtk_tree_row_reference_get_path(arg0:Pointer[GtkTreeRowReference]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_row_reference_get_model(arg0:Pointer[GtkTreeRowReference]) : Pointer[GtkTreeModel];

external (cdecl) gtk_tree_row_reference_valid(arg0:Pointer[GtkTreeRowReference]) : gboolean;

external (cdecl) gtk_tree_row_reference_copy(arg0:Pointer[GtkTreeRowReference]) : Pointer[GtkTreeRowReference];

external (cdecl) gtk_tree_row_reference_free(arg0:Pointer[GtkTreeRowReference]) : ;

external (cdecl) gtk_tree_row_reference_inserted(arg0:Pointer[GObject], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_row_reference_deleted(arg0:Pointer[GObject], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_row_reference_reordered(arg0:Pointer[GObject], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeIter], arg3:Pointer[gint]) : ;

external (cdecl) gtk_tree_iter_copy(arg0:Pointer[GtkTreeIter]) : Pointer[GtkTreeIter];

external (cdecl) gtk_tree_iter_free(arg0:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_iter_get_type() : GType;

external (cdecl) gtk_tree_model_get_type() : GType;

external (cdecl) gtk_tree_model_get_flags(arg0:Pointer[GtkTreeModel]) : GtkTreeModelFlags;

external (cdecl) gtk_tree_model_get_n_columns(arg0:Pointer[GtkTreeModel]) : gint;

external (cdecl) gtk_tree_model_get_column_type(arg0:Pointer[GtkTreeModel], arg1:gint) : GType;

external (cdecl) gtk_tree_model_get_iter(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_model_get_iter_from_string(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:Pointer[gchar]) : gboolean;

external (cdecl) gtk_tree_model_get_string_from_iter(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : Pointer[gchar];

external (cdecl) gtk_tree_model_get_iter_first(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_get_path(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_model_get_value(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:gint, arg3:Pointer[GValue]) : ;

external (cdecl) gtk_tree_model_iter_next(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_iter_children(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_iter_has_child(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_iter_n_children(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : gint;

external (cdecl) gtk_tree_model_iter_nth_child(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter], arg3:gint) : gboolean;

external (cdecl) gtk_tree_model_iter_parent(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_ref_node(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_unref_node(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_get(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], ..) : ;

external (cdecl) gtk_tree_model_get_valist(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreeIter], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_tree_model_foreach(arg0:Pointer[GtkTreeModel], arg1:GtkTreeModelForeachFunc, arg2:gpointer) : ;

external (cdecl) gtk_tree_model_row_changed(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_row_inserted(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_row_has_child_toggled(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_row_deleted(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_model_rows_reordered(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeIter], arg3:Pointer[gint]) : ;


alias Struct__GtkTreeSortable = Opaque;

alias GtkTreeSortable = Struct__GtkTreeSortable;

alias GtkTreeSortableIface = Struct__GtkTreeSortableIface;

alias GtkTreeIterCompareFunc = CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], Pointer[GtkTreeIter], gpointer],[gint]];

record Struct__GtkTreeSortableIface (
    g_iface : GTypeInterface,
    sort_column_changed : CCodePointer[[Pointer[GtkTreeSortable]],[]],
    get_sort_column_id : CCodePointer[[Pointer[GtkTreeSortable], Pointer[gint], Pointer[GtkSortType]],[gboolean]],
    set_sort_column_id : CCodePointer[[Pointer[GtkTreeSortable], gint, GtkSortType],[]],
    set_sort_func : CCodePointer[[Pointer[GtkTreeSortable], gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify],[]],
    set_default_sort_func : CCodePointer[[Pointer[GtkTreeSortable], GtkTreeIterCompareFunc, gpointer, GDestroyNotify],[]],
    has_default_sort_func : CCodePointer[[Pointer[GtkTreeSortable]],[gboolean]],
);

external (cdecl) gtk_tree_sortable_get_type() : GType;

external (cdecl) gtk_tree_sortable_sort_column_changed(arg0:Pointer[GtkTreeSortable]) : ;

external (cdecl) gtk_tree_sortable_get_sort_column_id(arg0:Pointer[GtkTreeSortable], arg1:Pointer[gint], arg2:Pointer[GtkSortType]) : gboolean;

external (cdecl) gtk_tree_sortable_set_sort_column_id(arg0:Pointer[GtkTreeSortable], arg1:gint, arg2:GtkSortType) : ;

external (cdecl) gtk_tree_sortable_set_sort_func(arg0:Pointer[GtkTreeSortable], arg1:gint, arg2:GtkTreeIterCompareFunc, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_tree_sortable_set_default_sort_func(arg0:Pointer[GtkTreeSortable], arg1:GtkTreeIterCompareFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_sortable_has_default_sort_func(arg0:Pointer[GtkTreeSortable]) : gboolean;


alias GtkTreeViewColumnSizing = CUInt;
alias GTK_TREE_VIEW_COLUMN_GROW_ONLY = CUInt(0);
alias GTK_TREE_VIEW_COLUMN_AUTOSIZE = CUInt(1);
alias GTK_TREE_VIEW_COLUMN_FIXED = CUInt(2);

alias GtkTreeViewColumn = Struct__GtkTreeViewColumn;

alias GtkTreeViewColumnClass = Struct__GtkTreeViewColumnClass;

alias GtkTreeCellDataFunc = CCodePointer[[Pointer[GtkTreeViewColumn], Pointer[GtkCellRenderer], Pointer[GtkTreeModel], Pointer[GtkTreeIter], gpointer],[]];

record Struct__GtkTreeViewColumn (
    parent : GtkObject,
    tree_view : Pointer[GtkWidget],
    button : Pointer[GtkWidget],
    child : Pointer[GtkWidget],
    arrow : Pointer[GtkWidget],
    alignment : Pointer[GtkWidget],
    window : Pointer[GdkWindow],
    editable_widget : Pointer[GtkCellEditable],
    xalign : gfloat,
    property_changed_signal : guint,
    spacing : gint,
    column_type : GtkTreeViewColumnSizing,
    requested_width : gint,
    button_request : gint,
    resized_width : gint,
    width : gint,
    fixed_width : gint,
    min_width : gint,
    max_width : gint,
    drag_x : gint,
    drag_y : gint,
    title : Pointer[gchar],
    cell_list : Pointer[GList],
    sort_clicked_signal : guint,
    sort_column_changed_signal : guint,
    sort_column_id : gint,
    sort_order : GtkSortType,
    visible : guint,
    resizable : guint,
    clickable : guint,
    dirty : guint,
    show_sort_indicator : guint,
    maybe_reordered : guint,
    reorderable : guint,
    use_resized_width : guint,
    expand : guint,
);

record Struct__GtkTreeViewColumnClass (
    parent_class : GtkObjectClass,
    clicked : CCodePointer[[Pointer[GtkTreeViewColumn]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tree_view_column_get_type() : GType;

external (cdecl) gtk_tree_view_column_new() : Pointer[GtkTreeViewColumn];

external (cdecl) gtk_tree_view_column_new_with_attributes(arg0:Pointer[gchar], arg1:Pointer[GtkCellRenderer], ..) : Pointer[GtkTreeViewColumn];

external (cdecl) gtk_tree_view_column_pack_start(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer], arg2:gboolean) : ;

external (cdecl) gtk_tree_view_column_pack_end(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer], arg2:gboolean) : ;

external (cdecl) gtk_tree_view_column_clear(arg0:Pointer[GtkTreeViewColumn]) : ;

external (cdecl) gtk_tree_view_column_get_cell_renderers(arg0:Pointer[GtkTreeViewColumn]) : Pointer[GList];

external (cdecl) gtk_tree_view_column_add_attribute(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer], arg2:Pointer[gchar], arg3:gint) : ;

external (cdecl) gtk_tree_view_column_set_attributes(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer], ..) : ;

external (cdecl) gtk_tree_view_column_set_cell_data_func(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer], arg2:GtkTreeCellDataFunc, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_tree_view_column_clear_attributes(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer]) : ;

external (cdecl) gtk_tree_view_column_set_spacing(arg0:Pointer[GtkTreeViewColumn], arg1:gint) : ;

external (cdecl) gtk_tree_view_column_get_spacing(arg0:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_column_set_visible(arg0:Pointer[GtkTreeViewColumn], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_column_get_visible(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_set_resizable(arg0:Pointer[GtkTreeViewColumn], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_column_get_resizable(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_set_sizing(arg0:Pointer[GtkTreeViewColumn], arg1:GtkTreeViewColumnSizing) : ;

external (cdecl) gtk_tree_view_column_get_sizing(arg0:Pointer[GtkTreeViewColumn]) : GtkTreeViewColumnSizing;

external (cdecl) gtk_tree_view_column_get_width(arg0:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_column_get_fixed_width(arg0:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_column_set_fixed_width(arg0:Pointer[GtkTreeViewColumn], arg1:gint) : ;

external (cdecl) gtk_tree_view_column_set_min_width(arg0:Pointer[GtkTreeViewColumn], arg1:gint) : ;

external (cdecl) gtk_tree_view_column_get_min_width(arg0:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_column_set_max_width(arg0:Pointer[GtkTreeViewColumn], arg1:gint) : ;

external (cdecl) gtk_tree_view_column_get_max_width(arg0:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_column_clicked(arg0:Pointer[GtkTreeViewColumn]) : ;

external (cdecl) gtk_tree_view_column_set_title(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tree_view_column_get_title(arg0:Pointer[GtkTreeViewColumn]) : Pointer[gchar];

external (cdecl) gtk_tree_view_column_set_expand(arg0:Pointer[GtkTreeViewColumn], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_column_get_expand(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_set_clickable(arg0:Pointer[GtkTreeViewColumn], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_column_get_clickable(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_set_widget(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tree_view_column_get_widget(arg0:Pointer[GtkTreeViewColumn]) : Pointer[GtkWidget];

external (cdecl) gtk_tree_view_column_set_alignment(arg0:Pointer[GtkTreeViewColumn], arg1:gfloat) : ;

external (cdecl) gtk_tree_view_column_get_alignment(arg0:Pointer[GtkTreeViewColumn]) : gfloat;

external (cdecl) gtk_tree_view_column_set_reorderable(arg0:Pointer[GtkTreeViewColumn], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_column_get_reorderable(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_set_sort_column_id(arg0:Pointer[GtkTreeViewColumn], arg1:gint) : ;

external (cdecl) gtk_tree_view_column_get_sort_column_id(arg0:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_column_set_sort_indicator(arg0:Pointer[GtkTreeViewColumn], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_column_get_sort_indicator(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_set_sort_order(arg0:Pointer[GtkTreeViewColumn], arg1:GtkSortType) : ;

external (cdecl) gtk_tree_view_column_get_sort_order(arg0:Pointer[GtkTreeViewColumn]) : GtkSortType;

external (cdecl) gtk_tree_view_column_cell_set_cell_data(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkTreeModel], arg2:Pointer[GtkTreeIter], arg3:gboolean, arg4:gboolean) : ;

external (cdecl) gtk_tree_view_column_cell_get_size(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GdkRectangle], arg2:Pointer[gint], arg3:Pointer[gint], arg4:Pointer[gint], arg5:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_column_cell_is_visible(arg0:Pointer[GtkTreeViewColumn]) : gboolean;

external (cdecl) gtk_tree_view_column_focus_cell(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer]) : ;

external (cdecl) gtk_tree_view_column_cell_get_position(arg0:Pointer[GtkTreeViewColumn], arg1:Pointer[GtkCellRenderer], arg2:Pointer[gint], arg3:Pointer[gint]) : gboolean;

external (cdecl) gtk_tree_view_column_queue_resize(arg0:Pointer[GtkTreeViewColumn]) : ;

external (cdecl) gtk_tree_view_column_get_tree_view(arg0:Pointer[GtkTreeViewColumn]) : Pointer[GtkWidget];

alias Struct__GtkCellLayout = Opaque;

alias GtkCellLayout = Struct__GtkCellLayout;

alias GtkCellLayoutIface = Struct__GtkCellLayoutIface;

alias GtkCellLayoutDataFunc = CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer], Pointer[GtkTreeModel], Pointer[GtkTreeIter], gpointer],[]];

record Struct__GtkCellLayoutIface (
    g_iface : GTypeInterface,
    pack_start : CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer], gboolean],[]],
    pack_end : CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer], gboolean],[]],
    clear : CCodePointer[[Pointer[GtkCellLayout]],[]],
    add_attribute : CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer], Pointer[gchar], gint],[]],
    set_cell_data_func : CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer], GtkCellLayoutDataFunc, gpointer, GDestroyNotify],[]],
    clear_attributes : CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer]],[]],
    reorder : CCodePointer[[Pointer[GtkCellLayout], Pointer[GtkCellRenderer], gint],[]],
    get_cells : CCodePointer[[Pointer[GtkCellLayout]],[Pointer[GList]]],
);

external (cdecl) gtk_cell_layout_get_type() : GType;

external (cdecl) gtk_cell_layout_pack_start(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer], arg2:gboolean) : ;

external (cdecl) gtk_cell_layout_pack_end(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer], arg2:gboolean) : ;

external (cdecl) gtk_cell_layout_get_cells(arg0:Pointer[GtkCellLayout]) : Pointer[GList];

external (cdecl) gtk_cell_layout_clear(arg0:Pointer[GtkCellLayout]) : ;

external (cdecl) gtk_cell_layout_set_attributes(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer], ..) : ;

external (cdecl) gtk_cell_layout_add_attribute(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer], arg2:Pointer[gchar], arg3:gint) : ;

external (cdecl) gtk_cell_layout_set_cell_data_func(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer], arg2:GtkCellLayoutDataFunc, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_cell_layout_clear_attributes(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer]) : ;

external (cdecl) gtk_cell_layout_reorder(arg0:Pointer[GtkCellLayout], arg1:Pointer[GtkCellRenderer], arg2:gint) : ;

external (cdecl) _gtk_cell_layout_buildable_custom_tag_start(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar], arg4:Pointer[GMarkupParser], arg5:Pointer[gpointer]) : gboolean;

external (cdecl) _gtk_cell_layout_buildable_custom_tag_end(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar], arg4:Pointer[gpointer]) : ;

external (cdecl) _gtk_cell_layout_buildable_add_child(arg0:Pointer[GtkBuildable], arg1:Pointer[GtkBuilder], arg2:Pointer[GObject], arg3:Pointer[gchar]) : ;

alias GtkCellRendererText = Struct__GtkCellRendererText;

alias GtkCellRendererTextClass = Struct__GtkCellRendererTextClass;

record Struct__GtkCellRendererText (
    parent : GtkCellRenderer,
    text : Pointer[gchar],
    font : Pointer[PangoFontDescription],
    font_scale : gdouble,
    foreground : PangoColor,
    background : PangoColor,
    extra_attrs : Pointer[PangoAttrList],
    underline_style : PangoUnderline,
    rise : gint,
    fixed_height_rows : gint,
    strikethrough : guint,
    editable : guint,
    scale_set : guint,
    foreground_set : guint,
    background_set : guint,
    underline_set : guint,
    rise_set : guint,
    strikethrough_set : guint,
    editable_set : guint,
    calc_fixed_height : guint,
);

record Struct__GtkCellRendererTextClass (
    parent_class : GtkCellRendererClass,
    edited : CCodePointer[[Pointer[GtkCellRendererText], Pointer[gchar], Pointer[gchar]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_text_get_type() : GType;

external (cdecl) gtk_cell_renderer_text_new() : Pointer[GtkCellRenderer];

external (cdecl) gtk_cell_renderer_text_set_fixed_height_from_font(arg0:Pointer[GtkCellRendererText], arg1:gint) : ;

alias GtkCellRendererAccel = Struct__GtkCellRendererAccel;

alias GtkCellRendererAccelClass = Struct__GtkCellRendererAccelClass;


alias GtkCellRendererAccelMode = CUInt;
alias GTK_CELL_RENDERER_ACCEL_MODE_GTK = CUInt(0);
alias GTK_CELL_RENDERER_ACCEL_MODE_OTHER = CUInt(1);

record Struct__GtkCellRendererAccel (
    parent : GtkCellRendererText,
    accel_key : guint,
    accel_mods : GdkModifierType,
    keycode : guint,
    accel_mode : GtkCellRendererAccelMode,
    edit_widget : Pointer[GtkWidget],
    grab_widget : Pointer[GtkWidget],
    sizing_label : Pointer[GtkWidget],
);

record Struct__GtkCellRendererAccelClass (
    parent_class : GtkCellRendererTextClass,
    accel_edited : CCodePointer[[Pointer[GtkCellRendererAccel], Pointer[gchar], guint, GdkModifierType, guint],[]],
    accel_cleared : CCodePointer[[Pointer[GtkCellRendererAccel], Pointer[gchar]],[]],
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_accel_get_type() : GType;

external (cdecl) gtk_cell_renderer_accel_new() : Pointer[GtkCellRenderer];

alias GtkCellRendererCombo = Struct__GtkCellRendererCombo;

alias GtkCellRendererComboClass = Struct__GtkCellRendererComboClass;

record Struct__GtkCellRendererCombo (
    parent : GtkCellRendererText,
    model : Pointer[GtkTreeModel],
    text_column : gint,
    has_entry : gboolean,
    focus_out_id : guint,
);

record Struct__GtkCellRendererComboClass (
    parent : GtkCellRendererTextClass,
);

external (cdecl) gtk_cell_renderer_combo_get_type() : GType;

external (cdecl) gtk_cell_renderer_combo_new() : Pointer[GtkCellRenderer];

alias GtkCellRendererPixbuf = Struct__GtkCellRendererPixbuf;

alias GtkCellRendererPixbufClass = Struct__GtkCellRendererPixbufClass;

record Struct__GtkCellRendererPixbuf (
    parent : GtkCellRenderer,
    pixbuf : Pointer[GdkPixbuf],
    pixbuf_expander_open : Pointer[GdkPixbuf],
    pixbuf_expander_closed : Pointer[GdkPixbuf],
);

record Struct__GtkCellRendererPixbufClass (
    parent_class : GtkCellRendererClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_pixbuf_get_type() : GType;

external (cdecl) gtk_cell_renderer_pixbuf_new() : Pointer[GtkCellRenderer];

alias GtkCellRendererProgress = Struct__GtkCellRendererProgress;

alias GtkCellRendererProgressClass = Struct__GtkCellRendererProgressClass;

alias Struct__GtkCellRendererProgressPrivate = Opaque;

alias GtkCellRendererProgressPrivate = Struct__GtkCellRendererProgressPrivate;

record Struct__GtkCellRendererProgress (
    parent_instance : GtkCellRenderer,
    priv : Pointer[GtkCellRendererProgressPrivate],
);

record Struct__GtkCellRendererProgressClass (
    parent_class : GtkCellRendererClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_progress_get_type() : GType;

external (cdecl) gtk_cell_renderer_progress_new() : Pointer[GtkCellRenderer];

alias GtkCellRendererSpin = Struct__GtkCellRendererSpin;

alias GtkCellRendererSpinClass = Struct__GtkCellRendererSpinClass;

alias Struct__GtkCellRendererSpinPrivate = Opaque;

alias GtkCellRendererSpinPrivate = Struct__GtkCellRendererSpinPrivate;

record Struct__GtkCellRendererSpin (
    parent : GtkCellRendererText,
);

record Struct__GtkCellRendererSpinClass (
    parent : GtkCellRendererTextClass,
);

external (cdecl) gtk_cell_renderer_spin_get_type() : GType;

external (cdecl) gtk_cell_renderer_spin_new() : Pointer[GtkCellRenderer];

alias GtkCellRendererSpinner = Struct__GtkCellRendererSpinner;

alias GtkCellRendererSpinnerClass = Struct__GtkCellRendererSpinnerClass;

alias Struct__GtkCellRendererSpinnerPrivate = Opaque;

alias GtkCellRendererSpinnerPrivate = Struct__GtkCellRendererSpinnerPrivate;

record Struct__GtkCellRendererSpinner (
    parent : GtkCellRenderer,
    priv : Pointer[GtkCellRendererSpinnerPrivate],
);

record Struct__GtkCellRendererSpinnerClass (
    parent_class : GtkCellRendererClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_spinner_get_type() : GType;

external (cdecl) gtk_cell_renderer_spinner_new() : Pointer[GtkCellRenderer];

alias GtkCellRendererToggle = Struct__GtkCellRendererToggle;

alias GtkCellRendererToggleClass = Struct__GtkCellRendererToggleClass;

record Struct__GtkCellRendererToggle (
    parent : GtkCellRenderer,
    active : guint,
    activatable : guint,
    radio : guint,
);

record Struct__GtkCellRendererToggleClass (
    parent_class : GtkCellRendererClass,
    toggled : CCodePointer[[Pointer[GtkCellRendererToggle], Pointer[gchar]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_cell_renderer_toggle_get_type() : GType;

external (cdecl) gtk_cell_renderer_toggle_new() : Pointer[GtkCellRenderer];

external (cdecl) gtk_cell_renderer_toggle_get_radio(arg0:Pointer[GtkCellRendererToggle]) : gboolean;

external (cdecl) gtk_cell_renderer_toggle_set_radio(arg0:Pointer[GtkCellRendererToggle], arg1:gboolean) : ;

external (cdecl) gtk_cell_renderer_toggle_get_active(arg0:Pointer[GtkCellRendererToggle]) : gboolean;

external (cdecl) gtk_cell_renderer_toggle_set_active(arg0:Pointer[GtkCellRendererToggle], arg1:gboolean) : ;

external (cdecl) gtk_cell_renderer_toggle_get_activatable(arg0:Pointer[GtkCellRendererToggle]) : gboolean;

external (cdecl) gtk_cell_renderer_toggle_set_activatable(arg0:Pointer[GtkCellRendererToggle], arg1:gboolean) : ;

alias GtkCellView = Struct__GtkCellView;

alias GtkCellViewClass = Struct__GtkCellViewClass;

alias Struct__GtkCellViewPrivate = Opaque;

alias GtkCellViewPrivate = Struct__GtkCellViewPrivate;

record Struct__GtkCellView (
    parent_instance : GtkWidget,
    priv : Pointer[GtkCellViewPrivate],
);

record Struct__GtkCellViewClass (
    parent_class : GtkWidgetClass,
);

external (cdecl) gtk_cell_view_get_type() : GType;

external (cdecl) gtk_cell_view_new() : Pointer[GtkWidget];

external (cdecl) gtk_cell_view_new_with_text(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_cell_view_new_with_markup(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_cell_view_new_with_pixbuf(arg0:Pointer[GdkPixbuf]) : Pointer[GtkWidget];

external (cdecl) gtk_cell_view_set_model(arg0:Pointer[GtkCellView], arg1:Pointer[GtkTreeModel]) : ;

external (cdecl) gtk_cell_view_get_model(arg0:Pointer[GtkCellView]) : Pointer[GtkTreeModel];

external (cdecl) gtk_cell_view_set_displayed_row(arg0:Pointer[GtkCellView], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_cell_view_get_displayed_row(arg0:Pointer[GtkCellView]) : Pointer[GtkTreePath];

external (cdecl) gtk_cell_view_get_size_of_row(arg0:Pointer[GtkCellView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkRequisition]) : gboolean;

external (cdecl) gtk_cell_view_set_background_color(arg0:Pointer[GtkCellView], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_cell_view_get_cell_renderers(arg0:Pointer[GtkCellView]) : Pointer[GList];

alias GtkToggleButton = Struct__GtkToggleButton;

alias GtkToggleButtonClass = Struct__GtkToggleButtonClass;

record Struct__GtkToggleButton (
    button : GtkButton,
    active : guint,
    draw_indicator : guint,
    inconsistent : guint,
);

record Struct__GtkToggleButtonClass (
    parent_class : GtkButtonClass,
    toggled : CCodePointer[[Pointer[GtkToggleButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_toggle_button_get_type() : GType;

external (cdecl) gtk_toggle_button_new() : Pointer[GtkWidget];

external (cdecl) gtk_toggle_button_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_toggle_button_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_toggle_button_set_mode(arg0:Pointer[GtkToggleButton], arg1:gboolean) : ;

external (cdecl) gtk_toggle_button_get_mode(arg0:Pointer[GtkToggleButton]) : gboolean;

external (cdecl) gtk_toggle_button_set_active(arg0:Pointer[GtkToggleButton], arg1:gboolean) : ;

external (cdecl) gtk_toggle_button_get_active(arg0:Pointer[GtkToggleButton]) : gboolean;

external (cdecl) gtk_toggle_button_toggled(arg0:Pointer[GtkToggleButton]) : ;

external (cdecl) gtk_toggle_button_set_inconsistent(arg0:Pointer[GtkToggleButton], arg1:gboolean) : ;

external (cdecl) gtk_toggle_button_get_inconsistent(arg0:Pointer[GtkToggleButton]) : gboolean;

alias GtkCheckButton = Struct__GtkCheckButton;

alias GtkCheckButtonClass = Struct__GtkCheckButtonClass;

record Struct__GtkCheckButton (
    toggle_button : GtkToggleButton,
);

record Struct__GtkCheckButtonClass (
    parent_class : GtkToggleButtonClass,
    draw_indicator : CCodePointer[[Pointer[GtkCheckButton], Pointer[GdkRectangle]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_check_button_get_type() : GType;

external (cdecl) gtk_check_button_new() : Pointer[GtkWidget];

external (cdecl) gtk_check_button_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_check_button_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) _gtk_check_button_get_props(arg0:Pointer[GtkCheckButton], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

alias GtkItem = Struct__GtkItem;

alias GtkItemClass = Struct__GtkItemClass;

record Struct__GtkItem (
    bin : GtkBin,
);

record Struct__GtkItemClass (
    parent_class : GtkBinClass,
    select : CCodePointer[[Pointer[GtkItem]],[]],
    deselect : CCodePointer[[Pointer[GtkItem]],[]],
    toggle : CCodePointer[[Pointer[GtkItem]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_item_get_type() : GType;

external (cdecl) gtk_item_select(arg0:Pointer[GtkItem]) : ;

external (cdecl) gtk_item_deselect(arg0:Pointer[GtkItem]) : ;

external (cdecl) gtk_item_toggle(arg0:Pointer[GtkItem]) : ;

alias GtkMenuItem = Struct__GtkMenuItem;

alias GtkMenuItemClass = Struct__GtkMenuItemClass;

record Struct__GtkMenuItem (
    item : GtkItem,
    submenu : Pointer[GtkWidget],
    event_window : Pointer[GdkWindow],
    toggle_size : guint16,
    accelerator_width : guint16,
    accel_path : Pointer[gchar],
    show_submenu_indicator : guint,
    submenu_placement : guint,
    submenu_direction : guint,
    right_justify : guint,
    timer_from_keypress : guint,
    from_menubar : guint,
    timer : guint,
);

record Struct__GtkMenuItemClass (
    parent_class : GtkItemClass,
    hide_on_activate : guint,
    activate : CCodePointer[[Pointer[GtkMenuItem]],[]],
    activate_item : CCodePointer[[Pointer[GtkMenuItem]],[]],
    toggle_size_request : CCodePointer[[Pointer[GtkMenuItem], Pointer[gint]],[]],
    toggle_size_allocate : CCodePointer[[Pointer[GtkMenuItem], gint],[]],
    set_label : CCodePointer[[Pointer[GtkMenuItem], Pointer[gchar]],[]],
    get_label : CCodePointer[[Pointer[GtkMenuItem]],[Pointer[gchar]]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
);

external (cdecl) gtk_menu_item_get_type() : GType;

external (cdecl) gtk_menu_item_new() : Pointer[GtkWidget];

external (cdecl) gtk_menu_item_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_menu_item_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_menu_item_set_submenu(arg0:Pointer[GtkMenuItem], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_item_get_submenu(arg0:Pointer[GtkMenuItem]) : Pointer[GtkWidget];

external (cdecl) gtk_menu_item_select(arg0:Pointer[GtkMenuItem]) : ;

external (cdecl) gtk_menu_item_deselect(arg0:Pointer[GtkMenuItem]) : ;

external (cdecl) gtk_menu_item_activate(arg0:Pointer[GtkMenuItem]) : ;

external (cdecl) gtk_menu_item_toggle_size_request(arg0:Pointer[GtkMenuItem], arg1:Pointer[gint]) : ;

external (cdecl) gtk_menu_item_toggle_size_allocate(arg0:Pointer[GtkMenuItem], arg1:gint) : ;

external (cdecl) gtk_menu_item_set_right_justified(arg0:Pointer[GtkMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_menu_item_get_right_justified(arg0:Pointer[GtkMenuItem]) : gboolean;

external (cdecl) gtk_menu_item_set_accel_path(arg0:Pointer[GtkMenuItem], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_menu_item_get_accel_path(arg0:Pointer[GtkMenuItem]) : Pointer[gchar];

external (cdecl) gtk_menu_item_set_label(arg0:Pointer[GtkMenuItem], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_menu_item_get_label(arg0:Pointer[GtkMenuItem]) : Pointer[gchar];

external (cdecl) gtk_menu_item_set_use_underline(arg0:Pointer[GtkMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_menu_item_get_use_underline(arg0:Pointer[GtkMenuItem]) : gboolean;

external (cdecl) _gtk_menu_item_refresh_accel_path(arg0:Pointer[GtkMenuItem], arg1:Pointer[gchar], arg2:Pointer[GtkAccelGroup], arg3:gboolean) : ;

external (cdecl) _gtk_menu_item_is_selectable(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) _gtk_menu_item_popup_submenu(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) _gtk_menu_item_popdown_submenu(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_item_remove_submenu(arg0:Pointer[GtkMenuItem]) : ;

alias GtkCheckMenuItem = Struct__GtkCheckMenuItem;

alias GtkCheckMenuItemClass = Struct__GtkCheckMenuItemClass;

record Struct__GtkCheckMenuItem (
    menu_item : GtkMenuItem,
    active : guint,
    always_show_toggle : guint,
    inconsistent : guint,
    draw_as_radio : guint,
);

record Struct__GtkCheckMenuItemClass (
    parent_class : GtkMenuItemClass,
    toggled : CCodePointer[[Pointer[GtkCheckMenuItem]],[]],
    draw_indicator : CCodePointer[[Pointer[GtkCheckMenuItem], Pointer[GdkRectangle]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_check_menu_item_get_type() : GType;

external (cdecl) gtk_check_menu_item_new() : Pointer[GtkWidget];

external (cdecl) gtk_check_menu_item_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_check_menu_item_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_check_menu_item_set_active(arg0:Pointer[GtkCheckMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_check_menu_item_get_active(arg0:Pointer[GtkCheckMenuItem]) : gboolean;

external (cdecl) gtk_check_menu_item_toggled(arg0:Pointer[GtkCheckMenuItem]) : ;

external (cdecl) gtk_check_menu_item_set_inconsistent(arg0:Pointer[GtkCheckMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_check_menu_item_get_inconsistent(arg0:Pointer[GtkCheckMenuItem]) : gboolean;

external (cdecl) gtk_check_menu_item_set_draw_as_radio(arg0:Pointer[GtkCheckMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_check_menu_item_get_draw_as_radio(arg0:Pointer[GtkCheckMenuItem]) : gboolean;

external (cdecl) gtk_check_menu_item_set_show_toggle(arg0:Pointer[GtkCheckMenuItem], arg1:gboolean) : ;

alias GtkTextIter = Struct__GtkTextIter;

alias GtkTextTagTable = Struct__GtkTextTagTable;

alias GtkTextAttributes = Struct__GtkTextAttributes;

alias GtkTextTag = Struct__GtkTextTag;

alias GtkTextTagClass = Struct__GtkTextTagClass;

record Struct__GtkTextTag (
    parent_instance : GObject,
    table : Pointer[GtkTextTagTable],
    name : Pointer[CChar],
    priority : CInt,
    values : Pointer[GtkTextAttributes],
    bg_color_set : guint,
    bg_stipple_set : guint,
    fg_color_set : guint,
    scale_set : guint,
    fg_stipple_set : guint,
    justification_set : guint,
    left_margin_set : guint,
    indent_set : guint,
    rise_set : guint,
    strikethrough_set : guint,
    right_margin_set : guint,
    pixels_above_lines_set : guint,
    pixels_below_lines_set : guint,
    pixels_inside_wrap_set : guint,
    tabs_set : guint,
    underline_set : guint,
    wrap_mode_set : guint,
    bg_full_height_set : guint,
    invisible_set : guint,
    editable_set : guint,
    language_set : guint,
    pg_bg_color_set : guint,
    accumulative_margin : guint,
    pad1 : guint,
);

record Struct__GtkTextTagClass (
    parent_class : GObjectClass,
    event : CCodePointer[[Pointer[GtkTextTag], Pointer[GObject], Pointer[GdkEvent], Pointer[GtkTextIter]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_text_tag_get_type() : GType;

external (cdecl) gtk_text_tag_new(arg0:Pointer[gchar]) : Pointer[GtkTextTag];

external (cdecl) gtk_text_tag_get_priority(arg0:Pointer[GtkTextTag]) : gint;

external (cdecl) gtk_text_tag_set_priority(arg0:Pointer[GtkTextTag], arg1:gint) : ;

external (cdecl) gtk_text_tag_event(arg0:Pointer[GtkTextTag], arg1:Pointer[GObject], arg2:Pointer[GdkEvent], arg3:Pointer[GtkTextIter]) : gboolean;

alias GtkTextAppearance = Struct__GtkTextAppearance;

record Struct__GtkTextAppearance (
    bg_color : GdkColor,
    fg_color : GdkColor,
    bg_stipple : Pointer[GdkBitmap],
    fg_stipple : Pointer[GdkBitmap],
    rise : gint,
    padding1 : gpointer,
    underline : guint,
    strikethrough : guint,
    draw_bg : guint,
    inside_selection : guint,
    is_text : guint,
    pad1 : guint,
    pad2 : guint,
    pad3 : guint,
    pad4 : guint,
);

record Struct__GtkTextAttributes (
    refcount : guint,
    appearance : GtkTextAppearance,
    justification : GtkJustification,
    direction : GtkTextDirection,
    font : Pointer[PangoFontDescription],
    font_scale : gdouble,
    left_margin : gint,
    indent : gint,
    right_margin : gint,
    pixels_above_lines : gint,
    pixels_below_lines : gint,
    pixels_inside_wrap : gint,
    tabs : Pointer[PangoTabArray],
    wrap_mode : GtkWrapMode,
    language : Pointer[PangoLanguage],
    pg_bg_color : Pointer[GdkColor],
    invisible : guint,
    bg_full_height : guint,
    editable : guint,
    realized : guint,
    pad1 : guint,
    pad2 : guint,
    pad3 : guint,
    pad4 : guint,
);

external (cdecl) gtk_text_attributes_new() : Pointer[GtkTextAttributes];

external (cdecl) gtk_text_attributes_copy(arg0:Pointer[GtkTextAttributes]) : Pointer[GtkTextAttributes];

external (cdecl) gtk_text_attributes_copy_values(arg0:Pointer[GtkTextAttributes], arg1:Pointer[GtkTextAttributes]) : ;

external (cdecl) gtk_text_attributes_unref(arg0:Pointer[GtkTextAttributes]) : ;

external (cdecl) gtk_text_attributes_ref(arg0:Pointer[GtkTextAttributes]) : Pointer[GtkTextAttributes];

external (cdecl) gtk_text_attributes_get_type() : GType;

alias GtkTextChildAnchor = Struct__GtkTextChildAnchor;

alias GtkTextChildAnchorClass = Struct__GtkTextChildAnchorClass;

record Struct__GtkTextChildAnchor (
    parent_instance : GObject,
    segment : gpointer,
);

record Struct__GtkTextChildAnchorClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_text_child_anchor_get_type() : GType;

external (cdecl) gtk_text_child_anchor_new() : Pointer[GtkTextChildAnchor];

external (cdecl) gtk_text_child_anchor_get_widgets(arg0:Pointer[GtkTextChildAnchor]) : Pointer[GList];

external (cdecl) gtk_text_child_anchor_get_deleted(arg0:Pointer[GtkTextChildAnchor]) : gboolean;


alias GtkTextSearchFlags = CUInt;
alias GTK_TEXT_SEARCH_VISIBLE_ONLY = CUInt(1);
alias GTK_TEXT_SEARCH_TEXT_ONLY = CUInt(2);

alias GtkTextBuffer = Struct__GtkTextBuffer;

record Struct__GtkTextIter (
    dummy1 : gpointer,
    dummy2 : gpointer,
    dummy3 : gint,
    dummy4 : gint,
    dummy5 : gint,
    dummy6 : gint,
    dummy7 : gint,
    dummy8 : gint,
    dummy9 : gpointer,
    dummy10 : gpointer,
    dummy11 : gint,
    dummy12 : gint,
    dummy13 : gint,
    dummy14 : gpointer,
);

external (cdecl) gtk_text_iter_get_buffer(arg0:Pointer[GtkTextIter]) : Pointer[GtkTextBuffer];

external (cdecl) gtk_text_iter_copy(arg0:Pointer[GtkTextIter]) : Pointer[GtkTextIter];

external (cdecl) gtk_text_iter_free(arg0:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_iter_get_type() : GType;

external (cdecl) gtk_text_iter_get_offset(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_line(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_line_offset(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_line_index(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_visible_line_offset(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_visible_line_index(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_char(arg0:Pointer[GtkTextIter]) : gunichar;

external (cdecl) gtk_text_iter_get_slice(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : Pointer[gchar];

external (cdecl) gtk_text_iter_get_text(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : Pointer[gchar];

external (cdecl) gtk_text_iter_get_visible_slice(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : Pointer[gchar];

external (cdecl) gtk_text_iter_get_visible_text(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : Pointer[gchar];

external (cdecl) gtk_text_iter_get_pixbuf(arg0:Pointer[GtkTextIter]) : Pointer[GdkPixbuf];

external (cdecl) gtk_text_iter_get_marks(arg0:Pointer[GtkTextIter]) : Pointer[GSList];

external (cdecl) gtk_text_iter_get_child_anchor(arg0:Pointer[GtkTextIter]) : Pointer[GtkTextChildAnchor];

external (cdecl) gtk_text_iter_get_toggled_tags(arg0:Pointer[GtkTextIter], arg1:gboolean) : Pointer[GSList];

external (cdecl) gtk_text_iter_begins_tag(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextTag]) : gboolean;

external (cdecl) gtk_text_iter_ends_tag(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextTag]) : gboolean;

external (cdecl) gtk_text_iter_toggles_tag(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextTag]) : gboolean;

external (cdecl) gtk_text_iter_has_tag(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextTag]) : gboolean;

external (cdecl) gtk_text_iter_get_tags(arg0:Pointer[GtkTextIter]) : Pointer[GSList];

external (cdecl) gtk_text_iter_editable(arg0:Pointer[GtkTextIter], arg1:gboolean) : gboolean;

external (cdecl) gtk_text_iter_can_insert(arg0:Pointer[GtkTextIter], arg1:gboolean) : gboolean;

external (cdecl) gtk_text_iter_starts_word(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_ends_word(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_inside_word(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_starts_sentence(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_ends_sentence(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_inside_sentence(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_starts_line(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_ends_line(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_is_cursor_position(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_get_chars_in_line(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_bytes_in_line(arg0:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_get_attributes(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextAttributes]) : gboolean;

external (cdecl) gtk_text_iter_get_language(arg0:Pointer[GtkTextIter]) : Pointer[PangoLanguage];

external (cdecl) gtk_text_iter_is_end(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_is_start(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_char(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_char(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_chars(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_chars(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_line(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_line(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_lines(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_lines(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_word_end(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_word_start(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_word_ends(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_word_starts(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_visible_line(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_visible_line(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_visible_lines(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_visible_lines(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_visible_word_end(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_visible_word_start(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_visible_word_ends(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_visible_word_starts(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_sentence_end(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_sentence_start(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_sentence_ends(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_sentence_starts(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_cursor_position(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_cursor_position(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_cursor_positions(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_cursor_positions(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_forward_visible_cursor_position(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_visible_cursor_position(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_visible_cursor_positions(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_backward_visible_cursor_positions(arg0:Pointer[GtkTextIter], arg1:gint) : gboolean;

external (cdecl) gtk_text_iter_set_offset(arg0:Pointer[GtkTextIter], arg1:gint) : ;

external (cdecl) gtk_text_iter_set_line(arg0:Pointer[GtkTextIter], arg1:gint) : ;

external (cdecl) gtk_text_iter_set_line_offset(arg0:Pointer[GtkTextIter], arg1:gint) : ;

external (cdecl) gtk_text_iter_set_line_index(arg0:Pointer[GtkTextIter], arg1:gint) : ;

external (cdecl) gtk_text_iter_forward_to_end(arg0:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_iter_forward_to_line_end(arg0:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_set_visible_line_offset(arg0:Pointer[GtkTextIter], arg1:gint) : ;

external (cdecl) gtk_text_iter_set_visible_line_index(arg0:Pointer[GtkTextIter], arg1:gint) : ;

external (cdecl) gtk_text_iter_forward_to_tag_toggle(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextTag]) : gboolean;

external (cdecl) gtk_text_iter_backward_to_tag_toggle(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextTag]) : gboolean;

alias GtkTextCharPredicate = CCodePointer[[gunichar, gpointer],[gboolean]];

external (cdecl) gtk_text_iter_forward_find_char(arg0:Pointer[GtkTextIter], arg1:GtkTextCharPredicate, arg2:gpointer, arg3:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_find_char(arg0:Pointer[GtkTextIter], arg1:GtkTextCharPredicate, arg2:gpointer, arg3:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_forward_search(arg0:Pointer[GtkTextIter], arg1:Pointer[gchar], arg2:GtkTextSearchFlags, arg3:Pointer[GtkTextIter], arg4:Pointer[GtkTextIter], arg5:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_backward_search(arg0:Pointer[GtkTextIter], arg1:Pointer[gchar], arg2:GtkTextSearchFlags, arg3:Pointer[GtkTextIter], arg4:Pointer[GtkTextIter], arg5:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_equal(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_compare(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : gint;

external (cdecl) gtk_text_iter_in_range(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_iter_order(arg0:Pointer[GtkTextIter], arg1:Pointer[GtkTextIter]) : ;

alias GtkTargetList = Struct__GtkTargetList;

alias GtkTargetEntry = Struct__GtkTargetEntry;

record Struct__GtkSelectionData (
    selection : GdkAtom,
    target : GdkAtom,
    type : GdkAtom,
    format : gint,
    data : Pointer[guchar],
    length : gint,
    display : Pointer[GdkDisplay],
);

record Struct__GtkTargetEntry (
    target : Pointer[gchar],
    flags : guint,
    info : guint,
);

alias GtkTargetPair = Struct__GtkTargetPair;

record Struct__GtkTargetList (
    list : Pointer[GList],
    ref_count : guint,
);

record Struct__GtkTargetPair (
    target : GdkAtom,
    flags : guint,
    info : guint,
);

external (cdecl) gtk_target_list_new(arg0:Pointer[GtkTargetEntry], arg1:guint) : Pointer[GtkTargetList];

external (cdecl) gtk_target_list_ref(arg0:Pointer[GtkTargetList]) : Pointer[GtkTargetList];

external (cdecl) gtk_target_list_unref(arg0:Pointer[GtkTargetList]) : ;

external (cdecl) gtk_target_list_add(arg0:Pointer[GtkTargetList], arg1:GdkAtom, arg2:guint, arg3:guint) : ;

external (cdecl) gtk_target_list_add_text_targets(arg0:Pointer[GtkTargetList], arg1:guint) : ;

external (cdecl) gtk_target_list_add_rich_text_targets(arg0:Pointer[GtkTargetList], arg1:guint, arg2:gboolean, arg3:Pointer[GtkTextBuffer]) : ;

external (cdecl) gtk_target_list_add_image_targets(arg0:Pointer[GtkTargetList], arg1:guint, arg2:gboolean) : ;

external (cdecl) gtk_target_list_add_uri_targets(arg0:Pointer[GtkTargetList], arg1:guint) : ;

external (cdecl) gtk_target_list_add_table(arg0:Pointer[GtkTargetList], arg1:Pointer[GtkTargetEntry], arg2:guint) : ;

external (cdecl) gtk_target_list_remove(arg0:Pointer[GtkTargetList], arg1:GdkAtom) : ;

external (cdecl) gtk_target_list_find(arg0:Pointer[GtkTargetList], arg1:GdkAtom, arg2:Pointer[guint]) : gboolean;

external (cdecl) gtk_target_table_new_from_list(arg0:Pointer[GtkTargetList], arg1:Pointer[gint]) : Pointer[GtkTargetEntry];

external (cdecl) gtk_target_table_free(arg0:Pointer[GtkTargetEntry], arg1:gint) : ;

external (cdecl) gtk_selection_owner_set(arg0:Pointer[GtkWidget], arg1:GdkAtom, arg2:guint32) : gboolean;

external (cdecl) gtk_selection_owner_set_for_display(arg0:Pointer[GdkDisplay], arg1:Pointer[GtkWidget], arg2:GdkAtom, arg3:guint32) : gboolean;

external (cdecl) gtk_selection_add_target(arg0:Pointer[GtkWidget], arg1:GdkAtom, arg2:GdkAtom, arg3:guint) : ;

external (cdecl) gtk_selection_add_targets(arg0:Pointer[GtkWidget], arg1:GdkAtom, arg2:Pointer[GtkTargetEntry], arg3:guint) : ;

external (cdecl) gtk_selection_clear_targets(arg0:Pointer[GtkWidget], arg1:GdkAtom) : ;

external (cdecl) gtk_selection_convert(arg0:Pointer[GtkWidget], arg1:GdkAtom, arg2:GdkAtom, arg3:guint32) : gboolean;

external (cdecl) gtk_selection_data_get_selection(arg0:Pointer[GtkSelectionData]) : GdkAtom;

external (cdecl) gtk_selection_data_get_target(arg0:Pointer[GtkSelectionData]) : GdkAtom;

external (cdecl) gtk_selection_data_get_data_type(arg0:Pointer[GtkSelectionData]) : GdkAtom;

external (cdecl) gtk_selection_data_get_format(arg0:Pointer[GtkSelectionData]) : gint;

external (cdecl) gtk_selection_data_get_data(arg0:Pointer[GtkSelectionData]) : Pointer[guchar];

external (cdecl) gtk_selection_data_get_length(arg0:Pointer[GtkSelectionData]) : gint;

external (cdecl) gtk_selection_data_get_display(arg0:Pointer[GtkSelectionData]) : Pointer[GdkDisplay];

external (cdecl) gtk_selection_data_set(arg0:Pointer[GtkSelectionData], arg1:GdkAtom, arg2:gint, arg3:Pointer[guchar], arg4:gint) : ;

external (cdecl) gtk_selection_data_set_text(arg0:Pointer[GtkSelectionData], arg1:Pointer[gchar], arg2:gint) : gboolean;

external (cdecl) gtk_selection_data_get_text(arg0:Pointer[GtkSelectionData]) : Pointer[guchar];

external (cdecl) gtk_selection_data_set_pixbuf(arg0:Pointer[GtkSelectionData], arg1:Pointer[GdkPixbuf]) : gboolean;

external (cdecl) gtk_selection_data_get_pixbuf(arg0:Pointer[GtkSelectionData]) : Pointer[GdkPixbuf];

external (cdecl) gtk_selection_data_set_uris(arg0:Pointer[GtkSelectionData], arg1:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) gtk_selection_data_get_uris(arg0:Pointer[GtkSelectionData]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_selection_data_get_targets(arg0:Pointer[GtkSelectionData], arg1:Pointer[Pointer[GdkAtom]], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_selection_data_targets_include_text(arg0:Pointer[GtkSelectionData]) : gboolean;

external (cdecl) gtk_selection_data_targets_include_rich_text(arg0:Pointer[GtkSelectionData], arg1:Pointer[GtkTextBuffer]) : gboolean;

external (cdecl) gtk_selection_data_targets_include_image(arg0:Pointer[GtkSelectionData], arg1:gboolean) : gboolean;

external (cdecl) gtk_selection_data_targets_include_uri(arg0:Pointer[GtkSelectionData]) : gboolean;

external (cdecl) gtk_targets_include_text(arg0:Pointer[GdkAtom], arg1:gint) : gboolean;

external (cdecl) gtk_targets_include_rich_text(arg0:Pointer[GdkAtom], arg1:gint, arg2:Pointer[GtkTextBuffer]) : gboolean;

external (cdecl) gtk_targets_include_image(arg0:Pointer[GdkAtom], arg1:gint, arg2:gboolean) : gboolean;

external (cdecl) gtk_targets_include_uri(arg0:Pointer[GdkAtom], arg1:gint) : gboolean;

external (cdecl) gtk_selection_remove_all(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_selection_clear(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEventSelection]) : gboolean;

external (cdecl) _gtk_selection_request(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEventSelection]) : gboolean;

external (cdecl) _gtk_selection_incr_event(arg0:Pointer[GdkWindow], arg1:Pointer[GdkEventProperty]) : gboolean;

external (cdecl) _gtk_selection_notify(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEventSelection]) : gboolean;

external (cdecl) _gtk_selection_property_notify(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEventProperty]) : gboolean;

external (cdecl) gtk_selection_data_get_type() : GType;

external (cdecl) gtk_selection_data_copy(arg0:Pointer[GtkSelectionData]) : Pointer[GtkSelectionData];

external (cdecl) gtk_selection_data_free(arg0:Pointer[GtkSelectionData]) : ;

external (cdecl) gtk_target_list_get_type() : GType;

alias GtkClipboardReceivedFunc = CCodePointer[[Pointer[GtkClipboard], Pointer[GtkSelectionData], gpointer],[]];

alias GtkClipboardTextReceivedFunc = CCodePointer[[Pointer[GtkClipboard], Pointer[gchar], gpointer],[]];

alias GtkClipboardRichTextReceivedFunc = CCodePointer[[Pointer[GtkClipboard], GdkAtom, Pointer[guint8], gsize, gpointer],[]];

alias GtkClipboardImageReceivedFunc = CCodePointer[[Pointer[GtkClipboard], Pointer[GdkPixbuf], gpointer],[]];

alias GtkClipboardURIReceivedFunc = CCodePointer[[Pointer[GtkClipboard], Pointer[Pointer[gchar]], gpointer],[]];

alias GtkClipboardTargetsReceivedFunc = CCodePointer[[Pointer[GtkClipboard], Pointer[GdkAtom], gint, gpointer],[]];

alias GtkClipboardGetFunc = CCodePointer[[Pointer[GtkClipboard], Pointer[GtkSelectionData], guint, gpointer],[]];

alias GtkClipboardClearFunc = CCodePointer[[Pointer[GtkClipboard], gpointer],[]];

external (cdecl) gtk_clipboard_get_type() : GType;

external (cdecl) gtk_clipboard_get_for_display(arg0:Pointer[GdkDisplay], arg1:GdkAtom) : Pointer[GtkClipboard];

external (cdecl) gtk_clipboard_get(arg0:GdkAtom) : Pointer[GtkClipboard];

external (cdecl) gtk_clipboard_get_display(arg0:Pointer[GtkClipboard]) : Pointer[GdkDisplay];

external (cdecl) gtk_clipboard_set_with_data(arg0:Pointer[GtkClipboard], arg1:Pointer[GtkTargetEntry], arg2:guint, arg3:GtkClipboardGetFunc, arg4:GtkClipboardClearFunc, arg5:gpointer) : gboolean;

external (cdecl) gtk_clipboard_set_with_owner(arg0:Pointer[GtkClipboard], arg1:Pointer[GtkTargetEntry], arg2:guint, arg3:GtkClipboardGetFunc, arg4:GtkClipboardClearFunc, arg5:Pointer[GObject]) : gboolean;

external (cdecl) gtk_clipboard_get_owner(arg0:Pointer[GtkClipboard]) : Pointer[GObject];

external (cdecl) gtk_clipboard_clear(arg0:Pointer[GtkClipboard]) : ;

external (cdecl) gtk_clipboard_set_text(arg0:Pointer[GtkClipboard], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) gtk_clipboard_set_image(arg0:Pointer[GtkClipboard], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_clipboard_request_contents(arg0:Pointer[GtkClipboard], arg1:GdkAtom, arg2:GtkClipboardReceivedFunc, arg3:gpointer) : ;

external (cdecl) gtk_clipboard_request_text(arg0:Pointer[GtkClipboard], arg1:GtkClipboardTextReceivedFunc, arg2:gpointer) : ;

external (cdecl) gtk_clipboard_request_rich_text(arg0:Pointer[GtkClipboard], arg1:Pointer[GtkTextBuffer], arg2:GtkClipboardRichTextReceivedFunc, arg3:gpointer) : ;

external (cdecl) gtk_clipboard_request_image(arg0:Pointer[GtkClipboard], arg1:GtkClipboardImageReceivedFunc, arg2:gpointer) : ;

external (cdecl) gtk_clipboard_request_uris(arg0:Pointer[GtkClipboard], arg1:GtkClipboardURIReceivedFunc, arg2:gpointer) : ;

external (cdecl) gtk_clipboard_request_targets(arg0:Pointer[GtkClipboard], arg1:GtkClipboardTargetsReceivedFunc, arg2:gpointer) : ;

external (cdecl) gtk_clipboard_wait_for_contents(arg0:Pointer[GtkClipboard], arg1:GdkAtom) : Pointer[GtkSelectionData];

external (cdecl) gtk_clipboard_wait_for_text(arg0:Pointer[GtkClipboard]) : Pointer[gchar];

external (cdecl) gtk_clipboard_wait_for_rich_text(arg0:Pointer[GtkClipboard], arg1:Pointer[GtkTextBuffer], arg2:Pointer[GdkAtom], arg3:Pointer[gsize]) : Pointer[guint8];

external (cdecl) gtk_clipboard_wait_for_image(arg0:Pointer[GtkClipboard]) : Pointer[GdkPixbuf];

external (cdecl) gtk_clipboard_wait_for_uris(arg0:Pointer[GtkClipboard]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_clipboard_wait_for_targets(arg0:Pointer[GtkClipboard], arg1:Pointer[Pointer[GdkAtom]], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_clipboard_wait_is_text_available(arg0:Pointer[GtkClipboard]) : gboolean;

external (cdecl) gtk_clipboard_wait_is_rich_text_available(arg0:Pointer[GtkClipboard], arg1:Pointer[GtkTextBuffer]) : gboolean;

external (cdecl) gtk_clipboard_wait_is_image_available(arg0:Pointer[GtkClipboard]) : gboolean;

external (cdecl) gtk_clipboard_wait_is_uris_available(arg0:Pointer[GtkClipboard]) : gboolean;

external (cdecl) gtk_clipboard_wait_is_target_available(arg0:Pointer[GtkClipboard], arg1:GdkAtom) : gboolean;

external (cdecl) gtk_clipboard_set_can_store(arg0:Pointer[GtkClipboard], arg1:Pointer[GtkTargetEntry], arg2:gint) : ;

external (cdecl) gtk_clipboard_store(arg0:Pointer[GtkClipboard]) : ;

external (cdecl) _gtk_clipboard_handle_event(arg0:Pointer[GdkEventOwnerChange]) : ;

external (cdecl) _gtk_clipboard_store_all() : ;

alias GtkColorButton = Struct__GtkColorButton;

alias GtkColorButtonClass = Struct__GtkColorButtonClass;

alias Struct__GtkColorButtonPrivate = Opaque;

alias GtkColorButtonPrivate = Struct__GtkColorButtonPrivate;

record Struct__GtkColorButton (
    button : GtkButton,
    priv : Pointer[GtkColorButtonPrivate],
);

record Struct__GtkColorButtonClass (
    parent_class : GtkButtonClass,
    color_set : CCodePointer[[Pointer[GtkColorButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_color_button_get_type() : GType;

external (cdecl) gtk_color_button_new() : Pointer[GtkWidget];

external (cdecl) gtk_color_button_new_with_color(arg0:Pointer[GdkColor]) : Pointer[GtkWidget];

external (cdecl) gtk_color_button_set_color(arg0:Pointer[GtkColorButton], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_color_button_set_alpha(arg0:Pointer[GtkColorButton], arg1:guint16) : ;

external (cdecl) gtk_color_button_get_color(arg0:Pointer[GtkColorButton], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_color_button_get_alpha(arg0:Pointer[GtkColorButton]) : guint16;

external (cdecl) gtk_color_button_set_use_alpha(arg0:Pointer[GtkColorButton], arg1:gboolean) : ;

external (cdecl) gtk_color_button_get_use_alpha(arg0:Pointer[GtkColorButton]) : gboolean;

external (cdecl) gtk_color_button_set_title(arg0:Pointer[GtkColorButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_color_button_get_title(arg0:Pointer[GtkColorButton]) : Pointer[gchar];

alias GtkVBox = Struct__GtkVBox;

alias GtkVBoxClass = Struct__GtkVBoxClass;

record Struct__GtkVBox (
    box : GtkBox,
);

record Struct__GtkVBoxClass (
    parent_class : GtkBoxClass,
);

external (cdecl) gtk_vbox_get_type() : GType;

external (cdecl) gtk_vbox_new(arg0:gboolean, arg1:gint) : Pointer[GtkWidget];

alias GtkColorSelection = Struct__GtkColorSelection;

alias GtkColorSelectionClass = Struct__GtkColorSelectionClass;

alias GtkColorSelectionChangePaletteFunc = CCodePointer[[Pointer[GdkColor], gint],[]];

alias GtkColorSelectionChangePaletteWithScreenFunc = CCodePointer[[Pointer[GdkScreen], Pointer[GdkColor], gint],[]];

record Struct__GtkColorSelection (
    parent_instance : GtkVBox,
    private_data : gpointer,
);

record Struct__GtkColorSelectionClass (
    parent_class : GtkVBoxClass,
    color_changed : CCodePointer[[Pointer[GtkColorSelection]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_color_selection_get_type() : GType;

external (cdecl) gtk_color_selection_new() : Pointer[GtkWidget];

external (cdecl) gtk_color_selection_get_has_opacity_control(arg0:Pointer[GtkColorSelection]) : gboolean;

external (cdecl) gtk_color_selection_set_has_opacity_control(arg0:Pointer[GtkColorSelection], arg1:gboolean) : ;

external (cdecl) gtk_color_selection_get_has_palette(arg0:Pointer[GtkColorSelection]) : gboolean;

external (cdecl) gtk_color_selection_set_has_palette(arg0:Pointer[GtkColorSelection], arg1:gboolean) : ;

external (cdecl) gtk_color_selection_set_current_color(arg0:Pointer[GtkColorSelection], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_color_selection_set_current_alpha(arg0:Pointer[GtkColorSelection], arg1:guint16) : ;

external (cdecl) gtk_color_selection_get_current_color(arg0:Pointer[GtkColorSelection], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_color_selection_get_current_alpha(arg0:Pointer[GtkColorSelection]) : guint16;

external (cdecl) gtk_color_selection_set_previous_color(arg0:Pointer[GtkColorSelection], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_color_selection_set_previous_alpha(arg0:Pointer[GtkColorSelection], arg1:guint16) : ;

external (cdecl) gtk_color_selection_get_previous_color(arg0:Pointer[GtkColorSelection], arg1:Pointer[GdkColor]) : ;

external (cdecl) gtk_color_selection_get_previous_alpha(arg0:Pointer[GtkColorSelection]) : guint16;

external (cdecl) gtk_color_selection_is_adjusting(arg0:Pointer[GtkColorSelection]) : gboolean;

external (cdecl) gtk_color_selection_palette_from_string(arg0:Pointer[gchar], arg1:Pointer[Pointer[GdkColor]], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_color_selection_palette_to_string(arg0:Pointer[GdkColor], arg1:gint) : Pointer[gchar];

external (cdecl) gtk_color_selection_set_change_palette_hook(arg0:GtkColorSelectionChangePaletteFunc) : GtkColorSelectionChangePaletteFunc;

external (cdecl) gtk_color_selection_set_change_palette_with_screen_hook(arg0:GtkColorSelectionChangePaletteWithScreenFunc) : GtkColorSelectionChangePaletteWithScreenFunc;

external (cdecl) gtk_color_selection_set_color(arg0:Pointer[GtkColorSelection], arg1:Pointer[gdouble]) : ;

external (cdecl) gtk_color_selection_get_color(arg0:Pointer[GtkColorSelection], arg1:Pointer[gdouble]) : ;

external (cdecl) gtk_color_selection_set_update_policy(arg0:Pointer[GtkColorSelection], arg1:GtkUpdateType) : ;

alias GtkColorSelectionDialog = Struct__GtkColorSelectionDialog;

alias GtkColorSelectionDialogClass = Struct__GtkColorSelectionDialogClass;

record Struct__GtkColorSelectionDialog (
    parent_instance : GtkDialog,
    colorsel : Pointer[GtkWidget],
    ok_button : Pointer[GtkWidget],
    cancel_button : Pointer[GtkWidget],
    help_button : Pointer[GtkWidget],
);

record Struct__GtkColorSelectionDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_color_selection_dialog_get_type() : GType;

external (cdecl) gtk_color_selection_dialog_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_color_selection_dialog_get_color_selection(arg0:Pointer[GtkColorSelectionDialog]) : Pointer[GtkWidget];


alias GtkDestDefaults = CUInt;
alias GTK_DEST_DEFAULT_MOTION = CUInt(1);
alias GTK_DEST_DEFAULT_HIGHLIGHT = CUInt(2);
alias GTK_DEST_DEFAULT_DROP = CUInt(4);
alias GTK_DEST_DEFAULT_ALL = CUInt(7);


alias GtkTargetFlags = CUInt;
alias GTK_TARGET_SAME_APP = CUInt(1);
alias GTK_TARGET_SAME_WIDGET = CUInt(2);
alias GTK_TARGET_OTHER_APP = CUInt(4);
alias GTK_TARGET_OTHER_WIDGET = CUInt(8);

external (cdecl) gtk_drag_get_data(arg0:Pointer[GtkWidget], arg1:Pointer[GdkDragContext], arg2:GdkAtom, arg3:guint32) : ;

external (cdecl) gtk_drag_finish(arg0:Pointer[GdkDragContext], arg1:gboolean, arg2:gboolean, arg3:guint32) : ;

external (cdecl) gtk_drag_get_source_widget(arg0:Pointer[GdkDragContext]) : Pointer[GtkWidget];

external (cdecl) gtk_drag_highlight(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_unhighlight(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_dest_set(arg0:Pointer[GtkWidget], arg1:GtkDestDefaults, arg2:Pointer[GtkTargetEntry], arg3:gint, arg4:GdkDragAction) : ;

external (cdecl) gtk_drag_dest_set_proxy(arg0:Pointer[GtkWidget], arg1:Pointer[GdkWindow], arg2:GdkDragProtocol, arg3:gboolean) : ;

external (cdecl) gtk_drag_dest_unset(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_dest_find_target(arg0:Pointer[GtkWidget], arg1:Pointer[GdkDragContext], arg2:Pointer[GtkTargetList]) : GdkAtom;

external (cdecl) gtk_drag_dest_get_target_list(arg0:Pointer[GtkWidget]) : Pointer[GtkTargetList];

external (cdecl) gtk_drag_dest_set_target_list(arg0:Pointer[GtkWidget], arg1:Pointer[GtkTargetList]) : ;

external (cdecl) gtk_drag_dest_add_text_targets(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_dest_add_image_targets(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_dest_add_uri_targets(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_dest_set_track_motion(arg0:Pointer[GtkWidget], arg1:gboolean) : ;

external (cdecl) gtk_drag_dest_get_track_motion(arg0:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_drag_source_set(arg0:Pointer[GtkWidget], arg1:GdkModifierType, arg2:Pointer[GtkTargetEntry], arg3:gint, arg4:GdkDragAction) : ;

external (cdecl) gtk_drag_source_unset(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_source_get_target_list(arg0:Pointer[GtkWidget]) : Pointer[GtkTargetList];

external (cdecl) gtk_drag_source_set_target_list(arg0:Pointer[GtkWidget], arg1:Pointer[GtkTargetList]) : ;

external (cdecl) gtk_drag_source_add_text_targets(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_source_add_image_targets(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_source_add_uri_targets(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_drag_source_set_icon(arg0:Pointer[GtkWidget], arg1:Pointer[GdkColormap], arg2:Pointer[GdkPixmap], arg3:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_drag_source_set_icon_pixbuf(arg0:Pointer[GtkWidget], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_drag_source_set_icon_stock(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_drag_source_set_icon_name(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_drag_begin(arg0:Pointer[GtkWidget], arg1:Pointer[GtkTargetList], arg2:GdkDragAction, arg3:gint, arg4:Pointer[GdkEvent]) : Pointer[GdkDragContext];

external (cdecl) gtk_drag_set_icon_widget(arg0:Pointer[GdkDragContext], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_drag_set_icon_pixmap(arg0:Pointer[GdkDragContext], arg1:Pointer[GdkColormap], arg2:Pointer[GdkPixmap], arg3:Pointer[GdkBitmap], arg4:gint, arg5:gint) : ;

external (cdecl) gtk_drag_set_icon_pixbuf(arg0:Pointer[GdkDragContext], arg1:Pointer[GdkPixbuf], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_drag_set_icon_stock(arg0:Pointer[GdkDragContext], arg1:Pointer[gchar], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_drag_set_icon_name(arg0:Pointer[GdkDragContext], arg1:Pointer[gchar], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_drag_set_icon_default(arg0:Pointer[GdkDragContext]) : ;

external (cdecl) gtk_drag_check_threshold(arg0:Pointer[GtkWidget], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : gboolean;

external (cdecl) _gtk_drag_source_handle_event(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEvent]) : ;

external (cdecl) _gtk_drag_dest_handle_event(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEvent]) : ;

external (cdecl) gtk_drag_set_default_icon(arg0:Pointer[GdkColormap], arg1:Pointer[GdkPixmap], arg2:Pointer[GdkBitmap], arg3:gint, arg4:gint) : ;

alias Struct__GtkEditable = Opaque;

alias GtkEditable = Struct__GtkEditable;

alias GtkEditableClass = Struct__GtkEditableClass;

record Struct__GtkEditableClass (
    base_iface : GTypeInterface,
    insert_text : CCodePointer[[Pointer[GtkEditable], Pointer[gchar], gint, Pointer[gint]],[]],
    delete_text : CCodePointer[[Pointer[GtkEditable], gint, gint],[]],
    changed : CCodePointer[[Pointer[GtkEditable]],[]],
    do_insert_text : CCodePointer[[Pointer[GtkEditable], Pointer[gchar], gint, Pointer[gint]],[]],
    do_delete_text : CCodePointer[[Pointer[GtkEditable], gint, gint],[]],
    get_chars : CCodePointer[[Pointer[GtkEditable], gint, gint],[Pointer[gchar]]],
    set_selection_bounds : CCodePointer[[Pointer[GtkEditable], gint, gint],[]],
    get_selection_bounds : CCodePointer[[Pointer[GtkEditable], Pointer[gint], Pointer[gint]],[gboolean]],
    set_position : CCodePointer[[Pointer[GtkEditable], gint],[]],
    get_position : CCodePointer[[Pointer[GtkEditable]],[gint]],
);

external (cdecl) gtk_editable_get_type() : GType;

external (cdecl) gtk_editable_select_region(arg0:Pointer[GtkEditable], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_editable_get_selection_bounds(arg0:Pointer[GtkEditable], arg1:Pointer[gint], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_editable_insert_text(arg0:Pointer[GtkEditable], arg1:Pointer[gchar], arg2:gint, arg3:Pointer[gint]) : ;

external (cdecl) gtk_editable_delete_text(arg0:Pointer[GtkEditable], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_editable_get_chars(arg0:Pointer[GtkEditable], arg1:gint, arg2:gint) : Pointer[gchar];

external (cdecl) gtk_editable_cut_clipboard(arg0:Pointer[GtkEditable]) : ;

external (cdecl) gtk_editable_copy_clipboard(arg0:Pointer[GtkEditable]) : ;

external (cdecl) gtk_editable_paste_clipboard(arg0:Pointer[GtkEditable]) : ;

external (cdecl) gtk_editable_delete_selection(arg0:Pointer[GtkEditable]) : ;

external (cdecl) gtk_editable_set_position(arg0:Pointer[GtkEditable], arg1:gint) : ;

external (cdecl) gtk_editable_get_position(arg0:Pointer[GtkEditable]) : gint;

external (cdecl) gtk_editable_set_editable(arg0:Pointer[GtkEditable], arg1:gboolean) : ;

external (cdecl) gtk_editable_get_editable(arg0:Pointer[GtkEditable]) : gboolean;

alias GtkIMContext = Struct__GtkIMContext;

alias GtkIMContextClass = Struct__GtkIMContextClass;

record Struct__GtkIMContext (
    parent_instance : GObject,
);

record Struct__GtkIMContextClass (
    parent_class : GtkObjectClass,
    preedit_start : CCodePointer[[Pointer[GtkIMContext]],[]],
    preedit_end : CCodePointer[[Pointer[GtkIMContext]],[]],
    preedit_changed : CCodePointer[[Pointer[GtkIMContext]],[]],
    commit : CCodePointer[[Pointer[GtkIMContext], Pointer[gchar]],[]],
    retrieve_surrounding : CCodePointer[[Pointer[GtkIMContext]],[gboolean]],
    delete_surrounding : CCodePointer[[Pointer[GtkIMContext], gint, gint],[gboolean]],
    set_client_window : CCodePointer[[Pointer[GtkIMContext], Pointer[GdkWindow]],[]],
    get_preedit_string : CCodePointer[[Pointer[GtkIMContext], Pointer[Pointer[gchar]], Pointer[Pointer[PangoAttrList]], Pointer[gint]],[]],
    filter_keypress : CCodePointer[[Pointer[GtkIMContext], Pointer[GdkEventKey]],[gboolean]],
    focus_in : CCodePointer[[Pointer[GtkIMContext]],[]],
    focus_out : CCodePointer[[Pointer[GtkIMContext]],[]],
    reset : CCodePointer[[Pointer[GtkIMContext]],[]],
    set_cursor_location : CCodePointer[[Pointer[GtkIMContext], Pointer[GdkRectangle]],[]],
    set_use_preedit : CCodePointer[[Pointer[GtkIMContext], gboolean],[]],
    set_surrounding : CCodePointer[[Pointer[GtkIMContext], Pointer[gchar], gint, gint],[]],
    get_surrounding : CCodePointer[[Pointer[GtkIMContext], Pointer[Pointer[gchar]], Pointer[gint]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
);

external (cdecl) gtk_im_context_get_type() : GType;

external (cdecl) gtk_im_context_set_client_window(arg0:Pointer[GtkIMContext], arg1:Pointer[GdkWindow]) : ;

external (cdecl) gtk_im_context_get_preedit_string(arg0:Pointer[GtkIMContext], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[PangoAttrList]], arg3:Pointer[gint]) : ;

external (cdecl) gtk_im_context_filter_keypress(arg0:Pointer[GtkIMContext], arg1:Pointer[GdkEventKey]) : gboolean;

external (cdecl) gtk_im_context_focus_in(arg0:Pointer[GtkIMContext]) : ;

external (cdecl) gtk_im_context_focus_out(arg0:Pointer[GtkIMContext]) : ;

external (cdecl) gtk_im_context_reset(arg0:Pointer[GtkIMContext]) : ;

external (cdecl) gtk_im_context_set_cursor_location(arg0:Pointer[GtkIMContext], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_im_context_set_use_preedit(arg0:Pointer[GtkIMContext], arg1:gboolean) : ;

external (cdecl) gtk_im_context_set_surrounding(arg0:Pointer[GtkIMContext], arg1:Pointer[gchar], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_im_context_get_surrounding(arg0:Pointer[GtkIMContext], arg1:Pointer[Pointer[gchar]], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_im_context_delete_surrounding(arg0:Pointer[GtkIMContext], arg1:gint, arg2:gint) : gboolean;

alias GtkEntryBuffer = Struct__GtkEntryBuffer;

alias GtkEntryBufferClass = Struct__GtkEntryBufferClass;

alias Struct__GtkEntryBufferPrivate = Opaque;

alias GtkEntryBufferPrivate = Struct__GtkEntryBufferPrivate;

record Struct__GtkEntryBuffer (
    parent_instance : GObject,
    priv : Pointer[GtkEntryBufferPrivate],
);

record Struct__GtkEntryBufferClass (
    parent_class : GObjectClass,
    inserted_text : CCodePointer[[Pointer[GtkEntryBuffer], guint, Pointer[gchar], guint],[]],
    deleted_text : CCodePointer[[Pointer[GtkEntryBuffer], guint, guint],[]],
    get_text : CCodePointer[[Pointer[GtkEntryBuffer], Pointer[gsize]],[Pointer[gchar]]],
    get_length : CCodePointer[[Pointer[GtkEntryBuffer]],[guint]],
    insert_text : CCodePointer[[Pointer[GtkEntryBuffer], guint, Pointer[gchar], guint],[guint]],
    delete_text : CCodePointer[[Pointer[GtkEntryBuffer], guint, guint],[guint]],
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
);

external (cdecl) gtk_entry_buffer_get_type() : GType;

external (cdecl) gtk_entry_buffer_new(arg0:Pointer[gchar], arg1:gint) : Pointer[GtkEntryBuffer];

external (cdecl) gtk_entry_buffer_get_bytes(arg0:Pointer[GtkEntryBuffer]) : gsize;

external (cdecl) gtk_entry_buffer_get_length(arg0:Pointer[GtkEntryBuffer]) : guint;

external (cdecl) gtk_entry_buffer_get_text(arg0:Pointer[GtkEntryBuffer]) : Pointer[gchar];

external (cdecl) gtk_entry_buffer_set_text(arg0:Pointer[GtkEntryBuffer], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) gtk_entry_buffer_set_max_length(arg0:Pointer[GtkEntryBuffer], arg1:gint) : ;

external (cdecl) gtk_entry_buffer_get_max_length(arg0:Pointer[GtkEntryBuffer]) : gint;

external (cdecl) gtk_entry_buffer_insert_text(arg0:Pointer[GtkEntryBuffer], arg1:guint, arg2:Pointer[gchar], arg3:gint) : guint;

external (cdecl) gtk_entry_buffer_delete_text(arg0:Pointer[GtkEntryBuffer], arg1:guint, arg2:gint) : guint;

external (cdecl) gtk_entry_buffer_emit_inserted_text(arg0:Pointer[GtkEntryBuffer], arg1:guint, arg2:Pointer[gchar], arg3:guint) : ;

external (cdecl) gtk_entry_buffer_emit_deleted_text(arg0:Pointer[GtkEntryBuffer], arg1:guint, arg2:guint) : ;

alias GtkListStore = Struct__GtkListStore;

alias GtkListStoreClass = Struct__GtkListStoreClass;

record Struct__GtkListStore (
    parent : GObject,
    stamp : gint,
    seq : gpointer,
    _gtk_reserved1 : gpointer,
    sort_list : Pointer[GList],
    n_columns : gint,
    sort_column_id : gint,
    order : GtkSortType,
    column_headers : Pointer[GType],
    length : gint,
    default_sort_func : GtkTreeIterCompareFunc,
    default_sort_data : gpointer,
    default_sort_destroy : GDestroyNotify,
    columns_dirty : guint,
);

record Struct__GtkListStoreClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_list_store_get_type() : GType;

external (cdecl) gtk_list_store_new(arg0:gint, ..) : Pointer[GtkListStore];

external (cdecl) gtk_list_store_newv(arg0:gint, arg1:Pointer[GType]) : Pointer[GtkListStore];

external (cdecl) gtk_list_store_set_column_types(arg0:Pointer[GtkListStore], arg1:gint, arg2:Pointer[GType]) : ;

external (cdecl) gtk_list_store_set_value(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:gint, arg3:Pointer[GValue]) : ;

external (cdecl) gtk_list_store_set(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], ..) : ;

external (cdecl) gtk_list_store_set_valuesv(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[gint], arg3:Pointer[GValue], arg4:gint) : ;

external (cdecl) gtk_list_store_set_valist(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_list_store_remove(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_list_store_insert(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:gint) : ;

external (cdecl) gtk_list_store_insert_before(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_list_store_insert_after(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_list_store_insert_with_values(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:gint, ..) : ;

external (cdecl) gtk_list_store_insert_with_valuesv(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:gint, arg3:Pointer[gint], arg4:Pointer[GValue], arg5:gint) : ;

external (cdecl) gtk_list_store_prepend(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_list_store_append(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_list_store_clear(arg0:Pointer[GtkListStore]) : ;

external (cdecl) gtk_list_store_iter_is_valid(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_list_store_reorder(arg0:Pointer[GtkListStore], arg1:Pointer[gint]) : ;

external (cdecl) gtk_list_store_swap(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_list_store_move_after(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_list_store_move_before(arg0:Pointer[GtkListStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

alias GtkTreeModelFilterVisibleFunc = CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], gpointer],[gboolean]];

alias GtkTreeModelFilterModifyFunc = CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], Pointer[GValue], gint, gpointer],[]];

alias GtkTreeModelFilter = Struct__GtkTreeModelFilter;

alias GtkTreeModelFilterClass = Struct__GtkTreeModelFilterClass;

alias Struct__GtkTreeModelFilterPrivate = Opaque;

alias GtkTreeModelFilterPrivate = Struct__GtkTreeModelFilterPrivate;

record Struct__GtkTreeModelFilter (
    parent : GObject,
    priv : Pointer[GtkTreeModelFilterPrivate],
);

record Struct__GtkTreeModelFilterClass (
    parent_class : GObjectClass,
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_tree_model_filter_get_type() : GType;

external (cdecl) gtk_tree_model_filter_new(arg0:Pointer[GtkTreeModel], arg1:Pointer[GtkTreePath]) : Pointer[GtkTreeModel];

external (cdecl) gtk_tree_model_filter_set_visible_func(arg0:Pointer[GtkTreeModelFilter], arg1:GtkTreeModelFilterVisibleFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_model_filter_set_modify_func(arg0:Pointer[GtkTreeModelFilter], arg1:gint, arg2:Pointer[GType], arg3:GtkTreeModelFilterModifyFunc, arg4:gpointer, arg5:GDestroyNotify) : ;

external (cdecl) gtk_tree_model_filter_set_visible_column(arg0:Pointer[GtkTreeModelFilter], arg1:gint) : ;

external (cdecl) gtk_tree_model_filter_get_model(arg0:Pointer[GtkTreeModelFilter]) : Pointer[GtkTreeModel];

external (cdecl) gtk_tree_model_filter_convert_child_iter_to_iter(arg0:Pointer[GtkTreeModelFilter], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_filter_convert_iter_to_child_iter(arg0:Pointer[GtkTreeModelFilter], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_filter_convert_child_path_to_path(arg0:Pointer[GtkTreeModelFilter], arg1:Pointer[GtkTreePath]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_model_filter_convert_path_to_child_path(arg0:Pointer[GtkTreeModelFilter], arg1:Pointer[GtkTreePath]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_model_filter_refilter(arg0:Pointer[GtkTreeModelFilter]) : ;

external (cdecl) gtk_tree_model_filter_clear_cache(arg0:Pointer[GtkTreeModelFilter]) : ;

alias GtkEntryCompletion = Struct__GtkEntryCompletion;

alias GtkEntryCompletionClass = Struct__GtkEntryCompletionClass;

alias Struct__GtkEntryCompletionPrivate = Opaque;

alias GtkEntryCompletionPrivate = Struct__GtkEntryCompletionPrivate;

alias GtkEntryCompletionMatchFunc = CCodePointer[[Pointer[GtkEntryCompletion], Pointer[gchar], Pointer[GtkTreeIter], gpointer],[gboolean]];

record Struct__GtkEntryCompletion (
    parent_instance : GObject,
    priv : Pointer[GtkEntryCompletionPrivate],
);

record Struct__GtkEntryCompletionClass (
    parent_class : GObjectClass,
    match_selected : CCodePointer[[Pointer[GtkEntryCompletion], Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[gboolean]],
    action_activated : CCodePointer[[Pointer[GtkEntryCompletion], gint],[]],
    insert_prefix : CCodePointer[[Pointer[GtkEntryCompletion], Pointer[gchar]],[gboolean]],
    cursor_on_match : CCodePointer[[Pointer[GtkEntryCompletion], Pointer[GtkTreeModel], Pointer[GtkTreeIter]],[gboolean]],
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
);

external (cdecl) gtk_entry_completion_get_type() : GType;

external (cdecl) gtk_entry_completion_new() : Pointer[GtkEntryCompletion];

external (cdecl) gtk_entry_completion_get_entry(arg0:Pointer[GtkEntryCompletion]) : Pointer[GtkWidget];

external (cdecl) gtk_entry_completion_set_model(arg0:Pointer[GtkEntryCompletion], arg1:Pointer[GtkTreeModel]) : ;

external (cdecl) gtk_entry_completion_get_model(arg0:Pointer[GtkEntryCompletion]) : Pointer[GtkTreeModel];

external (cdecl) gtk_entry_completion_set_match_func(arg0:Pointer[GtkEntryCompletion], arg1:GtkEntryCompletionMatchFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_entry_completion_set_minimum_key_length(arg0:Pointer[GtkEntryCompletion], arg1:gint) : ;

external (cdecl) gtk_entry_completion_get_minimum_key_length(arg0:Pointer[GtkEntryCompletion]) : gint;

external (cdecl) gtk_entry_completion_complete(arg0:Pointer[GtkEntryCompletion]) : ;

external (cdecl) gtk_entry_completion_insert_prefix(arg0:Pointer[GtkEntryCompletion]) : ;

external (cdecl) gtk_entry_completion_insert_action_text(arg0:Pointer[GtkEntryCompletion], arg1:gint, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_entry_completion_insert_action_markup(arg0:Pointer[GtkEntryCompletion], arg1:gint, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_entry_completion_delete_action(arg0:Pointer[GtkEntryCompletion], arg1:gint) : ;

external (cdecl) gtk_entry_completion_set_inline_completion(arg0:Pointer[GtkEntryCompletion], arg1:gboolean) : ;

external (cdecl) gtk_entry_completion_get_inline_completion(arg0:Pointer[GtkEntryCompletion]) : gboolean;

external (cdecl) gtk_entry_completion_set_inline_selection(arg0:Pointer[GtkEntryCompletion], arg1:gboolean) : ;

external (cdecl) gtk_entry_completion_get_inline_selection(arg0:Pointer[GtkEntryCompletion]) : gboolean;

external (cdecl) gtk_entry_completion_set_popup_completion(arg0:Pointer[GtkEntryCompletion], arg1:gboolean) : ;

external (cdecl) gtk_entry_completion_get_popup_completion(arg0:Pointer[GtkEntryCompletion]) : gboolean;

external (cdecl) gtk_entry_completion_set_popup_set_width(arg0:Pointer[GtkEntryCompletion], arg1:gboolean) : ;

external (cdecl) gtk_entry_completion_get_popup_set_width(arg0:Pointer[GtkEntryCompletion]) : gboolean;

external (cdecl) gtk_entry_completion_set_popup_single_match(arg0:Pointer[GtkEntryCompletion], arg1:gboolean) : ;

external (cdecl) gtk_entry_completion_get_popup_single_match(arg0:Pointer[GtkEntryCompletion]) : gboolean;

external (cdecl) gtk_entry_completion_get_completion_prefix(arg0:Pointer[GtkEntryCompletion]) : Pointer[gchar];

external (cdecl) gtk_entry_completion_set_text_column(arg0:Pointer[GtkEntryCompletion], arg1:gint) : ;

external (cdecl) gtk_entry_completion_get_text_column(arg0:Pointer[GtkEntryCompletion]) : gint;


alias GtkEntryIconPosition = CUInt;
alias GTK_ENTRY_ICON_PRIMARY = CUInt(0);
alias GTK_ENTRY_ICON_SECONDARY = CUInt(1);

alias GtkEntry = Struct__GtkEntry;

alias GtkEntryClass = Struct__GtkEntryClass;

record Struct__GtkEntry (
    widget : GtkWidget,
    text : Pointer[gchar],
    editable : guint,
    visible : guint,
    overwrite_mode : guint,
    in_drag : guint,
    text_length : guint16,
    text_max_length : guint16,
    text_area : Pointer[GdkWindow],
    im_context : Pointer[GtkIMContext],
    popup_menu : Pointer[GtkWidget],
    current_pos : gint,
    selection_bound : gint,
    cached_layout : Pointer[PangoLayout],
    cache_includes_preedit : guint,
    need_im_reset : guint,
    has_frame : guint,
    activates_default : guint,
    cursor_visible : guint,
    in_click : guint,
    is_cell_renderer : guint,
    editing_canceled : guint,
    mouse_cursor_obscured : guint,
    select_words : guint,
    select_lines : guint,
    resolved_dir : guint,
    truncate_multiline : guint,
    button : guint,
    blink_timeout : guint,
    recompute_idle : guint,
    scroll_offset : gint,
    ascent : gint,
    descent : gint,
    x_text_size : guint16,
    x_n_bytes : guint16,
    preedit_length : guint16,
    preedit_cursor : guint16,
    dnd_position : gint,
    drag_start_x : gint,
    drag_start_y : gint,
    invisible_char : gunichar,
    width_chars : gint,
);

record Struct__GtkEntryClass (
    parent_class : GtkWidgetClass,
    populate_popup : CCodePointer[[Pointer[GtkEntry], Pointer[GtkMenu]],[]],
    activate : CCodePointer[[Pointer[GtkEntry]],[]],
    move_cursor : CCodePointer[[Pointer[GtkEntry], GtkMovementStep, gint, gboolean],[]],
    insert_at_cursor : CCodePointer[[Pointer[GtkEntry], Pointer[gchar]],[]],
    delete_from_cursor : CCodePointer[[Pointer[GtkEntry], GtkDeleteType, gint],[]],
    backspace : CCodePointer[[Pointer[GtkEntry]],[]],
    cut_clipboard : CCodePointer[[Pointer[GtkEntry]],[]],
    copy_clipboard : CCodePointer[[Pointer[GtkEntry]],[]],
    paste_clipboard : CCodePointer[[Pointer[GtkEntry]],[]],
    toggle_overwrite : CCodePointer[[Pointer[GtkEntry]],[]],
    get_text_area_size : CCodePointer[[Pointer[GtkEntry], Pointer[gint], Pointer[gint], Pointer[gint], Pointer[gint]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
);

external (cdecl) gtk_entry_get_type() : GType;

external (cdecl) gtk_entry_new() : Pointer[GtkWidget];

external (cdecl) gtk_entry_new_with_buffer(arg0:Pointer[GtkEntryBuffer]) : Pointer[GtkWidget];

external (cdecl) gtk_entry_get_buffer(arg0:Pointer[GtkEntry]) : Pointer[GtkEntryBuffer];

external (cdecl) gtk_entry_set_buffer(arg0:Pointer[GtkEntry], arg1:Pointer[GtkEntryBuffer]) : ;

external (cdecl) gtk_entry_get_text_window(arg0:Pointer[GtkEntry]) : Pointer[GdkWindow];

external (cdecl) gtk_entry_set_visibility(arg0:Pointer[GtkEntry], arg1:gboolean) : ;

external (cdecl) gtk_entry_get_visibility(arg0:Pointer[GtkEntry]) : gboolean;

external (cdecl) gtk_entry_set_invisible_char(arg0:Pointer[GtkEntry], arg1:gunichar) : ;

external (cdecl) gtk_entry_get_invisible_char(arg0:Pointer[GtkEntry]) : gunichar;

external (cdecl) gtk_entry_unset_invisible_char(arg0:Pointer[GtkEntry]) : ;

external (cdecl) gtk_entry_set_has_frame(arg0:Pointer[GtkEntry], arg1:gboolean) : ;

external (cdecl) gtk_entry_get_has_frame(arg0:Pointer[GtkEntry]) : gboolean;

external (cdecl) gtk_entry_set_inner_border(arg0:Pointer[GtkEntry], arg1:Pointer[GtkBorder]) : ;

external (cdecl) gtk_entry_get_inner_border(arg0:Pointer[GtkEntry]) : Pointer[GtkBorder];

external (cdecl) gtk_entry_set_overwrite_mode(arg0:Pointer[GtkEntry], arg1:gboolean) : ;

external (cdecl) gtk_entry_get_overwrite_mode(arg0:Pointer[GtkEntry]) : gboolean;

external (cdecl) gtk_entry_set_max_length(arg0:Pointer[GtkEntry], arg1:gint) : ;

external (cdecl) gtk_entry_get_max_length(arg0:Pointer[GtkEntry]) : gint;

external (cdecl) gtk_entry_get_text_length(arg0:Pointer[GtkEntry]) : guint16;

external (cdecl) gtk_entry_set_activates_default(arg0:Pointer[GtkEntry], arg1:gboolean) : ;

external (cdecl) gtk_entry_get_activates_default(arg0:Pointer[GtkEntry]) : gboolean;

external (cdecl) gtk_entry_set_width_chars(arg0:Pointer[GtkEntry], arg1:gint) : ;

external (cdecl) gtk_entry_get_width_chars(arg0:Pointer[GtkEntry]) : gint;

external (cdecl) gtk_entry_set_text(arg0:Pointer[GtkEntry], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_entry_get_text(arg0:Pointer[GtkEntry]) : Pointer[gchar];

external (cdecl) gtk_entry_get_layout(arg0:Pointer[GtkEntry]) : Pointer[PangoLayout];

external (cdecl) gtk_entry_get_layout_offsets(arg0:Pointer[GtkEntry], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_entry_set_alignment(arg0:Pointer[GtkEntry], arg1:gfloat) : ;

external (cdecl) gtk_entry_get_alignment(arg0:Pointer[GtkEntry]) : gfloat;

external (cdecl) gtk_entry_set_completion(arg0:Pointer[GtkEntry], arg1:Pointer[GtkEntryCompletion]) : ;

external (cdecl) gtk_entry_get_completion(arg0:Pointer[GtkEntry]) : Pointer[GtkEntryCompletion];

external (cdecl) gtk_entry_layout_index_to_text_index(arg0:Pointer[GtkEntry], arg1:gint) : gint;

external (cdecl) gtk_entry_text_index_to_layout_index(arg0:Pointer[GtkEntry], arg1:gint) : gint;

external (cdecl) gtk_entry_set_cursor_hadjustment(arg0:Pointer[GtkEntry], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_entry_get_cursor_hadjustment(arg0:Pointer[GtkEntry]) : Pointer[GtkAdjustment];

external (cdecl) gtk_entry_set_progress_fraction(arg0:Pointer[GtkEntry], arg1:gdouble) : ;

external (cdecl) gtk_entry_get_progress_fraction(arg0:Pointer[GtkEntry]) : gdouble;

external (cdecl) gtk_entry_set_progress_pulse_step(arg0:Pointer[GtkEntry], arg1:gdouble) : ;

external (cdecl) gtk_entry_get_progress_pulse_step(arg0:Pointer[GtkEntry]) : gdouble;

external (cdecl) gtk_entry_progress_pulse(arg0:Pointer[GtkEntry]) : ;

external (cdecl) gtk_entry_set_icon_from_pixbuf(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_entry_set_icon_from_stock(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_entry_set_icon_from_icon_name(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_entry_set_icon_from_gicon(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[GIcon]) : ;

external (cdecl) gtk_entry_get_icon_storage_type(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : GtkImageType;

external (cdecl) gtk_entry_get_icon_pixbuf(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[GdkPixbuf];

external (cdecl) gtk_entry_get_icon_stock(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[gchar];

external (cdecl) gtk_entry_get_icon_name(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[gchar];

external (cdecl) gtk_entry_get_icon_gicon(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[GIcon];

external (cdecl) gtk_entry_set_icon_activatable(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:gboolean) : ;

external (cdecl) gtk_entry_get_icon_activatable(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : gboolean;

external (cdecl) gtk_entry_set_icon_sensitive(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:gboolean) : ;

external (cdecl) gtk_entry_get_icon_sensitive(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : gboolean;

external (cdecl) gtk_entry_get_icon_at_pos(arg0:Pointer[GtkEntry], arg1:gint, arg2:gint) : gint;

external (cdecl) gtk_entry_set_icon_tooltip_text(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_entry_get_icon_tooltip_text(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[gchar];

external (cdecl) gtk_entry_set_icon_tooltip_markup(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_entry_get_icon_tooltip_markup(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[gchar];

external (cdecl) gtk_entry_set_icon_drag_source(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition, arg2:Pointer[GtkTargetList], arg3:GdkDragAction) : ;

external (cdecl) gtk_entry_get_current_icon_drag_source(arg0:Pointer[GtkEntry]) : gint;

external (cdecl) gtk_entry_get_icon_window(arg0:Pointer[GtkEntry], arg1:GtkEntryIconPosition) : Pointer[GdkWindow];

external (cdecl) gtk_entry_im_context_filter_keypress(arg0:Pointer[GtkEntry], arg1:Pointer[GdkEventKey]) : gboolean;

external (cdecl) gtk_entry_reset_im_context(arg0:Pointer[GtkEntry]) : ;

external (cdecl) gtk_entry_new_with_max_length(arg0:gint) : Pointer[GtkWidget];

external (cdecl) gtk_entry_append_text(arg0:Pointer[GtkEntry], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_entry_prepend_text(arg0:Pointer[GtkEntry], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_entry_set_position(arg0:Pointer[GtkEntry], arg1:gint) : ;

external (cdecl) gtk_entry_select_region(arg0:Pointer[GtkEntry], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_entry_set_editable(arg0:Pointer[GtkEntry], arg1:gboolean) : ;


alias GtkTreeViewDropPosition = CUInt;
alias GTK_TREE_VIEW_DROP_BEFORE = CUInt(0);
alias GTK_TREE_VIEW_DROP_AFTER = CUInt(1);
alias GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = CUInt(2);
alias GTK_TREE_VIEW_DROP_INTO_OR_AFTER = CUInt(3);

alias GtkTreeView = Struct__GtkTreeView;

alias GtkTreeViewClass = Struct__GtkTreeViewClass;

alias Struct__GtkTreeViewPrivate = Opaque;

alias GtkTreeViewPrivate = Struct__GtkTreeViewPrivate;

alias GtkTreeSelection = Struct__GtkTreeSelection;

alias GtkTreeSelectionClass = Struct__GtkTreeSelectionClass;

record Struct__GtkTreeView (
    parent : GtkContainer,
    priv : Pointer[GtkTreeViewPrivate],
);

record Struct__GtkTreeViewClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkTreeView], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
    row_activated : CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreePath], Pointer[GtkTreeViewColumn]],[]],
    test_expand_row : CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreeIter], Pointer[GtkTreePath]],[gboolean]],
    test_collapse_row : CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreeIter], Pointer[GtkTreePath]],[gboolean]],
    row_expanded : CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreeIter], Pointer[GtkTreePath]],[]],
    row_collapsed : CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreeIter], Pointer[GtkTreePath]],[]],
    columns_changed : CCodePointer[[Pointer[GtkTreeView]],[]],
    cursor_changed : CCodePointer[[Pointer[GtkTreeView]],[]],
    move_cursor : CCodePointer[[Pointer[GtkTreeView], GtkMovementStep, gint],[gboolean]],
    select_all : CCodePointer[[Pointer[GtkTreeView]],[gboolean]],
    unselect_all : CCodePointer[[Pointer[GtkTreeView]],[gboolean]],
    select_cursor_row : CCodePointer[[Pointer[GtkTreeView], gboolean],[gboolean]],
    toggle_cursor_row : CCodePointer[[Pointer[GtkTreeView]],[gboolean]],
    expand_collapse_cursor_row : CCodePointer[[Pointer[GtkTreeView], gboolean, gboolean, gboolean],[gboolean]],
    select_cursor_parent : CCodePointer[[Pointer[GtkTreeView]],[gboolean]],
    start_interactive_search : CCodePointer[[Pointer[GtkTreeView]],[gboolean]],
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

alias GtkTreeViewColumnDropFunc = CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreeViewColumn], Pointer[GtkTreeViewColumn], Pointer[GtkTreeViewColumn], gpointer],[gboolean]];

alias GtkTreeViewMappingFunc = CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreePath], gpointer],[]];

alias GtkTreeViewSearchEqualFunc = CCodePointer[[Pointer[GtkTreeModel], gint, Pointer[gchar], Pointer[GtkTreeIter], gpointer],[gboolean]];

alias GtkTreeViewRowSeparatorFunc = CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreeIter], gpointer],[gboolean]];

alias GtkTreeViewSearchPositionFunc = CCodePointer[[Pointer[GtkTreeView], Pointer[GtkWidget], gpointer],[]];

external (cdecl) gtk_tree_view_get_type() : GType;

external (cdecl) gtk_tree_view_new() : Pointer[GtkWidget];

external (cdecl) gtk_tree_view_new_with_model(arg0:Pointer[GtkTreeModel]) : Pointer[GtkWidget];

external (cdecl) gtk_tree_view_get_model(arg0:Pointer[GtkTreeView]) : Pointer[GtkTreeModel];

external (cdecl) gtk_tree_view_set_model(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreeModel]) : ;

external (cdecl) gtk_tree_view_get_selection(arg0:Pointer[GtkTreeView]) : Pointer[GtkTreeSelection];

external (cdecl) gtk_tree_view_get_hadjustment(arg0:Pointer[GtkTreeView]) : Pointer[GtkAdjustment];

external (cdecl) gtk_tree_view_set_hadjustment(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_tree_view_get_vadjustment(arg0:Pointer[GtkTreeView]) : Pointer[GtkAdjustment];

external (cdecl) gtk_tree_view_set_vadjustment(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_tree_view_get_headers_visible(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_headers_visible(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_columns_autosize(arg0:Pointer[GtkTreeView]) : ;

external (cdecl) gtk_tree_view_get_headers_clickable(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_headers_clickable(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_set_rules_hint(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_rules_hint(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_append_column(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_remove_column(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreeViewColumn]) : gint;

external (cdecl) gtk_tree_view_insert_column(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreeViewColumn], arg2:gint) : gint;

external (cdecl) gtk_tree_view_insert_column_with_attributes(arg0:Pointer[GtkTreeView], arg1:gint, arg2:Pointer[gchar], arg3:Pointer[GtkCellRenderer], ..) : gint;

external (cdecl) gtk_tree_view_insert_column_with_data_func(arg0:Pointer[GtkTreeView], arg1:gint, arg2:Pointer[gchar], arg3:Pointer[GtkCellRenderer], arg4:GtkTreeCellDataFunc, arg5:gpointer, arg6:GDestroyNotify) : gint;

external (cdecl) gtk_tree_view_get_column(arg0:Pointer[GtkTreeView], arg1:gint) : Pointer[GtkTreeViewColumn];

external (cdecl) gtk_tree_view_get_columns(arg0:Pointer[GtkTreeView]) : Pointer[GList];

external (cdecl) gtk_tree_view_move_column_after(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreeViewColumn], arg2:Pointer[GtkTreeViewColumn]) : ;

external (cdecl) gtk_tree_view_set_expander_column(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreeViewColumn]) : ;

external (cdecl) gtk_tree_view_get_expander_column(arg0:Pointer[GtkTreeView]) : Pointer[GtkTreeViewColumn];

external (cdecl) gtk_tree_view_set_column_drag_function(arg0:Pointer[GtkTreeView], arg1:GtkTreeViewColumnDropFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_view_scroll_to_point(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_tree_view_scroll_to_cell(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeViewColumn], arg3:gboolean, arg4:gfloat, arg5:gfloat) : ;

external (cdecl) gtk_tree_view_row_activated(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeViewColumn]) : ;

external (cdecl) gtk_tree_view_expand_all(arg0:Pointer[GtkTreeView]) : ;

external (cdecl) gtk_tree_view_collapse_all(arg0:Pointer[GtkTreeView]) : ;

external (cdecl) gtk_tree_view_expand_to_path(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_view_expand_row(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:gboolean) : gboolean;

external (cdecl) gtk_tree_view_collapse_row(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_view_map_expanded_rows(arg0:Pointer[GtkTreeView], arg1:GtkTreeViewMappingFunc, arg2:gpointer) : ;

external (cdecl) gtk_tree_view_row_expanded(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_view_set_reorderable(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_reorderable(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_cursor(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeViewColumn], arg3:gboolean) : ;

external (cdecl) gtk_tree_view_set_cursor_on_cell(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeViewColumn], arg3:Pointer[GtkCellRenderer], arg4:gboolean) : ;

external (cdecl) gtk_tree_view_get_cursor(arg0:Pointer[GtkTreeView], arg1:Pointer[Pointer[GtkTreePath]], arg2:Pointer[Pointer[GtkTreeViewColumn]]) : ;

external (cdecl) gtk_tree_view_get_bin_window(arg0:Pointer[GtkTreeView]) : Pointer[GdkWindow];

external (cdecl) gtk_tree_view_get_path_at_pos(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[Pointer[GtkTreePath]], arg4:Pointer[Pointer[GtkTreeViewColumn]], arg5:Pointer[gint], arg6:Pointer[gint]) : gboolean;

external (cdecl) gtk_tree_view_get_cell_area(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeViewColumn], arg3:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_tree_view_get_background_area(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreeViewColumn], arg3:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_tree_view_get_visible_rect(arg0:Pointer[GtkTreeView], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_tree_view_widget_to_tree_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_tree_to_widget_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_get_visible_range(arg0:Pointer[GtkTreeView], arg1:Pointer[Pointer[GtkTreePath]], arg2:Pointer[Pointer[GtkTreePath]]) : gboolean;

external (cdecl) gtk_tree_view_enable_model_drag_source(arg0:Pointer[GtkTreeView], arg1:GdkModifierType, arg2:Pointer[GtkTargetEntry], arg3:gint, arg4:GdkDragAction) : ;

external (cdecl) gtk_tree_view_enable_model_drag_dest(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTargetEntry], arg2:gint, arg3:GdkDragAction) : ;

external (cdecl) gtk_tree_view_unset_rows_drag_source(arg0:Pointer[GtkTreeView]) : ;

external (cdecl) gtk_tree_view_unset_rows_drag_dest(arg0:Pointer[GtkTreeView]) : ;

external (cdecl) gtk_tree_view_set_drag_dest_row(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath], arg2:GtkTreeViewDropPosition) : ;

external (cdecl) gtk_tree_view_get_drag_dest_row(arg0:Pointer[GtkTreeView], arg1:Pointer[Pointer[GtkTreePath]], arg2:Pointer[GtkTreeViewDropPosition]) : ;

external (cdecl) gtk_tree_view_get_dest_row_at_pos(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[Pointer[GtkTreePath]], arg4:Pointer[GtkTreeViewDropPosition]) : gboolean;

external (cdecl) gtk_tree_view_create_row_drag_icon(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTreePath]) : Pointer[GdkPixmap];

external (cdecl) gtk_tree_view_set_enable_search(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_enable_search(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_get_search_column(arg0:Pointer[GtkTreeView]) : gint;

external (cdecl) gtk_tree_view_set_search_column(arg0:Pointer[GtkTreeView], arg1:gint) : ;

external (cdecl) gtk_tree_view_get_search_equal_func(arg0:Pointer[GtkTreeView]) : GtkTreeViewSearchEqualFunc;

external (cdecl) gtk_tree_view_set_search_equal_func(arg0:Pointer[GtkTreeView], arg1:GtkTreeViewSearchEqualFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_view_get_search_entry(arg0:Pointer[GtkTreeView]) : Pointer[GtkEntry];

external (cdecl) gtk_tree_view_set_search_entry(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkEntry]) : ;

external (cdecl) gtk_tree_view_get_search_position_func(arg0:Pointer[GtkTreeView]) : GtkTreeViewSearchPositionFunc;

external (cdecl) gtk_tree_view_set_search_position_func(arg0:Pointer[GtkTreeView], arg1:GtkTreeViewSearchPositionFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_view_convert_widget_to_tree_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_convert_tree_to_widget_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_convert_widget_to_bin_window_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_convert_bin_window_to_widget_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_convert_tree_to_bin_window_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_tree_view_convert_bin_window_to_tree_coords(arg0:Pointer[GtkTreeView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

alias GtkTreeDestroyCountFunc = CCodePointer[[Pointer[GtkTreeView], Pointer[GtkTreePath], gint, gpointer],[]];

external (cdecl) gtk_tree_view_set_destroy_count_func(arg0:Pointer[GtkTreeView], arg1:GtkTreeDestroyCountFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_view_set_fixed_height_mode(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_fixed_height_mode(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_hover_selection(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_hover_selection(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_hover_expand(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_hover_expand(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_rubber_banding(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_rubber_banding(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_is_rubber_banding_active(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_get_row_separator_func(arg0:Pointer[GtkTreeView]) : GtkTreeViewRowSeparatorFunc;

external (cdecl) gtk_tree_view_set_row_separator_func(arg0:Pointer[GtkTreeView], arg1:GtkTreeViewRowSeparatorFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_view_get_grid_lines(arg0:Pointer[GtkTreeView]) : GtkTreeViewGridLines;

external (cdecl) gtk_tree_view_set_grid_lines(arg0:Pointer[GtkTreeView], arg1:GtkTreeViewGridLines) : ;

external (cdecl) gtk_tree_view_get_enable_tree_lines(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_enable_tree_lines(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_set_show_expanders(arg0:Pointer[GtkTreeView], arg1:gboolean) : ;

external (cdecl) gtk_tree_view_get_show_expanders(arg0:Pointer[GtkTreeView]) : gboolean;

external (cdecl) gtk_tree_view_set_level_indentation(arg0:Pointer[GtkTreeView], arg1:gint) : ;

external (cdecl) gtk_tree_view_get_level_indentation(arg0:Pointer[GtkTreeView]) : gint;

external (cdecl) gtk_tree_view_set_tooltip_row(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTooltip], arg2:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_view_set_tooltip_cell(arg0:Pointer[GtkTreeView], arg1:Pointer[GtkTooltip], arg2:Pointer[GtkTreePath], arg3:Pointer[GtkTreeViewColumn], arg4:Pointer[GtkCellRenderer]) : ;

external (cdecl) gtk_tree_view_get_tooltip_context(arg0:Pointer[GtkTreeView], arg1:Pointer[gint], arg2:Pointer[gint], arg3:gboolean, arg4:Pointer[Pointer[GtkTreeModel]], arg5:Pointer[Pointer[GtkTreePath]], arg6:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_view_set_tooltip_column(arg0:Pointer[GtkTreeView], arg1:gint) : ;

external (cdecl) gtk_tree_view_get_tooltip_column(arg0:Pointer[GtkTreeView]) : gint;

alias GtkComboBox = Struct__GtkComboBox;

alias GtkComboBoxClass = Struct__GtkComboBoxClass;

alias Struct__GtkComboBoxPrivate = Opaque;

alias GtkComboBoxPrivate = Struct__GtkComboBoxPrivate;

record Struct__GtkComboBox (
    parent_instance : GtkBin,
    priv : Pointer[GtkComboBoxPrivate],
);

record Struct__GtkComboBoxClass (
    parent_class : GtkBinClass,
    changed : CCodePointer[[Pointer[GtkComboBox]],[]],
    get_active_text : CCodePointer[[Pointer[GtkComboBox]],[Pointer[gchar]]],
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
);

external (cdecl) gtk_combo_box_get_type() : GType;

external (cdecl) gtk_combo_box_new() : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_new_with_entry() : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_new_with_model(arg0:Pointer[GtkTreeModel]) : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_new_with_model_and_entry(arg0:Pointer[GtkTreeModel]) : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_get_wrap_width(arg0:Pointer[GtkComboBox]) : gint;

external (cdecl) gtk_combo_box_set_wrap_width(arg0:Pointer[GtkComboBox], arg1:gint) : ;

external (cdecl) gtk_combo_box_get_row_span_column(arg0:Pointer[GtkComboBox]) : gint;

external (cdecl) gtk_combo_box_set_row_span_column(arg0:Pointer[GtkComboBox], arg1:gint) : ;

external (cdecl) gtk_combo_box_get_column_span_column(arg0:Pointer[GtkComboBox]) : gint;

external (cdecl) gtk_combo_box_set_column_span_column(arg0:Pointer[GtkComboBox], arg1:gint) : ;

external (cdecl) gtk_combo_box_get_add_tearoffs(arg0:Pointer[GtkComboBox]) : gboolean;

external (cdecl) gtk_combo_box_set_add_tearoffs(arg0:Pointer[GtkComboBox], arg1:gboolean) : ;

external (cdecl) gtk_combo_box_get_title(arg0:Pointer[GtkComboBox]) : Pointer[gchar];

external (cdecl) gtk_combo_box_set_title(arg0:Pointer[GtkComboBox], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_get_focus_on_click(arg0:Pointer[GtkComboBox]) : gboolean;

external (cdecl) gtk_combo_box_set_focus_on_click(arg0:Pointer[GtkComboBox], arg1:gboolean) : ;

external (cdecl) gtk_combo_box_get_active(arg0:Pointer[GtkComboBox]) : gint;

external (cdecl) gtk_combo_box_set_active(arg0:Pointer[GtkComboBox], arg1:gint) : ;

external (cdecl) gtk_combo_box_get_active_iter(arg0:Pointer[GtkComboBox], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_combo_box_set_active_iter(arg0:Pointer[GtkComboBox], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_combo_box_set_model(arg0:Pointer[GtkComboBox], arg1:Pointer[GtkTreeModel]) : ;

external (cdecl) gtk_combo_box_get_model(arg0:Pointer[GtkComboBox]) : Pointer[GtkTreeModel];

external (cdecl) gtk_combo_box_get_row_separator_func(arg0:Pointer[GtkComboBox]) : GtkTreeViewRowSeparatorFunc;

external (cdecl) gtk_combo_box_set_row_separator_func(arg0:Pointer[GtkComboBox], arg1:GtkTreeViewRowSeparatorFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_combo_box_set_button_sensitivity(arg0:Pointer[GtkComboBox], arg1:GtkSensitivityType) : ;

external (cdecl) gtk_combo_box_get_button_sensitivity(arg0:Pointer[GtkComboBox]) : GtkSensitivityType;

external (cdecl) gtk_combo_box_get_has_entry(arg0:Pointer[GtkComboBox]) : gboolean;

external (cdecl) gtk_combo_box_set_entry_text_column(arg0:Pointer[GtkComboBox], arg1:gint) : ;

external (cdecl) gtk_combo_box_get_entry_text_column(arg0:Pointer[GtkComboBox]) : gint;

external (cdecl) gtk_combo_box_new_text() : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_append_text(arg0:Pointer[GtkComboBox], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_insert_text(arg0:Pointer[GtkComboBox], arg1:gint, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_prepend_text(arg0:Pointer[GtkComboBox], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_remove_text(arg0:Pointer[GtkComboBox], arg1:gint) : ;

external (cdecl) gtk_combo_box_get_active_text(arg0:Pointer[GtkComboBox]) : Pointer[gchar];

external (cdecl) gtk_combo_box_popup(arg0:Pointer[GtkComboBox]) : ;

external (cdecl) gtk_combo_box_popdown(arg0:Pointer[GtkComboBox]) : ;

external (cdecl) gtk_combo_box_get_popup_accessible(arg0:Pointer[GtkComboBox]) : Pointer[AtkObject];

alias GtkComboBoxEntry = Struct__GtkComboBoxEntry;

alias GtkComboBoxEntryClass = Struct__GtkComboBoxEntryClass;

alias Struct__GtkComboBoxEntryPrivate = Opaque;

alias GtkComboBoxEntryPrivate = Struct__GtkComboBoxEntryPrivate;

record Struct__GtkComboBoxEntry (
    parent_instance : GtkComboBox,
    priv : Pointer[GtkComboBoxEntryPrivate],
);

record Struct__GtkComboBoxEntryClass (
    parent_class : GtkComboBoxClass,
    _gtk_reserved0 : CCodePointer[[],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_combo_box_entry_get_type() : GType;

external (cdecl) gtk_combo_box_entry_new() : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_entry_new_with_model(arg0:Pointer[GtkTreeModel], arg1:gint) : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_entry_set_text_column(arg0:Pointer[GtkComboBoxEntry], arg1:gint) : ;

external (cdecl) gtk_combo_box_entry_get_text_column(arg0:Pointer[GtkComboBoxEntry]) : gint;

external (cdecl) gtk_combo_box_entry_new_text() : Pointer[GtkWidget];

alias GtkComboBoxText = Struct__GtkComboBoxText;

alias Struct__GtkComboBoxTextPrivate = Opaque;

alias GtkComboBoxTextPrivate = Struct__GtkComboBoxTextPrivate;

alias GtkComboBoxTextClass = Struct__GtkComboBoxTextClass;

record Struct__GtkComboBoxText (
    parent_instance : GtkComboBox,
    priv : Pointer[GtkComboBoxTextPrivate],
);

record Struct__GtkComboBoxTextClass (
    parent_class : GtkComboBoxClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_combo_box_text_get_type() : GType;

external (cdecl) gtk_combo_box_text_new() : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_text_new_with_entry() : Pointer[GtkWidget];

external (cdecl) gtk_combo_box_text_append_text(arg0:Pointer[GtkComboBoxText], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_text_insert_text(arg0:Pointer[GtkComboBoxText], arg1:gint, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_text_prepend_text(arg0:Pointer[GtkComboBoxText], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_combo_box_text_remove(arg0:Pointer[GtkComboBoxText], arg1:gint) : ;

external (cdecl) gtk_combo_box_text_get_active_text(arg0:Pointer[GtkComboBoxText]) : Pointer[gchar];

alias GtkDrawingArea = Struct__GtkDrawingArea;

alias GtkDrawingAreaClass = Struct__GtkDrawingAreaClass;

record Struct__GtkDrawingArea (
    widget : GtkWidget,
    draw_data : gpointer,
);

record Struct__GtkDrawingAreaClass (
    parent_class : GtkWidgetClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_drawing_area_get_type() : GType;

external (cdecl) gtk_drawing_area_new() : Pointer[GtkWidget];

external (cdecl) gtk_drawing_area_size(arg0:Pointer[GtkDrawingArea], arg1:gint, arg2:gint) : ;

alias GtkEventBox = Struct__GtkEventBox;

alias GtkEventBoxClass = Struct__GtkEventBoxClass;

record Struct__GtkEventBox (
    bin : GtkBin,
);

record Struct__GtkEventBoxClass (
    parent_class : GtkBinClass,
);

external (cdecl) gtk_event_box_get_type() : GType;

external (cdecl) gtk_event_box_new() : Pointer[GtkWidget];

external (cdecl) gtk_event_box_get_visible_window(arg0:Pointer[GtkEventBox]) : gboolean;

external (cdecl) gtk_event_box_set_visible_window(arg0:Pointer[GtkEventBox], arg1:gboolean) : ;

external (cdecl) gtk_event_box_get_above_child(arg0:Pointer[GtkEventBox]) : gboolean;

external (cdecl) gtk_event_box_set_above_child(arg0:Pointer[GtkEventBox], arg1:gboolean) : ;

alias GtkExpander = Struct__GtkExpander;

alias GtkExpanderClass = Struct__GtkExpanderClass;

alias Struct__GtkExpanderPrivate = Opaque;

alias GtkExpanderPrivate = Struct__GtkExpanderPrivate;

record Struct__GtkExpander (
    bin : GtkBin,
    priv : Pointer[GtkExpanderPrivate],
);

record Struct__GtkExpanderClass (
    parent_class : GtkBinClass,
    activate : CCodePointer[[Pointer[GtkExpander]],[]],
);

external (cdecl) gtk_expander_get_type() : GType;

external (cdecl) gtk_expander_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_expander_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_expander_set_expanded(arg0:Pointer[GtkExpander], arg1:gboolean) : ;

external (cdecl) gtk_expander_get_expanded(arg0:Pointer[GtkExpander]) : gboolean;

external (cdecl) gtk_expander_set_spacing(arg0:Pointer[GtkExpander], arg1:gint) : ;

external (cdecl) gtk_expander_get_spacing(arg0:Pointer[GtkExpander]) : gint;

external (cdecl) gtk_expander_set_label(arg0:Pointer[GtkExpander], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_expander_get_label(arg0:Pointer[GtkExpander]) : Pointer[gchar];

external (cdecl) gtk_expander_set_use_underline(arg0:Pointer[GtkExpander], arg1:gboolean) : ;

external (cdecl) gtk_expander_get_use_underline(arg0:Pointer[GtkExpander]) : gboolean;

external (cdecl) gtk_expander_set_use_markup(arg0:Pointer[GtkExpander], arg1:gboolean) : ;

external (cdecl) gtk_expander_get_use_markup(arg0:Pointer[GtkExpander]) : gboolean;

external (cdecl) gtk_expander_set_label_widget(arg0:Pointer[GtkExpander], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_expander_get_label_widget(arg0:Pointer[GtkExpander]) : Pointer[GtkWidget];

external (cdecl) gtk_expander_set_label_fill(arg0:Pointer[GtkExpander], arg1:gboolean) : ;

external (cdecl) gtk_expander_get_label_fill(arg0:Pointer[GtkExpander]) : gboolean;

alias GtkFixed = Struct__GtkFixed;

alias GtkFixedClass = Struct__GtkFixedClass;

alias GtkFixedChild = Struct__GtkFixedChild;

record Struct__GtkFixed (
    container : GtkContainer,
    children : Pointer[GList],
);

record Struct__GtkFixedClass (
    parent_class : GtkContainerClass,
);

record Struct__GtkFixedChild (
    widget : Pointer[GtkWidget],
    x : gint,
    y : gint,
);

external (cdecl) gtk_fixed_get_type() : GType;

external (cdecl) gtk_fixed_new() : Pointer[GtkWidget];

external (cdecl) gtk_fixed_put(arg0:Pointer[GtkFixed], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_fixed_move(arg0:Pointer[GtkFixed], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_fixed_set_has_window(arg0:Pointer[GtkFixed], arg1:gboolean) : ;

external (cdecl) gtk_fixed_get_has_window(arg0:Pointer[GtkFixed]) : gboolean;

alias Struct__GtkFileFilter = Opaque;

alias GtkFileFilter = Struct__GtkFileFilter;

alias GtkFileFilterInfo = Struct__GtkFileFilterInfo;


alias GtkFileFilterFlags = CUInt;
alias GTK_FILE_FILTER_FILENAME = CUInt(1);
alias GTK_FILE_FILTER_URI = CUInt(2);
alias GTK_FILE_FILTER_DISPLAY_NAME = CUInt(4);
alias GTK_FILE_FILTER_MIME_TYPE = CUInt(8);

alias GtkFileFilterFunc = CCodePointer[[Pointer[GtkFileFilterInfo], gpointer],[gboolean]];

record Struct__GtkFileFilterInfo (
    contains : GtkFileFilterFlags,
    filename : Pointer[gchar],
    uri : Pointer[gchar],
    display_name : Pointer[gchar],
    mime_type : Pointer[gchar],
);

external (cdecl) gtk_file_filter_get_type() : GType;

external (cdecl) gtk_file_filter_new() : Pointer[GtkFileFilter];

external (cdecl) gtk_file_filter_set_name(arg0:Pointer[GtkFileFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_filter_get_name(arg0:Pointer[GtkFileFilter]) : Pointer[gchar];

external (cdecl) gtk_file_filter_add_mime_type(arg0:Pointer[GtkFileFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_filter_add_pattern(arg0:Pointer[GtkFileFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_filter_add_pixbuf_formats(arg0:Pointer[GtkFileFilter]) : ;

external (cdecl) gtk_file_filter_add_custom(arg0:Pointer[GtkFileFilter], arg1:GtkFileFilterFlags, arg2:GtkFileFilterFunc, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_file_filter_get_needed(arg0:Pointer[GtkFileFilter]) : GtkFileFilterFlags;

external (cdecl) gtk_file_filter_filter(arg0:Pointer[GtkFileFilter], arg1:Pointer[GtkFileFilterInfo]) : gboolean;

alias Struct__GtkFileChooser = Opaque;

alias GtkFileChooser = Struct__GtkFileChooser;


alias GtkFileChooserAction = CUInt;
alias GTK_FILE_CHOOSER_ACTION_OPEN = CUInt(0);
alias GTK_FILE_CHOOSER_ACTION_SAVE = CUInt(1);
alias GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = CUInt(2);
alias GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = CUInt(3);


alias GtkFileChooserConfirmation = CUInt;
alias GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = CUInt(0);
alias GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = CUInt(1);
alias GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = CUInt(2);

external (cdecl) gtk_file_chooser_get_type() : GType;


alias GtkFileChooserError = CUInt;
alias GTK_FILE_CHOOSER_ERROR_NONEXISTENT = CUInt(0);
alias GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = CUInt(1);
alias GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = CUInt(2);
alias GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = CUInt(3);

external (cdecl) gtk_file_chooser_error_quark() : GQuark;

external (cdecl) gtk_file_chooser_set_action(arg0:Pointer[GtkFileChooser], arg1:GtkFileChooserAction) : ;

external (cdecl) gtk_file_chooser_get_action(arg0:Pointer[GtkFileChooser]) : GtkFileChooserAction;

external (cdecl) gtk_file_chooser_set_local_only(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_local_only(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_set_select_multiple(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_select_multiple(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_set_show_hidden(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_show_hidden(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_set_do_overwrite_confirmation(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_do_overwrite_confirmation(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_set_create_folders(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_create_folders(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_set_current_name(arg0:Pointer[GtkFileChooser], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_chooser_get_filename(arg0:Pointer[GtkFileChooser]) : Pointer[gchar];

external (cdecl) gtk_file_chooser_set_filename(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar]) : gboolean;

external (cdecl) gtk_file_chooser_select_filename(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar]) : gboolean;

external (cdecl) gtk_file_chooser_unselect_filename(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar]) : ;

external (cdecl) gtk_file_chooser_select_all(arg0:Pointer[GtkFileChooser]) : ;

external (cdecl) gtk_file_chooser_unselect_all(arg0:Pointer[GtkFileChooser]) : ;

external (cdecl) gtk_file_chooser_get_filenames(arg0:Pointer[GtkFileChooser]) : Pointer[GSList];

external (cdecl) gtk_file_chooser_set_current_folder(arg0:Pointer[GtkFileChooser], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_file_chooser_get_current_folder(arg0:Pointer[GtkFileChooser]) : Pointer[gchar];

external (cdecl) gtk_file_chooser_get_uri(arg0:Pointer[GtkFileChooser]) : Pointer[gchar];

external (cdecl) gtk_file_chooser_set_uri(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar]) : gboolean;

external (cdecl) gtk_file_chooser_select_uri(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar]) : gboolean;

external (cdecl) gtk_file_chooser_unselect_uri(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar]) : ;

external (cdecl) gtk_file_chooser_get_uris(arg0:Pointer[GtkFileChooser]) : Pointer[GSList];

external (cdecl) gtk_file_chooser_set_current_folder_uri(arg0:Pointer[GtkFileChooser], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_file_chooser_get_current_folder_uri(arg0:Pointer[GtkFileChooser]) : Pointer[gchar];

external (cdecl) gtk_file_chooser_get_file(arg0:Pointer[GtkFileChooser]) : Pointer[GFile];

external (cdecl) gtk_file_chooser_set_file(arg0:Pointer[GtkFileChooser], arg1:Pointer[GFile], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_select_file(arg0:Pointer[GtkFileChooser], arg1:Pointer[GFile], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_unselect_file(arg0:Pointer[GtkFileChooser], arg1:Pointer[GFile]) : ;

external (cdecl) gtk_file_chooser_get_files(arg0:Pointer[GtkFileChooser]) : Pointer[GSList];

external (cdecl) gtk_file_chooser_set_current_folder_file(arg0:Pointer[GtkFileChooser], arg1:Pointer[GFile], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_get_current_folder_file(arg0:Pointer[GtkFileChooser]) : Pointer[GFile];

external (cdecl) gtk_file_chooser_set_preview_widget(arg0:Pointer[GtkFileChooser], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_file_chooser_get_preview_widget(arg0:Pointer[GtkFileChooser]) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_set_preview_widget_active(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_preview_widget_active(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_set_use_preview_label(arg0:Pointer[GtkFileChooser], arg1:gboolean) : ;

external (cdecl) gtk_file_chooser_get_use_preview_label(arg0:Pointer[GtkFileChooser]) : gboolean;

external (cdecl) gtk_file_chooser_get_preview_filename(arg0:Pointer[GtkFileChooser]) : Pointer[CChar];

external (cdecl) gtk_file_chooser_get_preview_uri(arg0:Pointer[GtkFileChooser]) : Pointer[CChar];

external (cdecl) gtk_file_chooser_get_preview_file(arg0:Pointer[GtkFileChooser]) : Pointer[GFile];

external (cdecl) gtk_file_chooser_set_extra_widget(arg0:Pointer[GtkFileChooser], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_file_chooser_get_extra_widget(arg0:Pointer[GtkFileChooser]) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_add_filter(arg0:Pointer[GtkFileChooser], arg1:Pointer[GtkFileFilter]) : ;

external (cdecl) gtk_file_chooser_remove_filter(arg0:Pointer[GtkFileChooser], arg1:Pointer[GtkFileFilter]) : ;

external (cdecl) gtk_file_chooser_list_filters(arg0:Pointer[GtkFileChooser]) : Pointer[GSList];

external (cdecl) gtk_file_chooser_set_filter(arg0:Pointer[GtkFileChooser], arg1:Pointer[GtkFileFilter]) : ;

external (cdecl) gtk_file_chooser_get_filter(arg0:Pointer[GtkFileChooser]) : Pointer[GtkFileFilter];

external (cdecl) gtk_file_chooser_add_shortcut_folder(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_remove_shortcut_folder(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_list_shortcut_folders(arg0:Pointer[GtkFileChooser]) : Pointer[GSList];

external (cdecl) gtk_file_chooser_add_shortcut_folder_uri(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_remove_shortcut_folder_uri(arg0:Pointer[GtkFileChooser], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_file_chooser_list_shortcut_folder_uris(arg0:Pointer[GtkFileChooser]) : Pointer[GSList];

alias GtkHBox = Struct__GtkHBox;

alias GtkHBoxClass = Struct__GtkHBoxClass;

record Struct__GtkHBox (
    box : GtkBox,
);

record Struct__GtkHBoxClass (
    parent_class : GtkBoxClass,
);

external (cdecl) gtk_hbox_get_type() : GType;

external (cdecl) gtk_hbox_new(arg0:gboolean, arg1:gint) : Pointer[GtkWidget];

alias GtkFileChooserButton = Struct__GtkFileChooserButton;

alias Struct__GtkFileChooserButtonPrivate = Opaque;

alias GtkFileChooserButtonPrivate = Struct__GtkFileChooserButtonPrivate;

alias GtkFileChooserButtonClass = Struct__GtkFileChooserButtonClass;

record Struct__GtkFileChooserButton (
    parent : GtkHBox,
    priv : Pointer[GtkFileChooserButtonPrivate],
);

record Struct__GtkFileChooserButtonClass (
    parent_class : GtkHBoxClass,
    file_set : CCodePointer[[Pointer[GtkFileChooserButton]],[]],
    __gtk_reserved1 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved1 */,
    __gtk_reserved2 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved2 */,
    __gtk_reserved3 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved3 */,
    __gtk_reserved4 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved4 */,
    __gtk_reserved5 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved5 */,
    __gtk_reserved6 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved6 */,
    __gtk_reserved7 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved7 */,
);

external (cdecl) gtk_file_chooser_button_get_type() : GType;

external (cdecl) gtk_file_chooser_button_new(arg0:Pointer[gchar], arg1:GtkFileChooserAction) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_button_new_with_backend(arg0:Pointer[gchar], arg1:GtkFileChooserAction, arg2:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_button_new_with_dialog(arg0:Pointer[GtkWidget]) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_button_get_title(arg0:Pointer[GtkFileChooserButton]) : Pointer[gchar];

external (cdecl) gtk_file_chooser_button_set_title(arg0:Pointer[GtkFileChooserButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_chooser_button_get_width_chars(arg0:Pointer[GtkFileChooserButton]) : gint;

external (cdecl) gtk_file_chooser_button_set_width_chars(arg0:Pointer[GtkFileChooserButton], arg1:gint) : ;

external (cdecl) gtk_file_chooser_button_get_focus_on_click(arg0:Pointer[GtkFileChooserButton]) : gboolean;

external (cdecl) gtk_file_chooser_button_set_focus_on_click(arg0:Pointer[GtkFileChooserButton], arg1:gboolean) : ;

alias GtkFileChooserDialog = Struct__GtkFileChooserDialog;

alias Struct__GtkFileChooserDialogPrivate = Opaque;

alias GtkFileChooserDialogPrivate = Struct__GtkFileChooserDialogPrivate;

alias GtkFileChooserDialogClass = Struct__GtkFileChooserDialogClass;

record Struct__GtkFileChooserDialog (
    parent_instance : GtkDialog,
    priv : Pointer[GtkFileChooserDialogPrivate],
);

record Struct__GtkFileChooserDialogClass (
    parent_class : GtkDialogClass,
);

external (cdecl) gtk_file_chooser_dialog_get_type() : GType;

external (cdecl) gtk_file_chooser_dialog_new(arg0:Pointer[gchar], arg1:Pointer[GtkWindow], arg2:GtkFileChooserAction, arg3:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_dialog_new_with_backend(arg0:Pointer[gchar], arg1:Pointer[GtkWindow], arg2:GtkFileChooserAction, arg3:Pointer[gchar], arg4:Pointer[gchar], ..) : Pointer[GtkWidget];

alias GtkFileChooserWidget = Struct__GtkFileChooserWidget;

alias Struct__GtkFileChooserWidgetPrivate = Opaque;

alias GtkFileChooserWidgetPrivate = Struct__GtkFileChooserWidgetPrivate;

alias GtkFileChooserWidgetClass = Struct__GtkFileChooserWidgetClass;

record Struct__GtkFileChooserWidget (
    parent_instance : GtkVBox,
    priv : Pointer[GtkFileChooserWidgetPrivate],
);

record Struct__GtkFileChooserWidgetClass (
    parent_class : GtkVBoxClass,
);

external (cdecl) gtk_file_chooser_widget_get_type() : GType;

external (cdecl) gtk_file_chooser_widget_new(arg0:GtkFileChooserAction) : Pointer[GtkWidget];

external (cdecl) gtk_file_chooser_widget_new_with_backend(arg0:GtkFileChooserAction, arg1:Pointer[gchar]) : Pointer[GtkWidget];

alias GtkFontButton = Struct__GtkFontButton;

alias GtkFontButtonClass = Struct__GtkFontButtonClass;

alias Struct__GtkFontButtonPrivate = Opaque;

alias GtkFontButtonPrivate = Struct__GtkFontButtonPrivate;

record Struct__GtkFontButton (
    button : GtkButton,
    priv : Pointer[GtkFontButtonPrivate],
);

record Struct__GtkFontButtonClass (
    parent_class : GtkButtonClass,
    font_set : CCodePointer[[Pointer[GtkFontButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_font_button_get_type() : GType;

external (cdecl) gtk_font_button_new() : Pointer[GtkWidget];

external (cdecl) gtk_font_button_new_with_font(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_font_button_get_title(arg0:Pointer[GtkFontButton]) : Pointer[gchar];

external (cdecl) gtk_font_button_set_title(arg0:Pointer[GtkFontButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_font_button_get_use_font(arg0:Pointer[GtkFontButton]) : gboolean;

external (cdecl) gtk_font_button_set_use_font(arg0:Pointer[GtkFontButton], arg1:gboolean) : ;

external (cdecl) gtk_font_button_get_use_size(arg0:Pointer[GtkFontButton]) : gboolean;

external (cdecl) gtk_font_button_set_use_size(arg0:Pointer[GtkFontButton], arg1:gboolean) : ;

external (cdecl) gtk_font_button_get_font_name(arg0:Pointer[GtkFontButton]) : Pointer[gchar];

external (cdecl) gtk_font_button_set_font_name(arg0:Pointer[GtkFontButton], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_font_button_get_show_style(arg0:Pointer[GtkFontButton]) : gboolean;

external (cdecl) gtk_font_button_set_show_style(arg0:Pointer[GtkFontButton], arg1:gboolean) : ;

external (cdecl) gtk_font_button_get_show_size(arg0:Pointer[GtkFontButton]) : gboolean;

external (cdecl) gtk_font_button_set_show_size(arg0:Pointer[GtkFontButton], arg1:gboolean) : ;

alias GtkFontSelection = Struct__GtkFontSelection;

alias GtkFontSelectionClass = Struct__GtkFontSelectionClass;

alias GtkFontSelectionDialog = Struct__GtkFontSelectionDialog;

alias GtkFontSelectionDialogClass = Struct__GtkFontSelectionDialogClass;

record Struct__GtkFontSelection (
    parent_instance : GtkVBox,
    font_entry : Pointer[GtkWidget],
    family_list : Pointer[GtkWidget],
    font_style_entry : Pointer[GtkWidget],
    face_list : Pointer[GtkWidget],
    size_entry : Pointer[GtkWidget],
    size_list : Pointer[GtkWidget],
    pixels_button : Pointer[GtkWidget],
    points_button : Pointer[GtkWidget],
    filter_button : Pointer[GtkWidget],
    preview_entry : Pointer[GtkWidget],
    family : Pointer[PangoFontFamily],
    face : Pointer[PangoFontFace],
    size : gint,
    font : Pointer[GdkFont],
);

record Struct__GtkFontSelectionClass (
    parent_class : GtkVBoxClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkFontSelectionDialog (
    parent_instance : GtkDialog,
    fontsel : Pointer[GtkWidget],
    main_vbox : Pointer[GtkWidget],
    action_area : Pointer[GtkWidget],
    ok_button : Pointer[GtkWidget],
    apply_button : Pointer[GtkWidget],
    cancel_button : Pointer[GtkWidget],
    dialog_width : gint,
    auto_resize : gboolean,
);

record Struct__GtkFontSelectionDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_font_selection_get_type() : GType;

external (cdecl) gtk_font_selection_new() : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_get_family_list(arg0:Pointer[GtkFontSelection]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_get_face_list(arg0:Pointer[GtkFontSelection]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_get_size_entry(arg0:Pointer[GtkFontSelection]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_get_size_list(arg0:Pointer[GtkFontSelection]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_get_preview_entry(arg0:Pointer[GtkFontSelection]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_get_family(arg0:Pointer[GtkFontSelection]) : Pointer[PangoFontFamily];

external (cdecl) gtk_font_selection_get_face(arg0:Pointer[GtkFontSelection]) : Pointer[PangoFontFace];

external (cdecl) gtk_font_selection_get_size(arg0:Pointer[GtkFontSelection]) : gint;

external (cdecl) gtk_font_selection_get_font_name(arg0:Pointer[GtkFontSelection]) : Pointer[gchar];

external (cdecl) gtk_font_selection_get_font(arg0:Pointer[GtkFontSelection]) : Pointer[GdkFont];

external (cdecl) gtk_font_selection_set_font_name(arg0:Pointer[GtkFontSelection], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_font_selection_get_preview_text(arg0:Pointer[GtkFontSelection]) : Pointer[gchar];

external (cdecl) gtk_font_selection_set_preview_text(arg0:Pointer[GtkFontSelection], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_font_selection_dialog_get_type() : GType;

external (cdecl) gtk_font_selection_dialog_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_dialog_get_ok_button(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_dialog_get_apply_button(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_dialog_get_cancel_button(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_dialog_get_font_selection(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[GtkWidget];

external (cdecl) gtk_font_selection_dialog_get_font_name(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[gchar];

external (cdecl) gtk_font_selection_dialog_get_font(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[GdkFont];

external (cdecl) gtk_font_selection_dialog_set_font_name(arg0:Pointer[GtkFontSelectionDialog], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_font_selection_dialog_get_preview_text(arg0:Pointer[GtkFontSelectionDialog]) : Pointer[gchar];

external (cdecl) gtk_font_selection_dialog_set_preview_text(arg0:Pointer[GtkFontSelectionDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_gc_get(arg0:gint, arg1:Pointer[GdkColormap], arg2:Pointer[GdkGCValues], arg3:GdkGCValuesMask) : Pointer[GdkGC];

external (cdecl) gtk_gc_release(arg0:Pointer[GdkGC]) : ;

alias GtkHandleBox = Struct__GtkHandleBox;

alias GtkHandleBoxClass = Struct__GtkHandleBoxClass;

record Struct__GtkHandleBox (
    bin : GtkBin,
    bin_window : Pointer[GdkWindow],
    float_window : Pointer[GdkWindow],
    shadow_type : GtkShadowType,
    handle_position : guint,
    float_window_mapped : guint,
    child_detached : guint,
    in_drag : guint,
    shrink_on_detach : guint,
    snap_edge : CInt,
    deskoff_x : gint,
    deskoff_y : gint,
    attach_allocation : GtkAllocation,
    float_allocation : GtkAllocation,
);

record Struct__GtkHandleBoxClass (
    parent_class : GtkBinClass,
    child_attached : CCodePointer[[Pointer[GtkHandleBox], Pointer[GtkWidget]],[]],
    child_detached : CCodePointer[[Pointer[GtkHandleBox], Pointer[GtkWidget]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_handle_box_get_type() : GType;

external (cdecl) gtk_handle_box_new() : Pointer[GtkWidget];

external (cdecl) gtk_handle_box_set_shadow_type(arg0:Pointer[GtkHandleBox], arg1:GtkShadowType) : ;

external (cdecl) gtk_handle_box_get_shadow_type(arg0:Pointer[GtkHandleBox]) : GtkShadowType;

external (cdecl) gtk_handle_box_set_handle_position(arg0:Pointer[GtkHandleBox], arg1:GtkPositionType) : ;

external (cdecl) gtk_handle_box_get_handle_position(arg0:Pointer[GtkHandleBox]) : GtkPositionType;

external (cdecl) gtk_handle_box_set_snap_edge(arg0:Pointer[GtkHandleBox], arg1:GtkPositionType) : ;

external (cdecl) gtk_handle_box_get_snap_edge(arg0:Pointer[GtkHandleBox]) : GtkPositionType;

external (cdecl) gtk_handle_box_get_child_detached(arg0:Pointer[GtkHandleBox]) : gboolean;

alias GtkHButtonBox = Struct__GtkHButtonBox;

alias GtkHButtonBoxClass = Struct__GtkHButtonBoxClass;

record Struct__GtkHButtonBox (
    button_box : GtkButtonBox,
);

record Struct__GtkHButtonBoxClass (
    parent_class : GtkButtonBoxClass,
);

external (cdecl) gtk_hbutton_box_get_type() : GType;

external (cdecl) gtk_hbutton_box_new() : Pointer[GtkWidget];

external (cdecl) gtk_hbutton_box_get_spacing_default() : gint;

external (cdecl) gtk_hbutton_box_get_layout_default() : GtkButtonBoxStyle;

external (cdecl) gtk_hbutton_box_set_spacing_default(arg0:gint) : ;

external (cdecl) gtk_hbutton_box_set_layout_default(arg0:GtkButtonBoxStyle) : ;

external (cdecl) _gtk_hbutton_box_get_layout_default() : GtkButtonBoxStyle;

alias GtkPaned = Struct__GtkPaned;

alias GtkPanedClass = Struct__GtkPanedClass;

alias Struct__GtkPanedPrivate = Opaque;

alias GtkPanedPrivate = Struct__GtkPanedPrivate;

record Struct__GtkPaned (
    container : GtkContainer,
    child1 : Pointer[GtkWidget],
    child2 : Pointer[GtkWidget],
    handle : Pointer[GdkWindow],
    xor_gc : Pointer[GdkGC],
    cursor_type : GdkCursorType,
    handle_pos : GdkRectangle,
    child1_size : gint,
    last_allocation : gint,
    min_position : gint,
    max_position : gint,
    position_set : guint,
    in_drag : guint,
    child1_shrink : guint,
    child1_resize : guint,
    child2_shrink : guint,
    child2_resize : guint,
    orientation : guint,
    in_recursion : guint,
    handle_prelit : guint,
    last_child1_focus : Pointer[GtkWidget],
    last_child2_focus : Pointer[GtkWidget],
    priv : Pointer[GtkPanedPrivate],
    drag_pos : gint,
    original_position : gint,
);

record Struct__GtkPanedClass (
    parent_class : GtkContainerClass,
    cycle_child_focus : CCodePointer[[Pointer[GtkPaned], gboolean],[gboolean]],
    toggle_handle_focus : CCodePointer[[Pointer[GtkPaned]],[gboolean]],
    move_handle : CCodePointer[[Pointer[GtkPaned], GtkScrollType],[gboolean]],
    cycle_handle_focus : CCodePointer[[Pointer[GtkPaned], gboolean],[gboolean]],
    accept_position : CCodePointer[[Pointer[GtkPaned]],[gboolean]],
    cancel_position : CCodePointer[[Pointer[GtkPaned]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_paned_get_type() : GType;

external (cdecl) gtk_paned_add1(arg0:Pointer[GtkPaned], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_paned_add2(arg0:Pointer[GtkPaned], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_paned_pack1(arg0:Pointer[GtkPaned], arg1:Pointer[GtkWidget], arg2:gboolean, arg3:gboolean) : ;

external (cdecl) gtk_paned_pack2(arg0:Pointer[GtkPaned], arg1:Pointer[GtkWidget], arg2:gboolean, arg3:gboolean) : ;

external (cdecl) gtk_paned_get_position(arg0:Pointer[GtkPaned]) : gint;

external (cdecl) gtk_paned_set_position(arg0:Pointer[GtkPaned], arg1:gint) : ;

external (cdecl) gtk_paned_get_child1(arg0:Pointer[GtkPaned]) : Pointer[GtkWidget];

external (cdecl) gtk_paned_get_child2(arg0:Pointer[GtkPaned]) : Pointer[GtkWidget];

external (cdecl) gtk_paned_get_handle_window(arg0:Pointer[GtkPaned]) : Pointer[GdkWindow];

external (cdecl) gtk_paned_compute_position(arg0:Pointer[GtkPaned], arg1:gint, arg2:gint, arg3:gint) : ;

alias GtkHPaned = Struct__GtkHPaned;

alias GtkHPanedClass = Struct__GtkHPanedClass;

record Struct__GtkHPaned (
    paned : GtkPaned,
);

record Struct__GtkHPanedClass (
    parent_class : GtkPanedClass,
);

external (cdecl) gtk_hpaned_get_type() : GType;

external (cdecl) gtk_hpaned_new() : Pointer[GtkWidget];

alias GtkRuler = Struct__GtkRuler;

alias GtkRulerClass = Struct__GtkRulerClass;

alias GtkRulerMetric = Struct__GtkRulerMetric;

record Struct__GtkRuler (
    widget : GtkWidget,
    backing_store : Pointer[GdkPixmap],
    non_gr_exp_gc : Pointer[GdkGC],
    metric : Pointer[GtkRulerMetric],
    xsrc : gint,
    ysrc : gint,
    slider_size : gint,
    lower : gdouble,
    upper : gdouble,
    position : gdouble,
    max_size : gdouble,
);

record Struct__GtkRulerClass (
    parent_class : GtkWidgetClass,
    draw_ticks : CCodePointer[[Pointer[GtkRuler]],[]],
    draw_pos : CCodePointer[[Pointer[GtkRuler]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkRulerMetric (
    metric_name : Pointer[gchar],
    abbrev : Pointer[gchar],
    pixels_per_unit : gdouble,
    ruler_scale : Array[gdouble, 10],
    subdivide : Array[gint, 5],
);

external (cdecl) gtk_ruler_get_type() : GType;

external (cdecl) gtk_ruler_set_metric(arg0:Pointer[GtkRuler], arg1:GtkMetricType) : ;

external (cdecl) gtk_ruler_get_metric(arg0:Pointer[GtkRuler]) : GtkMetricType;

external (cdecl) gtk_ruler_set_range(arg0:Pointer[GtkRuler], arg1:gdouble, arg2:gdouble, arg3:gdouble, arg4:gdouble) : ;

external (cdecl) gtk_ruler_get_range(arg0:Pointer[GtkRuler], arg1:Pointer[gdouble], arg2:Pointer[gdouble], arg3:Pointer[gdouble], arg4:Pointer[gdouble]) : ;

external (cdecl) gtk_ruler_draw_ticks(arg0:Pointer[GtkRuler]) : ;

external (cdecl) gtk_ruler_draw_pos(arg0:Pointer[GtkRuler]) : ;

alias GtkHRuler = Struct__GtkHRuler;

alias GtkHRulerClass = Struct__GtkHRulerClass;

record Struct__GtkHRuler (
    ruler : GtkRuler,
);

record Struct__GtkHRulerClass (
    parent_class : GtkRulerClass,
);

external (cdecl) gtk_hruler_get_type() : GType;

external (cdecl) gtk_hruler_new() : Pointer[GtkWidget];

alias Struct__GtkRangeLayout = Opaque;

alias GtkRangeLayout = Struct__GtkRangeLayout;

alias Struct__GtkRangeStepTimer = Opaque;

alias GtkRangeStepTimer = Struct__GtkRangeStepTimer;

alias GtkRange = Struct__GtkRange;

alias GtkRangeClass = Struct__GtkRangeClass;

record Struct__GtkRange (
    widget : GtkWidget,
    adjustment : Pointer[GtkAdjustment],
    update_policy : GtkUpdateType,
    inverted : guint,
    flippable : guint,
    has_stepper_a : guint,
    has_stepper_b : guint,
    has_stepper_c : guint,
    has_stepper_d : guint,
    need_recalc : guint,
    slider_size_fixed : guint,
    min_slider_size : gint,
    orientation : GtkOrientation,
    range_rect : GdkRectangle,
    slider_start : gint,
    slider_end : gint,
    round_digits : gint,
    trough_click_forward : guint,
    update_pending : guint,
    layout : Pointer[GtkRangeLayout],
    timer : Pointer[GtkRangeStepTimer],
    slide_initial_slider_position : gint,
    slide_initial_coordinate : gint,
    update_timeout_id : guint,
    event_window : Pointer[GdkWindow],
);

record Struct__GtkRangeClass (
    parent_class : GtkWidgetClass,
    slider_detail : Pointer[gchar],
    stepper_detail : Pointer[gchar],
    value_changed : CCodePointer[[Pointer[GtkRange]],[]],
    adjust_bounds : CCodePointer[[Pointer[GtkRange], gdouble],[]],
    move_slider : CCodePointer[[Pointer[GtkRange], GtkScrollType],[]],
    get_range_border : CCodePointer[[Pointer[GtkRange], Pointer[GtkBorder]],[]],
    change_value : CCodePointer[[Pointer[GtkRange], GtkScrollType, gdouble],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_range_get_type() : GType;

external (cdecl) gtk_range_set_update_policy(arg0:Pointer[GtkRange], arg1:GtkUpdateType) : ;

external (cdecl) gtk_range_get_update_policy(arg0:Pointer[GtkRange]) : GtkUpdateType;

external (cdecl) gtk_range_set_adjustment(arg0:Pointer[GtkRange], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_range_get_adjustment(arg0:Pointer[GtkRange]) : Pointer[GtkAdjustment];

external (cdecl) gtk_range_set_inverted(arg0:Pointer[GtkRange], arg1:gboolean) : ;

external (cdecl) gtk_range_get_inverted(arg0:Pointer[GtkRange]) : gboolean;

external (cdecl) gtk_range_set_flippable(arg0:Pointer[GtkRange], arg1:gboolean) : ;

external (cdecl) gtk_range_get_flippable(arg0:Pointer[GtkRange]) : gboolean;

external (cdecl) gtk_range_set_slider_size_fixed(arg0:Pointer[GtkRange], arg1:gboolean) : ;

external (cdecl) gtk_range_get_slider_size_fixed(arg0:Pointer[GtkRange]) : gboolean;

external (cdecl) gtk_range_set_min_slider_size(arg0:Pointer[GtkRange], arg1:gboolean) : ;

external (cdecl) gtk_range_get_min_slider_size(arg0:Pointer[GtkRange]) : gint;

external (cdecl) gtk_range_get_range_rect(arg0:Pointer[GtkRange], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_range_get_slider_range(arg0:Pointer[GtkRange], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_range_set_lower_stepper_sensitivity(arg0:Pointer[GtkRange], arg1:GtkSensitivityType) : ;

external (cdecl) gtk_range_get_lower_stepper_sensitivity(arg0:Pointer[GtkRange]) : GtkSensitivityType;

external (cdecl) gtk_range_set_upper_stepper_sensitivity(arg0:Pointer[GtkRange], arg1:GtkSensitivityType) : ;

external (cdecl) gtk_range_get_upper_stepper_sensitivity(arg0:Pointer[GtkRange]) : GtkSensitivityType;

external (cdecl) gtk_range_set_increments(arg0:Pointer[GtkRange], arg1:gdouble, arg2:gdouble) : ;

external (cdecl) gtk_range_set_range(arg0:Pointer[GtkRange], arg1:gdouble, arg2:gdouble) : ;

external (cdecl) gtk_range_set_value(arg0:Pointer[GtkRange], arg1:gdouble) : ;

external (cdecl) gtk_range_get_value(arg0:Pointer[GtkRange]) : gdouble;

external (cdecl) gtk_range_set_show_fill_level(arg0:Pointer[GtkRange], arg1:gboolean) : ;

external (cdecl) gtk_range_get_show_fill_level(arg0:Pointer[GtkRange]) : gboolean;

external (cdecl) gtk_range_set_restrict_to_fill_level(arg0:Pointer[GtkRange], arg1:gboolean) : ;

external (cdecl) gtk_range_get_restrict_to_fill_level(arg0:Pointer[GtkRange]) : gboolean;

external (cdecl) gtk_range_set_fill_level(arg0:Pointer[GtkRange], arg1:gdouble) : ;

external (cdecl) gtk_range_get_fill_level(arg0:Pointer[GtkRange]) : gdouble;

external (cdecl) gtk_range_set_round_digits(arg0:Pointer[GtkRange], arg1:gint) : ;

external (cdecl) gtk_range_get_round_digits(arg0:Pointer[GtkRange]) : gint;

external (cdecl) _gtk_range_get_wheel_delta(arg0:Pointer[GtkRange], arg1:GdkScrollDirection) : gdouble;

external (cdecl) _gtk_range_set_stop_values(arg0:Pointer[GtkRange], arg1:Pointer[gdouble], arg2:gint) : ;

external (cdecl) _gtk_range_get_stop_positions(arg0:Pointer[GtkRange], arg1:Pointer[Pointer[gint]]) : gint;

alias GtkScale = Struct__GtkScale;

alias GtkScaleClass = Struct__GtkScaleClass;

record Struct__GtkScale (
    range : GtkRange,
    digits : gint,
    draw_value : guint,
    value_pos : guint,
);

record Struct__GtkScaleClass (
    parent_class : GtkRangeClass,
    format_value : CCodePointer[[Pointer[GtkScale], gdouble],[Pointer[gchar]]],
    draw_value : CCodePointer[[Pointer[GtkScale]],[]],
    get_layout_offsets : CCodePointer[[Pointer[GtkScale], Pointer[gint], Pointer[gint]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_scale_get_type() : GType;

external (cdecl) gtk_scale_set_digits(arg0:Pointer[GtkScale], arg1:gint) : ;

external (cdecl) gtk_scale_get_digits(arg0:Pointer[GtkScale]) : gint;

external (cdecl) gtk_scale_set_draw_value(arg0:Pointer[GtkScale], arg1:gboolean) : ;

external (cdecl) gtk_scale_get_draw_value(arg0:Pointer[GtkScale]) : gboolean;

external (cdecl) gtk_scale_set_value_pos(arg0:Pointer[GtkScale], arg1:GtkPositionType) : ;

external (cdecl) gtk_scale_get_value_pos(arg0:Pointer[GtkScale]) : GtkPositionType;

external (cdecl) gtk_scale_get_layout(arg0:Pointer[GtkScale]) : Pointer[PangoLayout];

external (cdecl) gtk_scale_get_layout_offsets(arg0:Pointer[GtkScale], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_scale_add_mark(arg0:Pointer[GtkScale], arg1:gdouble, arg2:GtkPositionType, arg3:Pointer[gchar]) : ;

external (cdecl) gtk_scale_clear_marks(arg0:Pointer[GtkScale]) : ;

external (cdecl) _gtk_scale_clear_layout(arg0:Pointer[GtkScale]) : ;

external (cdecl) _gtk_scale_get_value_size(arg0:Pointer[GtkScale], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) _gtk_scale_format_value(arg0:Pointer[GtkScale], arg1:gdouble) : Pointer[gchar];

alias GtkHScale = Struct__GtkHScale;

alias GtkHScaleClass = Struct__GtkHScaleClass;

record Struct__GtkHScale (
    scale : GtkScale,
);

record Struct__GtkHScaleClass (
    parent_class : GtkScaleClass,
);

external (cdecl) gtk_hscale_get_type() : GType;

external (cdecl) gtk_hscale_new(arg0:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

external (cdecl) gtk_hscale_new_with_range(arg0:gdouble, arg1:gdouble, arg2:gdouble) : Pointer[GtkWidget];

alias GtkScrollbar = Struct__GtkScrollbar;

alias GtkScrollbarClass = Struct__GtkScrollbarClass;

record Struct__GtkScrollbar (
    range : GtkRange,
);

record Struct__GtkScrollbarClass (
    parent_class : GtkRangeClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_scrollbar_get_type() : GType;

alias GtkHScrollbar = Struct__GtkHScrollbar;

alias GtkHScrollbarClass = Struct__GtkHScrollbarClass;

record Struct__GtkHScrollbar (
    scrollbar : GtkScrollbar,
);

record Struct__GtkHScrollbarClass (
    parent_class : GtkScrollbarClass,
);

external (cdecl) gtk_hscrollbar_get_type() : GType;

external (cdecl) gtk_hscrollbar_new(arg0:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

alias GtkSeparator = Struct__GtkSeparator;

alias GtkSeparatorClass = Struct__GtkSeparatorClass;

record Struct__GtkSeparator (
    widget : GtkWidget,
);

record Struct__GtkSeparatorClass (
    parent_class : GtkWidgetClass,
);

external (cdecl) gtk_separator_get_type() : GType;

alias GtkHSeparator = Struct__GtkHSeparator;

alias GtkHSeparatorClass = Struct__GtkHSeparatorClass;

record Struct__GtkHSeparator (
    separator : GtkSeparator,
);

record Struct__GtkHSeparatorClass (
    parent_class : GtkSeparatorClass,
);

external (cdecl) gtk_hseparator_get_type() : GType;

external (cdecl) gtk_hseparator_new() : Pointer[GtkWidget];

alias GtkHSV = Struct__GtkHSV;

alias GtkHSVClass = Struct__GtkHSVClass;

record Struct__GtkHSV (
    parent_instance : GtkWidget,
    priv : gpointer,
);

record Struct__GtkHSVClass (
    parent_class : GtkWidgetClass,
    changed : CCodePointer[[Pointer[GtkHSV]],[]],
    move : CCodePointer[[Pointer[GtkHSV], GtkDirectionType],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_hsv_get_type() : GType;

external (cdecl) gtk_hsv_new() : Pointer[GtkWidget];

external (cdecl) gtk_hsv_set_color(arg0:Pointer[GtkHSV], arg1:CDouble, arg2:CDouble, arg3:CDouble) : ;

external (cdecl) gtk_hsv_get_color(arg0:Pointer[GtkHSV], arg1:Pointer[gdouble], arg2:Pointer[gdouble], arg3:Pointer[gdouble]) : ;

external (cdecl) gtk_hsv_set_metrics(arg0:Pointer[GtkHSV], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_hsv_get_metrics(arg0:Pointer[GtkHSV], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) gtk_hsv_is_adjusting(arg0:Pointer[GtkHSV]) : gboolean;

external (cdecl) gtk_hsv_to_rgb(arg0:gdouble, arg1:gdouble, arg2:gdouble, arg3:Pointer[gdouble], arg4:Pointer[gdouble], arg5:Pointer[gdouble]) : ;

external (cdecl) gtk_rgb_to_hsv(arg0:gdouble, arg1:gdouble, arg2:gdouble, arg3:Pointer[gdouble], arg4:Pointer[gdouble], arg5:Pointer[gdouble]) : ;

alias GtkIconFactoryClass = Struct__GtkIconFactoryClass;

record Struct__GtkIconFactory (
    parent_instance : GObject,
    icons : Pointer[GHashTable],
);

record Struct__GtkIconFactoryClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_icon_factory_get_type() : GType;

external (cdecl) gtk_icon_factory_new() : Pointer[GtkIconFactory];

external (cdecl) gtk_icon_factory_add(arg0:Pointer[GtkIconFactory], arg1:Pointer[gchar], arg2:Pointer[GtkIconSet]) : ;

external (cdecl) gtk_icon_factory_lookup(arg0:Pointer[GtkIconFactory], arg1:Pointer[gchar]) : Pointer[GtkIconSet];

external (cdecl) gtk_icon_factory_add_default(arg0:Pointer[GtkIconFactory]) : ;

external (cdecl) gtk_icon_factory_remove_default(arg0:Pointer[GtkIconFactory]) : ;

external (cdecl) gtk_icon_factory_lookup_default(arg0:Pointer[gchar]) : Pointer[GtkIconSet];

external (cdecl) gtk_icon_size_lookup(arg0:GtkIconSize, arg1:Pointer[gint], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_icon_size_lookup_for_settings(arg0:Pointer[GtkSettings], arg1:GtkIconSize, arg2:Pointer[gint], arg3:Pointer[gint]) : gboolean;

external (cdecl) gtk_icon_size_register(arg0:Pointer[gchar], arg1:gint, arg2:gint) : GtkIconSize;

external (cdecl) gtk_icon_size_register_alias(arg0:Pointer[gchar], arg1:GtkIconSize) : ;

external (cdecl) gtk_icon_size_from_name(arg0:Pointer[gchar]) : GtkIconSize;

external (cdecl) gtk_icon_size_get_name(arg0:GtkIconSize) : Pointer[gchar];

external (cdecl) gtk_icon_set_get_type() : GType;

external (cdecl) gtk_icon_set_new() : Pointer[GtkIconSet];

external (cdecl) gtk_icon_set_new_from_pixbuf(arg0:Pointer[GdkPixbuf]) : Pointer[GtkIconSet];

external (cdecl) gtk_icon_set_ref(arg0:Pointer[GtkIconSet]) : Pointer[GtkIconSet];

external (cdecl) gtk_icon_set_unref(arg0:Pointer[GtkIconSet]) : ;

external (cdecl) gtk_icon_set_copy(arg0:Pointer[GtkIconSet]) : Pointer[GtkIconSet];

external (cdecl) gtk_icon_set_render_icon(arg0:Pointer[GtkIconSet], arg1:Pointer[GtkStyle], arg2:GtkTextDirection, arg3:GtkStateType, arg4:GtkIconSize, arg5:Pointer[GtkWidget], arg6:Pointer[CChar]) : Pointer[GdkPixbuf];

external (cdecl) gtk_icon_set_add_source(arg0:Pointer[GtkIconSet], arg1:Pointer[GtkIconSource]) : ;

external (cdecl) gtk_icon_set_get_sizes(arg0:Pointer[GtkIconSet], arg1:Pointer[Pointer[GtkIconSize]], arg2:Pointer[gint]) : ;

external (cdecl) gtk_icon_source_get_type() : GType;

external (cdecl) gtk_icon_source_new() : Pointer[GtkIconSource];

external (cdecl) gtk_icon_source_copy(arg0:Pointer[GtkIconSource]) : Pointer[GtkIconSource];

external (cdecl) gtk_icon_source_free(arg0:Pointer[GtkIconSource]) : ;

external (cdecl) gtk_icon_source_set_filename(arg0:Pointer[GtkIconSource], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_icon_source_set_icon_name(arg0:Pointer[GtkIconSource], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_icon_source_set_pixbuf(arg0:Pointer[GtkIconSource], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_icon_source_get_filename(arg0:Pointer[GtkIconSource]) : Pointer[gchar];

external (cdecl) gtk_icon_source_get_icon_name(arg0:Pointer[GtkIconSource]) : Pointer[gchar];

external (cdecl) gtk_icon_source_get_pixbuf(arg0:Pointer[GtkIconSource]) : Pointer[GdkPixbuf];

external (cdecl) gtk_icon_source_set_direction_wildcarded(arg0:Pointer[GtkIconSource], arg1:gboolean) : ;

external (cdecl) gtk_icon_source_set_state_wildcarded(arg0:Pointer[GtkIconSource], arg1:gboolean) : ;

external (cdecl) gtk_icon_source_set_size_wildcarded(arg0:Pointer[GtkIconSource], arg1:gboolean) : ;

external (cdecl) gtk_icon_source_get_size_wildcarded(arg0:Pointer[GtkIconSource]) : gboolean;

external (cdecl) gtk_icon_source_get_state_wildcarded(arg0:Pointer[GtkIconSource]) : gboolean;

external (cdecl) gtk_icon_source_get_direction_wildcarded(arg0:Pointer[GtkIconSource]) : gboolean;

external (cdecl) gtk_icon_source_set_direction(arg0:Pointer[GtkIconSource], arg1:GtkTextDirection) : ;

external (cdecl) gtk_icon_source_set_state(arg0:Pointer[GtkIconSource], arg1:GtkStateType) : ;

external (cdecl) gtk_icon_source_set_size(arg0:Pointer[GtkIconSource], arg1:GtkIconSize) : ;

external (cdecl) gtk_icon_source_get_direction(arg0:Pointer[GtkIconSource]) : GtkTextDirection;

external (cdecl) gtk_icon_source_get_state(arg0:Pointer[GtkIconSource]) : GtkStateType;

external (cdecl) gtk_icon_source_get_size(arg0:Pointer[GtkIconSource]) : GtkIconSize;

external (cdecl) _gtk_icon_set_invalidate_caches() : ;

external (cdecl) _gtk_icon_factory_list_ids() : Pointer[GList];

external (cdecl) _gtk_icon_factory_ensure_default_icons() : ;

alias Struct__GtkIconInfo = Opaque;

alias GtkIconInfo = Struct__GtkIconInfo;

alias GtkIconTheme = Struct__GtkIconTheme;

alias GtkIconThemeClass = Struct__GtkIconThemeClass;

alias Struct__GtkIconThemePrivate = Opaque;

alias GtkIconThemePrivate = Struct__GtkIconThemePrivate;

record Struct__GtkIconTheme (
    parent_instance : GObject,
    priv : Pointer[GtkIconThemePrivate],
);

record Struct__GtkIconThemeClass (
    parent_class : GObjectClass,
    changed : CCodePointer[[Pointer[GtkIconTheme]],[]],
);


alias GtkIconLookupFlags = CUInt;
alias GTK_ICON_LOOKUP_NO_SVG = CUInt(1);
alias GTK_ICON_LOOKUP_FORCE_SVG = CUInt(2);
alias GTK_ICON_LOOKUP_USE_BUILTIN = CUInt(4);
alias GTK_ICON_LOOKUP_GENERIC_FALLBACK = CUInt(8);
alias GTK_ICON_LOOKUP_FORCE_SIZE = CUInt(16);


alias GtkIconThemeError = CUInt;
alias GTK_ICON_THEME_NOT_FOUND = CUInt(0);
alias GTK_ICON_THEME_FAILED = CUInt(1);

external (cdecl) gtk_icon_theme_error_quark() : GQuark;

external (cdecl) gtk_icon_theme_get_type() : GType;

external (cdecl) gtk_icon_theme_new() : Pointer[GtkIconTheme];

external (cdecl) gtk_icon_theme_get_default() : Pointer[GtkIconTheme];

external (cdecl) gtk_icon_theme_get_for_screen(arg0:Pointer[GdkScreen]) : Pointer[GtkIconTheme];

external (cdecl) gtk_icon_theme_set_screen(arg0:Pointer[GtkIconTheme], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_icon_theme_set_search_path(arg0:Pointer[GtkIconTheme], arg1:Pointer[Pointer[gchar]], arg2:gint) : ;

external (cdecl) gtk_icon_theme_get_search_path(arg0:Pointer[GtkIconTheme], arg1:Pointer[Pointer[Pointer[gchar]]], arg2:Pointer[gint]) : ;

external (cdecl) gtk_icon_theme_append_search_path(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_icon_theme_prepend_search_path(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_icon_theme_set_custom_theme(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_icon_theme_has_icon(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_icon_theme_get_icon_sizes(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar]) : Pointer[gint];

external (cdecl) gtk_icon_theme_lookup_icon(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar], arg2:gint, arg3:GtkIconLookupFlags) : Pointer[GtkIconInfo];

external (cdecl) gtk_icon_theme_choose_icon(arg0:Pointer[GtkIconTheme], arg1:Pointer[Pointer[gchar]], arg2:gint, arg3:GtkIconLookupFlags) : Pointer[GtkIconInfo];

external (cdecl) gtk_icon_theme_load_icon(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar], arg2:gint, arg3:GtkIconLookupFlags, arg4:Pointer[Pointer[GError]]) : Pointer[GdkPixbuf];

external (cdecl) gtk_icon_theme_lookup_by_gicon(arg0:Pointer[GtkIconTheme], arg1:Pointer[GIcon], arg2:gint, arg3:GtkIconLookupFlags) : Pointer[GtkIconInfo];

external (cdecl) gtk_icon_theme_list_icons(arg0:Pointer[GtkIconTheme], arg1:Pointer[gchar]) : Pointer[GList];

external (cdecl) gtk_icon_theme_list_contexts(arg0:Pointer[GtkIconTheme]) : Pointer[GList];

external (cdecl) gtk_icon_theme_get_example_icon_name(arg0:Pointer[GtkIconTheme]) : Pointer[CChar];

external (cdecl) gtk_icon_theme_rescan_if_needed(arg0:Pointer[GtkIconTheme]) : gboolean;

external (cdecl) gtk_icon_theme_add_builtin_icon(arg0:Pointer[gchar], arg1:gint, arg2:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_icon_info_get_type() : GType;

external (cdecl) gtk_icon_info_copy(arg0:Pointer[GtkIconInfo]) : Pointer[GtkIconInfo];

external (cdecl) gtk_icon_info_free(arg0:Pointer[GtkIconInfo]) : ;

external (cdecl) gtk_icon_info_new_for_pixbuf(arg0:Pointer[GtkIconTheme], arg1:Pointer[GdkPixbuf]) : Pointer[GtkIconInfo];

external (cdecl) gtk_icon_info_get_base_size(arg0:Pointer[GtkIconInfo]) : gint;

external (cdecl) gtk_icon_info_get_filename(arg0:Pointer[GtkIconInfo]) : Pointer[gchar];

external (cdecl) gtk_icon_info_get_builtin_pixbuf(arg0:Pointer[GtkIconInfo]) : Pointer[GdkPixbuf];

external (cdecl) gtk_icon_info_load_icon(arg0:Pointer[GtkIconInfo], arg1:Pointer[Pointer[GError]]) : Pointer[GdkPixbuf];

external (cdecl) gtk_icon_info_set_raw_coordinates(arg0:Pointer[GtkIconInfo], arg1:gboolean) : ;

external (cdecl) gtk_icon_info_get_embedded_rect(arg0:Pointer[GtkIconInfo], arg1:Pointer[GdkRectangle]) : gboolean;

external (cdecl) gtk_icon_info_get_attach_points(arg0:Pointer[GtkIconInfo], arg1:Pointer[Pointer[GdkPoint]], arg2:Pointer[gint]) : gboolean;

external (cdecl) gtk_icon_info_get_display_name(arg0:Pointer[GtkIconInfo]) : Pointer[gchar];

external (cdecl) _gtk_icon_theme_check_reload(arg0:Pointer[GdkDisplay]) : ;

external (cdecl) _gtk_icon_theme_ensure_builtin_cache() : ;

external (cdecl) gtk_tooltip_get_type() : GType;

external (cdecl) gtk_tooltip_set_markup(arg0:Pointer[GtkTooltip], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tooltip_set_text(arg0:Pointer[GtkTooltip], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tooltip_set_icon(arg0:Pointer[GtkTooltip], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_tooltip_set_icon_from_stock(arg0:Pointer[GtkTooltip], arg1:Pointer[gchar], arg2:GtkIconSize) : ;

external (cdecl) gtk_tooltip_set_icon_from_icon_name(arg0:Pointer[GtkTooltip], arg1:Pointer[gchar], arg2:GtkIconSize) : ;

external (cdecl) gtk_tooltip_set_icon_from_gicon(arg0:Pointer[GtkTooltip], arg1:Pointer[GIcon], arg2:GtkIconSize) : ;

external (cdecl) gtk_tooltip_set_custom(arg0:Pointer[GtkTooltip], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tooltip_set_tip_area(arg0:Pointer[GtkTooltip], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_tooltip_trigger_tooltip_query(arg0:Pointer[GdkDisplay]) : ;

external (cdecl) _gtk_tooltip_focus_in(arg0:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_tooltip_focus_out(arg0:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_tooltip_toggle_keyboard_mode(arg0:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_tooltip_handle_event(arg0:Pointer[GdkEvent]) : ;

external (cdecl) _gtk_tooltip_hide(arg0:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_widget_find_at_coords(arg0:Pointer[GdkWindow], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : Pointer[GtkWidget];

alias GtkIconView = Struct__GtkIconView;

alias GtkIconViewClass = Struct__GtkIconViewClass;

alias Struct__GtkIconViewPrivate = Opaque;

alias GtkIconViewPrivate = Struct__GtkIconViewPrivate;

alias GtkIconViewForeachFunc = CCodePointer[[Pointer[GtkIconView], Pointer[GtkTreePath], gpointer],[]];


alias GtkIconViewDropPosition = CUInt;
alias GTK_ICON_VIEW_NO_DROP = CUInt(0);
alias GTK_ICON_VIEW_DROP_INTO = CUInt(1);
alias GTK_ICON_VIEW_DROP_LEFT = CUInt(2);
alias GTK_ICON_VIEW_DROP_RIGHT = CUInt(3);
alias GTK_ICON_VIEW_DROP_ABOVE = CUInt(4);
alias GTK_ICON_VIEW_DROP_BELOW = CUInt(5);

record Struct__GtkIconView (
    parent : GtkContainer,
    priv : Pointer[GtkIconViewPrivate],
);

record Struct__GtkIconViewClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkIconView], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
    item_activated : CCodePointer[[Pointer[GtkIconView], Pointer[GtkTreePath]],[]],
    selection_changed : CCodePointer[[Pointer[GtkIconView]],[]],
    select_all : CCodePointer[[Pointer[GtkIconView]],[]],
    unselect_all : CCodePointer[[Pointer[GtkIconView]],[]],
    select_cursor_item : CCodePointer[[Pointer[GtkIconView]],[]],
    toggle_cursor_item : CCodePointer[[Pointer[GtkIconView]],[]],
    move_cursor : CCodePointer[[Pointer[GtkIconView], GtkMovementStep, gint],[gboolean]],
    activate_cursor_item : CCodePointer[[Pointer[GtkIconView]],[gboolean]],
);

external (cdecl) gtk_icon_view_get_type() : GType;

external (cdecl) gtk_icon_view_new() : Pointer[GtkWidget];

external (cdecl) gtk_icon_view_new_with_model(arg0:Pointer[GtkTreeModel]) : Pointer[GtkWidget];

external (cdecl) gtk_icon_view_set_model(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreeModel]) : ;

external (cdecl) gtk_icon_view_get_model(arg0:Pointer[GtkIconView]) : Pointer[GtkTreeModel];

external (cdecl) gtk_icon_view_set_text_column(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_text_column(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_markup_column(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_markup_column(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_pixbuf_column(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_pixbuf_column(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_orientation(arg0:Pointer[GtkIconView], arg1:GtkOrientation) : ;

external (cdecl) gtk_icon_view_get_orientation(arg0:Pointer[GtkIconView]) : GtkOrientation;

external (cdecl) gtk_icon_view_set_item_orientation(arg0:Pointer[GtkIconView], arg1:GtkOrientation) : ;

external (cdecl) gtk_icon_view_get_item_orientation(arg0:Pointer[GtkIconView]) : GtkOrientation;

external (cdecl) gtk_icon_view_set_columns(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_columns(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_item_width(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_item_width(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_spacing(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_spacing(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_row_spacing(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_row_spacing(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_column_spacing(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_column_spacing(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_margin(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_margin(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_set_item_padding(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_item_padding(arg0:Pointer[GtkIconView]) : gint;

external (cdecl) gtk_icon_view_get_path_at_pos(arg0:Pointer[GtkIconView], arg1:gint, arg2:gint) : Pointer[GtkTreePath];

external (cdecl) gtk_icon_view_get_item_at_pos(arg0:Pointer[GtkIconView], arg1:gint, arg2:gint, arg3:Pointer[Pointer[GtkTreePath]], arg4:Pointer[Pointer[GtkCellRenderer]]) : gboolean;

external (cdecl) gtk_icon_view_get_visible_range(arg0:Pointer[GtkIconView], arg1:Pointer[Pointer[GtkTreePath]], arg2:Pointer[Pointer[GtkTreePath]]) : gboolean;

external (cdecl) gtk_icon_view_selected_foreach(arg0:Pointer[GtkIconView], arg1:GtkIconViewForeachFunc, arg2:gpointer) : ;

external (cdecl) gtk_icon_view_set_selection_mode(arg0:Pointer[GtkIconView], arg1:GtkSelectionMode) : ;

external (cdecl) gtk_icon_view_get_selection_mode(arg0:Pointer[GtkIconView]) : GtkSelectionMode;

external (cdecl) gtk_icon_view_select_path(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_icon_view_unselect_path(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_icon_view_path_is_selected(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_icon_view_get_item_row(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : gint;

external (cdecl) gtk_icon_view_get_item_column(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : gint;

external (cdecl) gtk_icon_view_get_selected_items(arg0:Pointer[GtkIconView]) : Pointer[GList];

external (cdecl) gtk_icon_view_select_all(arg0:Pointer[GtkIconView]) : ;

external (cdecl) gtk_icon_view_unselect_all(arg0:Pointer[GtkIconView]) : ;

external (cdecl) gtk_icon_view_item_activated(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_icon_view_set_cursor(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkCellRenderer], arg3:gboolean) : ;

external (cdecl) gtk_icon_view_get_cursor(arg0:Pointer[GtkIconView], arg1:Pointer[Pointer[GtkTreePath]], arg2:Pointer[Pointer[GtkCellRenderer]]) : gboolean;

external (cdecl) gtk_icon_view_scroll_to_path(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath], arg2:gboolean, arg3:gfloat, arg4:gfloat) : ;

external (cdecl) gtk_icon_view_enable_model_drag_source(arg0:Pointer[GtkIconView], arg1:GdkModifierType, arg2:Pointer[GtkTargetEntry], arg3:gint, arg4:GdkDragAction) : ;

external (cdecl) gtk_icon_view_enable_model_drag_dest(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTargetEntry], arg2:gint, arg3:GdkDragAction) : ;

external (cdecl) gtk_icon_view_unset_model_drag_source(arg0:Pointer[GtkIconView]) : ;

external (cdecl) gtk_icon_view_unset_model_drag_dest(arg0:Pointer[GtkIconView]) : ;

external (cdecl) gtk_icon_view_set_reorderable(arg0:Pointer[GtkIconView], arg1:gboolean) : ;

external (cdecl) gtk_icon_view_get_reorderable(arg0:Pointer[GtkIconView]) : gboolean;

external (cdecl) gtk_icon_view_set_drag_dest_item(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath], arg2:GtkIconViewDropPosition) : ;

external (cdecl) gtk_icon_view_get_drag_dest_item(arg0:Pointer[GtkIconView], arg1:Pointer[Pointer[GtkTreePath]], arg2:Pointer[GtkIconViewDropPosition]) : ;

external (cdecl) gtk_icon_view_get_dest_item_at_pos(arg0:Pointer[GtkIconView], arg1:gint, arg2:gint, arg3:Pointer[Pointer[GtkTreePath]], arg4:Pointer[GtkIconViewDropPosition]) : gboolean;

external (cdecl) gtk_icon_view_create_drag_icon(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTreePath]) : Pointer[GdkPixmap];

external (cdecl) gtk_icon_view_convert_widget_to_bin_window_coords(arg0:Pointer[GtkIconView], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : ;

external (cdecl) gtk_icon_view_set_tooltip_item(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTooltip], arg2:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_icon_view_set_tooltip_cell(arg0:Pointer[GtkIconView], arg1:Pointer[GtkTooltip], arg2:Pointer[GtkTreePath], arg3:Pointer[GtkCellRenderer]) : ;

external (cdecl) gtk_icon_view_get_tooltip_context(arg0:Pointer[GtkIconView], arg1:Pointer[gint], arg2:Pointer[gint], arg3:gboolean, arg4:Pointer[Pointer[GtkTreeModel]], arg5:Pointer[Pointer[GtkTreePath]], arg6:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_icon_view_set_tooltip_column(arg0:Pointer[GtkIconView], arg1:gint) : ;

external (cdecl) gtk_icon_view_get_tooltip_column(arg0:Pointer[GtkIconView]) : gint;

alias GtkImageMenuItem = Struct__GtkImageMenuItem;

alias GtkImageMenuItemClass = Struct__GtkImageMenuItemClass;

record Struct__GtkImageMenuItem (
    menu_item : GtkMenuItem,
    image : Pointer[GtkWidget],
);

record Struct__GtkImageMenuItemClass (
    parent_class : GtkMenuItemClass,
);

external (cdecl) gtk_image_menu_item_get_type() : GType;

external (cdecl) gtk_image_menu_item_new() : Pointer[GtkWidget];

external (cdecl) gtk_image_menu_item_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_image_menu_item_new_with_mnemonic(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_image_menu_item_new_from_stock(arg0:Pointer[gchar], arg1:Pointer[GtkAccelGroup]) : Pointer[GtkWidget];

external (cdecl) gtk_image_menu_item_set_always_show_image(arg0:Pointer[GtkImageMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_image_menu_item_get_always_show_image(arg0:Pointer[GtkImageMenuItem]) : gboolean;

external (cdecl) gtk_image_menu_item_set_image(arg0:Pointer[GtkImageMenuItem], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_image_menu_item_get_image(arg0:Pointer[GtkImageMenuItem]) : Pointer[GtkWidget];

external (cdecl) gtk_image_menu_item_set_use_stock(arg0:Pointer[GtkImageMenuItem], arg1:gboolean) : ;

external (cdecl) gtk_image_menu_item_get_use_stock(arg0:Pointer[GtkImageMenuItem]) : gboolean;

external (cdecl) gtk_image_menu_item_set_accel_group(arg0:Pointer[GtkImageMenuItem], arg1:Pointer[GtkAccelGroup]) : ;

alias GtkIMContextSimple = Struct__GtkIMContextSimple;

alias GtkIMContextSimpleClass = Struct__GtkIMContextSimpleClass;

record Struct__GtkIMContextSimple (
    object : GtkIMContext,
    tables : Pointer[GSList],
    compose_buffer : Array[guint, 8],
    tentative_match : gunichar,
    tentative_match_len : gint,
    in_hex_sequence : guint,
    modifiers_dropped : guint,
);

record Struct__GtkIMContextSimpleClass (
    parent_class : GtkIMContextClass,
);

external (cdecl) gtk_im_context_simple_get_type() : GType;

external (cdecl) gtk_im_context_simple_new() : Pointer[GtkIMContext];

external (cdecl) gtk_im_context_simple_add_table(arg0:Pointer[GtkIMContextSimple], arg1:Pointer[guint16], arg2:gint, arg3:gint) : ;

alias GtkIMMulticontext = Struct__GtkIMMulticontext;

alias GtkIMMulticontextClass = Struct__GtkIMMulticontextClass;

alias Struct__GtkIMMulticontextPrivate = Opaque;

alias GtkIMMulticontextPrivate = Struct__GtkIMMulticontextPrivate;

record Struct__GtkIMMulticontext (
    object : GtkIMContext,
    slave : Pointer[GtkIMContext],
    priv : Pointer[GtkIMMulticontextPrivate],
    context_id : Pointer[gchar],
);

record Struct__GtkIMMulticontextClass (
    parent_class : GtkIMContextClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_im_multicontext_get_type() : GType;

external (cdecl) gtk_im_multicontext_new() : Pointer[GtkIMContext];

external (cdecl) gtk_im_multicontext_append_menuitems(arg0:Pointer[GtkIMMulticontext], arg1:Pointer[GtkMenuShell]) : ;

external (cdecl) gtk_im_multicontext_get_context_id(arg0:Pointer[GtkIMMulticontext]) : Pointer[CChar];

external (cdecl) gtk_im_multicontext_set_context_id(arg0:Pointer[GtkIMMulticontext], arg1:Pointer[CChar]) : ;

alias Struct__GtkInfoBarPrivate = Opaque;

alias GtkInfoBarPrivate = Struct__GtkInfoBarPrivate;

alias GtkInfoBarClass = Struct__GtkInfoBarClass;

alias GtkInfoBar = Struct__GtkInfoBar;

record Struct__GtkInfoBar (
    parent : GtkHBox,
    priv : Pointer[GtkInfoBarPrivate],
);

record Struct__GtkInfoBarClass (
    parent_class : GtkHBoxClass,
    response : CCodePointer[[Pointer[GtkInfoBar], gint],[]],
    close : CCodePointer[[Pointer[GtkInfoBar]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
);

external (cdecl) gtk_info_bar_get_type() : GType;

external (cdecl) gtk_info_bar_new() : Pointer[GtkWidget];

external (cdecl) gtk_info_bar_new_with_buttons(arg0:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_info_bar_get_action_area(arg0:Pointer[GtkInfoBar]) : Pointer[GtkWidget];

external (cdecl) gtk_info_bar_get_content_area(arg0:Pointer[GtkInfoBar]) : Pointer[GtkWidget];

external (cdecl) gtk_info_bar_add_action_widget(arg0:Pointer[GtkInfoBar], arg1:Pointer[GtkWidget], arg2:gint) : ;

external (cdecl) gtk_info_bar_add_button(arg0:Pointer[GtkInfoBar], arg1:Pointer[gchar], arg2:gint) : Pointer[GtkWidget];

external (cdecl) gtk_info_bar_add_buttons(arg0:Pointer[GtkInfoBar], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_info_bar_set_response_sensitive(arg0:Pointer[GtkInfoBar], arg1:gint, arg2:gboolean) : ;

external (cdecl) gtk_info_bar_set_default_response(arg0:Pointer[GtkInfoBar], arg1:gint) : ;

external (cdecl) gtk_info_bar_response(arg0:Pointer[GtkInfoBar], arg1:gint) : ;

external (cdecl) gtk_info_bar_set_message_type(arg0:Pointer[GtkInfoBar], arg1:GtkMessageType) : ;

external (cdecl) gtk_info_bar_get_message_type(arg0:Pointer[GtkInfoBar]) : GtkMessageType;

alias GtkInvisible = Struct__GtkInvisible;

alias GtkInvisibleClass = Struct__GtkInvisibleClass;

record Struct__GtkInvisible (
    widget : GtkWidget,
    has_user_ref_count : gboolean,
    screen : Pointer[GdkScreen],
);

record Struct__GtkInvisibleClass (
    parent_class : GtkWidgetClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_invisible_get_type() : GType;

external (cdecl) gtk_invisible_new() : Pointer[GtkWidget];

external (cdecl) gtk_invisible_new_for_screen(arg0:Pointer[GdkScreen]) : Pointer[GtkWidget];

external (cdecl) gtk_invisible_set_screen(arg0:Pointer[GtkInvisible], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_invisible_get_screen(arg0:Pointer[GtkInvisible]) : Pointer[GdkScreen];

alias GtkLayout = Struct__GtkLayout;

alias GtkLayoutClass = Struct__GtkLayoutClass;

record Struct__GtkLayout (
    container : GtkContainer,
    children : Pointer[GList],
    width : guint,
    height : guint,
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
    bin_window : Pointer[GdkWindow],
    visibility : GdkVisibilityState,
    scroll_x : gint,
    scroll_y : gint,
    freeze_count : guint,
);

record Struct__GtkLayoutClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkLayout], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_layout_get_type() : GType;

external (cdecl) gtk_layout_new(arg0:Pointer[GtkAdjustment], arg1:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

external (cdecl) gtk_layout_get_bin_window(arg0:Pointer[GtkLayout]) : Pointer[GdkWindow];

external (cdecl) gtk_layout_put(arg0:Pointer[GtkLayout], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_layout_move(arg0:Pointer[GtkLayout], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_layout_set_size(arg0:Pointer[GtkLayout], arg1:guint, arg2:guint) : ;

external (cdecl) gtk_layout_get_size(arg0:Pointer[GtkLayout], arg1:Pointer[guint], arg2:Pointer[guint]) : ;

external (cdecl) gtk_layout_get_hadjustment(arg0:Pointer[GtkLayout]) : Pointer[GtkAdjustment];

external (cdecl) gtk_layout_get_vadjustment(arg0:Pointer[GtkLayout]) : Pointer[GtkAdjustment];

external (cdecl) gtk_layout_set_hadjustment(arg0:Pointer[GtkLayout], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_layout_set_vadjustment(arg0:Pointer[GtkLayout], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_layout_freeze(arg0:Pointer[GtkLayout]) : ;

external (cdecl) gtk_layout_thaw(arg0:Pointer[GtkLayout]) : ;

alias GtkLinkButton = Struct__GtkLinkButton;

alias GtkLinkButtonClass = Struct__GtkLinkButtonClass;

alias Struct__GtkLinkButtonPrivate = Opaque;

alias GtkLinkButtonPrivate = Struct__GtkLinkButtonPrivate;

alias GtkLinkButtonUriFunc = CCodePointer[[Pointer[GtkLinkButton], Pointer[gchar], gpointer],[]];

record Struct__GtkLinkButton (
    parent_instance : GtkButton,
    priv : Pointer[GtkLinkButtonPrivate],
);

record Struct__GtkLinkButtonClass (
    parent_class : GtkButtonClass,
    _gtk_padding1 : CCodePointer[[],[]],
    _gtk_padding2 : CCodePointer[[],[]],
    _gtk_padding3 : CCodePointer[[],[]],
    _gtk_padding4 : CCodePointer[[],[]],
);

external (cdecl) gtk_link_button_get_type() : GType;

external (cdecl) gtk_link_button_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_link_button_new_with_label(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_link_button_get_uri(arg0:Pointer[GtkLinkButton]) : Pointer[gchar];

external (cdecl) gtk_link_button_set_uri(arg0:Pointer[GtkLinkButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_link_button_set_uri_hook(arg0:GtkLinkButtonUriFunc, arg1:gpointer, arg2:GDestroyNotify) : GtkLinkButtonUriFunc;

external (cdecl) gtk_link_button_get_visited(arg0:Pointer[GtkLinkButton]) : gboolean;

external (cdecl) gtk_link_button_set_visited(arg0:Pointer[GtkLinkButton], arg1:gboolean) : ;

alias GtkKeySnoopFunc = CCodePointer[[Pointer[GtkWidget], Pointer[GdkEventKey], gpointer],[gint]];

external gtk_major_version : guint;

external gtk_minor_version : guint;

external gtk_micro_version : guint;

external gtk_binary_age : guint;

external gtk_interface_age : guint;

external (cdecl) gtk_check_version(arg0:guint, arg1:guint, arg2:guint) : Pointer[gchar];

external (cdecl) gtk_parse_args(arg0:Pointer[CInt], arg1:Pointer[Pointer[Pointer[CChar]]]) : gboolean;

external (cdecl) gtk_init(arg0:Pointer[CInt], arg1:Pointer[Pointer[Pointer[CChar]]]) : ;

external (cdecl) gtk_init_check(arg0:Pointer[CInt], arg1:Pointer[Pointer[Pointer[CChar]]]) : gboolean;

external (cdecl) gtk_init_with_args(arg0:Pointer[CInt], arg1:Pointer[Pointer[Pointer[CChar]]], arg2:Pointer[CChar], arg3:Pointer[GOptionEntry], arg4:Pointer[CChar], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_get_option_group(arg0:gboolean) : Pointer[GOptionGroup];

external (cdecl) gtk_exit(arg0:gint) : ;

external (cdecl) gtk_set_locale() : Pointer[gchar];

external (cdecl) gtk_disable_setlocale() : ;

external (cdecl) gtk_get_default_language() : Pointer[PangoLanguage];

external (cdecl) gtk_events_pending() : gboolean;

external (cdecl) gtk_main_do_event(arg0:Pointer[GdkEvent]) : ;

external (cdecl) gtk_main() : ;

external (cdecl) gtk_main_level() : guint;

external (cdecl) gtk_main_quit() : ;

external (cdecl) gtk_main_iteration() : gboolean;

external (cdecl) gtk_main_iteration_do(arg0:gboolean) : gboolean;

external (cdecl) gtk_true() : gboolean;

external (cdecl) gtk_false() : gboolean;

external (cdecl) gtk_grab_add(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_grab_get_current() : Pointer[GtkWidget];

external (cdecl) gtk_grab_remove(arg0:Pointer[GtkWidget]) : ;

external (cdecl) gtk_init_add(arg0:GtkFunction, arg1:gpointer) : ;

external (cdecl) gtk_quit_add_destroy(arg0:guint, arg1:Pointer[GtkObject]) : ;

external (cdecl) gtk_quit_add(arg0:guint, arg1:GtkFunction, arg2:gpointer) : guint;

external (cdecl) gtk_quit_add_full(arg0:guint, arg1:GtkFunction, arg2:GtkCallbackMarshal, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) gtk_quit_remove(arg0:guint) : ;

external (cdecl) gtk_quit_remove_by_data(arg0:gpointer) : ;

external (cdecl) gtk_timeout_add(arg0:guint32, arg1:GtkFunction, arg2:gpointer) : guint;

external (cdecl) gtk_timeout_add_full(arg0:guint32, arg1:GtkFunction, arg2:GtkCallbackMarshal, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) gtk_timeout_remove(arg0:guint) : ;

external (cdecl) gtk_idle_add(arg0:GtkFunction, arg1:gpointer) : guint;

external (cdecl) gtk_idle_add_priority(arg0:gint, arg1:GtkFunction, arg2:gpointer) : guint;

external (cdecl) gtk_idle_add_full(arg0:gint, arg1:GtkFunction, arg2:GtkCallbackMarshal, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) gtk_idle_remove(arg0:guint) : ;

external (cdecl) gtk_idle_remove_by_data(arg0:gpointer) : ;

external (cdecl) gtk_input_add_full(arg0:gint, arg1:GdkInputCondition, arg2:GdkInputFunction, arg3:GtkCallbackMarshal, arg4:gpointer, arg5:GDestroyNotify) : guint;

external (cdecl) gtk_input_remove(arg0:guint) : ;

external (cdecl) gtk_key_snooper_install(arg0:GtkKeySnoopFunc, arg1:gpointer) : guint;

external (cdecl) gtk_key_snooper_remove(arg0:guint) : ;

external (cdecl) gtk_get_current_event() : Pointer[GdkEvent];

external (cdecl) gtk_get_current_event_time() : guint32;

external (cdecl) gtk_get_current_event_state(arg0:Pointer[GdkModifierType]) : gboolean;

external (cdecl) gtk_get_event_widget(arg0:Pointer[GdkEvent]) : Pointer[GtkWidget];

external (cdecl) gtk_propagate_event(arg0:Pointer[GtkWidget], arg1:Pointer[GdkEvent]) : ;

external (cdecl) _gtk_boolean_handled_accumulator(arg0:Pointer[GSignalInvocationHint], arg1:Pointer[GValue], arg2:Pointer[GValue], arg3:gpointer) : gboolean;

external (cdecl) _gtk_get_lc_ctype() : Pointer[gchar];

external (cdecl) _gtk_module_has_mixed_deps(arg0:Pointer[GModule]) : gboolean;

alias GtkMenuBar = Struct__GtkMenuBar;

alias GtkMenuBarClass = Struct__GtkMenuBarClass;

record Struct__GtkMenuBar (
    menu_shell : GtkMenuShell,
);

record Struct__GtkMenuBarClass (
    parent_class : GtkMenuShellClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_menu_bar_get_type() : GType;

external (cdecl) gtk_menu_bar_new() : Pointer[GtkWidget];

external (cdecl) gtk_menu_bar_get_pack_direction(arg0:Pointer[GtkMenuBar]) : GtkPackDirection;

external (cdecl) gtk_menu_bar_set_pack_direction(arg0:Pointer[GtkMenuBar], arg1:GtkPackDirection) : ;

external (cdecl) gtk_menu_bar_get_child_pack_direction(arg0:Pointer[GtkMenuBar]) : GtkPackDirection;

external (cdecl) gtk_menu_bar_set_child_pack_direction(arg0:Pointer[GtkMenuBar], arg1:GtkPackDirection) : ;

external (cdecl) _gtk_menu_bar_cycle_focus(arg0:Pointer[GtkMenuBar], arg1:GtkDirectionType) : ;

alias GtkTooltips = Struct__GtkTooltips;

alias GtkTooltipsClass = Struct__GtkTooltipsClass;

alias GtkTooltipsData = Struct__GtkTooltipsData;

record Struct__GtkTooltipsData (
    tooltips : Pointer[GtkTooltips],
    widget : Pointer[GtkWidget],
    tip_text : Pointer[gchar],
    tip_private : Pointer[gchar],
);

record Struct__GtkTooltips (
    parent_instance : GtkObject,
    tip_window : Pointer[GtkWidget],
    tip_label : Pointer[GtkWidget],
    active_tips_data : Pointer[GtkTooltipsData],
    tips_data_list : Pointer[GList],
    delay : guint,
    enabled : guint,
    have_grab : guint,
    use_sticky_delay : guint,
    timer_tag : gint,
    last_popdown : GTimeVal,
);

record Struct__GtkTooltipsClass (
    parent_class : GtkObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tooltips_get_type() : GType;

external (cdecl) gtk_tooltips_new() : Pointer[GtkTooltips];

external (cdecl) gtk_tooltips_enable(arg0:Pointer[GtkTooltips]) : ;

external (cdecl) gtk_tooltips_disable(arg0:Pointer[GtkTooltips]) : ;

external (cdecl) gtk_tooltips_set_delay(arg0:Pointer[GtkTooltips], arg1:guint) : ;

external (cdecl) gtk_tooltips_set_tip(arg0:Pointer[GtkTooltips], arg1:Pointer[GtkWidget], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) gtk_tooltips_data_get(arg0:Pointer[GtkWidget]) : Pointer[GtkTooltipsData];

external (cdecl) gtk_tooltips_force_window(arg0:Pointer[GtkTooltips]) : ;

external (cdecl) gtk_tooltips_get_info_from_tip_window(arg0:Pointer[GtkWindow], arg1:Pointer[Pointer[GtkTooltips]], arg2:Pointer[Pointer[GtkWidget]]) : gboolean;

alias GtkSizeGroup = Struct__GtkSizeGroup;

alias GtkSizeGroupClass = Struct__GtkSizeGroupClass;

record Struct__GtkSizeGroup (
    parent_instance : GObject,
    widgets : Pointer[GSList],
    mode : guint8,
    have_width : guint,
    have_height : guint,
    ignore_hidden : guint,
    requisition : GtkRequisition,
);

record Struct__GtkSizeGroupClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);


alias GtkSizeGroupMode = CUInt;
alias GTK_SIZE_GROUP_NONE = CUInt(0);
alias GTK_SIZE_GROUP_HORIZONTAL = CUInt(1);
alias GTK_SIZE_GROUP_VERTICAL = CUInt(2);
alias GTK_SIZE_GROUP_BOTH = CUInt(3);

external (cdecl) gtk_size_group_get_type() : GType;

external (cdecl) gtk_size_group_new(arg0:GtkSizeGroupMode) : Pointer[GtkSizeGroup];

external (cdecl) gtk_size_group_set_mode(arg0:Pointer[GtkSizeGroup], arg1:GtkSizeGroupMode) : ;

external (cdecl) gtk_size_group_get_mode(arg0:Pointer[GtkSizeGroup]) : GtkSizeGroupMode;

external (cdecl) gtk_size_group_set_ignore_hidden(arg0:Pointer[GtkSizeGroup], arg1:gboolean) : ;

external (cdecl) gtk_size_group_get_ignore_hidden(arg0:Pointer[GtkSizeGroup]) : gboolean;

external (cdecl) gtk_size_group_add_widget(arg0:Pointer[GtkSizeGroup], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_size_group_remove_widget(arg0:Pointer[GtkSizeGroup], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_size_group_get_widgets(arg0:Pointer[GtkSizeGroup]) : Pointer[GSList];

external (cdecl) _gtk_size_group_get_child_requisition(arg0:Pointer[GtkWidget], arg1:Pointer[GtkRequisition]) : ;

external (cdecl) _gtk_size_group_compute_requisition(arg0:Pointer[GtkWidget], arg1:Pointer[GtkRequisition]) : ;

external (cdecl) _gtk_size_group_queue_resize(arg0:Pointer[GtkWidget]) : ;

alias GtkToolItem = Struct__GtkToolItem;

alias GtkToolItemClass = Struct__GtkToolItemClass;

alias Struct__GtkToolItemPrivate = Opaque;

alias GtkToolItemPrivate = Struct__GtkToolItemPrivate;

record Struct__GtkToolItem (
    parent : GtkBin,
    priv : Pointer[GtkToolItemPrivate],
);

record Struct__GtkToolItemClass (
    parent_class : GtkBinClass,
    create_menu_proxy : CCodePointer[[Pointer[GtkToolItem]],[gboolean]],
    toolbar_reconfigured : CCodePointer[[Pointer[GtkToolItem]],[]],
    set_tooltip : CCodePointer[[Pointer[GtkToolItem], Pointer[GtkTooltips], Pointer[gchar], Pointer[gchar]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tool_item_get_type() : GType;

external (cdecl) gtk_tool_item_new() : Pointer[GtkToolItem];

external (cdecl) gtk_tool_item_set_homogeneous(arg0:Pointer[GtkToolItem], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_get_homogeneous(arg0:Pointer[GtkToolItem]) : gboolean;

external (cdecl) gtk_tool_item_set_expand(arg0:Pointer[GtkToolItem], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_get_expand(arg0:Pointer[GtkToolItem]) : gboolean;

external (cdecl) gtk_tool_item_set_tooltip(arg0:Pointer[GtkToolItem], arg1:Pointer[GtkTooltips], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) gtk_tool_item_set_tooltip_text(arg0:Pointer[GtkToolItem], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tool_item_set_tooltip_markup(arg0:Pointer[GtkToolItem], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tool_item_set_use_drag_window(arg0:Pointer[GtkToolItem], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_get_use_drag_window(arg0:Pointer[GtkToolItem]) : gboolean;

external (cdecl) gtk_tool_item_set_visible_horizontal(arg0:Pointer[GtkToolItem], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_get_visible_horizontal(arg0:Pointer[GtkToolItem]) : gboolean;

external (cdecl) gtk_tool_item_set_visible_vertical(arg0:Pointer[GtkToolItem], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_get_visible_vertical(arg0:Pointer[GtkToolItem]) : gboolean;

external (cdecl) gtk_tool_item_get_is_important(arg0:Pointer[GtkToolItem]) : gboolean;

external (cdecl) gtk_tool_item_set_is_important(arg0:Pointer[GtkToolItem], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_get_ellipsize_mode(arg0:Pointer[GtkToolItem]) : PangoEllipsizeMode;

external (cdecl) gtk_tool_item_get_icon_size(arg0:Pointer[GtkToolItem]) : GtkIconSize;

external (cdecl) gtk_tool_item_get_orientation(arg0:Pointer[GtkToolItem]) : GtkOrientation;

external (cdecl) gtk_tool_item_get_toolbar_style(arg0:Pointer[GtkToolItem]) : GtkToolbarStyle;

external (cdecl) gtk_tool_item_get_relief_style(arg0:Pointer[GtkToolItem]) : GtkReliefStyle;

external (cdecl) gtk_tool_item_get_text_alignment(arg0:Pointer[GtkToolItem]) : gfloat;

external (cdecl) gtk_tool_item_get_text_orientation(arg0:Pointer[GtkToolItem]) : GtkOrientation;

external (cdecl) gtk_tool_item_get_text_size_group(arg0:Pointer[GtkToolItem]) : Pointer[GtkSizeGroup];

external (cdecl) gtk_tool_item_retrieve_proxy_menu_item(arg0:Pointer[GtkToolItem]) : Pointer[GtkWidget];

external (cdecl) gtk_tool_item_get_proxy_menu_item(arg0:Pointer[GtkToolItem], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_tool_item_set_proxy_menu_item(arg0:Pointer[GtkToolItem], arg1:Pointer[gchar], arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tool_item_rebuild_menu(arg0:Pointer[GtkToolItem]) : ;

external (cdecl) gtk_tool_item_toolbar_reconfigured(arg0:Pointer[GtkToolItem]) : ;

external (cdecl) _gtk_tool_item_create_menu_proxy(arg0:Pointer[GtkToolItem]) : gboolean;

alias GtkToolButton = Struct__GtkToolButton;

alias GtkToolButtonClass = Struct__GtkToolButtonClass;

alias Struct__GtkToolButtonPrivate = Opaque;

alias GtkToolButtonPrivate = Struct__GtkToolButtonPrivate;

record Struct__GtkToolButton (
    parent : GtkToolItem,
    priv : Pointer[GtkToolButtonPrivate],
);

record Struct__GtkToolButtonClass (
    parent_class : GtkToolItemClass,
    button_type : GType,
    clicked : CCodePointer[[Pointer[GtkToolButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tool_button_get_type() : GType;

external (cdecl) gtk_tool_button_new(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_tool_button_new_from_stock(arg0:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_tool_button_set_label(arg0:Pointer[GtkToolButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tool_button_get_label(arg0:Pointer[GtkToolButton]) : Pointer[gchar];

external (cdecl) gtk_tool_button_set_use_underline(arg0:Pointer[GtkToolButton], arg1:gboolean) : ;

external (cdecl) gtk_tool_button_get_use_underline(arg0:Pointer[GtkToolButton]) : gboolean;

external (cdecl) gtk_tool_button_set_stock_id(arg0:Pointer[GtkToolButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tool_button_get_stock_id(arg0:Pointer[GtkToolButton]) : Pointer[gchar];

external (cdecl) gtk_tool_button_set_icon_name(arg0:Pointer[GtkToolButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tool_button_get_icon_name(arg0:Pointer[GtkToolButton]) : Pointer[gchar];

external (cdecl) gtk_tool_button_set_icon_widget(arg0:Pointer[GtkToolButton], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tool_button_get_icon_widget(arg0:Pointer[GtkToolButton]) : Pointer[GtkWidget];

external (cdecl) gtk_tool_button_set_label_widget(arg0:Pointer[GtkToolButton], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tool_button_get_label_widget(arg0:Pointer[GtkToolButton]) : Pointer[GtkWidget];

external (cdecl) _gtk_tool_button_get_button(arg0:Pointer[GtkToolButton]) : Pointer[GtkWidget];

alias GtkMenuToolButtonClass = Struct__GtkMenuToolButtonClass;

alias GtkMenuToolButton = Struct__GtkMenuToolButton;

alias Struct__GtkMenuToolButtonPrivate = Opaque;

alias GtkMenuToolButtonPrivate = Struct__GtkMenuToolButtonPrivate;

record Struct__GtkMenuToolButton (
    parent : GtkToolButton,
    priv : Pointer[GtkMenuToolButtonPrivate],
);

record Struct__GtkMenuToolButtonClass (
    parent_class : GtkToolButtonClass,
    show_menu : CCodePointer[[Pointer[GtkMenuToolButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_menu_tool_button_get_type() : GType;

external (cdecl) gtk_menu_tool_button_new(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_menu_tool_button_new_from_stock(arg0:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_menu_tool_button_set_menu(arg0:Pointer[GtkMenuToolButton], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_menu_tool_button_get_menu(arg0:Pointer[GtkMenuToolButton]) : Pointer[GtkWidget];

external (cdecl) gtk_menu_tool_button_set_arrow_tooltip(arg0:Pointer[GtkMenuToolButton], arg1:Pointer[GtkTooltips], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) gtk_menu_tool_button_set_arrow_tooltip_text(arg0:Pointer[GtkMenuToolButton], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_menu_tool_button_set_arrow_tooltip_markup(arg0:Pointer[GtkMenuToolButton], arg1:Pointer[gchar]) : ;

alias GtkMessageDialog = Struct__GtkMessageDialog;

alias GtkMessageDialogClass = Struct__GtkMessageDialogClass;

record Struct__GtkMessageDialog (
    parent_instance : GtkDialog,
    image : Pointer[GtkWidget],
    label : Pointer[GtkWidget],
);

record Struct__GtkMessageDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);


alias GtkButtonsType = CUInt;
alias GTK_BUTTONS_NONE = CUInt(0);
alias GTK_BUTTONS_OK = CUInt(1);
alias GTK_BUTTONS_CLOSE = CUInt(2);
alias GTK_BUTTONS_CANCEL = CUInt(3);
alias GTK_BUTTONS_YES_NO = CUInt(4);
alias GTK_BUTTONS_OK_CANCEL = CUInt(5);

external (cdecl) gtk_message_dialog_get_type() : GType;

external (cdecl) gtk_message_dialog_new(arg0:Pointer[GtkWindow], arg1:GtkDialogFlags, arg2:GtkMessageType, arg3:GtkButtonsType, arg4:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_message_dialog_new_with_markup(arg0:Pointer[GtkWindow], arg1:GtkDialogFlags, arg2:GtkMessageType, arg3:GtkButtonsType, arg4:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_message_dialog_set_image(arg0:Pointer[GtkMessageDialog], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_message_dialog_get_image(arg0:Pointer[GtkMessageDialog]) : Pointer[GtkWidget];

external (cdecl) gtk_message_dialog_set_markup(arg0:Pointer[GtkMessageDialog], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_message_dialog_format_secondary_text(arg0:Pointer[GtkMessageDialog], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_message_dialog_format_secondary_markup(arg0:Pointer[GtkMessageDialog], arg1:Pointer[gchar], ..) : ;

external (cdecl) gtk_message_dialog_get_message_area(arg0:Pointer[GtkMessageDialog]) : Pointer[GtkWidget];

external (cdecl) _gtk_find_module(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) _gtk_get_module_path(arg0:Pointer[gchar]) : Pointer[Pointer[gchar]];

external (cdecl) _gtk_modules_init(arg0:Pointer[gint], arg1:Pointer[Pointer[Pointer[gchar]]], arg2:Pointer[gchar]) : ;

external (cdecl) _gtk_modules_settings_changed(arg0:Pointer[GtkSettings], arg1:Pointer[gchar]) : ;

alias GtkModuleInitFunc = CCodePointer[[Pointer[gint], Pointer[Pointer[Pointer[gchar]]]],[]];

alias GtkModuleDisplayInitFunc = CCodePointer[[Pointer[GdkDisplay]],[]];

alias GtkMountOperation = Struct__GtkMountOperation;

alias GtkMountOperationClass = Struct__GtkMountOperationClass;

alias Struct__GtkMountOperationPrivate = Opaque;

alias GtkMountOperationPrivate = Struct__GtkMountOperationPrivate;

record Struct__GtkMountOperation (
    parent_instance : GMountOperation,
    priv : Pointer[GtkMountOperationPrivate],
);

record Struct__GtkMountOperationClass (
    parent_class : GMountOperationClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_mount_operation_get_type() : GType;

external (cdecl) gtk_mount_operation_new(arg0:Pointer[GtkWindow]) : Pointer[GMountOperation];

external (cdecl) gtk_mount_operation_is_showing(arg0:Pointer[GtkMountOperation]) : gboolean;

external (cdecl) gtk_mount_operation_set_parent(arg0:Pointer[GtkMountOperation], arg1:Pointer[GtkWindow]) : ;

external (cdecl) gtk_mount_operation_get_parent(arg0:Pointer[GtkMountOperation]) : Pointer[GtkWindow];

external (cdecl) gtk_mount_operation_set_screen(arg0:Pointer[GtkMountOperation], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_mount_operation_get_screen(arg0:Pointer[GtkMountOperation]) : Pointer[GdkScreen];


alias GtkNotebookTab = CUInt;
alias GTK_NOTEBOOK_TAB_FIRST = CUInt(0);
alias GTK_NOTEBOOK_TAB_LAST = CUInt(1);

alias GtkNotebook = Struct__GtkNotebook;

alias GtkNotebookClass = Struct__GtkNotebookClass;

alias Struct__GtkNotebookPage = Opaque;

alias GtkNotebookPage = Struct__GtkNotebookPage;

record Struct__GtkNotebook (
    container : GtkContainer,
    cur_page : Pointer[GtkNotebookPage],
    children : Pointer[GList],
    first_tab : Pointer[GList],
    focus_tab : Pointer[GList],
    menu : Pointer[GtkWidget],
    event_window : Pointer[GdkWindow],
    timer : guint32,
    tab_hborder : guint16,
    tab_vborder : guint16,
    show_tabs : guint,
    homogeneous : guint,
    show_border : guint,
    tab_pos : guint,
    scrollable : guint,
    in_child : guint,
    click_child : guint,
    button : guint,
    need_timer : guint,
    child_has_focus : guint,
    have_visible_child : guint,
    focus_out : guint,
    has_before_previous : guint,
    has_before_next : guint,
    has_after_previous : guint,
    has_after_next : guint,
);

record Struct__GtkNotebookClass (
    parent_class : GtkContainerClass,
    switch_page : CCodePointer[[Pointer[GtkNotebook], Pointer[GtkNotebookPage], guint],[]],
    select_page : CCodePointer[[Pointer[GtkNotebook], gboolean],[gboolean]],
    focus_tab : CCodePointer[[Pointer[GtkNotebook], GtkNotebookTab],[gboolean]],
    change_current_page : CCodePointer[[Pointer[GtkNotebook], gint],[gboolean]],
    move_focus_out : CCodePointer[[Pointer[GtkNotebook], GtkDirectionType],[]],
    reorder_tab : CCodePointer[[Pointer[GtkNotebook], GtkDirectionType, gboolean],[gboolean]],
    insert_page : CCodePointer[[Pointer[GtkNotebook], Pointer[GtkWidget], Pointer[GtkWidget], Pointer[GtkWidget], gint],[gint]],
    create_window : CCodePointer[[Pointer[GtkNotebook], Pointer[GtkWidget], gint, gint],[Pointer[GtkNotebook]]],
    _gtk_reserved1 : CCodePointer[[],[]],
);

alias GtkNotebookWindowCreationFunc = CCodePointer[[Pointer[GtkNotebook], Pointer[GtkWidget], gint, gint, gpointer],[Pointer[GtkNotebook]]];

external (cdecl) gtk_notebook_get_type() : GType;

external (cdecl) gtk_notebook_new() : Pointer[GtkWidget];

external (cdecl) gtk_notebook_append_page(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_notebook_append_page_menu(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget], arg3:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_notebook_prepend_page(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_notebook_prepend_page_menu(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget], arg3:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_notebook_insert_page(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget], arg3:gint) : gint;

external (cdecl) gtk_notebook_insert_page_menu(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget], arg3:Pointer[GtkWidget], arg4:gint) : gint;

external (cdecl) gtk_notebook_remove_page(arg0:Pointer[GtkNotebook], arg1:gint) : ;

external (cdecl) gtk_notebook_set_window_creation_hook(arg0:GtkNotebookWindowCreationFunc, arg1:gpointer, arg2:GDestroyNotify) : ;

external (cdecl) gtk_notebook_set_group_id(arg0:Pointer[GtkNotebook], arg1:gint) : ;

external (cdecl) gtk_notebook_get_group_id(arg0:Pointer[GtkNotebook]) : gint;

external (cdecl) gtk_notebook_set_group(arg0:Pointer[GtkNotebook], arg1:gpointer) : ;

external (cdecl) gtk_notebook_get_group(arg0:Pointer[GtkNotebook]) : gpointer;

external (cdecl) gtk_notebook_set_group_name(arg0:Pointer[GtkNotebook], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_notebook_get_group_name(arg0:Pointer[GtkNotebook]) : Pointer[gchar];

external (cdecl) gtk_notebook_get_current_page(arg0:Pointer[GtkNotebook]) : gint;

external (cdecl) gtk_notebook_get_nth_page(arg0:Pointer[GtkNotebook], arg1:gint) : Pointer[GtkWidget];

external (cdecl) gtk_notebook_get_n_pages(arg0:Pointer[GtkNotebook]) : gint;

external (cdecl) gtk_notebook_page_num(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_notebook_set_current_page(arg0:Pointer[GtkNotebook], arg1:gint) : ;

external (cdecl) gtk_notebook_next_page(arg0:Pointer[GtkNotebook]) : ;

external (cdecl) gtk_notebook_prev_page(arg0:Pointer[GtkNotebook]) : ;

external (cdecl) gtk_notebook_set_show_border(arg0:Pointer[GtkNotebook], arg1:gboolean) : ;

external (cdecl) gtk_notebook_get_show_border(arg0:Pointer[GtkNotebook]) : gboolean;

external (cdecl) gtk_notebook_set_show_tabs(arg0:Pointer[GtkNotebook], arg1:gboolean) : ;

external (cdecl) gtk_notebook_get_show_tabs(arg0:Pointer[GtkNotebook]) : gboolean;

external (cdecl) gtk_notebook_set_tab_pos(arg0:Pointer[GtkNotebook], arg1:GtkPositionType) : ;

external (cdecl) gtk_notebook_get_tab_pos(arg0:Pointer[GtkNotebook]) : GtkPositionType;

external (cdecl) gtk_notebook_set_homogeneous_tabs(arg0:Pointer[GtkNotebook], arg1:gboolean) : ;

external (cdecl) gtk_notebook_set_tab_border(arg0:Pointer[GtkNotebook], arg1:guint) : ;

external (cdecl) gtk_notebook_set_tab_hborder(arg0:Pointer[GtkNotebook], arg1:guint) : ;

external (cdecl) gtk_notebook_set_tab_vborder(arg0:Pointer[GtkNotebook], arg1:guint) : ;

external (cdecl) gtk_notebook_set_scrollable(arg0:Pointer[GtkNotebook], arg1:gboolean) : ;

external (cdecl) gtk_notebook_get_scrollable(arg0:Pointer[GtkNotebook]) : gboolean;

external (cdecl) gtk_notebook_get_tab_hborder(arg0:Pointer[GtkNotebook]) : guint16;

external (cdecl) gtk_notebook_get_tab_vborder(arg0:Pointer[GtkNotebook]) : guint16;

external (cdecl) gtk_notebook_popup_enable(arg0:Pointer[GtkNotebook]) : ;

external (cdecl) gtk_notebook_popup_disable(arg0:Pointer[GtkNotebook]) : ;

external (cdecl) gtk_notebook_get_tab_label(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : Pointer[GtkWidget];

external (cdecl) gtk_notebook_set_tab_label(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_notebook_set_tab_label_text(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_notebook_get_tab_label_text(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_notebook_get_menu_label(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : Pointer[GtkWidget];

external (cdecl) gtk_notebook_set_menu_label(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_notebook_set_menu_label_text(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_notebook_get_menu_label_text(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_notebook_query_tab_label_packing(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:Pointer[gboolean], arg3:Pointer[gboolean], arg4:Pointer[GtkPackType]) : ;

external (cdecl) gtk_notebook_set_tab_label_packing(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:gboolean, arg3:gboolean, arg4:GtkPackType) : ;

external (cdecl) gtk_notebook_reorder_child(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:gint) : ;

external (cdecl) gtk_notebook_get_tab_reorderable(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_notebook_set_tab_reorderable(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:gboolean) : ;

external (cdecl) gtk_notebook_get_tab_detachable(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget]) : gboolean;

external (cdecl) gtk_notebook_set_tab_detachable(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:gboolean) : ;

external (cdecl) gtk_notebook_get_action_widget(arg0:Pointer[GtkNotebook], arg1:GtkPackType) : Pointer[GtkWidget];

external (cdecl) gtk_notebook_set_action_widget(arg0:Pointer[GtkNotebook], arg1:Pointer[GtkWidget], arg2:GtkPackType) : ;

alias GtkOffscreenWindow = Struct__GtkOffscreenWindow;

alias GtkOffscreenWindowClass = Struct__GtkOffscreenWindowClass;

record Struct__GtkOffscreenWindow (
    parent_object : GtkWindow,
);

record Struct__GtkOffscreenWindowClass (
    parent_class : GtkWindowClass,
);

external (cdecl) gtk_offscreen_window_get_type() : GType;

external (cdecl) gtk_offscreen_window_new() : Pointer[GtkWidget];

external (cdecl) gtk_offscreen_window_get_pixmap(arg0:Pointer[GtkOffscreenWindow]) : Pointer[GdkPixmap];

external (cdecl) gtk_offscreen_window_get_pixbuf(arg0:Pointer[GtkOffscreenWindow]) : Pointer[GdkPixbuf];

alias Struct__GtkOrientable = Opaque;

alias GtkOrientable = Struct__GtkOrientable;

alias GtkOrientableIface = Struct__GtkOrientableIface;

record Struct__GtkOrientableIface (
    base_iface : GTypeInterface,
);

external (cdecl) gtk_orientable_get_type() : GType;

external (cdecl) gtk_orientable_set_orientation(arg0:Pointer[GtkOrientable], arg1:GtkOrientation) : ;

external (cdecl) gtk_orientable_get_orientation(arg0:Pointer[GtkOrientable]) : GtkOrientation;

alias Struct__GtkPaperSize = Opaque;

alias GtkPaperSize = Struct__GtkPaperSize;

external (cdecl) gtk_paper_size_get_type() : GType;

external (cdecl) gtk_paper_size_new(arg0:Pointer[gchar]) : Pointer[GtkPaperSize];

external (cdecl) gtk_paper_size_new_from_ppd(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gdouble, arg3:gdouble) : Pointer[GtkPaperSize];

external (cdecl) gtk_paper_size_new_custom(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gdouble, arg3:gdouble, arg4:GtkUnit) : Pointer[GtkPaperSize];

external (cdecl) gtk_paper_size_copy(arg0:Pointer[GtkPaperSize]) : Pointer[GtkPaperSize];

external (cdecl) gtk_paper_size_free(arg0:Pointer[GtkPaperSize]) : ;

external (cdecl) gtk_paper_size_is_equal(arg0:Pointer[GtkPaperSize], arg1:Pointer[GtkPaperSize]) : gboolean;

external (cdecl) gtk_paper_size_get_paper_sizes(arg0:gboolean) : Pointer[GList];

external (cdecl) gtk_paper_size_get_name(arg0:Pointer[GtkPaperSize]) : Pointer[gchar];

external (cdecl) gtk_paper_size_get_display_name(arg0:Pointer[GtkPaperSize]) : Pointer[gchar];

external (cdecl) gtk_paper_size_get_ppd_name(arg0:Pointer[GtkPaperSize]) : Pointer[gchar];

external (cdecl) gtk_paper_size_get_width(arg0:Pointer[GtkPaperSize], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_paper_size_get_height(arg0:Pointer[GtkPaperSize], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_paper_size_is_custom(arg0:Pointer[GtkPaperSize]) : gboolean;

external (cdecl) gtk_paper_size_set_size(arg0:Pointer[GtkPaperSize], arg1:gdouble, arg2:gdouble, arg3:GtkUnit) : ;

external (cdecl) gtk_paper_size_get_default_top_margin(arg0:Pointer[GtkPaperSize], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_paper_size_get_default_bottom_margin(arg0:Pointer[GtkPaperSize], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_paper_size_get_default_left_margin(arg0:Pointer[GtkPaperSize], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_paper_size_get_default_right_margin(arg0:Pointer[GtkPaperSize], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_paper_size_get_default() : Pointer[gchar];

external (cdecl) gtk_paper_size_new_from_key_file(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GtkPaperSize];

external (cdecl) gtk_paper_size_to_key_file(arg0:Pointer[GtkPaperSize], arg1:Pointer[GKeyFile], arg2:Pointer[gchar]) : ;

alias Struct__GtkPageSetup = Opaque;

alias GtkPageSetup = Struct__GtkPageSetup;

external (cdecl) gtk_page_setup_get_type() : GType;

external (cdecl) gtk_page_setup_new() : Pointer[GtkPageSetup];

external (cdecl) gtk_page_setup_copy(arg0:Pointer[GtkPageSetup]) : Pointer[GtkPageSetup];

external (cdecl) gtk_page_setup_get_orientation(arg0:Pointer[GtkPageSetup]) : GtkPageOrientation;

external (cdecl) gtk_page_setup_set_orientation(arg0:Pointer[GtkPageSetup], arg1:GtkPageOrientation) : ;

external (cdecl) gtk_page_setup_get_paper_size(arg0:Pointer[GtkPageSetup]) : Pointer[GtkPaperSize];

external (cdecl) gtk_page_setup_set_paper_size(arg0:Pointer[GtkPageSetup], arg1:Pointer[GtkPaperSize]) : ;

external (cdecl) gtk_page_setup_get_top_margin(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_set_top_margin(arg0:Pointer[GtkPageSetup], arg1:gdouble, arg2:GtkUnit) : ;

external (cdecl) gtk_page_setup_get_bottom_margin(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_set_bottom_margin(arg0:Pointer[GtkPageSetup], arg1:gdouble, arg2:GtkUnit) : ;

external (cdecl) gtk_page_setup_get_left_margin(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_set_left_margin(arg0:Pointer[GtkPageSetup], arg1:gdouble, arg2:GtkUnit) : ;

external (cdecl) gtk_page_setup_get_right_margin(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_set_right_margin(arg0:Pointer[GtkPageSetup], arg1:gdouble, arg2:GtkUnit) : ;

external (cdecl) gtk_page_setup_set_paper_size_and_default_margins(arg0:Pointer[GtkPageSetup], arg1:Pointer[GtkPaperSize]) : ;

external (cdecl) gtk_page_setup_get_paper_width(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_get_paper_height(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_get_page_width(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_get_page_height(arg0:Pointer[GtkPageSetup], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_page_setup_new_from_file(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GtkPageSetup];

external (cdecl) gtk_page_setup_load_file(arg0:Pointer[GtkPageSetup], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_page_setup_to_file(arg0:Pointer[GtkPageSetup], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_page_setup_new_from_key_file(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GtkPageSetup];

external (cdecl) gtk_page_setup_load_key_file(arg0:Pointer[GtkPageSetup], arg1:Pointer[GKeyFile], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_page_setup_to_key_file(arg0:Pointer[GtkPageSetup], arg1:Pointer[GKeyFile], arg2:Pointer[gchar]) : ;

alias GtkSocket = Struct__GtkSocket;

alias GtkSocketClass = Struct__GtkSocketClass;

record Struct__GtkSocket (
    container : GtkContainer,
    request_width : guint16,
    request_height : guint16,
    current_width : guint16,
    current_height : guint16,
    plug_window : Pointer[GdkWindow],
    plug_widget : Pointer[GtkWidget],
    xembed_version : gshort,
    same_app : guint,
    focus_in : guint,
    have_size : guint,
    need_map : guint,
    is_mapped : guint,
    active : guint,
    accel_group : Pointer[GtkAccelGroup],
    toplevel : Pointer[GtkWidget],
);

record Struct__GtkSocketClass (
    parent_class : GtkContainerClass,
    plug_added : CCodePointer[[Pointer[GtkSocket]],[]],
    plug_removed : CCodePointer[[Pointer[GtkSocket]],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_socket_get_type() : GType;

external (cdecl) gtk_socket_new() : Pointer[GtkWidget];

external (cdecl) gtk_socket_add_id(arg0:Pointer[GtkSocket], arg1:GdkNativeWindow) : ;

external (cdecl) gtk_socket_get_id(arg0:Pointer[GtkSocket]) : GdkNativeWindow;

external (cdecl) gtk_socket_get_plug_window(arg0:Pointer[GtkSocket]) : Pointer[GdkWindow];

external (cdecl) gtk_socket_steal(arg0:Pointer[GtkSocket], arg1:GdkNativeWindow) : ;

alias GtkPlug = Struct__GtkPlug;

alias GtkPlugClass = Struct__GtkPlugClass;

record Struct__GtkPlug (
    window : GtkWindow,
    socket_window : Pointer[GdkWindow],
    modality_window : Pointer[GtkWidget],
    modality_group : Pointer[GtkWindowGroup],
    grabbed_keys : Pointer[GHashTable],
    same_app : guint,
);

record Struct__GtkPlugClass (
    parent_class : GtkWindowClass,
    embedded : CCodePointer[[Pointer[GtkPlug]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_plug_get_type() : GType;

external (cdecl) gtk_plug_construct(arg0:Pointer[GtkPlug], arg1:GdkNativeWindow) : ;

external (cdecl) gtk_plug_new(arg0:GdkNativeWindow) : Pointer[GtkWidget];

external (cdecl) gtk_plug_construct_for_display(arg0:Pointer[GtkPlug], arg1:Pointer[GdkDisplay], arg2:GdkNativeWindow) : ;

external (cdecl) gtk_plug_new_for_display(arg0:Pointer[GdkDisplay], arg1:GdkNativeWindow) : Pointer[GtkWidget];

external (cdecl) gtk_plug_get_id(arg0:Pointer[GtkPlug]) : GdkNativeWindow;

external (cdecl) gtk_plug_get_embedded(arg0:Pointer[GtkPlug]) : gboolean;

external (cdecl) gtk_plug_get_socket_window(arg0:Pointer[GtkPlug]) : Pointer[GdkWindow];

external (cdecl) _gtk_plug_add_to_socket(arg0:Pointer[GtkPlug], arg1:Pointer[GtkSocket]) : ;

external (cdecl) _gtk_plug_remove_from_socket(arg0:Pointer[GtkPlug], arg1:Pointer[GtkSocket]) : ;

alias Struct__GtkPrintContext = Opaque;

alias GtkPrintContext = Struct__GtkPrintContext;

external (cdecl) gtk_print_context_get_type() : GType;

external (cdecl) gtk_print_context_get_cairo_context(arg0:Pointer[GtkPrintContext]) : Pointer[cairo_t];

external (cdecl) gtk_print_context_get_page_setup(arg0:Pointer[GtkPrintContext]) : Pointer[GtkPageSetup];

external (cdecl) gtk_print_context_get_width(arg0:Pointer[GtkPrintContext]) : gdouble;

external (cdecl) gtk_print_context_get_height(arg0:Pointer[GtkPrintContext]) : gdouble;

external (cdecl) gtk_print_context_get_dpi_x(arg0:Pointer[GtkPrintContext]) : gdouble;

external (cdecl) gtk_print_context_get_dpi_y(arg0:Pointer[GtkPrintContext]) : gdouble;

external (cdecl) gtk_print_context_get_hard_margins(arg0:Pointer[GtkPrintContext], arg1:Pointer[gdouble], arg2:Pointer[gdouble], arg3:Pointer[gdouble], arg4:Pointer[gdouble]) : gboolean;

external (cdecl) gtk_print_context_get_pango_fontmap(arg0:Pointer[GtkPrintContext]) : Pointer[PangoFontMap];

external (cdecl) gtk_print_context_create_pango_context(arg0:Pointer[GtkPrintContext]) : Pointer[PangoContext];

external (cdecl) gtk_print_context_create_pango_layout(arg0:Pointer[GtkPrintContext]) : Pointer[PangoLayout];

external (cdecl) gtk_print_context_set_cairo_context(arg0:Pointer[GtkPrintContext], arg1:Pointer[cairo_t], arg2:CDouble, arg3:CDouble) : ;

alias Struct__GtkPrintSettings = Opaque;

alias GtkPrintSettings = Struct__GtkPrintSettings;

alias GtkPrintSettingsFunc = CCodePointer[[Pointer[gchar], Pointer[gchar], gpointer],[]];

alias GtkPageRange = Struct__GtkPageRange;

record Struct__GtkPageRange (
    start : gint,
    end : gint,
);

external (cdecl) gtk_print_settings_get_type() : GType;

external (cdecl) gtk_print_settings_new() : Pointer[GtkPrintSettings];

external (cdecl) gtk_print_settings_copy(arg0:Pointer[GtkPrintSettings]) : Pointer[GtkPrintSettings];

external (cdecl) gtk_print_settings_new_from_file(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GtkPrintSettings];

external (cdecl) gtk_print_settings_load_file(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_print_settings_to_file(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_print_settings_new_from_key_file(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GtkPrintSettings];

external (cdecl) gtk_print_settings_load_key_file(arg0:Pointer[GtkPrintSettings], arg1:Pointer[GKeyFile], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_print_settings_to_key_file(arg0:Pointer[GtkPrintSettings], arg1:Pointer[GKeyFile], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_has_key(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_print_settings_get(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_unset(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_foreach(arg0:Pointer[GtkPrintSettings], arg1:GtkPrintSettingsFunc, arg2:gpointer) : ;

external (cdecl) gtk_print_settings_get_bool(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_print_settings_set_bool(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:gboolean) : ;

external (cdecl) gtk_print_settings_get_double(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : gdouble;

external (cdecl) gtk_print_settings_get_double_with_default(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:gdouble) : gdouble;

external (cdecl) gtk_print_settings_set_double(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:gdouble) : ;

external (cdecl) gtk_print_settings_get_length(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:GtkUnit) : gdouble;

external (cdecl) gtk_print_settings_set_length(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:gdouble, arg3:GtkUnit) : ;

external (cdecl) gtk_print_settings_get_int(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : gint;

external (cdecl) gtk_print_settings_get_int_with_default(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:gint) : gint;

external (cdecl) gtk_print_settings_set_int(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) gtk_print_settings_get_printer(arg0:Pointer[GtkPrintSettings]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set_printer(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_get_orientation(arg0:Pointer[GtkPrintSettings]) : GtkPageOrientation;

external (cdecl) gtk_print_settings_set_orientation(arg0:Pointer[GtkPrintSettings], arg1:GtkPageOrientation) : ;

external (cdecl) gtk_print_settings_get_paper_size(arg0:Pointer[GtkPrintSettings]) : Pointer[GtkPaperSize];

external (cdecl) gtk_print_settings_set_paper_size(arg0:Pointer[GtkPrintSettings], arg1:Pointer[GtkPaperSize]) : ;

external (cdecl) gtk_print_settings_get_paper_width(arg0:Pointer[GtkPrintSettings], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_print_settings_set_paper_width(arg0:Pointer[GtkPrintSettings], arg1:gdouble, arg2:GtkUnit) : ;

external (cdecl) gtk_print_settings_get_paper_height(arg0:Pointer[GtkPrintSettings], arg1:GtkUnit) : gdouble;

external (cdecl) gtk_print_settings_set_paper_height(arg0:Pointer[GtkPrintSettings], arg1:gdouble, arg2:GtkUnit) : ;

external (cdecl) gtk_print_settings_get_use_color(arg0:Pointer[GtkPrintSettings]) : gboolean;

external (cdecl) gtk_print_settings_set_use_color(arg0:Pointer[GtkPrintSettings], arg1:gboolean) : ;

external (cdecl) gtk_print_settings_get_collate(arg0:Pointer[GtkPrintSettings]) : gboolean;

external (cdecl) gtk_print_settings_set_collate(arg0:Pointer[GtkPrintSettings], arg1:gboolean) : ;

external (cdecl) gtk_print_settings_get_reverse(arg0:Pointer[GtkPrintSettings]) : gboolean;

external (cdecl) gtk_print_settings_set_reverse(arg0:Pointer[GtkPrintSettings], arg1:gboolean) : ;

external (cdecl) gtk_print_settings_get_duplex(arg0:Pointer[GtkPrintSettings]) : GtkPrintDuplex;

external (cdecl) gtk_print_settings_set_duplex(arg0:Pointer[GtkPrintSettings], arg1:GtkPrintDuplex) : ;

external (cdecl) gtk_print_settings_get_quality(arg0:Pointer[GtkPrintSettings]) : GtkPrintQuality;

external (cdecl) gtk_print_settings_set_quality(arg0:Pointer[GtkPrintSettings], arg1:GtkPrintQuality) : ;

external (cdecl) gtk_print_settings_get_n_copies(arg0:Pointer[GtkPrintSettings]) : gint;

external (cdecl) gtk_print_settings_set_n_copies(arg0:Pointer[GtkPrintSettings], arg1:gint) : ;

external (cdecl) gtk_print_settings_get_number_up(arg0:Pointer[GtkPrintSettings]) : gint;

external (cdecl) gtk_print_settings_set_number_up(arg0:Pointer[GtkPrintSettings], arg1:gint) : ;

external (cdecl) gtk_print_settings_get_number_up_layout(arg0:Pointer[GtkPrintSettings]) : GtkNumberUpLayout;

external (cdecl) gtk_print_settings_set_number_up_layout(arg0:Pointer[GtkPrintSettings], arg1:GtkNumberUpLayout) : ;

external (cdecl) gtk_print_settings_get_resolution(arg0:Pointer[GtkPrintSettings]) : gint;

external (cdecl) gtk_print_settings_set_resolution(arg0:Pointer[GtkPrintSettings], arg1:gint) : ;

external (cdecl) gtk_print_settings_get_resolution_x(arg0:Pointer[GtkPrintSettings]) : gint;

external (cdecl) gtk_print_settings_get_resolution_y(arg0:Pointer[GtkPrintSettings]) : gint;

external (cdecl) gtk_print_settings_set_resolution_xy(arg0:Pointer[GtkPrintSettings], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_print_settings_get_printer_lpi(arg0:Pointer[GtkPrintSettings]) : gdouble;

external (cdecl) gtk_print_settings_set_printer_lpi(arg0:Pointer[GtkPrintSettings], arg1:gdouble) : ;

external (cdecl) gtk_print_settings_get_scale(arg0:Pointer[GtkPrintSettings]) : gdouble;

external (cdecl) gtk_print_settings_set_scale(arg0:Pointer[GtkPrintSettings], arg1:gdouble) : ;

external (cdecl) gtk_print_settings_get_print_pages(arg0:Pointer[GtkPrintSettings]) : GtkPrintPages;

external (cdecl) gtk_print_settings_set_print_pages(arg0:Pointer[GtkPrintSettings], arg1:GtkPrintPages) : ;

external (cdecl) gtk_print_settings_get_page_ranges(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gint]) : Pointer[GtkPageRange];

external (cdecl) gtk_print_settings_set_page_ranges(arg0:Pointer[GtkPrintSettings], arg1:Pointer[GtkPageRange], arg2:gint) : ;

external (cdecl) gtk_print_settings_get_page_set(arg0:Pointer[GtkPrintSettings]) : GtkPageSet;

external (cdecl) gtk_print_settings_set_page_set(arg0:Pointer[GtkPrintSettings], arg1:GtkPageSet) : ;

external (cdecl) gtk_print_settings_get_default_source(arg0:Pointer[GtkPrintSettings]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set_default_source(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_get_media_type(arg0:Pointer[GtkPrintSettings]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set_media_type(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_get_dither(arg0:Pointer[GtkPrintSettings]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set_dither(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_get_finishings(arg0:Pointer[GtkPrintSettings]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set_finishings(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_settings_get_output_bin(arg0:Pointer[GtkPrintSettings]) : Pointer[gchar];

external (cdecl) gtk_print_settings_set_output_bin(arg0:Pointer[GtkPrintSettings], arg1:Pointer[gchar]) : ;

alias Struct__GtkPrintOperationPreview = Opaque;

alias GtkPrintOperationPreview = Struct__GtkPrintOperationPreview;

alias GtkPrintOperationPreviewIface = Struct__GtkPrintOperationPreviewIface;

record Struct__GtkPrintOperationPreviewIface (
    g_iface : GTypeInterface,
    ready : CCodePointer[[Pointer[GtkPrintOperationPreview], Pointer[GtkPrintContext]],[]],
    got_page_size : CCodePointer[[Pointer[GtkPrintOperationPreview], Pointer[GtkPrintContext], Pointer[GtkPageSetup]],[]],
    render_page : CCodePointer[[Pointer[GtkPrintOperationPreview], gint],[]],
    is_selected : CCodePointer[[Pointer[GtkPrintOperationPreview], gint],[gboolean]],
    end_preview : CCodePointer[[Pointer[GtkPrintOperationPreview]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
    _gtk_reserved7 : CCodePointer[[],[]],
);

external (cdecl) gtk_print_operation_preview_get_type() : GType;

external (cdecl) gtk_print_operation_preview_render_page(arg0:Pointer[GtkPrintOperationPreview], arg1:gint) : ;

external (cdecl) gtk_print_operation_preview_end_preview(arg0:Pointer[GtkPrintOperationPreview]) : ;

external (cdecl) gtk_print_operation_preview_is_selected(arg0:Pointer[GtkPrintOperationPreview], arg1:gint) : gboolean;

alias GtkPrintOperationClass = Struct__GtkPrintOperationClass;

alias Struct__GtkPrintOperationPrivate = Opaque;

alias GtkPrintOperationPrivate = Struct__GtkPrintOperationPrivate;

alias GtkPrintOperation = Struct__GtkPrintOperation;


alias GtkPrintStatus = CUInt;
alias GTK_PRINT_STATUS_INITIAL = CUInt(0);
alias GTK_PRINT_STATUS_PREPARING = CUInt(1);
alias GTK_PRINT_STATUS_GENERATING_DATA = CUInt(2);
alias GTK_PRINT_STATUS_SENDING_DATA = CUInt(3);
alias GTK_PRINT_STATUS_PENDING = CUInt(4);
alias GTK_PRINT_STATUS_PENDING_ISSUE = CUInt(5);
alias GTK_PRINT_STATUS_PRINTING = CUInt(6);
alias GTK_PRINT_STATUS_FINISHED = CUInt(7);
alias GTK_PRINT_STATUS_FINISHED_ABORTED = CUInt(8);


alias GtkPrintOperationResult = CUInt;
alias GTK_PRINT_OPERATION_RESULT_ERROR = CUInt(0);
alias GTK_PRINT_OPERATION_RESULT_APPLY = CUInt(1);
alias GTK_PRINT_OPERATION_RESULT_CANCEL = CUInt(2);
alias GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = CUInt(3);


alias GtkPrintOperationAction = CUInt;
alias GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = CUInt(0);
alias GTK_PRINT_OPERATION_ACTION_PRINT = CUInt(1);
alias GTK_PRINT_OPERATION_ACTION_PREVIEW = CUInt(2);
alias GTK_PRINT_OPERATION_ACTION_EXPORT = CUInt(3);

record Struct__GtkPrintOperation (
    parent_instance : GObject,
    priv : Pointer[GtkPrintOperationPrivate],
);

record Struct__GtkPrintOperationClass (
    parent_class : GObjectClass,
    done : CCodePointer[[Pointer[GtkPrintOperation], GtkPrintOperationResult],[]],
    begin_print : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkPrintContext]],[]],
    paginate : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkPrintContext]],[gboolean]],
    request_page_setup : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkPrintContext], gint, Pointer[GtkPageSetup]],[]],
    draw_page : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkPrintContext], gint],[]],
    end_print : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkPrintContext]],[]],
    status_changed : CCodePointer[[Pointer[GtkPrintOperation]],[]],
    create_custom_widget : CCodePointer[[Pointer[GtkPrintOperation]],[Pointer[GtkWidget]]],
    custom_widget_apply : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkWidget]],[]],
    preview : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkPrintOperationPreview], Pointer[GtkPrintContext], Pointer[GtkWindow]],[gboolean]],
    update_custom_widget : CCodePointer[[Pointer[GtkPrintOperation], Pointer[GtkWidget], Pointer[GtkPageSetup], Pointer[GtkPrintSettings]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
);


alias GtkPrintError = CUInt;
alias GTK_PRINT_ERROR_GENERAL = CUInt(0);
alias GTK_PRINT_ERROR_INTERNAL_ERROR = CUInt(1);
alias GTK_PRINT_ERROR_NOMEM = CUInt(2);
alias GTK_PRINT_ERROR_INVALID_FILE = CUInt(3);

external (cdecl) gtk_print_error_quark() : GQuark;

external (cdecl) gtk_print_operation_get_type() : GType;

external (cdecl) gtk_print_operation_new() : Pointer[GtkPrintOperation];

external (cdecl) gtk_print_operation_set_default_page_setup(arg0:Pointer[GtkPrintOperation], arg1:Pointer[GtkPageSetup]) : ;

external (cdecl) gtk_print_operation_get_default_page_setup(arg0:Pointer[GtkPrintOperation]) : Pointer[GtkPageSetup];

external (cdecl) gtk_print_operation_set_print_settings(arg0:Pointer[GtkPrintOperation], arg1:Pointer[GtkPrintSettings]) : ;

external (cdecl) gtk_print_operation_get_print_settings(arg0:Pointer[GtkPrintOperation]) : Pointer[GtkPrintSettings];

external (cdecl) gtk_print_operation_set_job_name(arg0:Pointer[GtkPrintOperation], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_operation_set_n_pages(arg0:Pointer[GtkPrintOperation], arg1:gint) : ;

external (cdecl) gtk_print_operation_set_current_page(arg0:Pointer[GtkPrintOperation], arg1:gint) : ;

external (cdecl) gtk_print_operation_set_use_full_page(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_set_unit(arg0:Pointer[GtkPrintOperation], arg1:GtkUnit) : ;

external (cdecl) gtk_print_operation_set_export_filename(arg0:Pointer[GtkPrintOperation], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_operation_set_track_print_status(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_set_show_progress(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_set_allow_async(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_set_custom_tab_label(arg0:Pointer[GtkPrintOperation], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_print_operation_run(arg0:Pointer[GtkPrintOperation], arg1:GtkPrintOperationAction, arg2:Pointer[GtkWindow], arg3:Pointer[Pointer[GError]]) : GtkPrintOperationResult;

external (cdecl) gtk_print_operation_get_error(arg0:Pointer[GtkPrintOperation], arg1:Pointer[Pointer[GError]]) : ;

external (cdecl) gtk_print_operation_get_status(arg0:Pointer[GtkPrintOperation]) : GtkPrintStatus;

external (cdecl) gtk_print_operation_get_status_string(arg0:Pointer[GtkPrintOperation]) : Pointer[gchar];

external (cdecl) gtk_print_operation_is_finished(arg0:Pointer[GtkPrintOperation]) : gboolean;

external (cdecl) gtk_print_operation_cancel(arg0:Pointer[GtkPrintOperation]) : ;

external (cdecl) gtk_print_operation_draw_page_finish(arg0:Pointer[GtkPrintOperation]) : ;

external (cdecl) gtk_print_operation_set_defer_drawing(arg0:Pointer[GtkPrintOperation]) : ;

external (cdecl) gtk_print_operation_set_support_selection(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_get_support_selection(arg0:Pointer[GtkPrintOperation]) : gboolean;

external (cdecl) gtk_print_operation_set_has_selection(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_get_has_selection(arg0:Pointer[GtkPrintOperation]) : gboolean;

external (cdecl) gtk_print_operation_set_embed_page_setup(arg0:Pointer[GtkPrintOperation], arg1:gboolean) : ;

external (cdecl) gtk_print_operation_get_embed_page_setup(arg0:Pointer[GtkPrintOperation]) : gboolean;

external (cdecl) gtk_print_operation_get_n_pages_to_print(arg0:Pointer[GtkPrintOperation]) : gint;

external (cdecl) gtk_print_run_page_setup_dialog(arg0:Pointer[GtkWindow], arg1:Pointer[GtkPageSetup], arg2:Pointer[GtkPrintSettings]) : Pointer[GtkPageSetup];

alias GtkPageSetupDoneFunc = CCodePointer[[Pointer[GtkPageSetup], gpointer],[]];

external (cdecl) gtk_print_run_page_setup_dialog_async(arg0:Pointer[GtkWindow], arg1:Pointer[GtkPageSetup], arg2:Pointer[GtkPrintSettings], arg3:GtkPageSetupDoneFunc, arg4:gpointer) : ;

alias GtkProgress = Struct__GtkProgress;

alias GtkProgressClass = Struct__GtkProgressClass;

record Struct__GtkProgress (
    widget : GtkWidget,
    adjustment : Pointer[GtkAdjustment],
    offscreen_pixmap : Pointer[GdkPixmap],
    format : Pointer[gchar],
    x_align : gfloat,
    y_align : gfloat,
    show_text : guint,
    activity_mode : guint,
    use_text_format : guint,
);

record Struct__GtkProgressClass (
    parent_class : GtkWidgetClass,
    paint : CCodePointer[[Pointer[GtkProgress]],[]],
    update : CCodePointer[[Pointer[GtkProgress]],[]],
    act_mode_enter : CCodePointer[[Pointer[GtkProgress]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_progress_get_type() : GType;

external (cdecl) gtk_progress_set_show_text(arg0:Pointer[GtkProgress], arg1:gboolean) : ;

external (cdecl) gtk_progress_set_text_alignment(arg0:Pointer[GtkProgress], arg1:gfloat, arg2:gfloat) : ;

external (cdecl) gtk_progress_set_format_string(arg0:Pointer[GtkProgress], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_progress_set_adjustment(arg0:Pointer[GtkProgress], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_progress_configure(arg0:Pointer[GtkProgress], arg1:gdouble, arg2:gdouble, arg3:gdouble) : ;

external (cdecl) gtk_progress_set_percentage(arg0:Pointer[GtkProgress], arg1:gdouble) : ;

external (cdecl) gtk_progress_set_value(arg0:Pointer[GtkProgress], arg1:gdouble) : ;

external (cdecl) gtk_progress_get_value(arg0:Pointer[GtkProgress]) : gdouble;

external (cdecl) gtk_progress_set_activity_mode(arg0:Pointer[GtkProgress], arg1:gboolean) : ;

external (cdecl) gtk_progress_get_current_text(arg0:Pointer[GtkProgress]) : Pointer[gchar];

external (cdecl) gtk_progress_get_text_from_value(arg0:Pointer[GtkProgress], arg1:gdouble) : Pointer[gchar];

external (cdecl) gtk_progress_get_current_percentage(arg0:Pointer[GtkProgress]) : gdouble;

external (cdecl) gtk_progress_get_percentage_from_value(arg0:Pointer[GtkProgress], arg1:gdouble) : gdouble;

alias GtkProgressBar = Struct__GtkProgressBar;

alias GtkProgressBarClass = Struct__GtkProgressBarClass;


alias GtkProgressBarStyle = CUInt;
alias GTK_PROGRESS_CONTINUOUS = CUInt(0);
alias GTK_PROGRESS_DISCRETE = CUInt(1);


alias GtkProgressBarOrientation = CUInt;
alias GTK_PROGRESS_LEFT_TO_RIGHT = CUInt(0);
alias GTK_PROGRESS_RIGHT_TO_LEFT = CUInt(1);
alias GTK_PROGRESS_BOTTOM_TO_TOP = CUInt(2);
alias GTK_PROGRESS_TOP_TO_BOTTOM = CUInt(3);

record Struct__GtkProgressBar (
    progress : GtkProgress,
    bar_style : GtkProgressBarStyle,
    orientation : GtkProgressBarOrientation,
    blocks : guint,
    in_block : gint,
    activity_pos : gint,
    activity_step : guint,
    activity_blocks : guint,
    pulse_fraction : gdouble,
    activity_dir : guint,
    ellipsize : guint,
    dirty : guint,
);

record Struct__GtkProgressBarClass (
    parent_class : GtkProgressClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_progress_bar_get_type() : GType;

external (cdecl) gtk_progress_bar_new() : Pointer[GtkWidget];

external (cdecl) gtk_progress_bar_pulse(arg0:Pointer[GtkProgressBar]) : ;

external (cdecl) gtk_progress_bar_set_text(arg0:Pointer[GtkProgressBar], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_progress_bar_set_fraction(arg0:Pointer[GtkProgressBar], arg1:gdouble) : ;

external (cdecl) gtk_progress_bar_set_pulse_step(arg0:Pointer[GtkProgressBar], arg1:gdouble) : ;

external (cdecl) gtk_progress_bar_set_orientation(arg0:Pointer[GtkProgressBar], arg1:GtkProgressBarOrientation) : ;

external (cdecl) gtk_progress_bar_get_text(arg0:Pointer[GtkProgressBar]) : Pointer[gchar];

external (cdecl) gtk_progress_bar_get_fraction(arg0:Pointer[GtkProgressBar]) : gdouble;

external (cdecl) gtk_progress_bar_get_pulse_step(arg0:Pointer[GtkProgressBar]) : gdouble;

external (cdecl) gtk_progress_bar_get_orientation(arg0:Pointer[GtkProgressBar]) : GtkProgressBarOrientation;

external (cdecl) gtk_progress_bar_set_ellipsize(arg0:Pointer[GtkProgressBar], arg1:PangoEllipsizeMode) : ;

external (cdecl) gtk_progress_bar_get_ellipsize(arg0:Pointer[GtkProgressBar]) : PangoEllipsizeMode;

external (cdecl) gtk_progress_bar_new_with_adjustment(arg0:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

external (cdecl) gtk_progress_bar_set_bar_style(arg0:Pointer[GtkProgressBar], arg1:GtkProgressBarStyle) : ;

external (cdecl) gtk_progress_bar_set_discrete_blocks(arg0:Pointer[GtkProgressBar], arg1:guint) : ;

external (cdecl) gtk_progress_bar_set_activity_step(arg0:Pointer[GtkProgressBar], arg1:guint) : ;

external (cdecl) gtk_progress_bar_set_activity_blocks(arg0:Pointer[GtkProgressBar], arg1:guint) : ;

external (cdecl) gtk_progress_bar_update(arg0:Pointer[GtkProgressBar], arg1:gdouble) : ;

alias GtkToggleAction = Struct__GtkToggleAction;

alias Struct__GtkToggleActionPrivate = Opaque;

alias GtkToggleActionPrivate = Struct__GtkToggleActionPrivate;

alias GtkToggleActionClass = Struct__GtkToggleActionClass;

record Struct__GtkToggleAction (
    parent : GtkAction,
    private_data : Pointer[GtkToggleActionPrivate],
);

record Struct__GtkToggleActionClass (
    parent_class : GtkActionClass,
    toggled : CCodePointer[[Pointer[GtkToggleAction]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_toggle_action_get_type() : GType;

external (cdecl) gtk_toggle_action_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : Pointer[GtkToggleAction];

external (cdecl) gtk_toggle_action_toggled(arg0:Pointer[GtkToggleAction]) : ;

external (cdecl) gtk_toggle_action_set_active(arg0:Pointer[GtkToggleAction], arg1:gboolean) : ;

external (cdecl) gtk_toggle_action_get_active(arg0:Pointer[GtkToggleAction]) : gboolean;

external (cdecl) gtk_toggle_action_set_draw_as_radio(arg0:Pointer[GtkToggleAction], arg1:gboolean) : ;

external (cdecl) gtk_toggle_action_get_draw_as_radio(arg0:Pointer[GtkToggleAction]) : gboolean;

alias GtkRadioAction = Struct__GtkRadioAction;

alias Struct__GtkRadioActionPrivate = Opaque;

alias GtkRadioActionPrivate = Struct__GtkRadioActionPrivate;

alias GtkRadioActionClass = Struct__GtkRadioActionClass;

record Struct__GtkRadioAction (
    parent : GtkToggleAction,
    private_data : Pointer[GtkRadioActionPrivate],
);

record Struct__GtkRadioActionClass (
    parent_class : GtkToggleActionClass,
    changed : CCodePointer[[Pointer[GtkRadioAction], Pointer[GtkRadioAction]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_radio_action_get_type() : GType;

external (cdecl) gtk_radio_action_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:gint) : Pointer[GtkRadioAction];

external (cdecl) gtk_radio_action_get_group(arg0:Pointer[GtkRadioAction]) : Pointer[GSList];

external (cdecl) gtk_radio_action_set_group(arg0:Pointer[GtkRadioAction], arg1:Pointer[GSList]) : ;

external (cdecl) gtk_radio_action_get_current_value(arg0:Pointer[GtkRadioAction]) : gint;

external (cdecl) gtk_radio_action_set_current_value(arg0:Pointer[GtkRadioAction], arg1:gint) : ;

alias GtkRadioButton = Struct__GtkRadioButton;

alias GtkRadioButtonClass = Struct__GtkRadioButtonClass;

record Struct__GtkRadioButton (
    check_button : GtkCheckButton,
    group : Pointer[GSList],
);

record Struct__GtkRadioButtonClass (
    parent_class : GtkCheckButtonClass,
    group_changed : CCodePointer[[Pointer[GtkRadioButton]],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_radio_button_get_type() : GType;

external (cdecl) gtk_radio_button_new(arg0:Pointer[GSList]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_button_new_from_widget(arg0:Pointer[GtkRadioButton]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_button_new_with_label(arg0:Pointer[GSList], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_button_new_with_label_from_widget(arg0:Pointer[GtkRadioButton], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_button_new_with_mnemonic(arg0:Pointer[GSList], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_button_new_with_mnemonic_from_widget(arg0:Pointer[GtkRadioButton], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_button_get_group(arg0:Pointer[GtkRadioButton]) : Pointer[GSList];

external (cdecl) gtk_radio_button_set_group(arg0:Pointer[GtkRadioButton], arg1:Pointer[GSList]) : ;

alias GtkRadioMenuItem = Struct__GtkRadioMenuItem;

alias GtkRadioMenuItemClass = Struct__GtkRadioMenuItemClass;

record Struct__GtkRadioMenuItem (
    check_menu_item : GtkCheckMenuItem,
    group : Pointer[GSList],
);

record Struct__GtkRadioMenuItemClass (
    parent_class : GtkCheckMenuItemClass,
    group_changed : CCodePointer[[Pointer[GtkRadioMenuItem]],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_radio_menu_item_get_type() : GType;

external (cdecl) gtk_radio_menu_item_new(arg0:Pointer[GSList]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_menu_item_new_with_label(arg0:Pointer[GSList], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_menu_item_new_with_mnemonic(arg0:Pointer[GSList], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_menu_item_new_from_widget(arg0:Pointer[GtkRadioMenuItem]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_menu_item_new_with_mnemonic_from_widget(arg0:Pointer[GtkRadioMenuItem], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_menu_item_new_with_label_from_widget(arg0:Pointer[GtkRadioMenuItem], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_radio_menu_item_get_group(arg0:Pointer[GtkRadioMenuItem]) : Pointer[GSList];

external (cdecl) gtk_radio_menu_item_set_group(arg0:Pointer[GtkRadioMenuItem], arg1:Pointer[GSList]) : ;

alias GtkToggleToolButton = Struct__GtkToggleToolButton;

alias GtkToggleToolButtonClass = Struct__GtkToggleToolButtonClass;

alias Struct__GtkToggleToolButtonPrivate = Opaque;

alias GtkToggleToolButtonPrivate = Struct__GtkToggleToolButtonPrivate;

record Struct__GtkToggleToolButton (
    parent : GtkToolButton,
    priv : Pointer[GtkToggleToolButtonPrivate],
);

record Struct__GtkToggleToolButtonClass (
    parent_class : GtkToolButtonClass,
    toggled : CCodePointer[[Pointer[GtkToggleToolButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_toggle_tool_button_get_type() : GType;

external (cdecl) gtk_toggle_tool_button_new() : Pointer[GtkToolItem];

external (cdecl) gtk_toggle_tool_button_new_from_stock(arg0:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_toggle_tool_button_set_active(arg0:Pointer[GtkToggleToolButton], arg1:gboolean) : ;

external (cdecl) gtk_toggle_tool_button_get_active(arg0:Pointer[GtkToggleToolButton]) : gboolean;

alias GtkRadioToolButton = Struct__GtkRadioToolButton;

alias GtkRadioToolButtonClass = Struct__GtkRadioToolButtonClass;

record Struct__GtkRadioToolButton (
    parent : GtkToggleToolButton,
);

record Struct__GtkRadioToolButtonClass (
    parent_class : GtkToggleToolButtonClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_radio_tool_button_get_type() : GType;

external (cdecl) gtk_radio_tool_button_new(arg0:Pointer[GSList]) : Pointer[GtkToolItem];

external (cdecl) gtk_radio_tool_button_new_from_stock(arg0:Pointer[GSList], arg1:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_radio_tool_button_new_from_widget(arg0:Pointer[GtkRadioToolButton]) : Pointer[GtkToolItem];

external (cdecl) gtk_radio_tool_button_new_with_stock_from_widget(arg0:Pointer[GtkRadioToolButton], arg1:Pointer[gchar]) : Pointer[GtkToolItem];

external (cdecl) gtk_radio_tool_button_get_group(arg0:Pointer[GtkRadioToolButton]) : Pointer[GSList];

external (cdecl) gtk_radio_tool_button_set_group(arg0:Pointer[GtkRadioToolButton], arg1:Pointer[GSList]) : ;

alias Struct__GtkRecentInfo = Opaque;

alias GtkRecentInfo = Struct__GtkRecentInfo;

alias GtkRecentData = Struct__GtkRecentData;

alias GtkRecentManager = Struct__GtkRecentManager;

alias GtkRecentManagerClass = Struct__GtkRecentManagerClass;

alias Struct__GtkRecentManagerPrivate = Opaque;

alias GtkRecentManagerPrivate = Struct__GtkRecentManagerPrivate;

record Struct__GtkRecentData (
    display_name : Pointer[gchar],
    description : Pointer[gchar],
    mime_type : Pointer[gchar],
    app_name : Pointer[gchar],
    app_exec : Pointer[gchar],
    groups : Pointer[Pointer[gchar]],
    is_private : gboolean,
);

record Struct__GtkRecentManager (
    parent_instance : GObject,
    priv : Pointer[GtkRecentManagerPrivate],
);

record Struct__GtkRecentManagerClass (
    parent_class : GObjectClass,
    changed : CCodePointer[[Pointer[GtkRecentManager]],[]],
    _gtk_recent1 : CCodePointer[[],[]],
    _gtk_recent2 : CCodePointer[[],[]],
    _gtk_recent3 : CCodePointer[[],[]],
    _gtk_recent4 : CCodePointer[[],[]],
);


alias GtkRecentManagerError = CUInt;
alias GTK_RECENT_MANAGER_ERROR_NOT_FOUND = CUInt(0);
alias GTK_RECENT_MANAGER_ERROR_INVALID_URI = CUInt(1);
alias GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = CUInt(2);
alias GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = CUInt(3);
alias GTK_RECENT_MANAGER_ERROR_READ = CUInt(4);
alias GTK_RECENT_MANAGER_ERROR_WRITE = CUInt(5);
alias GTK_RECENT_MANAGER_ERROR_UNKNOWN = CUInt(6);

external (cdecl) gtk_recent_manager_error_quark() : GQuark;

external (cdecl) gtk_recent_manager_get_type() : GType;

external (cdecl) gtk_recent_manager_new() : Pointer[GtkRecentManager];

external (cdecl) gtk_recent_manager_get_default() : Pointer[GtkRecentManager];

external (cdecl) gtk_recent_manager_get_for_screen(arg0:Pointer[GdkScreen]) : Pointer[GtkRecentManager];

external (cdecl) gtk_recent_manager_set_screen(arg0:Pointer[GtkRecentManager], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_recent_manager_add_item(arg0:Pointer[GtkRecentManager], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_recent_manager_add_full(arg0:Pointer[GtkRecentManager], arg1:Pointer[gchar], arg2:Pointer[GtkRecentData]) : gboolean;

external (cdecl) gtk_recent_manager_remove_item(arg0:Pointer[GtkRecentManager], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_recent_manager_lookup_item(arg0:Pointer[GtkRecentManager], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GtkRecentInfo];

external (cdecl) gtk_recent_manager_has_item(arg0:Pointer[GtkRecentManager], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_recent_manager_move_item(arg0:Pointer[GtkRecentManager], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_recent_manager_set_limit(arg0:Pointer[GtkRecentManager], arg1:gint) : ;

external (cdecl) gtk_recent_manager_get_limit(arg0:Pointer[GtkRecentManager]) : gint;

external (cdecl) gtk_recent_manager_get_items(arg0:Pointer[GtkRecentManager]) : Pointer[GList];

external (cdecl) gtk_recent_manager_purge_items(arg0:Pointer[GtkRecentManager], arg1:Pointer[Pointer[GError]]) : gint;

external (cdecl) gtk_recent_info_get_type() : GType;

external (cdecl) gtk_recent_info_ref(arg0:Pointer[GtkRecentInfo]) : Pointer[GtkRecentInfo];

external (cdecl) gtk_recent_info_unref(arg0:Pointer[GtkRecentInfo]) : ;

external (cdecl) gtk_recent_info_get_uri(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_get_display_name(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_get_description(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_get_mime_type(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_get_added(arg0:Pointer[GtkRecentInfo]) : time_t;

external (cdecl) gtk_recent_info_get_modified(arg0:Pointer[GtkRecentInfo]) : time_t;

external (cdecl) gtk_recent_info_get_visited(arg0:Pointer[GtkRecentInfo]) : time_t;

external (cdecl) gtk_recent_info_get_private_hint(arg0:Pointer[GtkRecentInfo]) : gboolean;

external (cdecl) gtk_recent_info_get_application_info(arg0:Pointer[GtkRecentInfo], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[guint], arg4:Pointer[time_t]) : gboolean;

external (cdecl) gtk_recent_info_get_applications(arg0:Pointer[GtkRecentInfo], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_recent_info_last_application(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_has_application(arg0:Pointer[GtkRecentInfo], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_recent_info_get_groups(arg0:Pointer[GtkRecentInfo], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_recent_info_has_group(arg0:Pointer[GtkRecentInfo], arg1:Pointer[gchar]) : gboolean;

external (cdecl) gtk_recent_info_get_icon(arg0:Pointer[GtkRecentInfo], arg1:gint) : Pointer[GdkPixbuf];

external (cdecl) gtk_recent_info_get_short_name(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_get_uri_display(arg0:Pointer[GtkRecentInfo]) : Pointer[gchar];

external (cdecl) gtk_recent_info_get_age(arg0:Pointer[GtkRecentInfo]) : gint;

external (cdecl) gtk_recent_info_is_local(arg0:Pointer[GtkRecentInfo]) : gboolean;

external (cdecl) gtk_recent_info_exists(arg0:Pointer[GtkRecentInfo]) : gboolean;

external (cdecl) gtk_recent_info_match(arg0:Pointer[GtkRecentInfo], arg1:Pointer[GtkRecentInfo]) : gboolean;

external (cdecl) _gtk_recent_manager_sync() : ;

alias GtkRecentAction = Struct__GtkRecentAction;

alias Struct__GtkRecentActionPrivate = Opaque;

alias GtkRecentActionPrivate = Struct__GtkRecentActionPrivate;

alias GtkRecentActionClass = Struct__GtkRecentActionClass;

record Struct__GtkRecentAction (
    parent_instance : GtkAction,
    priv : Pointer[GtkRecentActionPrivate],
);

record Struct__GtkRecentActionClass (
    parent_class : GtkActionClass,
);

external (cdecl) gtk_recent_action_get_type() : GType;

external (cdecl) gtk_recent_action_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : Pointer[GtkAction];

external (cdecl) gtk_recent_action_new_for_manager(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[GtkRecentManager]) : Pointer[GtkAction];

external (cdecl) gtk_recent_action_get_show_numbers(arg0:Pointer[GtkRecentAction]) : gboolean;

external (cdecl) gtk_recent_action_set_show_numbers(arg0:Pointer[GtkRecentAction], arg1:gboolean) : ;

alias Struct__GtkRecentFilter = Opaque;

alias GtkRecentFilter = Struct__GtkRecentFilter;

alias GtkRecentFilterInfo = Struct__GtkRecentFilterInfo;


alias GtkRecentFilterFlags = CUInt;
alias GTK_RECENT_FILTER_URI = CUInt(1);
alias GTK_RECENT_FILTER_DISPLAY_NAME = CUInt(2);
alias GTK_RECENT_FILTER_MIME_TYPE = CUInt(4);
alias GTK_RECENT_FILTER_APPLICATION = CUInt(8);
alias GTK_RECENT_FILTER_GROUP = CUInt(16);
alias GTK_RECENT_FILTER_AGE = CUInt(32);

alias GtkRecentFilterFunc = CCodePointer[[Pointer[GtkRecentFilterInfo], gpointer],[gboolean]];

record Struct__GtkRecentFilterInfo (
    contains : GtkRecentFilterFlags,
    uri : Pointer[gchar],
    display_name : Pointer[gchar],
    mime_type : Pointer[gchar],
    applications : Pointer[Pointer[gchar]],
    groups : Pointer[Pointer[gchar]],
    age : gint,
);

external (cdecl) gtk_recent_filter_get_type() : GType;

external (cdecl) gtk_recent_filter_new() : Pointer[GtkRecentFilter];

external (cdecl) gtk_recent_filter_set_name(arg0:Pointer[GtkRecentFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_recent_filter_get_name(arg0:Pointer[GtkRecentFilter]) : Pointer[gchar];

external (cdecl) gtk_recent_filter_add_mime_type(arg0:Pointer[GtkRecentFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_recent_filter_add_pattern(arg0:Pointer[GtkRecentFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_recent_filter_add_pixbuf_formats(arg0:Pointer[GtkRecentFilter]) : ;

external (cdecl) gtk_recent_filter_add_application(arg0:Pointer[GtkRecentFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_recent_filter_add_group(arg0:Pointer[GtkRecentFilter], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_recent_filter_add_age(arg0:Pointer[GtkRecentFilter], arg1:gint) : ;

external (cdecl) gtk_recent_filter_add_custom(arg0:Pointer[GtkRecentFilter], arg1:GtkRecentFilterFlags, arg2:GtkRecentFilterFunc, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) gtk_recent_filter_get_needed(arg0:Pointer[GtkRecentFilter]) : GtkRecentFilterFlags;

external (cdecl) gtk_recent_filter_filter(arg0:Pointer[GtkRecentFilter], arg1:Pointer[GtkRecentFilterInfo]) : gboolean;


alias GtkRecentSortType = CUInt;
alias GTK_RECENT_SORT_NONE = CUInt(0);
alias GTK_RECENT_SORT_MRU = CUInt(1);
alias GTK_RECENT_SORT_LRU = CUInt(2);
alias GTK_RECENT_SORT_CUSTOM = CUInt(3);

alias GtkRecentSortFunc = CCodePointer[[Pointer[GtkRecentInfo], Pointer[GtkRecentInfo], gpointer],[gint]];

alias Struct__GtkRecentChooser = Opaque;

alias GtkRecentChooser = Struct__GtkRecentChooser;

alias GtkRecentChooserIface = Struct__GtkRecentChooserIface;


alias GtkRecentChooserError = CUInt;
alias GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = CUInt(0);
alias GTK_RECENT_CHOOSER_ERROR_INVALID_URI = CUInt(1);

external (cdecl) gtk_recent_chooser_error_quark() : GQuark;

record Struct__GtkRecentChooserIface (
    base_iface : GTypeInterface,
    set_current_uri : CCodePointer[[Pointer[GtkRecentChooser], Pointer[gchar], Pointer[Pointer[GError]]],[gboolean]],
    get_current_uri : CCodePointer[[Pointer[GtkRecentChooser]],[Pointer[gchar]]],
    select_uri : CCodePointer[[Pointer[GtkRecentChooser], Pointer[gchar], Pointer[Pointer[GError]]],[gboolean]],
    unselect_uri : CCodePointer[[Pointer[GtkRecentChooser], Pointer[gchar]],[]],
    select_all : CCodePointer[[Pointer[GtkRecentChooser]],[]],
    unselect_all : CCodePointer[[Pointer[GtkRecentChooser]],[]],
    get_items : CCodePointer[[Pointer[GtkRecentChooser]],[Pointer[GList]]],
    get_recent_manager : CCodePointer[[Pointer[GtkRecentChooser]],[Pointer[GtkRecentManager]]],
    add_filter : CCodePointer[[Pointer[GtkRecentChooser], Pointer[GtkRecentFilter]],[]],
    remove_filter : CCodePointer[[Pointer[GtkRecentChooser], Pointer[GtkRecentFilter]],[]],
    list_filters : CCodePointer[[Pointer[GtkRecentChooser]],[Pointer[GSList]]],
    set_sort_func : CCodePointer[[Pointer[GtkRecentChooser], GtkRecentSortFunc, gpointer, GDestroyNotify],[]],
    item_activated : CCodePointer[[Pointer[GtkRecentChooser]],[]],
    selection_changed : CCodePointer[[Pointer[GtkRecentChooser]],[]],
);

external (cdecl) gtk_recent_chooser_get_type() : GType;

external (cdecl) gtk_recent_chooser_set_show_private(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_show_private(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_show_not_found(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_show_not_found(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_select_multiple(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_select_multiple(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_limit(arg0:Pointer[GtkRecentChooser], arg1:gint) : ;

external (cdecl) gtk_recent_chooser_get_limit(arg0:Pointer[GtkRecentChooser]) : gint;

external (cdecl) gtk_recent_chooser_set_local_only(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_local_only(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_show_tips(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_show_tips(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_show_numbers(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_show_numbers(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_show_icons(arg0:Pointer[GtkRecentChooser], arg1:gboolean) : ;

external (cdecl) gtk_recent_chooser_get_show_icons(arg0:Pointer[GtkRecentChooser]) : gboolean;

external (cdecl) gtk_recent_chooser_set_sort_type(arg0:Pointer[GtkRecentChooser], arg1:GtkRecentSortType) : ;

external (cdecl) gtk_recent_chooser_get_sort_type(arg0:Pointer[GtkRecentChooser]) : GtkRecentSortType;

external (cdecl) gtk_recent_chooser_set_sort_func(arg0:Pointer[GtkRecentChooser], arg1:GtkRecentSortFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_recent_chooser_set_current_uri(arg0:Pointer[GtkRecentChooser], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_recent_chooser_get_current_uri(arg0:Pointer[GtkRecentChooser]) : Pointer[gchar];

external (cdecl) gtk_recent_chooser_get_current_item(arg0:Pointer[GtkRecentChooser]) : Pointer[GtkRecentInfo];

external (cdecl) gtk_recent_chooser_select_uri(arg0:Pointer[GtkRecentChooser], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) gtk_recent_chooser_unselect_uri(arg0:Pointer[GtkRecentChooser], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_recent_chooser_select_all(arg0:Pointer[GtkRecentChooser]) : ;

external (cdecl) gtk_recent_chooser_unselect_all(arg0:Pointer[GtkRecentChooser]) : ;

external (cdecl) gtk_recent_chooser_get_items(arg0:Pointer[GtkRecentChooser]) : Pointer[GList];

external (cdecl) gtk_recent_chooser_get_uris(arg0:Pointer[GtkRecentChooser], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_recent_chooser_add_filter(arg0:Pointer[GtkRecentChooser], arg1:Pointer[GtkRecentFilter]) : ;

external (cdecl) gtk_recent_chooser_remove_filter(arg0:Pointer[GtkRecentChooser], arg1:Pointer[GtkRecentFilter]) : ;

external (cdecl) gtk_recent_chooser_list_filters(arg0:Pointer[GtkRecentChooser]) : Pointer[GSList];

external (cdecl) gtk_recent_chooser_set_filter(arg0:Pointer[GtkRecentChooser], arg1:Pointer[GtkRecentFilter]) : ;

external (cdecl) gtk_recent_chooser_get_filter(arg0:Pointer[GtkRecentChooser]) : Pointer[GtkRecentFilter];

alias GtkRecentChooserDialog = Struct__GtkRecentChooserDialog;

alias GtkRecentChooserDialogClass = Struct__GtkRecentChooserDialogClass;

alias Struct__GtkRecentChooserDialogPrivate = Opaque;

alias GtkRecentChooserDialogPrivate = Struct__GtkRecentChooserDialogPrivate;

record Struct__GtkRecentChooserDialog (
    parent_instance : GtkDialog,
    priv : Pointer[GtkRecentChooserDialogPrivate],
);

record Struct__GtkRecentChooserDialogClass (
    parent_class : GtkDialogClass,
);

external (cdecl) gtk_recent_chooser_dialog_get_type() : GType;

external (cdecl) gtk_recent_chooser_dialog_new(arg0:Pointer[gchar], arg1:Pointer[GtkWindow], arg2:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_recent_chooser_dialog_new_for_manager(arg0:Pointer[gchar], arg1:Pointer[GtkWindow], arg2:Pointer[GtkRecentManager], arg3:Pointer[gchar], ..) : Pointer[GtkWidget];

alias GtkRecentChooserMenu = Struct__GtkRecentChooserMenu;

alias GtkRecentChooserMenuClass = Struct__GtkRecentChooserMenuClass;

alias Struct__GtkRecentChooserMenuPrivate = Opaque;

alias GtkRecentChooserMenuPrivate = Struct__GtkRecentChooserMenuPrivate;

record Struct__GtkRecentChooserMenu (
    parent_instance : GtkMenu,
    priv : Pointer[GtkRecentChooserMenuPrivate],
);

record Struct__GtkRecentChooserMenuClass (
    parent_class : GtkMenuClass,
    gtk_recent1 : CCodePointer[[],[]],
    gtk_recent2 : CCodePointer[[],[]],
    gtk_recent3 : CCodePointer[[],[]],
    gtk_recent4 : CCodePointer[[],[]],
);

external (cdecl) gtk_recent_chooser_menu_get_type() : GType;

external (cdecl) gtk_recent_chooser_menu_new() : Pointer[GtkWidget];

external (cdecl) gtk_recent_chooser_menu_new_for_manager(arg0:Pointer[GtkRecentManager]) : Pointer[GtkWidget];

external (cdecl) gtk_recent_chooser_menu_get_show_numbers(arg0:Pointer[GtkRecentChooserMenu]) : gboolean;

external (cdecl) gtk_recent_chooser_menu_set_show_numbers(arg0:Pointer[GtkRecentChooserMenu], arg1:gboolean) : ;

alias GtkRecentChooserWidget = Struct__GtkRecentChooserWidget;

alias GtkRecentChooserWidgetClass = Struct__GtkRecentChooserWidgetClass;

alias Struct__GtkRecentChooserWidgetPrivate = Opaque;

alias GtkRecentChooserWidgetPrivate = Struct__GtkRecentChooserWidgetPrivate;

record Struct__GtkRecentChooserWidget (
    parent_instance : GtkVBox,
    priv : Pointer[GtkRecentChooserWidgetPrivate],
);

record Struct__GtkRecentChooserWidgetClass (
    parent_class : GtkVBoxClass,
);

external (cdecl) gtk_recent_chooser_widget_get_type() : GType;

external (cdecl) gtk_recent_chooser_widget_new() : Pointer[GtkWidget];

external (cdecl) gtk_recent_chooser_widget_new_for_manager(arg0:Pointer[GtkRecentManager]) : Pointer[GtkWidget];

alias GtkScaleButton = Struct__GtkScaleButton;

alias GtkScaleButtonClass = Struct__GtkScaleButtonClass;

alias Struct__GtkScaleButtonPrivate = Opaque;

alias GtkScaleButtonPrivate = Struct__GtkScaleButtonPrivate;

record Struct__GtkScaleButton (
    parent : GtkButton,
    plus_button : Pointer[GtkWidget],
    minus_button : Pointer[GtkWidget],
    priv : Pointer[GtkScaleButtonPrivate],
);

record Struct__GtkScaleButtonClass (
    parent_class : GtkButtonClass,
    value_changed : CCodePointer[[Pointer[GtkScaleButton], gdouble],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_scale_button_get_type() : GType;

external (cdecl) gtk_scale_button_new(arg0:GtkIconSize, arg1:gdouble, arg2:gdouble, arg3:gdouble, arg4:Pointer[Pointer[gchar]]) : Pointer[GtkWidget];

external (cdecl) gtk_scale_button_set_icons(arg0:Pointer[GtkScaleButton], arg1:Pointer[Pointer[gchar]]) : ;

external (cdecl) gtk_scale_button_get_value(arg0:Pointer[GtkScaleButton]) : gdouble;

external (cdecl) gtk_scale_button_set_value(arg0:Pointer[GtkScaleButton], arg1:gdouble) : ;

external (cdecl) gtk_scale_button_get_adjustment(arg0:Pointer[GtkScaleButton]) : Pointer[GtkAdjustment];

external (cdecl) gtk_scale_button_set_adjustment(arg0:Pointer[GtkScaleButton], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_scale_button_get_plus_button(arg0:Pointer[GtkScaleButton]) : Pointer[GtkWidget];

external (cdecl) gtk_scale_button_get_minus_button(arg0:Pointer[GtkScaleButton]) : Pointer[GtkWidget];

external (cdecl) gtk_scale_button_get_popup(arg0:Pointer[GtkScaleButton]) : Pointer[GtkWidget];

external (cdecl) gtk_scale_button_get_orientation(arg0:Pointer[GtkScaleButton]) : GtkOrientation;

external (cdecl) gtk_scale_button_set_orientation(arg0:Pointer[GtkScaleButton], arg1:GtkOrientation) : ;

alias GtkVScrollbar = Struct__GtkVScrollbar;

alias GtkVScrollbarClass = Struct__GtkVScrollbarClass;

record Struct__GtkVScrollbar (
    scrollbar : GtkScrollbar,
);

record Struct__GtkVScrollbarClass (
    parent_class : GtkScrollbarClass,
);

external (cdecl) gtk_vscrollbar_get_type() : GType;

external (cdecl) gtk_vscrollbar_new(arg0:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

alias GtkViewport = Struct__GtkViewport;

alias GtkViewportClass = Struct__GtkViewportClass;

record Struct__GtkViewport (
    bin : GtkBin,
    shadow_type : GtkShadowType,
    view_window : Pointer[GdkWindow],
    bin_window : Pointer[GdkWindow],
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
);

record Struct__GtkViewportClass (
    parent_class : GtkBinClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkViewport], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
);

external (cdecl) gtk_viewport_get_type() : GType;

external (cdecl) gtk_viewport_new(arg0:Pointer[GtkAdjustment], arg1:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

external (cdecl) gtk_viewport_get_hadjustment(arg0:Pointer[GtkViewport]) : Pointer[GtkAdjustment];

external (cdecl) gtk_viewport_get_vadjustment(arg0:Pointer[GtkViewport]) : Pointer[GtkAdjustment];

external (cdecl) gtk_viewport_set_hadjustment(arg0:Pointer[GtkViewport], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_viewport_set_vadjustment(arg0:Pointer[GtkViewport], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_viewport_set_shadow_type(arg0:Pointer[GtkViewport], arg1:GtkShadowType) : ;

external (cdecl) gtk_viewport_get_shadow_type(arg0:Pointer[GtkViewport]) : GtkShadowType;

external (cdecl) gtk_viewport_get_bin_window(arg0:Pointer[GtkViewport]) : Pointer[GdkWindow];

external (cdecl) gtk_viewport_get_view_window(arg0:Pointer[GtkViewport]) : Pointer[GdkWindow];

alias GtkScrolledWindow = Struct__GtkScrolledWindow;

alias GtkScrolledWindowClass = Struct__GtkScrolledWindowClass;

record Struct__GtkScrolledWindow (
    container : GtkBin,
    hscrollbar : Pointer[GtkWidget],
    vscrollbar : Pointer[GtkWidget],
    hscrollbar_policy : guint,
    vscrollbar_policy : guint,
    hscrollbar_visible : guint,
    vscrollbar_visible : guint,
    window_placement : guint,
    focus_out : guint,
    shadow_type : guint16,
);

record Struct__GtkScrolledWindowClass (
    parent_class : GtkBinClass,
    scrollbar_spacing : gint,
    scroll_child : CCodePointer[[Pointer[GtkScrolledWindow], GtkScrollType, gboolean],[gboolean]],
    move_focus_out : CCodePointer[[Pointer[GtkScrolledWindow], GtkDirectionType],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_scrolled_window_get_type() : GType;

external (cdecl) gtk_scrolled_window_new(arg0:Pointer[GtkAdjustment], arg1:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

external (cdecl) gtk_scrolled_window_set_hadjustment(arg0:Pointer[GtkScrolledWindow], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_scrolled_window_set_vadjustment(arg0:Pointer[GtkScrolledWindow], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_scrolled_window_get_hadjustment(arg0:Pointer[GtkScrolledWindow]) : Pointer[GtkAdjustment];

external (cdecl) gtk_scrolled_window_get_vadjustment(arg0:Pointer[GtkScrolledWindow]) : Pointer[GtkAdjustment];

external (cdecl) gtk_scrolled_window_get_hscrollbar(arg0:Pointer[GtkScrolledWindow]) : Pointer[GtkWidget];

external (cdecl) gtk_scrolled_window_get_vscrollbar(arg0:Pointer[GtkScrolledWindow]) : Pointer[GtkWidget];

external (cdecl) gtk_scrolled_window_set_policy(arg0:Pointer[GtkScrolledWindow], arg1:GtkPolicyType, arg2:GtkPolicyType) : ;

external (cdecl) gtk_scrolled_window_get_policy(arg0:Pointer[GtkScrolledWindow], arg1:Pointer[GtkPolicyType], arg2:Pointer[GtkPolicyType]) : ;

external (cdecl) gtk_scrolled_window_set_placement(arg0:Pointer[GtkScrolledWindow], arg1:GtkCornerType) : ;

external (cdecl) gtk_scrolled_window_unset_placement(arg0:Pointer[GtkScrolledWindow]) : ;

external (cdecl) gtk_scrolled_window_get_placement(arg0:Pointer[GtkScrolledWindow]) : GtkCornerType;

external (cdecl) gtk_scrolled_window_set_shadow_type(arg0:Pointer[GtkScrolledWindow], arg1:GtkShadowType) : ;

external (cdecl) gtk_scrolled_window_get_shadow_type(arg0:Pointer[GtkScrolledWindow]) : GtkShadowType;

external (cdecl) gtk_scrolled_window_add_with_viewport(arg0:Pointer[GtkScrolledWindow], arg1:Pointer[GtkWidget]) : ;

external (cdecl) _gtk_scrolled_window_get_scrollbar_spacing(arg0:Pointer[GtkScrolledWindow]) : gint;

alias GtkSeparatorMenuItem = Struct__GtkSeparatorMenuItem;

alias GtkSeparatorMenuItemClass = Struct__GtkSeparatorMenuItemClass;

record Struct__GtkSeparatorMenuItem (
    menu_item : GtkMenuItem,
);

record Struct__GtkSeparatorMenuItemClass (
    parent_class : GtkMenuItemClass,
);

external (cdecl) gtk_separator_menu_item_get_type() : GType;

external (cdecl) gtk_separator_menu_item_new() : Pointer[GtkWidget];

alias GtkSeparatorToolItem = Struct__GtkSeparatorToolItem;

alias GtkSeparatorToolItemClass = Struct__GtkSeparatorToolItemClass;

alias Struct__GtkSeparatorToolItemPrivate = Opaque;

alias GtkSeparatorToolItemPrivate = Struct__GtkSeparatorToolItemPrivate;

record Struct__GtkSeparatorToolItem (
    parent : GtkToolItem,
    priv : Pointer[GtkSeparatorToolItemPrivate],
);

record Struct__GtkSeparatorToolItemClass (
    parent_class : GtkToolItemClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_separator_tool_item_get_type() : GType;

external (cdecl) gtk_separator_tool_item_new() : Pointer[GtkToolItem];

external (cdecl) gtk_separator_tool_item_get_draw(arg0:Pointer[GtkSeparatorToolItem]) : gboolean;

external (cdecl) gtk_separator_tool_item_set_draw(arg0:Pointer[GtkSeparatorToolItem], arg1:gboolean) : ;

external (cdecl) gtk_show_uri(arg0:Pointer[GdkScreen], arg1:Pointer[gchar], arg2:guint32, arg3:Pointer[Pointer[GError]]) : gboolean;


alias GtkSpinButtonUpdatePolicy = CUInt;
alias GTK_UPDATE_ALWAYS = CUInt(0);
alias GTK_UPDATE_IF_VALID = CUInt(1);


alias GtkSpinType = CUInt;
alias GTK_SPIN_STEP_FORWARD = CUInt(0);
alias GTK_SPIN_STEP_BACKWARD = CUInt(1);
alias GTK_SPIN_PAGE_FORWARD = CUInt(2);
alias GTK_SPIN_PAGE_BACKWARD = CUInt(3);
alias GTK_SPIN_HOME = CUInt(4);
alias GTK_SPIN_END = CUInt(5);
alias GTK_SPIN_USER_DEFINED = CUInt(6);

alias GtkSpinButton = Struct__GtkSpinButton;

alias GtkSpinButtonClass = Struct__GtkSpinButtonClass;

record Struct__GtkSpinButton (
    entry : GtkEntry,
    adjustment : Pointer[GtkAdjustment],
    panel : Pointer[GdkWindow],
    timer : guint32,
    climb_rate : gdouble,
    timer_step : gdouble,
    update_policy : GtkSpinButtonUpdatePolicy,
    in_child : guint,
    click_child : guint,
    button : guint,
    need_timer : guint,
    timer_calls : guint,
    digits : guint,
    numeric : guint,
    wrap : guint,
    snap_to_ticks : guint,
);

record Struct__GtkSpinButtonClass (
    parent_class : GtkEntryClass,
    input : CCodePointer[[Pointer[GtkSpinButton], Pointer[gdouble]],[gint]],
    output : CCodePointer[[Pointer[GtkSpinButton]],[gint]],
    value_changed : CCodePointer[[Pointer[GtkSpinButton]],[]],
    change_value : CCodePointer[[Pointer[GtkSpinButton], GtkScrollType],[]],
    wrapped : CCodePointer[[Pointer[GtkSpinButton]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_spin_button_get_type() : GType;

external (cdecl) gtk_spin_button_configure(arg0:Pointer[GtkSpinButton], arg1:Pointer[GtkAdjustment], arg2:gdouble, arg3:guint) : ;

external (cdecl) gtk_spin_button_new(arg0:Pointer[GtkAdjustment], arg1:gdouble, arg2:guint) : Pointer[GtkWidget];

external (cdecl) gtk_spin_button_new_with_range(arg0:gdouble, arg1:gdouble, arg2:gdouble) : Pointer[GtkWidget];

external (cdecl) gtk_spin_button_set_adjustment(arg0:Pointer[GtkSpinButton], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_spin_button_get_adjustment(arg0:Pointer[GtkSpinButton]) : Pointer[GtkAdjustment];

external (cdecl) gtk_spin_button_set_digits(arg0:Pointer[GtkSpinButton], arg1:guint) : ;

external (cdecl) gtk_spin_button_get_digits(arg0:Pointer[GtkSpinButton]) : guint;

external (cdecl) gtk_spin_button_set_increments(arg0:Pointer[GtkSpinButton], arg1:gdouble, arg2:gdouble) : ;

external (cdecl) gtk_spin_button_get_increments(arg0:Pointer[GtkSpinButton], arg1:Pointer[gdouble], arg2:Pointer[gdouble]) : ;

external (cdecl) gtk_spin_button_set_range(arg0:Pointer[GtkSpinButton], arg1:gdouble, arg2:gdouble) : ;

external (cdecl) gtk_spin_button_get_range(arg0:Pointer[GtkSpinButton], arg1:Pointer[gdouble], arg2:Pointer[gdouble]) : ;

external (cdecl) gtk_spin_button_get_value(arg0:Pointer[GtkSpinButton]) : gdouble;

external (cdecl) gtk_spin_button_get_value_as_int(arg0:Pointer[GtkSpinButton]) : gint;

external (cdecl) gtk_spin_button_set_value(arg0:Pointer[GtkSpinButton], arg1:gdouble) : ;

external (cdecl) gtk_spin_button_set_update_policy(arg0:Pointer[GtkSpinButton], arg1:GtkSpinButtonUpdatePolicy) : ;

external (cdecl) gtk_spin_button_get_update_policy(arg0:Pointer[GtkSpinButton]) : GtkSpinButtonUpdatePolicy;

external (cdecl) gtk_spin_button_set_numeric(arg0:Pointer[GtkSpinButton], arg1:gboolean) : ;

external (cdecl) gtk_spin_button_get_numeric(arg0:Pointer[GtkSpinButton]) : gboolean;

external (cdecl) gtk_spin_button_spin(arg0:Pointer[GtkSpinButton], arg1:GtkSpinType, arg2:gdouble) : ;

external (cdecl) gtk_spin_button_set_wrap(arg0:Pointer[GtkSpinButton], arg1:gboolean) : ;

external (cdecl) gtk_spin_button_get_wrap(arg0:Pointer[GtkSpinButton]) : gboolean;

external (cdecl) gtk_spin_button_set_snap_to_ticks(arg0:Pointer[GtkSpinButton], arg1:gboolean) : ;

external (cdecl) gtk_spin_button_get_snap_to_ticks(arg0:Pointer[GtkSpinButton]) : gboolean;

external (cdecl) gtk_spin_button_update(arg0:Pointer[GtkSpinButton]) : ;

alias GtkSpinner = Struct__GtkSpinner;

alias GtkSpinnerClass = Struct__GtkSpinnerClass;

alias Struct__GtkSpinnerPrivate = Opaque;

alias GtkSpinnerPrivate = Struct__GtkSpinnerPrivate;

record Struct__GtkSpinner (
    parent : GtkDrawingArea,
    priv : Pointer[GtkSpinnerPrivate],
);

record Struct__GtkSpinnerClass (
    parent_class : GtkDrawingAreaClass,
);

external (cdecl) gtk_spinner_get_type() : GType;

external (cdecl) gtk_spinner_new() : Pointer[GtkWidget];

external (cdecl) gtk_spinner_start(arg0:Pointer[GtkSpinner]) : ;

external (cdecl) gtk_spinner_stop(arg0:Pointer[GtkSpinner]) : ;

alias GtkStatusbar = Struct__GtkStatusbar;

alias GtkStatusbarClass = Struct__GtkStatusbarClass;

record Struct__GtkStatusbar (
    parent_widget : GtkHBox,
    frame : Pointer[GtkWidget],
    label : Pointer[GtkWidget],
    messages : Pointer[GSList],
    keys : Pointer[GSList],
    seq_context_id : guint,
    seq_message_id : guint,
    grip_window : Pointer[GdkWindow],
    has_resize_grip : guint,
);

record Struct__GtkStatusbarClass (
    parent_class : GtkHBoxClass,
    reserved : gpointer,
    text_pushed : CCodePointer[[Pointer[GtkStatusbar], guint, Pointer[gchar]],[]],
    text_popped : CCodePointer[[Pointer[GtkStatusbar], guint, Pointer[gchar]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_statusbar_get_type() : GType;

external (cdecl) gtk_statusbar_new() : Pointer[GtkWidget];

external (cdecl) gtk_statusbar_get_context_id(arg0:Pointer[GtkStatusbar], arg1:Pointer[gchar]) : guint;

external (cdecl) gtk_statusbar_push(arg0:Pointer[GtkStatusbar], arg1:guint, arg2:Pointer[gchar]) : guint;

external (cdecl) gtk_statusbar_pop(arg0:Pointer[GtkStatusbar], arg1:guint) : ;

external (cdecl) gtk_statusbar_remove(arg0:Pointer[GtkStatusbar], arg1:guint, arg2:guint) : ;

external (cdecl) gtk_statusbar_remove_all(arg0:Pointer[GtkStatusbar], arg1:guint) : ;

external (cdecl) gtk_statusbar_set_has_resize_grip(arg0:Pointer[GtkStatusbar], arg1:gboolean) : ;

external (cdecl) gtk_statusbar_get_has_resize_grip(arg0:Pointer[GtkStatusbar]) : gboolean;

external (cdecl) gtk_statusbar_get_message_area(arg0:Pointer[GtkStatusbar]) : Pointer[GtkWidget];

alias GtkStatusIcon = Struct__GtkStatusIcon;

alias GtkStatusIconClass = Struct__GtkStatusIconClass;

alias Struct__GtkStatusIconPrivate = Opaque;

alias GtkStatusIconPrivate = Struct__GtkStatusIconPrivate;

record Struct__GtkStatusIcon (
    parent_instance : GObject,
    priv : Pointer[GtkStatusIconPrivate],
);

record Struct__GtkStatusIconClass (
    parent_class : GObjectClass,
    activate : CCodePointer[[Pointer[GtkStatusIcon]],[]],
    popup_menu : CCodePointer[[Pointer[GtkStatusIcon], guint, guint32],[]],
    size_changed : CCodePointer[[Pointer[GtkStatusIcon], gint],[gboolean]],
    button_press_event : CCodePointer[[Pointer[GtkStatusIcon], Pointer[GdkEventButton]],[gboolean]],
    button_release_event : CCodePointer[[Pointer[GtkStatusIcon], Pointer[GdkEventButton]],[gboolean]],
    scroll_event : CCodePointer[[Pointer[GtkStatusIcon], Pointer[GdkEventScroll]],[gboolean]],
    query_tooltip : CCodePointer[[Pointer[GtkStatusIcon], gint, gint, gboolean, Pointer[GtkTooltip]],[gboolean]],
    __gtk_reserved1 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved1 */,
    __gtk_reserved2 : OpaquePointer /* unknown Unexposed referenced by FieldDecl __gtk_reserved2 */,
);

external (cdecl) gtk_status_icon_get_type() : GType;

external (cdecl) gtk_status_icon_new() : Pointer[GtkStatusIcon];

external (cdecl) gtk_status_icon_new_from_pixbuf(arg0:Pointer[GdkPixbuf]) : Pointer[GtkStatusIcon];

external (cdecl) gtk_status_icon_new_from_file(arg0:Pointer[gchar]) : Pointer[GtkStatusIcon];

external (cdecl) gtk_status_icon_new_from_stock(arg0:Pointer[gchar]) : Pointer[GtkStatusIcon];

external (cdecl) gtk_status_icon_new_from_icon_name(arg0:Pointer[gchar]) : Pointer[GtkStatusIcon];

external (cdecl) gtk_status_icon_new_from_gicon(arg0:Pointer[GIcon]) : Pointer[GtkStatusIcon];

external (cdecl) gtk_status_icon_set_from_pixbuf(arg0:Pointer[GtkStatusIcon], arg1:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_status_icon_set_from_file(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_from_stock(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_from_icon_name(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_from_gicon(arg0:Pointer[GtkStatusIcon], arg1:Pointer[GIcon]) : ;

external (cdecl) gtk_status_icon_get_storage_type(arg0:Pointer[GtkStatusIcon]) : GtkImageType;

external (cdecl) gtk_status_icon_get_pixbuf(arg0:Pointer[GtkStatusIcon]) : Pointer[GdkPixbuf];

external (cdecl) gtk_status_icon_get_stock(arg0:Pointer[GtkStatusIcon]) : Pointer[gchar];

external (cdecl) gtk_status_icon_get_icon_name(arg0:Pointer[GtkStatusIcon]) : Pointer[gchar];

external (cdecl) gtk_status_icon_get_gicon(arg0:Pointer[GtkStatusIcon]) : Pointer[GIcon];

external (cdecl) gtk_status_icon_get_size(arg0:Pointer[GtkStatusIcon]) : gint;

external (cdecl) gtk_status_icon_set_screen(arg0:Pointer[GtkStatusIcon], arg1:Pointer[GdkScreen]) : ;

external (cdecl) gtk_status_icon_get_screen(arg0:Pointer[GtkStatusIcon]) : Pointer[GdkScreen];

external (cdecl) gtk_status_icon_set_tooltip(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_has_tooltip(arg0:Pointer[GtkStatusIcon], arg1:gboolean) : ;

external (cdecl) gtk_status_icon_set_tooltip_text(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_tooltip_markup(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_title(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_get_title(arg0:Pointer[GtkStatusIcon]) : Pointer[gchar];

external (cdecl) gtk_status_icon_set_name(arg0:Pointer[GtkStatusIcon], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_status_icon_set_visible(arg0:Pointer[GtkStatusIcon], arg1:gboolean) : ;

external (cdecl) gtk_status_icon_get_visible(arg0:Pointer[GtkStatusIcon]) : gboolean;

external (cdecl) gtk_status_icon_set_blinking(arg0:Pointer[GtkStatusIcon], arg1:gboolean) : ;

external (cdecl) gtk_status_icon_get_blinking(arg0:Pointer[GtkStatusIcon]) : gboolean;

external (cdecl) gtk_status_icon_is_embedded(arg0:Pointer[GtkStatusIcon]) : gboolean;

external (cdecl) gtk_status_icon_position_menu(arg0:Pointer[GtkMenu], arg1:Pointer[gint], arg2:Pointer[gint], arg3:Pointer[gboolean], arg4:gpointer) : ;

external (cdecl) gtk_status_icon_get_geometry(arg0:Pointer[GtkStatusIcon], arg1:Pointer[Pointer[GdkScreen]], arg2:Pointer[GdkRectangle], arg3:Pointer[GtkOrientation]) : gboolean;

external (cdecl) gtk_status_icon_get_has_tooltip(arg0:Pointer[GtkStatusIcon]) : gboolean;

external (cdecl) gtk_status_icon_get_tooltip_text(arg0:Pointer[GtkStatusIcon]) : Pointer[gchar];

external (cdecl) gtk_status_icon_get_tooltip_markup(arg0:Pointer[GtkStatusIcon]) : Pointer[gchar];

external (cdecl) gtk_status_icon_get_x11_window_id(arg0:Pointer[GtkStatusIcon]) : guint32;

alias GtkStockItem = Struct__GtkStockItem;

record Struct__GtkStockItem (
    stock_id : Pointer[gchar],
    label : Pointer[gchar],
    modifier : GdkModifierType,
    keyval : guint,
    translation_domain : Pointer[gchar],
);

external (cdecl) gtk_stock_add(arg0:Pointer[GtkStockItem], arg1:guint) : ;

external (cdecl) gtk_stock_add_static(arg0:Pointer[GtkStockItem], arg1:guint) : ;

external (cdecl) gtk_stock_lookup(arg0:Pointer[gchar], arg1:Pointer[GtkStockItem]) : gboolean;

external (cdecl) gtk_stock_list_ids() : Pointer[GSList];

external (cdecl) gtk_stock_item_copy(arg0:Pointer[GtkStockItem]) : Pointer[GtkStockItem];

external (cdecl) gtk_stock_item_free(arg0:Pointer[GtkStockItem]) : ;

external (cdecl) gtk_stock_set_translate_func(arg0:Pointer[gchar], arg1:GtkTranslateFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

alias GtkTable = Struct__GtkTable;

alias GtkTableClass = Struct__GtkTableClass;

alias GtkTableChild = Struct__GtkTableChild;

alias GtkTableRowCol = Struct__GtkTableRowCol;

record Struct__GtkTable (
    container : GtkContainer,
    children : Pointer[GList],
    rows : Pointer[GtkTableRowCol],
    cols : Pointer[GtkTableRowCol],
    nrows : guint16,
    ncols : guint16,
    column_spacing : guint16,
    row_spacing : guint16,
    homogeneous : guint,
);

record Struct__GtkTableClass (
    parent_class : GtkContainerClass,
);

record Struct__GtkTableChild (
    widget : Pointer[GtkWidget],
    left_attach : guint16,
    right_attach : guint16,
    top_attach : guint16,
    bottom_attach : guint16,
    xpadding : guint16,
    ypadding : guint16,
    xexpand : guint,
    yexpand : guint,
    xshrink : guint,
    yshrink : guint,
    xfill : guint,
    yfill : guint,
);

record Struct__GtkTableRowCol (
    requisition : guint16,
    allocation : guint16,
    spacing : guint16,
    need_expand : guint,
    need_shrink : guint,
    expand : guint,
    shrink : guint,
    empty : guint,
);

external (cdecl) gtk_table_get_type() : GType;

external (cdecl) gtk_table_new(arg0:guint, arg1:guint, arg2:gboolean) : Pointer[GtkWidget];

external (cdecl) gtk_table_resize(arg0:Pointer[GtkTable], arg1:guint, arg2:guint) : ;

external (cdecl) gtk_table_attach(arg0:Pointer[GtkTable], arg1:Pointer[GtkWidget], arg2:guint, arg3:guint, arg4:guint, arg5:guint, arg6:GtkAttachOptions, arg7:GtkAttachOptions, arg8:guint, arg9:guint) : ;

external (cdecl) gtk_table_attach_defaults(arg0:Pointer[GtkTable], arg1:Pointer[GtkWidget], arg2:guint, arg3:guint, arg4:guint, arg5:guint) : ;

external (cdecl) gtk_table_set_row_spacing(arg0:Pointer[GtkTable], arg1:guint, arg2:guint) : ;

external (cdecl) gtk_table_get_row_spacing(arg0:Pointer[GtkTable], arg1:guint) : guint;

external (cdecl) gtk_table_set_col_spacing(arg0:Pointer[GtkTable], arg1:guint, arg2:guint) : ;

external (cdecl) gtk_table_get_col_spacing(arg0:Pointer[GtkTable], arg1:guint) : guint;

external (cdecl) gtk_table_set_row_spacings(arg0:Pointer[GtkTable], arg1:guint) : ;

external (cdecl) gtk_table_get_default_row_spacing(arg0:Pointer[GtkTable]) : guint;

external (cdecl) gtk_table_set_col_spacings(arg0:Pointer[GtkTable], arg1:guint) : ;

external (cdecl) gtk_table_get_default_col_spacing(arg0:Pointer[GtkTable]) : guint;

external (cdecl) gtk_table_set_homogeneous(arg0:Pointer[GtkTable], arg1:gboolean) : ;

external (cdecl) gtk_table_get_homogeneous(arg0:Pointer[GtkTable]) : gboolean;

external (cdecl) gtk_table_get_size(arg0:Pointer[GtkTable], arg1:Pointer[guint], arg2:Pointer[guint]) : ;

alias GtkTearoffMenuItem = Struct__GtkTearoffMenuItem;

alias GtkTearoffMenuItemClass = Struct__GtkTearoffMenuItemClass;

record Struct__GtkTearoffMenuItem (
    menu_item : GtkMenuItem,
    torn_off : guint,
);

record Struct__GtkTearoffMenuItemClass (
    parent_class : GtkMenuItemClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tearoff_menu_item_get_type() : GType;

external (cdecl) gtk_tearoff_menu_item_new() : Pointer[GtkWidget];

alias GtkTextTagTableForeach = CCodePointer[[Pointer[GtkTextTag], gpointer],[]];

alias GtkTextTagTableClass = Struct__GtkTextTagTableClass;

record Struct__GtkTextTagTable (
    parent_instance : GObject,
    hash : Pointer[GHashTable],
    anonymous : Pointer[GSList],
    anon_count : gint,
    buffers : Pointer[GSList],
);

record Struct__GtkTextTagTableClass (
    parent_class : GObjectClass,
    tag_changed : CCodePointer[[Pointer[GtkTextTagTable], Pointer[GtkTextTag], gboolean],[]],
    tag_added : CCodePointer[[Pointer[GtkTextTagTable], Pointer[GtkTextTag]],[]],
    tag_removed : CCodePointer[[Pointer[GtkTextTagTable], Pointer[GtkTextTag]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_text_tag_table_get_type() : GType;

external (cdecl) gtk_text_tag_table_new() : Pointer[GtkTextTagTable];

external (cdecl) gtk_text_tag_table_add(arg0:Pointer[GtkTextTagTable], arg1:Pointer[GtkTextTag]) : ;

external (cdecl) gtk_text_tag_table_remove(arg0:Pointer[GtkTextTagTable], arg1:Pointer[GtkTextTag]) : ;

external (cdecl) gtk_text_tag_table_lookup(arg0:Pointer[GtkTextTagTable], arg1:Pointer[gchar]) : Pointer[GtkTextTag];

external (cdecl) gtk_text_tag_table_foreach(arg0:Pointer[GtkTextTagTable], arg1:GtkTextTagTableForeach, arg2:gpointer) : ;

external (cdecl) gtk_text_tag_table_get_size(arg0:Pointer[GtkTextTagTable]) : gint;

external (cdecl) _gtk_text_tag_table_add_buffer(arg0:Pointer[GtkTextTagTable], arg1:gpointer) : ;

external (cdecl) _gtk_text_tag_table_remove_buffer(arg0:Pointer[GtkTextTagTable], arg1:gpointer) : ;

alias GtkTextMark = Struct__GtkTextMark;

alias GtkTextMarkClass = Struct__GtkTextMarkClass;

record Struct__GtkTextMark (
    parent_instance : GObject,
    segment : gpointer,
);

record Struct__GtkTextMarkClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_text_mark_get_type() : GType;

external (cdecl) gtk_text_mark_set_visible(arg0:Pointer[GtkTextMark], arg1:gboolean) : ;

external (cdecl) gtk_text_mark_get_visible(arg0:Pointer[GtkTextMark]) : gboolean;

external (cdecl) gtk_text_mark_new(arg0:Pointer[gchar], arg1:gboolean) : Pointer[GtkTextMark];

external (cdecl) gtk_text_mark_get_name(arg0:Pointer[GtkTextMark]) : Pointer[gchar];

external (cdecl) gtk_text_mark_get_deleted(arg0:Pointer[GtkTextMark]) : gboolean;

external (cdecl) gtk_text_mark_get_buffer(arg0:Pointer[GtkTextMark]) : Pointer[GtkTextBuffer];

external (cdecl) gtk_text_mark_get_left_gravity(arg0:Pointer[GtkTextMark]) : gboolean;


alias GtkTextBufferTargetInfo = CInt;
alias GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = CInt(-1);
alias GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = CInt(-2);
alias GTK_TEXT_BUFFER_TARGET_INFO_TEXT = CInt(-3);

alias Struct__GtkTextBTree = Opaque;

alias GtkTextBTree = Struct__GtkTextBTree;

alias Struct__GtkTextLogAttrCache = Opaque;

alias GtkTextLogAttrCache = Struct__GtkTextLogAttrCache;

alias GtkTextBufferClass = Struct__GtkTextBufferClass;

record Struct__GtkTextBuffer (
    parent_instance : GObject,
    tag_table : Pointer[GtkTextTagTable],
    btree : Pointer[GtkTextBTree],
    clipboard_contents_buffers : Pointer[GSList],
    selection_clipboards : Pointer[GSList],
    log_attr_cache : Pointer[GtkTextLogAttrCache],
    user_action_count : guint,
    modified : guint,
    has_selection : guint,
);

record Struct__GtkTextBufferClass (
    parent_class : GObjectClass,
    insert_text : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[gchar], gint],[]],
    insert_pixbuf : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[GdkPixbuf]],[]],
    insert_child_anchor : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[GtkTextChildAnchor]],[]],
    delete_range : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[GtkTextIter]],[]],
    changed : CCodePointer[[Pointer[GtkTextBuffer]],[]],
    modified_changed : CCodePointer[[Pointer[GtkTextBuffer]],[]],
    mark_set : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[GtkTextMark]],[]],
    mark_deleted : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextMark]],[]],
    apply_tag : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextTag], Pointer[GtkTextIter], Pointer[GtkTextIter]],[]],
    remove_tag : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextTag], Pointer[GtkTextIter], Pointer[GtkTextIter]],[]],
    begin_user_action : CCodePointer[[Pointer[GtkTextBuffer]],[]],
    end_user_action : CCodePointer[[Pointer[GtkTextBuffer]],[]],
    paste_done : CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkClipboard]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
);

external (cdecl) gtk_text_buffer_get_type() : GType;

external (cdecl) gtk_text_buffer_new(arg0:Pointer[GtkTextTagTable]) : Pointer[GtkTextBuffer];

external (cdecl) gtk_text_buffer_get_line_count(arg0:Pointer[GtkTextBuffer]) : gint;

external (cdecl) gtk_text_buffer_get_char_count(arg0:Pointer[GtkTextBuffer]) : gint;

external (cdecl) gtk_text_buffer_get_tag_table(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkTextTagTable];

external (cdecl) gtk_text_buffer_set_text(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) gtk_text_buffer_insert(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[gchar], arg3:gint) : ;

external (cdecl) gtk_text_buffer_insert_at_cursor(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) gtk_text_buffer_insert_interactive(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[gchar], arg3:gint, arg4:gboolean) : gboolean;

external (cdecl) gtk_text_buffer_insert_interactive_at_cursor(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:gint, arg3:gboolean) : gboolean;

external (cdecl) gtk_text_buffer_insert_range(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter], arg3:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_insert_range_interactive(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter], arg3:Pointer[GtkTextIter], arg4:gboolean) : gboolean;

external (cdecl) gtk_text_buffer_insert_with_tags(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[gchar], arg3:gint, arg4:Pointer[GtkTextTag], ..) : ;

external (cdecl) gtk_text_buffer_insert_with_tags_by_name(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[gchar], arg3:gint, arg4:Pointer[gchar], ..) : ;

external (cdecl) gtk_text_buffer_delete(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_delete_interactive(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter], arg3:gboolean) : gboolean;

external (cdecl) gtk_text_buffer_backspace(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:gboolean, arg3:gboolean) : gboolean;

external (cdecl) gtk_text_buffer_get_text(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter], arg3:gboolean) : Pointer[gchar];

external (cdecl) gtk_text_buffer_get_slice(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter], arg3:gboolean) : Pointer[gchar];

external (cdecl) gtk_text_buffer_insert_pixbuf(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GdkPixbuf]) : ;

external (cdecl) gtk_text_buffer_insert_child_anchor(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextChildAnchor]) : ;

external (cdecl) gtk_text_buffer_create_child_anchor(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter]) : Pointer[GtkTextChildAnchor];

external (cdecl) gtk_text_buffer_add_mark(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextMark], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_create_mark(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:Pointer[GtkTextIter], arg3:gboolean) : Pointer[GtkTextMark];

external (cdecl) gtk_text_buffer_move_mark(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextMark], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_delete_mark(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextMark]) : ;

external (cdecl) gtk_text_buffer_get_mark(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar]) : Pointer[GtkTextMark];

external (cdecl) gtk_text_buffer_move_mark_by_name(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_delete_mark_by_name(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_text_buffer_get_insert(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkTextMark];

external (cdecl) gtk_text_buffer_get_selection_bound(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkTextMark];

external (cdecl) gtk_text_buffer_place_cursor(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_select_range(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_apply_tag(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextTag], arg2:Pointer[GtkTextIter], arg3:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_remove_tag(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextTag], arg2:Pointer[GtkTextIter], arg3:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_apply_tag_by_name(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:Pointer[GtkTextIter], arg3:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_remove_tag_by_name(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:Pointer[GtkTextIter], arg3:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_remove_all_tags(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_create_tag(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:Pointer[gchar], ..) : Pointer[GtkTextTag];

external (cdecl) gtk_text_buffer_get_iter_at_line_offset(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_text_buffer_get_iter_at_line_index(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_text_buffer_get_iter_at_offset(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:gint) : ;

external (cdecl) gtk_text_buffer_get_iter_at_line(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:gint) : ;

external (cdecl) gtk_text_buffer_get_start_iter(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_get_end_iter(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_get_bounds(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter]) : ;

external (cdecl) gtk_text_buffer_get_iter_at_mark(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextMark]) : ;

external (cdecl) gtk_text_buffer_get_iter_at_child_anchor(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextChildAnchor]) : ;

external (cdecl) gtk_text_buffer_get_modified(arg0:Pointer[GtkTextBuffer]) : gboolean;

external (cdecl) gtk_text_buffer_set_modified(arg0:Pointer[GtkTextBuffer], arg1:gboolean) : ;

external (cdecl) gtk_text_buffer_get_has_selection(arg0:Pointer[GtkTextBuffer]) : gboolean;

external (cdecl) gtk_text_buffer_add_selection_clipboard(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkClipboard]) : ;

external (cdecl) gtk_text_buffer_remove_selection_clipboard(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkClipboard]) : ;

external (cdecl) gtk_text_buffer_cut_clipboard(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkClipboard], arg2:gboolean) : ;

external (cdecl) gtk_text_buffer_copy_clipboard(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkClipboard]) : ;

external (cdecl) gtk_text_buffer_paste_clipboard(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkClipboard], arg2:Pointer[GtkTextIter], arg3:gboolean) : ;

external (cdecl) gtk_text_buffer_get_selection_bounds(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_buffer_delete_selection(arg0:Pointer[GtkTextBuffer], arg1:gboolean, arg2:gboolean) : gboolean;

external (cdecl) gtk_text_buffer_begin_user_action(arg0:Pointer[GtkTextBuffer]) : ;

external (cdecl) gtk_text_buffer_end_user_action(arg0:Pointer[GtkTextBuffer]) : ;

external (cdecl) gtk_text_buffer_get_copy_target_list(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkTargetList];

external (cdecl) gtk_text_buffer_get_paste_target_list(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkTargetList];

external (cdecl) _gtk_text_buffer_spew(arg0:Pointer[GtkTextBuffer]) : ;

external (cdecl) _gtk_text_buffer_get_btree(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkTextBTree];

external (cdecl) _gtk_text_buffer_get_line_log_attrs(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextIter], arg2:Pointer[gint]) : Pointer[PangoLogAttr];

external (cdecl) _gtk_text_buffer_notify_will_remove_tag(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextTag]) : ;

alias GtkTextBufferSerializeFunc = CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[GtkTextIter], Pointer[gsize], gpointer],[Pointer[guint8]]];

alias GtkTextBufferDeserializeFunc = CCodePointer[[Pointer[GtkTextBuffer], Pointer[GtkTextBuffer], Pointer[GtkTextIter], Pointer[guint8], gsize, gboolean, gpointer, Pointer[Pointer[GError]]],[gboolean]];

external (cdecl) gtk_text_buffer_register_serialize_format(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:GtkTextBufferSerializeFunc, arg3:gpointer, arg4:GDestroyNotify) : GdkAtom;

external (cdecl) gtk_text_buffer_register_serialize_tagset(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar]) : GdkAtom;

external (cdecl) gtk_text_buffer_register_deserialize_format(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar], arg2:GtkTextBufferDeserializeFunc, arg3:gpointer, arg4:GDestroyNotify) : GdkAtom;

external (cdecl) gtk_text_buffer_register_deserialize_tagset(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gchar]) : GdkAtom;

external (cdecl) gtk_text_buffer_unregister_serialize_format(arg0:Pointer[GtkTextBuffer], arg1:GdkAtom) : ;

external (cdecl) gtk_text_buffer_unregister_deserialize_format(arg0:Pointer[GtkTextBuffer], arg1:GdkAtom) : ;

external (cdecl) gtk_text_buffer_deserialize_set_can_create_tags(arg0:Pointer[GtkTextBuffer], arg1:GdkAtom, arg2:gboolean) : ;

external (cdecl) gtk_text_buffer_deserialize_get_can_create_tags(arg0:Pointer[GtkTextBuffer], arg1:GdkAtom) : gboolean;

external (cdecl) gtk_text_buffer_get_serialize_formats(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gint]) : Pointer[GdkAtom];

external (cdecl) gtk_text_buffer_get_deserialize_formats(arg0:Pointer[GtkTextBuffer], arg1:Pointer[gint]) : Pointer[GdkAtom];

external (cdecl) gtk_text_buffer_serialize(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextBuffer], arg2:GdkAtom, arg3:Pointer[GtkTextIter], arg4:Pointer[GtkTextIter], arg5:Pointer[gsize]) : Pointer[guint8];

external (cdecl) gtk_text_buffer_deserialize(arg0:Pointer[GtkTextBuffer], arg1:Pointer[GtkTextBuffer], arg2:GdkAtom, arg3:Pointer[GtkTextIter], arg4:Pointer[guint8], arg5:gsize, arg6:Pointer[Pointer[GError]]) : gboolean;


alias GtkTextWindowType = CUInt;
alias GTK_TEXT_WINDOW_PRIVATE = CUInt(0);
alias GTK_TEXT_WINDOW_WIDGET = CUInt(1);
alias GTK_TEXT_WINDOW_TEXT = CUInt(2);
alias GTK_TEXT_WINDOW_LEFT = CUInt(3);
alias GTK_TEXT_WINDOW_RIGHT = CUInt(4);
alias GTK_TEXT_WINDOW_TOP = CUInt(5);
alias GTK_TEXT_WINDOW_BOTTOM = CUInt(6);

alias GtkTextView = Struct__GtkTextView;

alias GtkTextViewClass = Struct__GtkTextViewClass;

alias Struct__GtkTextWindow = Opaque;

alias GtkTextWindow = Struct__GtkTextWindow;

alias Struct__GtkTextPendingScroll = Opaque;

alias GtkTextPendingScroll = Struct__GtkTextPendingScroll;

record Struct__GtkTextView (
    parent_instance : GtkContainer,
    layout : Pointer[Struct__GtkTextLayout],
    buffer : Pointer[GtkTextBuffer],
    selection_drag_handler : guint,
    scroll_timeout : guint,
    pixels_above_lines : gint,
    pixels_below_lines : gint,
    pixels_inside_wrap : gint,
    wrap_mode : GtkWrapMode,
    justify : GtkJustification,
    left_margin : gint,
    right_margin : gint,
    indent : gint,
    tabs : Pointer[PangoTabArray],
    editable : guint,
    overwrite_mode : guint,
    cursor_visible : guint,
    need_im_reset : guint,
    accepts_tab : guint,
    width_changed : guint,
    onscreen_validated : guint,
    mouse_cursor_obscured : guint,
    text_window : Pointer[GtkTextWindow],
    left_window : Pointer[GtkTextWindow],
    right_window : Pointer[GtkTextWindow],
    top_window : Pointer[GtkTextWindow],
    bottom_window : Pointer[GtkTextWindow],
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
    xoffset : gint,
    yoffset : gint,
    width : gint,
    height : gint,
    virtual_cursor_x : gint,
    virtual_cursor_y : gint,
    first_para_mark : Pointer[GtkTextMark],
    first_para_pixels : gint,
    dnd_mark : Pointer[GtkTextMark],
    blink_timeout : guint,
    first_validate_idle : guint,
    incremental_validate_idle : guint,
    im_context : Pointer[GtkIMContext],
    popup_menu : Pointer[GtkWidget],
    drag_start_x : gint,
    drag_start_y : gint,
    children : Pointer[GSList],
    pending_scroll : Pointer[GtkTextPendingScroll],
    pending_place_cursor_button : gint,
);

alias Struct__GtkTextLayout = Opaque;

record Struct__GtkTextViewClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkTextView], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
    populate_popup : CCodePointer[[Pointer[GtkTextView], Pointer[GtkMenu]],[]],
    move_cursor : CCodePointer[[Pointer[GtkTextView], GtkMovementStep, gint, gboolean],[]],
    page_horizontally : CCodePointer[[Pointer[GtkTextView], gint, gboolean],[]],
    set_anchor : CCodePointer[[Pointer[GtkTextView]],[]],
    insert_at_cursor : CCodePointer[[Pointer[GtkTextView], Pointer[gchar]],[]],
    delete_from_cursor : CCodePointer[[Pointer[GtkTextView], GtkDeleteType, gint],[]],
    backspace : CCodePointer[[Pointer[GtkTextView]],[]],
    cut_clipboard : CCodePointer[[Pointer[GtkTextView]],[]],
    copy_clipboard : CCodePointer[[Pointer[GtkTextView]],[]],
    paste_clipboard : CCodePointer[[Pointer[GtkTextView]],[]],
    toggle_overwrite : CCodePointer[[Pointer[GtkTextView]],[]],
    move_focus : CCodePointer[[Pointer[GtkTextView], GtkDirectionType],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
    _gtk_reserved7 : CCodePointer[[],[]],
);

external (cdecl) gtk_text_view_get_type() : GType;

external (cdecl) gtk_text_view_new() : Pointer[GtkWidget];

external (cdecl) gtk_text_view_new_with_buffer(arg0:Pointer[GtkTextBuffer]) : Pointer[GtkWidget];

external (cdecl) gtk_text_view_set_buffer(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextBuffer]) : ;

external (cdecl) gtk_text_view_get_buffer(arg0:Pointer[GtkTextView]) : Pointer[GtkTextBuffer];

external (cdecl) gtk_text_view_scroll_to_iter(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:gdouble, arg3:gboolean, arg4:gdouble, arg5:gdouble) : gboolean;

external (cdecl) gtk_text_view_scroll_to_mark(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextMark], arg2:gdouble, arg3:gboolean, arg4:gdouble, arg5:gdouble) : ;

external (cdecl) gtk_text_view_scroll_mark_onscreen(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextMark]) : ;

external (cdecl) gtk_text_view_move_mark_onscreen(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextMark]) : gboolean;

external (cdecl) gtk_text_view_place_cursor_onscreen(arg0:Pointer[GtkTextView]) : gboolean;

external (cdecl) gtk_text_view_get_visible_rect(arg0:Pointer[GtkTextView], arg1:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_text_view_set_cursor_visible(arg0:Pointer[GtkTextView], arg1:gboolean) : ;

external (cdecl) gtk_text_view_get_cursor_visible(arg0:Pointer[GtkTextView]) : gboolean;

external (cdecl) gtk_text_view_get_iter_location(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:Pointer[GdkRectangle]) : ;

external (cdecl) gtk_text_view_get_iter_at_location(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_text_view_get_iter_at_position(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:Pointer[gint], arg3:gint, arg4:gint) : ;

external (cdecl) gtk_text_view_get_line_yrange(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:Pointer[gint], arg3:Pointer[gint]) : ;

external (cdecl) gtk_text_view_get_line_at_y(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:gint, arg3:Pointer[gint]) : ;

external (cdecl) gtk_text_view_buffer_to_window_coords(arg0:Pointer[GtkTextView], arg1:GtkTextWindowType, arg2:gint, arg3:gint, arg4:Pointer[gint], arg5:Pointer[gint]) : ;

external (cdecl) gtk_text_view_window_to_buffer_coords(arg0:Pointer[GtkTextView], arg1:GtkTextWindowType, arg2:gint, arg3:gint, arg4:Pointer[gint], arg5:Pointer[gint]) : ;

external (cdecl) gtk_text_view_get_hadjustment(arg0:Pointer[GtkTextView]) : Pointer[GtkAdjustment];

external (cdecl) gtk_text_view_get_vadjustment(arg0:Pointer[GtkTextView]) : Pointer[GtkAdjustment];

external (cdecl) gtk_text_view_get_window(arg0:Pointer[GtkTextView], arg1:GtkTextWindowType) : Pointer[GdkWindow];

external (cdecl) gtk_text_view_get_window_type(arg0:Pointer[GtkTextView], arg1:Pointer[GdkWindow]) : GtkTextWindowType;

external (cdecl) gtk_text_view_set_border_window_size(arg0:Pointer[GtkTextView], arg1:GtkTextWindowType, arg2:gint) : ;

external (cdecl) gtk_text_view_get_border_window_size(arg0:Pointer[GtkTextView], arg1:GtkTextWindowType) : gint;

external (cdecl) gtk_text_view_forward_display_line(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_view_backward_display_line(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_view_forward_display_line_end(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_view_backward_display_line_start(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_view_starts_display_line(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter]) : gboolean;

external (cdecl) gtk_text_view_move_visually(arg0:Pointer[GtkTextView], arg1:Pointer[GtkTextIter], arg2:gint) : gboolean;

external (cdecl) gtk_text_view_im_context_filter_keypress(arg0:Pointer[GtkTextView], arg1:Pointer[GdkEventKey]) : gboolean;

external (cdecl) gtk_text_view_reset_im_context(arg0:Pointer[GtkTextView]) : ;

external (cdecl) gtk_text_view_add_child_at_anchor(arg0:Pointer[GtkTextView], arg1:Pointer[GtkWidget], arg2:Pointer[GtkTextChildAnchor]) : ;

external (cdecl) gtk_text_view_add_child_in_window(arg0:Pointer[GtkTextView], arg1:Pointer[GtkWidget], arg2:GtkTextWindowType, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_text_view_move_child(arg0:Pointer[GtkTextView], arg1:Pointer[GtkWidget], arg2:gint, arg3:gint) : ;

external (cdecl) gtk_text_view_set_wrap_mode(arg0:Pointer[GtkTextView], arg1:GtkWrapMode) : ;

external (cdecl) gtk_text_view_get_wrap_mode(arg0:Pointer[GtkTextView]) : GtkWrapMode;

external (cdecl) gtk_text_view_set_editable(arg0:Pointer[GtkTextView], arg1:gboolean) : ;

external (cdecl) gtk_text_view_get_editable(arg0:Pointer[GtkTextView]) : gboolean;

external (cdecl) gtk_text_view_set_overwrite(arg0:Pointer[GtkTextView], arg1:gboolean) : ;

external (cdecl) gtk_text_view_get_overwrite(arg0:Pointer[GtkTextView]) : gboolean;

external (cdecl) gtk_text_view_set_accepts_tab(arg0:Pointer[GtkTextView], arg1:gboolean) : ;

external (cdecl) gtk_text_view_get_accepts_tab(arg0:Pointer[GtkTextView]) : gboolean;

external (cdecl) gtk_text_view_set_pixels_above_lines(arg0:Pointer[GtkTextView], arg1:gint) : ;

external (cdecl) gtk_text_view_get_pixels_above_lines(arg0:Pointer[GtkTextView]) : gint;

external (cdecl) gtk_text_view_set_pixels_below_lines(arg0:Pointer[GtkTextView], arg1:gint) : ;

external (cdecl) gtk_text_view_get_pixels_below_lines(arg0:Pointer[GtkTextView]) : gint;

external (cdecl) gtk_text_view_set_pixels_inside_wrap(arg0:Pointer[GtkTextView], arg1:gint) : ;

external (cdecl) gtk_text_view_get_pixels_inside_wrap(arg0:Pointer[GtkTextView]) : gint;

external (cdecl) gtk_text_view_set_justification(arg0:Pointer[GtkTextView], arg1:GtkJustification) : ;

external (cdecl) gtk_text_view_get_justification(arg0:Pointer[GtkTextView]) : GtkJustification;

external (cdecl) gtk_text_view_set_left_margin(arg0:Pointer[GtkTextView], arg1:gint) : ;

external (cdecl) gtk_text_view_get_left_margin(arg0:Pointer[GtkTextView]) : gint;

external (cdecl) gtk_text_view_set_right_margin(arg0:Pointer[GtkTextView], arg1:gint) : ;

external (cdecl) gtk_text_view_get_right_margin(arg0:Pointer[GtkTextView]) : gint;

external (cdecl) gtk_text_view_set_indent(arg0:Pointer[GtkTextView], arg1:gint) : ;

external (cdecl) gtk_text_view_get_indent(arg0:Pointer[GtkTextView]) : gint;

external (cdecl) gtk_text_view_set_tabs(arg0:Pointer[GtkTextView], arg1:Pointer[PangoTabArray]) : ;

external (cdecl) gtk_text_view_get_tabs(arg0:Pointer[GtkTextView]) : Pointer[PangoTabArray];

external (cdecl) gtk_text_view_get_default_attributes(arg0:Pointer[GtkTextView]) : Pointer[GtkTextAttributes];

alias GtkPixmap = Struct__GtkPixmap;

alias GtkPixmapClass = Struct__GtkPixmapClass;

record Struct__GtkPixmap (
    misc : GtkMisc,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
    pixmap_insensitive : Pointer[GdkPixmap],
    build_insensitive : guint,
);

record Struct__GtkPixmapClass (
    parent_class : GtkMiscClass,
);

external (cdecl) gtk_pixmap_get_type() : GType;

external (cdecl) gtk_pixmap_new(arg0:Pointer[GdkPixmap], arg1:Pointer[GdkBitmap]) : Pointer[GtkWidget];

external (cdecl) gtk_pixmap_set(arg0:Pointer[GtkPixmap], arg1:Pointer[GdkPixmap], arg2:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_pixmap_get(arg0:Pointer[GtkPixmap], arg1:Pointer[Pointer[GdkPixmap]], arg2:Pointer[Pointer[GdkBitmap]]) : ;

external (cdecl) gtk_pixmap_set_build_insensitive(arg0:Pointer[GtkPixmap], arg1:gboolean) : ;


alias GtkToolbarChildType = CUInt;
alias GTK_TOOLBAR_CHILD_SPACE = CUInt(0);
alias GTK_TOOLBAR_CHILD_BUTTON = CUInt(1);
alias GTK_TOOLBAR_CHILD_TOGGLEBUTTON = CUInt(2);
alias GTK_TOOLBAR_CHILD_RADIOBUTTON = CUInt(3);
alias GTK_TOOLBAR_CHILD_WIDGET = CUInt(4);

alias GtkToolbarChild = Struct__GtkToolbarChild;

record Struct__GtkToolbarChild (
    type : GtkToolbarChildType,
    widget : Pointer[GtkWidget],
    icon : Pointer[GtkWidget],
    label : Pointer[GtkWidget],
);


alias GtkToolbarSpaceStyle = CUInt;
alias GTK_TOOLBAR_SPACE_EMPTY = CUInt(0);
alias GTK_TOOLBAR_SPACE_LINE = CUInt(1);

alias GtkToolbar = Struct__GtkToolbar;

alias GtkToolbarClass = Struct__GtkToolbarClass;

alias Struct__GtkToolbarPrivate = Opaque;

alias GtkToolbarPrivate = Struct__GtkToolbarPrivate;

record Struct__GtkToolbar (
    container : GtkContainer,
    num_children : gint,
    children : Pointer[GList],
    orientation : GtkOrientation,
    style : GtkToolbarStyle,
    icon_size : GtkIconSize,
    tooltips : Pointer[GtkTooltips],
    button_maxw : gint,
    button_maxh : gint,
    _gtk_reserved1 : guint,
    _gtk_reserved2 : guint,
    style_set : guint,
    icon_size_set : guint,
);

record Struct__GtkToolbarClass (
    parent_class : GtkContainerClass,
    orientation_changed : CCodePointer[[Pointer[GtkToolbar], GtkOrientation],[]],
    style_changed : CCodePointer[[Pointer[GtkToolbar], GtkToolbarStyle],[]],
    popup_context_menu : CCodePointer[[Pointer[GtkToolbar], gint, gint, gint],[gboolean]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
);

external (cdecl) gtk_toolbar_get_type() : GType;

external (cdecl) gtk_toolbar_new() : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_insert(arg0:Pointer[GtkToolbar], arg1:Pointer[GtkToolItem], arg2:gint) : ;

external (cdecl) gtk_toolbar_get_item_index(arg0:Pointer[GtkToolbar], arg1:Pointer[GtkToolItem]) : gint;

external (cdecl) gtk_toolbar_get_n_items(arg0:Pointer[GtkToolbar]) : gint;

external (cdecl) gtk_toolbar_get_nth_item(arg0:Pointer[GtkToolbar], arg1:gint) : Pointer[GtkToolItem];

external (cdecl) gtk_toolbar_get_show_arrow(arg0:Pointer[GtkToolbar]) : gboolean;

external (cdecl) gtk_toolbar_set_show_arrow(arg0:Pointer[GtkToolbar], arg1:gboolean) : ;

external (cdecl) gtk_toolbar_get_style(arg0:Pointer[GtkToolbar]) : GtkToolbarStyle;

external (cdecl) gtk_toolbar_set_style(arg0:Pointer[GtkToolbar], arg1:GtkToolbarStyle) : ;

external (cdecl) gtk_toolbar_unset_style(arg0:Pointer[GtkToolbar]) : ;

external (cdecl) gtk_toolbar_get_icon_size(arg0:Pointer[GtkToolbar]) : GtkIconSize;

external (cdecl) gtk_toolbar_set_icon_size(arg0:Pointer[GtkToolbar], arg1:GtkIconSize) : ;

external (cdecl) gtk_toolbar_unset_icon_size(arg0:Pointer[GtkToolbar]) : ;

external (cdecl) gtk_toolbar_get_relief_style(arg0:Pointer[GtkToolbar]) : GtkReliefStyle;

external (cdecl) gtk_toolbar_get_drop_index(arg0:Pointer[GtkToolbar], arg1:gint, arg2:gint) : gint;

external (cdecl) gtk_toolbar_set_drop_highlight_item(arg0:Pointer[GtkToolbar], arg1:Pointer[GtkToolItem], arg2:gint) : ;

external (cdecl) _gtk_toolbar_elide_underscores(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) _gtk_toolbar_paint_space_line(arg0:Pointer[GtkWidget], arg1:Pointer[GtkToolbar], arg2:Pointer[GdkRectangle], arg3:Pointer[GtkAllocation]) : ;

external (cdecl) _gtk_toolbar_get_default_space_size() : gint;

external (cdecl) gtk_toolbar_get_orientation(arg0:Pointer[GtkToolbar]) : GtkOrientation;

external (cdecl) gtk_toolbar_set_orientation(arg0:Pointer[GtkToolbar], arg1:GtkOrientation) : ;

external (cdecl) gtk_toolbar_get_tooltips(arg0:Pointer[GtkToolbar]) : gboolean;

external (cdecl) gtk_toolbar_set_tooltips(arg0:Pointer[GtkToolbar], arg1:gboolean) : ;

external (cdecl) gtk_toolbar_append_item(arg0:Pointer[GtkToolbar], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:Pointer[CChar], arg4:Pointer[GtkWidget], arg5:GCallback, arg6:gpointer) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_prepend_item(arg0:Pointer[GtkToolbar], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:Pointer[CChar], arg4:Pointer[GtkWidget], arg5:GCallback, arg6:gpointer) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_insert_item(arg0:Pointer[GtkToolbar], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:Pointer[CChar], arg4:Pointer[GtkWidget], arg5:GCallback, arg6:gpointer, arg7:gint) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_insert_stock(arg0:Pointer[GtkToolbar], arg1:Pointer[gchar], arg2:Pointer[CChar], arg3:Pointer[CChar], arg4:GCallback, arg5:gpointer, arg6:gint) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_append_space(arg0:Pointer[GtkToolbar]) : ;

external (cdecl) gtk_toolbar_prepend_space(arg0:Pointer[GtkToolbar]) : ;

external (cdecl) gtk_toolbar_insert_space(arg0:Pointer[GtkToolbar], arg1:gint) : ;

external (cdecl) gtk_toolbar_remove_space(arg0:Pointer[GtkToolbar], arg1:gint) : ;

external (cdecl) gtk_toolbar_append_element(arg0:Pointer[GtkToolbar], arg1:GtkToolbarChildType, arg2:Pointer[GtkWidget], arg3:Pointer[CChar], arg4:Pointer[CChar], arg5:Pointer[CChar], arg6:Pointer[GtkWidget], arg7:GCallback, arg8:gpointer) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_prepend_element(arg0:Pointer[GtkToolbar], arg1:GtkToolbarChildType, arg2:Pointer[GtkWidget], arg3:Pointer[CChar], arg4:Pointer[CChar], arg5:Pointer[CChar], arg6:Pointer[GtkWidget], arg7:GCallback, arg8:gpointer) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_insert_element(arg0:Pointer[GtkToolbar], arg1:GtkToolbarChildType, arg2:Pointer[GtkWidget], arg3:Pointer[CChar], arg4:Pointer[CChar], arg5:Pointer[CChar], arg6:Pointer[GtkWidget], arg7:GCallback, arg8:gpointer, arg9:gint) : Pointer[GtkWidget];

external (cdecl) gtk_toolbar_append_widget(arg0:Pointer[GtkToolbar], arg1:Pointer[GtkWidget], arg2:Pointer[CChar], arg3:Pointer[CChar]) : ;

external (cdecl) gtk_toolbar_prepend_widget(arg0:Pointer[GtkToolbar], arg1:Pointer[GtkWidget], arg2:Pointer[CChar], arg3:Pointer[CChar]) : ;

external (cdecl) gtk_toolbar_insert_widget(arg0:Pointer[GtkToolbar], arg1:Pointer[GtkWidget], arg2:Pointer[CChar], arg3:Pointer[CChar], arg4:gint) : ;

alias GtkToolItemGroup = Struct__GtkToolItemGroup;

alias GtkToolItemGroupClass = Struct__GtkToolItemGroupClass;

alias Struct__GtkToolItemGroupPrivate = Opaque;

alias GtkToolItemGroupPrivate = Struct__GtkToolItemGroupPrivate;

record Struct__GtkToolItemGroup (
    parent_instance : GtkContainer,
    priv : Pointer[GtkToolItemGroupPrivate],
);

record Struct__GtkToolItemGroupClass (
    parent_class : GtkContainerClass,
);

external (cdecl) gtk_tool_item_group_get_type() : GType;

external (cdecl) gtk_tool_item_group_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_tool_item_group_set_label(arg0:Pointer[GtkToolItemGroup], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_tool_item_group_set_label_widget(arg0:Pointer[GtkToolItemGroup], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tool_item_group_set_collapsed(arg0:Pointer[GtkToolItemGroup], arg1:gboolean) : ;

external (cdecl) gtk_tool_item_group_set_ellipsize(arg0:Pointer[GtkToolItemGroup], arg1:PangoEllipsizeMode) : ;

external (cdecl) gtk_tool_item_group_set_header_relief(arg0:Pointer[GtkToolItemGroup], arg1:GtkReliefStyle) : ;

external (cdecl) gtk_tool_item_group_get_label(arg0:Pointer[GtkToolItemGroup]) : Pointer[gchar];

external (cdecl) gtk_tool_item_group_get_label_widget(arg0:Pointer[GtkToolItemGroup]) : Pointer[GtkWidget];

external (cdecl) gtk_tool_item_group_get_collapsed(arg0:Pointer[GtkToolItemGroup]) : gboolean;

external (cdecl) gtk_tool_item_group_get_ellipsize(arg0:Pointer[GtkToolItemGroup]) : PangoEllipsizeMode;

external (cdecl) gtk_tool_item_group_get_header_relief(arg0:Pointer[GtkToolItemGroup]) : GtkReliefStyle;

external (cdecl) gtk_tool_item_group_insert(arg0:Pointer[GtkToolItemGroup], arg1:Pointer[GtkToolItem], arg2:gint) : ;

external (cdecl) gtk_tool_item_group_set_item_position(arg0:Pointer[GtkToolItemGroup], arg1:Pointer[GtkToolItem], arg2:gint) : ;

external (cdecl) gtk_tool_item_group_get_item_position(arg0:Pointer[GtkToolItemGroup], arg1:Pointer[GtkToolItem]) : gint;

external (cdecl) gtk_tool_item_group_get_n_items(arg0:Pointer[GtkToolItemGroup]) : guint;

external (cdecl) gtk_tool_item_group_get_nth_item(arg0:Pointer[GtkToolItemGroup], arg1:guint) : Pointer[GtkToolItem];

external (cdecl) gtk_tool_item_group_get_drop_item(arg0:Pointer[GtkToolItemGroup], arg1:gint, arg2:gint) : Pointer[GtkToolItem];

alias GtkToolPalette = Struct__GtkToolPalette;

alias GtkToolPaletteClass = Struct__GtkToolPaletteClass;

alias Struct__GtkToolPalettePrivate = Opaque;

alias GtkToolPalettePrivate = Struct__GtkToolPalettePrivate;


alias GtkToolPaletteDragTargets = CUInt;
alias GTK_TOOL_PALETTE_DRAG_ITEMS = CUInt(1);
alias GTK_TOOL_PALETTE_DRAG_GROUPS = CUInt(2);

record Struct__GtkToolPalette (
    parent_instance : GtkContainer,
    priv : Pointer[GtkToolPalettePrivate],
);

record Struct__GtkToolPaletteClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkWidget], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
    _gtk_reserved5 : CCodePointer[[],[]],
    _gtk_reserved6 : CCodePointer[[],[]],
);

external (cdecl) gtk_tool_palette_get_type() : GType;

external (cdecl) gtk_tool_palette_new() : Pointer[GtkWidget];

external (cdecl) gtk_tool_palette_set_group_position(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkToolItemGroup], arg2:gint) : ;

external (cdecl) gtk_tool_palette_set_exclusive(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkToolItemGroup], arg2:gboolean) : ;

external (cdecl) gtk_tool_palette_set_expand(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkToolItemGroup], arg2:gboolean) : ;

external (cdecl) gtk_tool_palette_get_group_position(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkToolItemGroup]) : gint;

external (cdecl) gtk_tool_palette_get_exclusive(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkToolItemGroup]) : gboolean;

external (cdecl) gtk_tool_palette_get_expand(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkToolItemGroup]) : gboolean;

external (cdecl) gtk_tool_palette_set_icon_size(arg0:Pointer[GtkToolPalette], arg1:GtkIconSize) : ;

external (cdecl) gtk_tool_palette_unset_icon_size(arg0:Pointer[GtkToolPalette]) : ;

external (cdecl) gtk_tool_palette_set_style(arg0:Pointer[GtkToolPalette], arg1:GtkToolbarStyle) : ;

external (cdecl) gtk_tool_palette_unset_style(arg0:Pointer[GtkToolPalette]) : ;

external (cdecl) gtk_tool_palette_get_icon_size(arg0:Pointer[GtkToolPalette]) : GtkIconSize;

external (cdecl) gtk_tool_palette_get_style(arg0:Pointer[GtkToolPalette]) : GtkToolbarStyle;

external (cdecl) gtk_tool_palette_get_drop_item(arg0:Pointer[GtkToolPalette], arg1:gint, arg2:gint) : Pointer[GtkToolItem];

external (cdecl) gtk_tool_palette_get_drop_group(arg0:Pointer[GtkToolPalette], arg1:gint, arg2:gint) : Pointer[GtkToolItemGroup];

external (cdecl) gtk_tool_palette_get_drag_item(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkSelectionData]) : Pointer[GtkWidget];

external (cdecl) gtk_tool_palette_set_drag_source(arg0:Pointer[GtkToolPalette], arg1:GtkToolPaletteDragTargets) : ;

external (cdecl) gtk_tool_palette_add_drag_dest(arg0:Pointer[GtkToolPalette], arg1:Pointer[GtkWidget], arg2:GtkDestDefaults, arg3:GtkToolPaletteDragTargets, arg4:GdkDragAction) : ;

external (cdecl) gtk_tool_palette_get_hadjustment(arg0:Pointer[GtkToolPalette]) : Pointer[GtkAdjustment];

external (cdecl) gtk_tool_palette_get_vadjustment(arg0:Pointer[GtkToolPalette]) : Pointer[GtkAdjustment];

external (cdecl) gtk_tool_palette_get_drag_target_item() : Pointer[GtkTargetEntry];

external (cdecl) gtk_tool_palette_get_drag_target_group() : Pointer[GtkTargetEntry];

alias Struct__GtkToolShell = Opaque;

alias GtkToolShell = Struct__GtkToolShell;

alias GtkToolShellIface = Struct__GtkToolShellIface;

record Struct__GtkToolShellIface (
    g_iface : GTypeInterface,
    get_icon_size : CCodePointer[[Pointer[GtkToolShell]],[GtkIconSize]],
    get_orientation : CCodePointer[[Pointer[GtkToolShell]],[GtkOrientation]],
    get_style : CCodePointer[[Pointer[GtkToolShell]],[GtkToolbarStyle]],
    get_relief_style : CCodePointer[[Pointer[GtkToolShell]],[GtkReliefStyle]],
    rebuild_menu : CCodePointer[[Pointer[GtkToolShell]],[]],
    get_text_orientation : CCodePointer[[Pointer[GtkToolShell]],[GtkOrientation]],
    get_text_alignment : CCodePointer[[Pointer[GtkToolShell]],[gfloat]],
    get_ellipsize_mode : CCodePointer[[Pointer[GtkToolShell]],[PangoEllipsizeMode]],
    get_text_size_group : CCodePointer[[Pointer[GtkToolShell]],[Pointer[GtkSizeGroup]]],
);

external (cdecl) gtk_tool_shell_get_type() : GType;

external (cdecl) gtk_tool_shell_get_icon_size(arg0:Pointer[GtkToolShell]) : GtkIconSize;

external (cdecl) gtk_tool_shell_get_orientation(arg0:Pointer[GtkToolShell]) : GtkOrientation;

external (cdecl) gtk_tool_shell_get_style(arg0:Pointer[GtkToolShell]) : GtkToolbarStyle;

external (cdecl) gtk_tool_shell_get_relief_style(arg0:Pointer[GtkToolShell]) : GtkReliefStyle;

external (cdecl) gtk_tool_shell_rebuild_menu(arg0:Pointer[GtkToolShell]) : ;

external (cdecl) gtk_tool_shell_get_text_orientation(arg0:Pointer[GtkToolShell]) : GtkOrientation;

external (cdecl) gtk_tool_shell_get_text_alignment(arg0:Pointer[GtkToolShell]) : gfloat;

external (cdecl) gtk_tool_shell_get_ellipsize_mode(arg0:Pointer[GtkToolShell]) : PangoEllipsizeMode;

external (cdecl) gtk_tool_shell_get_text_size_group(arg0:Pointer[GtkToolShell]) : Pointer[GtkSizeGroup];

external (cdecl) gtk_test_init(arg0:Pointer[CInt], arg1:Pointer[Pointer[Pointer[CChar]]], ..) : ;

external (cdecl) gtk_test_register_all_types() : ;

external (cdecl) gtk_test_list_all_types(arg0:Pointer[guint]) : Pointer[GType];

external (cdecl) gtk_test_find_widget(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:GType) : Pointer[GtkWidget];

external (cdecl) gtk_test_create_widget(arg0:GType, arg1:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_test_create_simple_window(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_test_display_button_window(arg0:Pointer[gchar], arg1:Pointer[gchar], ..) : Pointer[GtkWidget];

external (cdecl) gtk_test_slider_set_perc(arg0:Pointer[GtkWidget], arg1:CDouble) : ;

external (cdecl) gtk_test_slider_get_value(arg0:Pointer[GtkWidget]) : CDouble;

external (cdecl) gtk_test_spin_button_click(arg0:Pointer[GtkSpinButton], arg1:guint, arg2:gboolean) : gboolean;

external (cdecl) gtk_test_widget_click(arg0:Pointer[GtkWidget], arg1:guint, arg2:GdkModifierType) : gboolean;

external (cdecl) gtk_test_widget_send_key(arg0:Pointer[GtkWidget], arg1:guint, arg2:GdkModifierType) : gboolean;

external (cdecl) gtk_test_text_set(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_test_text_get(arg0:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_test_find_sibling(arg0:Pointer[GtkWidget], arg1:GType) : Pointer[GtkWidget];

external (cdecl) gtk_test_find_label(arg0:Pointer[GtkWidget], arg1:Pointer[gchar]) : Pointer[GtkWidget];

alias Struct__GtkTreeDragSource = Opaque;

alias GtkTreeDragSource = Struct__GtkTreeDragSource;

alias GtkTreeDragSourceIface = Struct__GtkTreeDragSourceIface;

record Struct__GtkTreeDragSourceIface (
    g_iface : GTypeInterface,
    row_draggable : CCodePointer[[Pointer[GtkTreeDragSource], Pointer[GtkTreePath]],[gboolean]],
    drag_data_get : CCodePointer[[Pointer[GtkTreeDragSource], Pointer[GtkTreePath], Pointer[GtkSelectionData]],[gboolean]],
    drag_data_delete : CCodePointer[[Pointer[GtkTreeDragSource], Pointer[GtkTreePath]],[gboolean]],
);

external (cdecl) gtk_tree_drag_source_get_type() : GType;

external (cdecl) gtk_tree_drag_source_row_draggable(arg0:Pointer[GtkTreeDragSource], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_drag_source_drag_data_delete(arg0:Pointer[GtkTreeDragSource], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_drag_source_drag_data_get(arg0:Pointer[GtkTreeDragSource], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkSelectionData]) : gboolean;

alias Struct__GtkTreeDragDest = Opaque;

alias GtkTreeDragDest = Struct__GtkTreeDragDest;

alias GtkTreeDragDestIface = Struct__GtkTreeDragDestIface;

record Struct__GtkTreeDragDestIface (
    g_iface : GTypeInterface,
    drag_data_received : CCodePointer[[Pointer[GtkTreeDragDest], Pointer[GtkTreePath], Pointer[GtkSelectionData]],[gboolean]],
    row_drop_possible : CCodePointer[[Pointer[GtkTreeDragDest], Pointer[GtkTreePath], Pointer[GtkSelectionData]],[gboolean]],
);

external (cdecl) gtk_tree_drag_dest_get_type() : GType;

external (cdecl) gtk_tree_drag_dest_drag_data_received(arg0:Pointer[GtkTreeDragDest], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkSelectionData]) : gboolean;

external (cdecl) gtk_tree_drag_dest_row_drop_possible(arg0:Pointer[GtkTreeDragDest], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkSelectionData]) : gboolean;

external (cdecl) gtk_tree_set_row_drag_data(arg0:Pointer[GtkSelectionData], arg1:Pointer[GtkTreeModel], arg2:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_get_row_drag_data(arg0:Pointer[GtkSelectionData], arg1:Pointer[Pointer[GtkTreeModel]], arg2:Pointer[Pointer[GtkTreePath]]) : gboolean;

alias GtkTreeModelSort = Struct__GtkTreeModelSort;

alias GtkTreeModelSortClass = Struct__GtkTreeModelSortClass;

record Struct__GtkTreeModelSort (
    parent : GObject,
    root : gpointer,
    stamp : gint,
    child_flags : guint,
    child_model : Pointer[GtkTreeModel],
    zero_ref_count : gint,
    sort_list : Pointer[GList],
    sort_column_id : gint,
    order : GtkSortType,
    default_sort_func : GtkTreeIterCompareFunc,
    default_sort_data : gpointer,
    default_sort_destroy : GDestroyNotify,
    changed_id : guint,
    inserted_id : guint,
    has_child_toggled_id : guint,
    deleted_id : guint,
    reordered_id : guint,
);

record Struct__GtkTreeModelSortClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tree_model_sort_get_type() : GType;

external (cdecl) gtk_tree_model_sort_new_with_model(arg0:Pointer[GtkTreeModel]) : Pointer[GtkTreeModel];

external (cdecl) gtk_tree_model_sort_get_model(arg0:Pointer[GtkTreeModelSort]) : Pointer[GtkTreeModel];

external (cdecl) gtk_tree_model_sort_convert_child_path_to_path(arg0:Pointer[GtkTreeModelSort], arg1:Pointer[GtkTreePath]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_model_sort_convert_child_iter_to_iter(arg0:Pointer[GtkTreeModelSort], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_model_sort_convert_path_to_child_path(arg0:Pointer[GtkTreeModelSort], arg1:Pointer[GtkTreePath]) : Pointer[GtkTreePath];

external (cdecl) gtk_tree_model_sort_convert_iter_to_child_iter(arg0:Pointer[GtkTreeModelSort], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_model_sort_reset_default_sort_func(arg0:Pointer[GtkTreeModelSort]) : ;

external (cdecl) gtk_tree_model_sort_clear_cache(arg0:Pointer[GtkTreeModelSort]) : ;

external (cdecl) gtk_tree_model_sort_iter_is_valid(arg0:Pointer[GtkTreeModelSort], arg1:Pointer[GtkTreeIter]) : gboolean;

alias GtkTreeSelectionFunc = CCodePointer[[Pointer[GtkTreeSelection], Pointer[GtkTreeModel], Pointer[GtkTreePath], gboolean, gpointer],[gboolean]];

alias GtkTreeSelectionForeachFunc = CCodePointer[[Pointer[GtkTreeModel], Pointer[GtkTreePath], Pointer[GtkTreeIter], gpointer],[]];

record Struct__GtkTreeSelection (
    parent : GObject,
    tree_view : Pointer[GtkTreeView],
    type : GtkSelectionMode,
    user_func : GtkTreeSelectionFunc,
    user_data : gpointer,
    destroy : GDestroyNotify,
);

record Struct__GtkTreeSelectionClass (
    parent_class : GObjectClass,
    changed : CCodePointer[[Pointer[GtkTreeSelection]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tree_selection_get_type() : GType;

external (cdecl) gtk_tree_selection_set_mode(arg0:Pointer[GtkTreeSelection], arg1:GtkSelectionMode) : ;

external (cdecl) gtk_tree_selection_get_mode(arg0:Pointer[GtkTreeSelection]) : GtkSelectionMode;

external (cdecl) gtk_tree_selection_set_select_function(arg0:Pointer[GtkTreeSelection], arg1:GtkTreeSelectionFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_tree_selection_get_user_data(arg0:Pointer[GtkTreeSelection]) : gpointer;

external (cdecl) gtk_tree_selection_get_tree_view(arg0:Pointer[GtkTreeSelection]) : Pointer[GtkTreeView];

external (cdecl) gtk_tree_selection_get_select_function(arg0:Pointer[GtkTreeSelection]) : GtkTreeSelectionFunc;

external (cdecl) gtk_tree_selection_get_selected(arg0:Pointer[GtkTreeSelection], arg1:Pointer[Pointer[GtkTreeModel]], arg2:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_selection_get_selected_rows(arg0:Pointer[GtkTreeSelection], arg1:Pointer[Pointer[GtkTreeModel]]) : Pointer[GList];

external (cdecl) gtk_tree_selection_count_selected_rows(arg0:Pointer[GtkTreeSelection]) : gint;

external (cdecl) gtk_tree_selection_selected_foreach(arg0:Pointer[GtkTreeSelection], arg1:GtkTreeSelectionForeachFunc, arg2:gpointer) : ;

external (cdecl) gtk_tree_selection_select_path(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_selection_unselect_path(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_selection_select_iter(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_selection_unselect_iter(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_selection_path_is_selected(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreePath]) : gboolean;

external (cdecl) gtk_tree_selection_iter_is_selected(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_selection_select_all(arg0:Pointer[GtkTreeSelection]) : ;

external (cdecl) gtk_tree_selection_unselect_all(arg0:Pointer[GtkTreeSelection]) : ;

external (cdecl) gtk_tree_selection_select_range(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreePath]) : ;

external (cdecl) gtk_tree_selection_unselect_range(arg0:Pointer[GtkTreeSelection], arg1:Pointer[GtkTreePath], arg2:Pointer[GtkTreePath]) : ;

alias GtkTreeStore = Struct__GtkTreeStore;

alias GtkTreeStoreClass = Struct__GtkTreeStoreClass;

record Struct__GtkTreeStore (
    parent : GObject,
    stamp : gint,
    root : gpointer,
    last : gpointer,
    n_columns : gint,
    sort_column_id : gint,
    sort_list : Pointer[GList],
    order : GtkSortType,
    column_headers : Pointer[GType],
    default_sort_func : GtkTreeIterCompareFunc,
    default_sort_data : gpointer,
    default_sort_destroy : GDestroyNotify,
    columns_dirty : guint,
);

record Struct__GtkTreeStoreClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tree_store_get_type() : GType;

external (cdecl) gtk_tree_store_new(arg0:gint, ..) : Pointer[GtkTreeStore];

external (cdecl) gtk_tree_store_newv(arg0:gint, arg1:Pointer[GType]) : Pointer[GtkTreeStore];

external (cdecl) gtk_tree_store_set_column_types(arg0:Pointer[GtkTreeStore], arg1:gint, arg2:Pointer[GType]) : ;

external (cdecl) gtk_tree_store_set_value(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:gint, arg3:Pointer[GValue]) : ;

external (cdecl) gtk_tree_store_set(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], ..) : ;

external (cdecl) gtk_tree_store_set_valuesv(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[gint], arg3:Pointer[GValue], arg4:gint) : ;

external (cdecl) gtk_tree_store_set_valist(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) gtk_tree_store_remove(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_store_insert(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter], arg3:gint) : ;

external (cdecl) gtk_tree_store_insert_before(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter], arg3:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_store_insert_after(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter], arg3:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_store_insert_with_values(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter], arg3:gint, ..) : ;

external (cdecl) gtk_tree_store_insert_with_valuesv(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter], arg3:gint, arg4:Pointer[gint], arg5:Pointer[GValue], arg6:gint) : ;

external (cdecl) gtk_tree_store_prepend(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_store_append(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_store_is_ancestor(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_store_iter_depth(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter]) : gint;

external (cdecl) gtk_tree_store_clear(arg0:Pointer[GtkTreeStore]) : ;

external (cdecl) gtk_tree_store_iter_is_valid(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter]) : gboolean;

external (cdecl) gtk_tree_store_reorder(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[gint]) : ;

external (cdecl) gtk_tree_store_swap(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_store_move_before(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

external (cdecl) gtk_tree_store_move_after(arg0:Pointer[GtkTreeStore], arg1:Pointer[GtkTreeIter], arg2:Pointer[GtkTreeIter]) : ;

alias GtkUIManager = Struct__GtkUIManager;

alias GtkUIManagerClass = Struct__GtkUIManagerClass;

alias Struct__GtkUIManagerPrivate = Opaque;

alias GtkUIManagerPrivate = Struct__GtkUIManagerPrivate;

record Struct__GtkUIManager (
    parent : GObject,
    private_data : Pointer[GtkUIManagerPrivate],
);

record Struct__GtkUIManagerClass (
    parent_class : GObjectClass,
    add_widget : CCodePointer[[Pointer[GtkUIManager], Pointer[GtkWidget]],[]],
    actions_changed : CCodePointer[[Pointer[GtkUIManager]],[]],
    connect_proxy : CCodePointer[[Pointer[GtkUIManager], Pointer[GtkAction], Pointer[GtkWidget]],[]],
    disconnect_proxy : CCodePointer[[Pointer[GtkUIManager], Pointer[GtkAction], Pointer[GtkWidget]],[]],
    pre_activate : CCodePointer[[Pointer[GtkUIManager], Pointer[GtkAction]],[]],
    post_activate : CCodePointer[[Pointer[GtkUIManager], Pointer[GtkAction]],[]],
    get_widget : CCodePointer[[Pointer[GtkUIManager], Pointer[gchar]],[Pointer[GtkWidget]]],
    get_action : CCodePointer[[Pointer[GtkUIManager], Pointer[gchar]],[Pointer[GtkAction]]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
);


alias GtkUIManagerItemType = CUInt;
alias GTK_UI_MANAGER_AUTO = CUInt(0);
alias GTK_UI_MANAGER_MENUBAR = CUInt(1);
alias GTK_UI_MANAGER_MENU = CUInt(2);
alias GTK_UI_MANAGER_TOOLBAR = CUInt(4);
alias GTK_UI_MANAGER_PLACEHOLDER = CUInt(8);
alias GTK_UI_MANAGER_POPUP = CUInt(16);
alias GTK_UI_MANAGER_MENUITEM = CUInt(32);
alias GTK_UI_MANAGER_TOOLITEM = CUInt(64);
alias GTK_UI_MANAGER_SEPARATOR = CUInt(128);
alias GTK_UI_MANAGER_ACCELERATOR = CUInt(256);
alias GTK_UI_MANAGER_POPUP_WITH_ACCELS = CUInt(512);

external (cdecl) gtk_ui_manager_get_type() : GType;

external (cdecl) gtk_ui_manager_new() : Pointer[GtkUIManager];

external (cdecl) gtk_ui_manager_set_add_tearoffs(arg0:Pointer[GtkUIManager], arg1:gboolean) : ;

external (cdecl) gtk_ui_manager_get_add_tearoffs(arg0:Pointer[GtkUIManager]) : gboolean;

external (cdecl) gtk_ui_manager_insert_action_group(arg0:Pointer[GtkUIManager], arg1:Pointer[GtkActionGroup], arg2:gint) : ;

external (cdecl) gtk_ui_manager_remove_action_group(arg0:Pointer[GtkUIManager], arg1:Pointer[GtkActionGroup]) : ;

external (cdecl) gtk_ui_manager_get_action_groups(arg0:Pointer[GtkUIManager]) : Pointer[GList];

external (cdecl) gtk_ui_manager_get_accel_group(arg0:Pointer[GtkUIManager]) : Pointer[GtkAccelGroup];

external (cdecl) gtk_ui_manager_get_widget(arg0:Pointer[GtkUIManager], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_ui_manager_get_toplevels(arg0:Pointer[GtkUIManager], arg1:GtkUIManagerItemType) : Pointer[GSList];

external (cdecl) gtk_ui_manager_get_action(arg0:Pointer[GtkUIManager], arg1:Pointer[gchar]) : Pointer[GtkAction];

external (cdecl) gtk_ui_manager_add_ui_from_string(arg0:Pointer[GtkUIManager], arg1:Pointer[gchar], arg2:gssize, arg3:Pointer[Pointer[GError]]) : guint;

external (cdecl) gtk_ui_manager_add_ui_from_file(arg0:Pointer[GtkUIManager], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : guint;

external (cdecl) gtk_ui_manager_add_ui(arg0:Pointer[GtkUIManager], arg1:guint, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:GtkUIManagerItemType, arg6:gboolean) : ;

external (cdecl) gtk_ui_manager_remove_ui(arg0:Pointer[GtkUIManager], arg1:guint) : ;

external (cdecl) gtk_ui_manager_get_ui(arg0:Pointer[GtkUIManager]) : Pointer[gchar];

external (cdecl) gtk_ui_manager_ensure_update(arg0:Pointer[GtkUIManager]) : ;

external (cdecl) gtk_ui_manager_new_merge_id(arg0:Pointer[GtkUIManager]) : guint;

alias GtkVButtonBox = Struct__GtkVButtonBox;

alias GtkVButtonBoxClass = Struct__GtkVButtonBoxClass;

record Struct__GtkVButtonBox (
    button_box : GtkButtonBox,
);

record Struct__GtkVButtonBoxClass (
    parent_class : GtkButtonBoxClass,
);

external (cdecl) gtk_vbutton_box_get_type() : GType;

external (cdecl) gtk_vbutton_box_new() : Pointer[GtkWidget];

external (cdecl) gtk_vbutton_box_get_spacing_default() : gint;

external (cdecl) gtk_vbutton_box_set_spacing_default(arg0:gint) : ;

external (cdecl) gtk_vbutton_box_get_layout_default() : GtkButtonBoxStyle;

external (cdecl) gtk_vbutton_box_set_layout_default(arg0:GtkButtonBoxStyle) : ;

external (cdecl) _gtk_vbutton_box_get_layout_default() : GtkButtonBoxStyle;

alias GtkVolumeButton = Struct__GtkVolumeButton;

alias GtkVolumeButtonClass = Struct__GtkVolumeButtonClass;

record Struct__GtkVolumeButton (
    parent : GtkScaleButton,
);

record Struct__GtkVolumeButtonClass (
    parent_class : GtkScaleButtonClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_volume_button_get_type() : GType;

external (cdecl) gtk_volume_button_new() : Pointer[GtkWidget];

alias GtkVPaned = Struct__GtkVPaned;

alias GtkVPanedClass = Struct__GtkVPanedClass;

record Struct__GtkVPaned (
    paned : GtkPaned,
);

record Struct__GtkVPanedClass (
    parent_class : GtkPanedClass,
);

external (cdecl) gtk_vpaned_get_type() : GType;

external (cdecl) gtk_vpaned_new() : Pointer[GtkWidget];

alias GtkVRuler = Struct__GtkVRuler;

alias GtkVRulerClass = Struct__GtkVRulerClass;

record Struct__GtkVRuler (
    ruler : GtkRuler,
);

record Struct__GtkVRulerClass (
    parent_class : GtkRulerClass,
);

external (cdecl) gtk_vruler_get_type() : GType;

external (cdecl) gtk_vruler_new() : Pointer[GtkWidget];

alias GtkVScale = Struct__GtkVScale;

alias GtkVScaleClass = Struct__GtkVScaleClass;

record Struct__GtkVScale (
    scale : GtkScale,
);

record Struct__GtkVScaleClass (
    parent_class : GtkScaleClass,
);

external (cdecl) gtk_vscale_get_type() : GType;

external (cdecl) gtk_vscale_new(arg0:Pointer[GtkAdjustment]) : Pointer[GtkWidget];

external (cdecl) gtk_vscale_new_with_range(arg0:gdouble, arg1:gdouble, arg2:gdouble) : Pointer[GtkWidget];

alias GtkVSeparator = Struct__GtkVSeparator;

alias GtkVSeparatorClass = Struct__GtkVSeparatorClass;

record Struct__GtkVSeparator (
    separator : GtkSeparator,
);

record Struct__GtkVSeparatorClass (
    parent_class : GtkSeparatorClass,
);

external (cdecl) gtk_vseparator_get_type() : GType;

external (cdecl) gtk_vseparator_new() : Pointer[GtkWidget];



alias GtkCellType = CUInt;
alias GTK_CELL_EMPTY = CUInt(0);
alias GTK_CELL_TEXT = CUInt(1);
alias GTK_CELL_PIXMAP = CUInt(2);
alias GTK_CELL_PIXTEXT = CUInt(3);
alias GTK_CELL_WIDGET = CUInt(4);


alias GtkCListDragPos = CUInt;
alias GTK_CLIST_DRAG_NONE = CUInt(0);
alias GTK_CLIST_DRAG_BEFORE = CUInt(1);
alias GTK_CLIST_DRAG_INTO = CUInt(2);
alias GTK_CLIST_DRAG_AFTER = CUInt(3);


alias GtkButtonAction = CUInt;
alias GTK_BUTTON_IGNORED = CUInt(0);
alias GTK_BUTTON_SELECTS = CUInt(1);
alias GTK_BUTTON_DRAGS = CUInt(2);
alias GTK_BUTTON_EXPANDS = CUInt(4);

alias GtkCList = Struct__GtkCList;

alias GtkCListClass = Struct__GtkCListClass;

alias GtkCListColumn = Struct__GtkCListColumn;

alias GtkCListRow = Struct__GtkCListRow;

alias GtkCell = Struct__GtkCell;

alias GtkCellText = Struct__GtkCellText;

alias GtkCellPixmap = Struct__GtkCellPixmap;

alias GtkCellPixText = Struct__GtkCellPixText;

alias GtkCellWidget = Struct__GtkCellWidget;

alias GtkCListCompareFunc = CCodePointer[[Pointer[GtkCList], gconstpointer, gconstpointer],[gint]];

alias GtkCListCellInfo = Struct__GtkCListCellInfo;

alias GtkCListDestInfo = Struct__GtkCListDestInfo;

record Struct__GtkCListCellInfo (
    row : gint,
    column : gint,
);

record Struct__GtkCListDestInfo (
    cell : GtkCListCellInfo,
    insert_pos : GtkCListDragPos,
);

record Struct__GtkCList (
    container : GtkContainer,
    flags : guint16,
    reserved1 : gpointer,
    reserved2 : gpointer,
    freeze_count : guint,
    internal_allocation : GdkRectangle,
    rows : gint,
    row_height : gint,
    row_list : Pointer[GList],
    row_list_end : Pointer[GList],
    columns : gint,
    column_title_area : GdkRectangle,
    title_window : Pointer[GdkWindow],
    column : Pointer[GtkCListColumn],
    clist_window : Pointer[GdkWindow],
    clist_window_width : gint,
    clist_window_height : gint,
    hoffset : gint,
    voffset : gint,
    shadow_type : GtkShadowType,
    selection_mode : GtkSelectionMode,
    selection : Pointer[GList],
    selection_end : Pointer[GList],
    undo_selection : Pointer[GList],
    undo_unselection : Pointer[GList],
    undo_anchor : gint,
    button_actions : Array[guint8, 5],
    drag_button : guint8,
    click_cell : GtkCListCellInfo,
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
    xor_gc : Pointer[GdkGC],
    fg_gc : Pointer[GdkGC],
    bg_gc : Pointer[GdkGC],
    cursor_drag : Pointer[GdkCursor],
    x_drag : gint,
    focus_row : gint,
    focus_header_column : gint,
    anchor : gint,
    anchor_state : GtkStateType,
    drag_pos : gint,
    htimer : gint,
    vtimer : gint,
    sort_type : GtkSortType,
    compare : GtkCListCompareFunc,
    sort_column : gint,
    drag_highlight_row : gint,
    drag_highlight_pos : GtkCListDragPos,
);

record Struct__GtkCListClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[[Pointer[GtkCList], Pointer[GtkAdjustment], Pointer[GtkAdjustment]],[]],
    refresh : CCodePointer[[Pointer[GtkCList]],[]],
    select_row : CCodePointer[[Pointer[GtkCList], gint, gint, Pointer[GdkEvent]],[]],
    unselect_row : CCodePointer[[Pointer[GtkCList], gint, gint, Pointer[GdkEvent]],[]],
    row_move : CCodePointer[[Pointer[GtkCList], gint, gint],[]],
    click_column : CCodePointer[[Pointer[GtkCList], gint],[]],
    resize_column : CCodePointer[[Pointer[GtkCList], gint, gint],[]],
    toggle_focus_row : CCodePointer[[Pointer[GtkCList]],[]],
    select_all : CCodePointer[[Pointer[GtkCList]],[]],
    unselect_all : CCodePointer[[Pointer[GtkCList]],[]],
    undo_selection : CCodePointer[[Pointer[GtkCList]],[]],
    start_selection : CCodePointer[[Pointer[GtkCList]],[]],
    end_selection : CCodePointer[[Pointer[GtkCList]],[]],
    extend_selection : CCodePointer[[Pointer[GtkCList], GtkScrollType, gfloat, gboolean],[]],
    scroll_horizontal : CCodePointer[[Pointer[GtkCList], GtkScrollType, gfloat],[]],
    scroll_vertical : CCodePointer[[Pointer[GtkCList], GtkScrollType, gfloat],[]],
    toggle_add_mode : CCodePointer[[Pointer[GtkCList]],[]],
    abort_column_resize : CCodePointer[[Pointer[GtkCList]],[]],
    resync_selection : CCodePointer[[Pointer[GtkCList], Pointer[GdkEvent]],[]],
    selection_find : CCodePointer[[Pointer[GtkCList], gint, Pointer[GList]],[Pointer[GList]]],
    draw_row : CCodePointer[[Pointer[GtkCList], Pointer[GdkRectangle], gint, Pointer[GtkCListRow]],[]],
    draw_drag_highlight : CCodePointer[[Pointer[GtkCList], Pointer[GtkCListRow], gint, GtkCListDragPos],[]],
    clear : CCodePointer[[Pointer[GtkCList]],[]],
    fake_unselect_all : CCodePointer[[Pointer[GtkCList], gint],[]],
    sort_list : CCodePointer[[Pointer[GtkCList]],[]],
    insert_row : CCodePointer[[Pointer[GtkCList], gint, Pointer[Pointer[gchar]]],[gint]],
    remove_row : CCodePointer[[Pointer[GtkCList], gint],[]],
    set_cell_contents : CCodePointer[[Pointer[GtkCList], Pointer[GtkCListRow], gint, GtkCellType, Pointer[gchar], guint8, Pointer[GdkPixmap], Pointer[GdkBitmap]],[]],
    cell_size_request : CCodePointer[[Pointer[GtkCList], Pointer[GtkCListRow], gint, Pointer[GtkRequisition]],[]],
);

record Struct__GtkCListColumn (
    title : Pointer[gchar],
    area : GdkRectangle,
    button : Pointer[GtkWidget],
    window : Pointer[GdkWindow],
    width : gint,
    min_width : gint,
    max_width : gint,
    justification : GtkJustification,
    visible : guint,
    width_set : guint,
    resizeable : guint,
    auto_resize : guint,
    button_passive : guint,
);

record Struct__GtkCListRow (
    cell : Pointer[GtkCell],
    state : GtkStateType,
    foreground : GdkColor,
    background : GdkColor,
    style : Pointer[GtkStyle],
    data : gpointer,
    destroy : GDestroyNotify,
    fg_set : guint,
    bg_set : guint,
    selectable : guint,
);

record Struct__GtkCellText (
    type : GtkCellType,
    vertical : gint16,
    horizontal : gint16,
    style : Pointer[GtkStyle],
    text : Pointer[gchar],
);

record Struct__GtkCellPixmap (
    type : GtkCellType,
    vertical : gint16,
    horizontal : gint16,
    style : Pointer[GtkStyle],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
);

record Struct__GtkCellPixText (
    type : GtkCellType,
    vertical : gint16,
    horizontal : gint16,
    style : Pointer[GtkStyle],
    text : Pointer[gchar],
    spacing : guint8,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
);

record Struct__GtkCellWidget (
    type : GtkCellType,
    vertical : gint16,
    horizontal : gint16,
    style : Pointer[GtkStyle],
    widget : Pointer[GtkWidget],
);

record Struct__GtkCell (
    type : GtkCellType,
    vertical : gint16,
    horizontal : gint16,
    style : Pointer[GtkStyle],
    u : Union_Unnamed5,
);

external (cdecl) gtk_clist_get_type() : GType;

external (cdecl) gtk_clist_new(arg0:gint) : Pointer[GtkWidget];

external (cdecl) gtk_clist_new_with_titles(arg0:gint, arg1:Pointer[Pointer[gchar]]) : Pointer[GtkWidget];

external (cdecl) gtk_clist_set_hadjustment(arg0:Pointer[GtkCList], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_clist_set_vadjustment(arg0:Pointer[GtkCList], arg1:Pointer[GtkAdjustment]) : ;

external (cdecl) gtk_clist_get_hadjustment(arg0:Pointer[GtkCList]) : Pointer[GtkAdjustment];

external (cdecl) gtk_clist_get_vadjustment(arg0:Pointer[GtkCList]) : Pointer[GtkAdjustment];

external (cdecl) gtk_clist_set_shadow_type(arg0:Pointer[GtkCList], arg1:GtkShadowType) : ;

external (cdecl) gtk_clist_set_selection_mode(arg0:Pointer[GtkCList], arg1:GtkSelectionMode) : ;

external (cdecl) gtk_clist_set_reorderable(arg0:Pointer[GtkCList], arg1:gboolean) : ;

external (cdecl) gtk_clist_set_use_drag_icons(arg0:Pointer[GtkCList], arg1:gboolean) : ;

external (cdecl) gtk_clist_set_button_actions(arg0:Pointer[GtkCList], arg1:guint, arg2:guint8) : ;

external (cdecl) gtk_clist_freeze(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_thaw(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_column_titles_show(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_column_titles_hide(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_column_title_active(arg0:Pointer[GtkCList], arg1:gint) : ;

external (cdecl) gtk_clist_column_title_passive(arg0:Pointer[GtkCList], arg1:gint) : ;

external (cdecl) gtk_clist_column_titles_active(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_column_titles_passive(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_set_column_title(arg0:Pointer[GtkCList], arg1:gint, arg2:Pointer[gchar]) : ;

external (cdecl) gtk_clist_get_column_title(arg0:Pointer[GtkCList], arg1:gint) : Pointer[gchar];

external (cdecl) gtk_clist_set_column_widget(arg0:Pointer[GtkCList], arg1:gint, arg2:Pointer[GtkWidget]) : ;

external (cdecl) gtk_clist_get_column_widget(arg0:Pointer[GtkCList], arg1:gint) : Pointer[GtkWidget];

external (cdecl) gtk_clist_set_column_justification(arg0:Pointer[GtkCList], arg1:gint, arg2:GtkJustification) : ;

external (cdecl) gtk_clist_set_column_visibility(arg0:Pointer[GtkCList], arg1:gint, arg2:gboolean) : ;

external (cdecl) gtk_clist_set_column_resizeable(arg0:Pointer[GtkCList], arg1:gint, arg2:gboolean) : ;

external (cdecl) gtk_clist_set_column_auto_resize(arg0:Pointer[GtkCList], arg1:gint, arg2:gboolean) : ;

external (cdecl) gtk_clist_columns_autosize(arg0:Pointer[GtkCList]) : gint;

external (cdecl) gtk_clist_optimal_column_width(arg0:Pointer[GtkCList], arg1:gint) : gint;

external (cdecl) gtk_clist_set_column_width(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_set_column_min_width(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_set_column_max_width(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_set_row_height(arg0:Pointer[GtkCList], arg1:guint) : ;

external (cdecl) gtk_clist_moveto(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:gfloat, arg4:gfloat) : ;

external (cdecl) gtk_clist_row_is_visible(arg0:Pointer[GtkCList], arg1:gint) : GtkVisibility;

external (cdecl) gtk_clist_get_cell_type(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : GtkCellType;

external (cdecl) gtk_clist_set_text(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[gchar]) : ;

external (cdecl) gtk_clist_get_text(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[Pointer[gchar]]) : gint;

external (cdecl) gtk_clist_set_pixmap(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[GdkPixmap], arg4:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_clist_get_pixmap(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[Pointer[GdkPixmap]], arg4:Pointer[Pointer[GdkBitmap]]) : gint;

external (cdecl) gtk_clist_set_pixtext(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[gchar], arg4:guint8, arg5:Pointer[GdkPixmap], arg6:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_clist_get_pixtext(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[Pointer[gchar]], arg4:Pointer[guint8], arg5:Pointer[Pointer[GdkPixmap]], arg6:Pointer[Pointer[GdkBitmap]]) : gint;

external (cdecl) gtk_clist_set_foreground(arg0:Pointer[GtkCList], arg1:gint, arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_clist_set_background(arg0:Pointer[GtkCList], arg1:gint, arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_clist_set_cell_style(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[GtkStyle]) : ;

external (cdecl) gtk_clist_get_cell_style(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : Pointer[GtkStyle];

external (cdecl) gtk_clist_set_row_style(arg0:Pointer[GtkCList], arg1:gint, arg2:Pointer[GtkStyle]) : ;

external (cdecl) gtk_clist_get_row_style(arg0:Pointer[GtkCList], arg1:gint) : Pointer[GtkStyle];

external (cdecl) gtk_clist_set_shift(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_clist_set_selectable(arg0:Pointer[GtkCList], arg1:gint, arg2:gboolean) : ;

external (cdecl) gtk_clist_get_selectable(arg0:Pointer[GtkCList], arg1:gint) : gboolean;

external (cdecl) gtk_clist_prepend(arg0:Pointer[GtkCList], arg1:Pointer[Pointer[gchar]]) : gint;

external (cdecl) gtk_clist_append(arg0:Pointer[GtkCList], arg1:Pointer[Pointer[gchar]]) : gint;

external (cdecl) gtk_clist_insert(arg0:Pointer[GtkCList], arg1:gint, arg2:Pointer[Pointer[gchar]]) : gint;

external (cdecl) gtk_clist_remove(arg0:Pointer[GtkCList], arg1:gint) : ;

external (cdecl) gtk_clist_set_row_data(arg0:Pointer[GtkCList], arg1:gint, arg2:gpointer) : ;

external (cdecl) gtk_clist_set_row_data_full(arg0:Pointer[GtkCList], arg1:gint, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_clist_get_row_data(arg0:Pointer[GtkCList], arg1:gint) : gpointer;

external (cdecl) gtk_clist_find_row_from_data(arg0:Pointer[GtkCList], arg1:gpointer) : gint;

external (cdecl) gtk_clist_select_row(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_unselect_row(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_undo_selection(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_clear(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_get_selection_info(arg0:Pointer[GtkCList], arg1:gint, arg2:gint, arg3:Pointer[gint], arg4:Pointer[gint]) : gint;

external (cdecl) gtk_clist_select_all(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_unselect_all(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_swap_rows(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_row_move(arg0:Pointer[GtkCList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_clist_set_compare_func(arg0:Pointer[GtkCList], arg1:GtkCListCompareFunc) : ;

external (cdecl) gtk_clist_set_sort_column(arg0:Pointer[GtkCList], arg1:gint) : ;

external (cdecl) gtk_clist_set_sort_type(arg0:Pointer[GtkCList], arg1:GtkSortType) : ;

external (cdecl) gtk_clist_sort(arg0:Pointer[GtkCList]) : ;

external (cdecl) gtk_clist_set_auto_sort(arg0:Pointer[GtkCList], arg1:gboolean) : ;

external (cdecl) _gtk_clist_create_cell_layout(arg0:Pointer[GtkCList], arg1:Pointer[GtkCListRow], arg2:gint) : Pointer[PangoLayout];

alias GtkCombo = Struct__GtkCombo;

alias GtkComboClass = Struct__GtkComboClass;

record Struct__GtkCombo (
    hbox : GtkHBox,
    entry : Pointer[GtkWidget],
    button : Pointer[GtkWidget],
    popup : Pointer[GtkWidget],
    popwin : Pointer[GtkWidget],
    list : Pointer[GtkWidget],
    entry_change_id : guint,
    list_change_id : guint,
    value_in_list : guint,
    ok_if_empty : guint,
    case_sensitive : guint,
    use_arrows : guint,
    use_arrows_always : guint,
    current_button : guint16,
    activate_id : guint,
);

record Struct__GtkComboClass (
    parent_class : GtkHBoxClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_combo_get_type() : GType;

external (cdecl) gtk_combo_new() : Pointer[GtkWidget];

external (cdecl) gtk_combo_set_value_in_list(arg0:Pointer[GtkCombo], arg1:gboolean, arg2:gboolean) : ;

external (cdecl) gtk_combo_set_use_arrows(arg0:Pointer[GtkCombo], arg1:gboolean) : ;

external (cdecl) gtk_combo_set_use_arrows_always(arg0:Pointer[GtkCombo], arg1:gboolean) : ;

external (cdecl) gtk_combo_set_case_sensitive(arg0:Pointer[GtkCombo], arg1:gboolean) : ;

external (cdecl) gtk_combo_set_item_string(arg0:Pointer[GtkCombo], arg1:Pointer[GtkItem], arg2:Pointer[gchar]) : ;

external (cdecl) gtk_combo_set_popdown_strings(arg0:Pointer[GtkCombo], arg1:Pointer[GList]) : ;

external (cdecl) gtk_combo_disable_activate(arg0:Pointer[GtkCombo]) : ;


alias GtkCTreePos = CUInt;
alias GTK_CTREE_POS_BEFORE = CUInt(0);
alias GTK_CTREE_POS_AS_CHILD = CUInt(1);
alias GTK_CTREE_POS_AFTER = CUInt(2);


alias GtkCTreeLineStyle = CUInt;
alias GTK_CTREE_LINES_NONE = CUInt(0);
alias GTK_CTREE_LINES_SOLID = CUInt(1);
alias GTK_CTREE_LINES_DOTTED = CUInt(2);
alias GTK_CTREE_LINES_TABBED = CUInt(3);


alias GtkCTreeExpanderStyle = CUInt;
alias GTK_CTREE_EXPANDER_NONE = CUInt(0);
alias GTK_CTREE_EXPANDER_SQUARE = CUInt(1);
alias GTK_CTREE_EXPANDER_TRIANGLE = CUInt(2);
alias GTK_CTREE_EXPANDER_CIRCULAR = CUInt(3);


alias GtkCTreeExpansionType = CUInt;
alias GTK_CTREE_EXPANSION_EXPAND = CUInt(0);
alias GTK_CTREE_EXPANSION_EXPAND_RECURSIVE = CUInt(1);
alias GTK_CTREE_EXPANSION_COLLAPSE = CUInt(2);
alias GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE = CUInt(3);
alias GTK_CTREE_EXPANSION_TOGGLE = CUInt(4);
alias GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE = CUInt(5);

alias GtkCTree = Struct__GtkCTree;

alias GtkCTreeClass = Struct__GtkCTreeClass;

alias GtkCTreeRow = Struct__GtkCTreeRow;

alias GtkCTreeNode = Struct__GtkCTreeNode;

alias GtkCTreeFunc = CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode], gpointer],[]];

alias GtkCTreeGNodeFunc = CCodePointer[[Pointer[GtkCTree], guint, Pointer[GNode], Pointer[GtkCTreeNode], gpointer],[gboolean]];

alias GtkCTreeCompareDragFunc = CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode], Pointer[GtkCTreeNode], Pointer[GtkCTreeNode]],[gboolean]];

record Struct__GtkCTree (
    clist : GtkCList,
    lines_gc : Pointer[GdkGC],
    tree_indent : gint,
    tree_spacing : gint,
    tree_column : gint,
    line_style : guint,
    expander_style : guint,
    show_stub : guint,
    drag_compare : GtkCTreeCompareDragFunc,
);

record Struct__GtkCTreeClass (
    parent_class : GtkCListClass,
    tree_select_row : CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode], gint],[]],
    tree_unselect_row : CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode], gint],[]],
    tree_expand : CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode]],[]],
    tree_collapse : CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode]],[]],
    tree_move : CCodePointer[[Pointer[GtkCTree], Pointer[GtkCTreeNode], Pointer[GtkCTreeNode], Pointer[GtkCTreeNode]],[]],
    change_focus_row_expansion : CCodePointer[[Pointer[GtkCTree], GtkCTreeExpansionType],[]],
);

record Struct__GtkCTreeRow (
    row : GtkCListRow,
    parent : Pointer[GtkCTreeNode],
    sibling : Pointer[GtkCTreeNode],
    children : Pointer[GtkCTreeNode],
    pixmap_closed : Pointer[GdkPixmap],
    mask_closed : Pointer[GdkBitmap],
    pixmap_opened : Pointer[GdkPixmap],
    mask_opened : Pointer[GdkBitmap],
    level : guint16,
    is_leaf : guint,
    expanded : guint,
);

record Struct__GtkCTreeNode (
    list : GList,
);

external (cdecl) gtk_ctree_get_type() : GType;

external (cdecl) gtk_ctree_new_with_titles(arg0:gint, arg1:gint, arg2:Pointer[Pointer[gchar]]) : Pointer[GtkWidget];

external (cdecl) gtk_ctree_new(arg0:gint, arg1:gint) : Pointer[GtkWidget];

external (cdecl) gtk_ctree_insert_node(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GtkCTreeNode], arg3:Pointer[Pointer[gchar]], arg4:guint8, arg5:Pointer[GdkPixmap], arg6:Pointer[GdkBitmap], arg7:Pointer[GdkPixmap], arg8:Pointer[GdkBitmap], arg9:gboolean, arg10:gboolean) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_remove_node(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_insert_gnode(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GtkCTreeNode], arg3:Pointer[GNode], arg4:GtkCTreeGNodeFunc, arg5:gpointer) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_export_to_gnode(arg0:Pointer[GtkCTree], arg1:Pointer[GNode], arg2:Pointer[GNode], arg3:Pointer[GtkCTreeNode], arg4:GtkCTreeGNodeFunc, arg5:gpointer) : Pointer[GNode];

external (cdecl) gtk_ctree_post_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:GtkCTreeFunc, arg3:gpointer) : ;

external (cdecl) gtk_ctree_post_recursive_to_depth(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:GtkCTreeFunc, arg4:gpointer) : ;

external (cdecl) gtk_ctree_pre_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:GtkCTreeFunc, arg3:gpointer) : ;

external (cdecl) gtk_ctree_pre_recursive_to_depth(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:GtkCTreeFunc, arg4:gpointer) : ;

external (cdecl) gtk_ctree_is_viewable(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : gboolean;

external (cdecl) gtk_ctree_last(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_find_node_ptr(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeRow]) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_node_nth(arg0:Pointer[GtkCTree], arg1:guint) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_find(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GtkCTreeNode]) : gboolean;

external (cdecl) gtk_ctree_is_ancestor(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GtkCTreeNode]) : gboolean;

external (cdecl) gtk_ctree_find_by_row_data(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gpointer) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_find_all_by_row_data(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gpointer) : Pointer[GList];

external (cdecl) gtk_ctree_find_by_row_data_custom(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gpointer, arg3:GCompareFunc) : Pointer[GtkCTreeNode];

external (cdecl) gtk_ctree_find_all_by_row_data_custom(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gpointer, arg3:GCompareFunc) : Pointer[GList];

external (cdecl) gtk_ctree_is_hot_spot(arg0:Pointer[GtkCTree], arg1:gint, arg2:gint) : gboolean;

external (cdecl) gtk_ctree_move(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GtkCTreeNode], arg3:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_expand(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_expand_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_expand_to_depth(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint) : ;

external (cdecl) gtk_ctree_collapse(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_collapse_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_collapse_to_depth(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint) : ;

external (cdecl) gtk_ctree_toggle_expansion(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_toggle_expansion_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_select(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_select_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_unselect(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_unselect_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_real_select_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint) : ;

external (cdecl) gtk_ctree_node_set_text(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[gchar]) : ;

external (cdecl) gtk_ctree_node_set_pixmap(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[GdkPixmap], arg4:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_ctree_node_set_pixtext(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[gchar], arg4:guint8, arg5:Pointer[GdkPixmap], arg6:Pointer[GdkBitmap]) : ;

external (cdecl) gtk_ctree_set_node_info(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[gchar], arg3:guint8, arg4:Pointer[GdkPixmap], arg5:Pointer[GdkBitmap], arg6:Pointer[GdkPixmap], arg7:Pointer[GdkBitmap], arg8:gboolean, arg9:gboolean) : ;

external (cdecl) gtk_ctree_node_set_shift(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_ctree_node_set_selectable(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gboolean) : ;

external (cdecl) gtk_ctree_node_get_selectable(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : gboolean;

external (cdecl) gtk_ctree_node_get_cell_type(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint) : GtkCellType;

external (cdecl) gtk_ctree_node_get_text(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) gtk_ctree_node_get_pixmap(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[Pointer[GdkPixmap]], arg4:Pointer[Pointer[GdkBitmap]]) : gboolean;

external (cdecl) gtk_ctree_node_get_pixtext(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[Pointer[gchar]], arg4:Pointer[guint8], arg5:Pointer[Pointer[GdkPixmap]], arg6:Pointer[Pointer[GdkBitmap]]) : gboolean;

external (cdecl) gtk_ctree_get_node_info(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[Pointer[gchar]], arg3:Pointer[guint8], arg4:Pointer[Pointer[GdkPixmap]], arg5:Pointer[Pointer[GdkBitmap]], arg6:Pointer[Pointer[GdkPixmap]], arg7:Pointer[Pointer[GdkBitmap]], arg8:Pointer[gboolean], arg9:Pointer[gboolean]) : gboolean;

external (cdecl) gtk_ctree_node_set_row_style(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GtkStyle]) : ;

external (cdecl) gtk_ctree_node_get_row_style(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : Pointer[GtkStyle];

external (cdecl) gtk_ctree_node_set_cell_style(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:Pointer[GtkStyle]) : ;

external (cdecl) gtk_ctree_node_get_cell_style(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint) : Pointer[GtkStyle];

external (cdecl) gtk_ctree_node_set_foreground(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_ctree_node_set_background(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:Pointer[GdkColor]) : ;

external (cdecl) gtk_ctree_node_set_row_data(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gpointer) : ;

external (cdecl) gtk_ctree_node_set_row_data_full(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) gtk_ctree_node_get_row_data(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : gpointer;

external (cdecl) gtk_ctree_node_moveto(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode], arg2:gint, arg3:gfloat, arg4:gfloat) : ;

external (cdecl) gtk_ctree_node_is_visible(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : GtkVisibility;

external (cdecl) gtk_ctree_set_indent(arg0:Pointer[GtkCTree], arg1:gint) : ;

external (cdecl) gtk_ctree_set_spacing(arg0:Pointer[GtkCTree], arg1:gint) : ;

external (cdecl) gtk_ctree_set_show_stub(arg0:Pointer[GtkCTree], arg1:gboolean) : ;

external (cdecl) gtk_ctree_set_line_style(arg0:Pointer[GtkCTree], arg1:GtkCTreeLineStyle) : ;

external (cdecl) gtk_ctree_set_expander_style(arg0:Pointer[GtkCTree], arg1:GtkCTreeExpanderStyle) : ;

external (cdecl) gtk_ctree_set_drag_compare_func(arg0:Pointer[GtkCTree], arg1:GtkCTreeCompareDragFunc) : ;

external (cdecl) gtk_ctree_sort_node(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_sort_recursive(arg0:Pointer[GtkCTree], arg1:Pointer[GtkCTreeNode]) : ;

external (cdecl) gtk_ctree_node_get_type() : GType;

alias GtkCurve = Struct__GtkCurve;

alias GtkCurveClass = Struct__GtkCurveClass;

record Struct__GtkCurve (
    graph : GtkDrawingArea,
    cursor_type : gint,
    min_x : gfloat,
    max_x : gfloat,
    min_y : gfloat,
    max_y : gfloat,
    pixmap : Pointer[GdkPixmap],
    curve_type : GtkCurveType,
    height : gint,
    grab_point : gint,
    last : gint,
    num_points : gint,
    point : Pointer[GdkPoint],
    num_ctlpoints : gint,
    ctlpoint : OpaquePointer /* unknown Unexposed referenced by FieldDecl ctlpoint */,
);

record Struct__GtkCurveClass (
    parent_class : GtkDrawingAreaClass,
    curve_type_changed : CCodePointer[[Pointer[GtkCurve]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_curve_get_type() : GType;

external (cdecl) gtk_curve_new() : Pointer[GtkWidget];

external (cdecl) gtk_curve_reset(arg0:Pointer[GtkCurve]) : ;

external (cdecl) gtk_curve_set_gamma(arg0:Pointer[GtkCurve], arg1:gfloat) : ;

external (cdecl) gtk_curve_set_range(arg0:Pointer[GtkCurve], arg1:gfloat, arg2:gfloat, arg3:gfloat, arg4:gfloat) : ;

external (cdecl) gtk_curve_get_vector(arg0:Pointer[GtkCurve], arg1:CInt, arg2:Pointer[gfloat]) : ;

external (cdecl) gtk_curve_set_vector(arg0:Pointer[GtkCurve], arg1:CInt, arg2:Pointer[gfloat]) : ;

external (cdecl) gtk_curve_set_curve_type(arg0:Pointer[GtkCurve], arg1:GtkCurveType) : ;

alias GtkFileSelection = Struct__GtkFileSelection;

alias GtkFileSelectionClass = Struct__GtkFileSelectionClass;

record Struct__GtkFileSelection (
    parent_instance : GtkDialog,
    dir_list : Pointer[GtkWidget],
    file_list : Pointer[GtkWidget],
    selection_entry : Pointer[GtkWidget],
    selection_text : Pointer[GtkWidget],
    main_vbox : Pointer[GtkWidget],
    ok_button : Pointer[GtkWidget],
    cancel_button : Pointer[GtkWidget],
    help_button : Pointer[GtkWidget],
    history_pulldown : Pointer[GtkWidget],
    history_menu : Pointer[GtkWidget],
    history_list : Pointer[GList],
    fileop_dialog : Pointer[GtkWidget],
    fileop_entry : Pointer[GtkWidget],
    fileop_file : Pointer[gchar],
    cmpl_state : gpointer,
    fileop_c_dir : Pointer[GtkWidget],
    fileop_del_file : Pointer[GtkWidget],
    fileop_ren_file : Pointer[GtkWidget],
    button_area : Pointer[GtkWidget],
    action_area : Pointer[GtkWidget],
    selected_names : Pointer[GPtrArray],
    last_selected : Pointer[gchar],
);

record Struct__GtkFileSelectionClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_file_selection_get_type() : GType;

external (cdecl) gtk_file_selection_new(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_file_selection_set_filename(arg0:Pointer[GtkFileSelection], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_selection_get_filename(arg0:Pointer[GtkFileSelection]) : Pointer[gchar];

external (cdecl) gtk_file_selection_complete(arg0:Pointer[GtkFileSelection], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_file_selection_show_fileop_buttons(arg0:Pointer[GtkFileSelection]) : ;

external (cdecl) gtk_file_selection_hide_fileop_buttons(arg0:Pointer[GtkFileSelection]) : ;

external (cdecl) gtk_file_selection_get_selections(arg0:Pointer[GtkFileSelection]) : Pointer[Pointer[gchar]];

external (cdecl) gtk_file_selection_set_select_multiple(arg0:Pointer[GtkFileSelection], arg1:gboolean) : ;

external (cdecl) gtk_file_selection_get_select_multiple(arg0:Pointer[GtkFileSelection]) : gboolean;

alias GtkGammaCurve = Struct__GtkGammaCurve;

alias GtkGammaCurveClass = Struct__GtkGammaCurveClass;

record Struct__GtkGammaCurve (
    vbox : GtkVBox,
    table : Pointer[GtkWidget],
    curve : Pointer[GtkWidget],
    button : Array[Pointer[GtkWidget], 5],
    gamma : gfloat,
    gamma_dialog : Pointer[GtkWidget],
    gamma_text : Pointer[GtkWidget],
);

record Struct__GtkGammaCurveClass (
    parent_class : GtkVBoxClass,
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_gamma_curve_get_type() : GType;

external (cdecl) gtk_gamma_curve_new() : Pointer[GtkWidget];

alias GtkInputDialog = Struct__GtkInputDialog;

alias GtkInputDialogClass = Struct__GtkInputDialogClass;

record Struct__GtkInputDialog (
    dialog : GtkDialog,
    axis_list : Pointer[GtkWidget],
    axis_listbox : Pointer[GtkWidget],
    mode_optionmenu : Pointer[GtkWidget],
    close_button : Pointer[GtkWidget],
    save_button : Pointer[GtkWidget],
    axis_items : Array[Pointer[GtkWidget], 7],
    current_device : Pointer[GdkDevice],
    keys_list : Pointer[GtkWidget],
    keys_listbox : Pointer[GtkWidget],
);

record Struct__GtkInputDialogClass (
    parent_class : GtkDialogClass,
    enable_device : CCodePointer[[Pointer[GtkInputDialog], Pointer[GdkDevice]],[]],
    disable_device : CCodePointer[[Pointer[GtkInputDialog], Pointer[GdkDevice]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_input_dialog_get_type() : GType;

external (cdecl) gtk_input_dialog_new() : Pointer[GtkWidget];

alias GtkPrintFunc = CCodePointer[[gpointer, Pointer[gchar]],[]];

alias GtkItemFactoryCallback = VarArgsCCodePointer[[],[]];

alias GtkItemFactoryCallback1 = CCodePointer[[gpointer, guint, Pointer[GtkWidget]],[]];

alias GtkItemFactory = Struct__GtkItemFactory;

alias GtkItemFactoryClass = Struct__GtkItemFactoryClass;

alias GtkItemFactoryEntry = Struct__GtkItemFactoryEntry;

alias GtkItemFactoryItem = Struct__GtkItemFactoryItem;

record Struct__GtkItemFactory (
    object : GtkObject,
    path : Pointer[gchar],
    accel_group : Pointer[GtkAccelGroup],
    widget : Pointer[GtkWidget],
    items : Pointer[GSList],
    translate_func : GtkTranslateFunc,
    translate_data : gpointer,
    translate_notify : GDestroyNotify,
);

record Struct__GtkItemFactoryClass (
    object_class : GtkObjectClass,
    item_ht : Pointer[GHashTable],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

record Struct__GtkItemFactoryEntry (
    path : Pointer[gchar],
    accelerator : Pointer[gchar],
    callback : GtkItemFactoryCallback,
    callback_action : guint,
    item_type : Pointer[gchar],
    extra_data : gconstpointer,
);

record Struct__GtkItemFactoryItem (
    path : Pointer[gchar],
    widgets : Pointer[GSList],
);

external (cdecl) gtk_item_factory_get_type() : GType;

external (cdecl) gtk_item_factory_new(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[GtkAccelGroup]) : Pointer[GtkItemFactory];

external (cdecl) gtk_item_factory_construct(arg0:Pointer[GtkItemFactory], arg1:GType, arg2:Pointer[gchar], arg3:Pointer[GtkAccelGroup]) : ;

external (cdecl) gtk_item_factory_add_foreign(arg0:Pointer[GtkWidget], arg1:Pointer[gchar], arg2:Pointer[GtkAccelGroup], arg3:guint, arg4:GdkModifierType) : ;

external (cdecl) gtk_item_factory_from_widget(arg0:Pointer[GtkWidget]) : Pointer[GtkItemFactory];

external (cdecl) gtk_item_factory_path_from_widget(arg0:Pointer[GtkWidget]) : Pointer[gchar];

external (cdecl) gtk_item_factory_get_item(arg0:Pointer[GtkItemFactory], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_item_factory_get_widget(arg0:Pointer[GtkItemFactory], arg1:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_item_factory_get_widget_by_action(arg0:Pointer[GtkItemFactory], arg1:guint) : Pointer[GtkWidget];

external (cdecl) gtk_item_factory_get_item_by_action(arg0:Pointer[GtkItemFactory], arg1:guint) : Pointer[GtkWidget];

external (cdecl) gtk_item_factory_create_item(arg0:Pointer[GtkItemFactory], arg1:Pointer[GtkItemFactoryEntry], arg2:gpointer, arg3:guint) : ;

external (cdecl) gtk_item_factory_create_items(arg0:Pointer[GtkItemFactory], arg1:guint, arg2:Pointer[GtkItemFactoryEntry], arg3:gpointer) : ;

external (cdecl) gtk_item_factory_delete_item(arg0:Pointer[GtkItemFactory], arg1:Pointer[gchar]) : ;

external (cdecl) gtk_item_factory_delete_entry(arg0:Pointer[GtkItemFactory], arg1:Pointer[GtkItemFactoryEntry]) : ;

external (cdecl) gtk_item_factory_delete_entries(arg0:Pointer[GtkItemFactory], arg1:guint, arg2:Pointer[GtkItemFactoryEntry]) : ;

external (cdecl) gtk_item_factory_popup(arg0:Pointer[GtkItemFactory], arg1:guint, arg2:guint, arg3:guint, arg4:guint32) : ;

external (cdecl) gtk_item_factory_popup_with_data(arg0:Pointer[GtkItemFactory], arg1:gpointer, arg2:GDestroyNotify, arg3:guint, arg4:guint, arg5:guint, arg6:guint32) : ;

external (cdecl) gtk_item_factory_popup_data(arg0:Pointer[GtkItemFactory]) : gpointer;

external (cdecl) gtk_item_factory_popup_data_from_widget(arg0:Pointer[GtkWidget]) : gpointer;

external (cdecl) gtk_item_factory_set_translate_func(arg0:Pointer[GtkItemFactory], arg1:GtkTranslateFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

alias GtkMenuCallback = CCodePointer[[Pointer[GtkWidget], gpointer],[]];

record GtkMenuEntry (
    path : Pointer[gchar],
    accelerator : Pointer[gchar],
    callback : GtkMenuCallback,
    callback_data : gpointer,
    widget : Pointer[GtkWidget],
);

alias GtkItemFactoryCallback2 = CCodePointer[[Pointer[GtkWidget], gpointer, guint],[]];

external (cdecl) gtk_item_factory_create_items_ac(arg0:Pointer[GtkItemFactory], arg1:guint, arg2:Pointer[GtkItemFactoryEntry], arg3:gpointer, arg4:guint) : ;

external (cdecl) gtk_item_factory_from_path(arg0:Pointer[gchar]) : Pointer[GtkItemFactory];

external (cdecl) gtk_item_factory_create_menu_entries(arg0:guint, arg1:Pointer[GtkMenuEntry]) : ;

external (cdecl) gtk_item_factories_path_delete(arg0:Pointer[gchar], arg1:Pointer[gchar]) : ;

alias GtkList = Struct__GtkList;

alias GtkListClass = Struct__GtkListClass;

record Struct__GtkList (
    container : GtkContainer,
    children : Pointer[GList],
    selection : Pointer[GList],
    undo_selection : Pointer[GList],
    undo_unselection : Pointer[GList],
    last_focus_child : Pointer[GtkWidget],
    undo_focus_child : Pointer[GtkWidget],
    htimer : guint,
    vtimer : guint,
    anchor : gint,
    drag_pos : gint,
    anchor_state : GtkStateType,
    selection_mode : guint,
    drag_selection : guint,
    add_mode : guint,
);

record Struct__GtkListClass (
    parent_class : GtkContainerClass,
    selection_changed : CCodePointer[[Pointer[GtkList]],[]],
    select_child : CCodePointer[[Pointer[GtkList], Pointer[GtkWidget]],[]],
    unselect_child : CCodePointer[[Pointer[GtkList], Pointer[GtkWidget]],[]],
);

external (cdecl) gtk_list_get_type() : GType;

external (cdecl) gtk_list_new() : Pointer[GtkWidget];

external (cdecl) gtk_list_insert_items(arg0:Pointer[GtkList], arg1:Pointer[GList], arg2:gint) : ;

external (cdecl) gtk_list_append_items(arg0:Pointer[GtkList], arg1:Pointer[GList]) : ;

external (cdecl) gtk_list_prepend_items(arg0:Pointer[GtkList], arg1:Pointer[GList]) : ;

external (cdecl) gtk_list_remove_items(arg0:Pointer[GtkList], arg1:Pointer[GList]) : ;

external (cdecl) gtk_list_remove_items_no_unref(arg0:Pointer[GtkList], arg1:Pointer[GList]) : ;

external (cdecl) gtk_list_clear_items(arg0:Pointer[GtkList], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_list_select_item(arg0:Pointer[GtkList], arg1:gint) : ;

external (cdecl) gtk_list_unselect_item(arg0:Pointer[GtkList], arg1:gint) : ;

external (cdecl) gtk_list_select_child(arg0:Pointer[GtkList], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_list_unselect_child(arg0:Pointer[GtkList], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_list_child_position(arg0:Pointer[GtkList], arg1:Pointer[GtkWidget]) : gint;

external (cdecl) gtk_list_set_selection_mode(arg0:Pointer[GtkList], arg1:GtkSelectionMode) : ;

external (cdecl) gtk_list_extend_selection(arg0:Pointer[GtkList], arg1:GtkScrollType, arg2:gfloat, arg3:gboolean) : ;

external (cdecl) gtk_list_start_selection(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_end_selection(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_select_all(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_unselect_all(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_scroll_horizontal(arg0:Pointer[GtkList], arg1:GtkScrollType, arg2:gfloat) : ;

external (cdecl) gtk_list_scroll_vertical(arg0:Pointer[GtkList], arg1:GtkScrollType, arg2:gfloat) : ;

external (cdecl) gtk_list_toggle_add_mode(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_toggle_focus_row(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_toggle_row(arg0:Pointer[GtkList], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_list_undo_selection(arg0:Pointer[GtkList]) : ;

external (cdecl) gtk_list_end_drag_selection(arg0:Pointer[GtkList]) : ;

alias GtkListItem = Struct__GtkListItem;

alias GtkListItemClass = Struct__GtkListItemClass;

record Struct__GtkListItem (
    item : GtkItem,
);

record Struct__GtkListItemClass (
    parent_class : GtkItemClass,
    toggle_focus_row : CCodePointer[[Pointer[GtkListItem]],[]],
    select_all : CCodePointer[[Pointer[GtkListItem]],[]],
    unselect_all : CCodePointer[[Pointer[GtkListItem]],[]],
    undo_selection : CCodePointer[[Pointer[GtkListItem]],[]],
    start_selection : CCodePointer[[Pointer[GtkListItem]],[]],
    end_selection : CCodePointer[[Pointer[GtkListItem]],[]],
    extend_selection : CCodePointer[[Pointer[GtkListItem], GtkScrollType, gfloat, gboolean],[]],
    scroll_horizontal : CCodePointer[[Pointer[GtkListItem], GtkScrollType, gfloat],[]],
    scroll_vertical : CCodePointer[[Pointer[GtkListItem], GtkScrollType, gfloat],[]],
    toggle_add_mode : CCodePointer[[Pointer[GtkListItem]],[]],
);

external (cdecl) gtk_list_item_get_type() : GType;

external (cdecl) gtk_list_item_new() : Pointer[GtkWidget];

external (cdecl) gtk_list_item_new_with_label(arg0:Pointer[gchar]) : Pointer[GtkWidget];

external (cdecl) gtk_list_item_select(arg0:Pointer[GtkListItem]) : ;

external (cdecl) gtk_list_item_deselect(arg0:Pointer[GtkListItem]) : ;

alias GtkOldEditable = Struct__GtkOldEditable;

alias GtkOldEditableClass = Struct__GtkOldEditableClass;

alias GtkTextFunction = CCodePointer[[Pointer[GtkOldEditable], guint32],[]];

record Struct__GtkOldEditable (
    widget : GtkWidget,
    current_pos : guint,
    selection_start_pos : guint,
    selection_end_pos : guint,
    has_selection : guint,
    editable : guint,
    visible : guint,
    clipboard_text : Pointer[gchar],
);

record Struct__GtkOldEditableClass (
    parent_class : GtkWidgetClass,
    activate : CCodePointer[[Pointer[GtkOldEditable]],[]],
    set_editable : CCodePointer[[Pointer[GtkOldEditable], gboolean],[]],
    move_cursor : CCodePointer[[Pointer[GtkOldEditable], gint, gint],[]],
    move_word : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
    move_page : CCodePointer[[Pointer[GtkOldEditable], gint, gint],[]],
    move_to_row : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
    move_to_column : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
    kill_char : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
    kill_word : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
    kill_line : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
    cut_clipboard : CCodePointer[[Pointer[GtkOldEditable]],[]],
    copy_clipboard : CCodePointer[[Pointer[GtkOldEditable]],[]],
    paste_clipboard : CCodePointer[[Pointer[GtkOldEditable]],[]],
    update_text : CCodePointer[[Pointer[GtkOldEditable], gint, gint],[]],
    get_chars : CCodePointer[[Pointer[GtkOldEditable], gint, gint],[Pointer[gchar]]],
    set_selection : CCodePointer[[Pointer[GtkOldEditable], gint, gint],[]],
    set_position : CCodePointer[[Pointer[GtkOldEditable], gint],[]],
);

external (cdecl) gtk_old_editable_get_type() : GType;

external (cdecl) gtk_old_editable_claim_selection(arg0:Pointer[GtkOldEditable], arg1:gboolean, arg2:guint32) : ;

external (cdecl) gtk_old_editable_changed(arg0:Pointer[GtkOldEditable]) : ;

alias GtkOptionMenu = Struct__GtkOptionMenu;

alias GtkOptionMenuClass = Struct__GtkOptionMenuClass;

record Struct__GtkOptionMenu (
    button : GtkButton,
    menu : Pointer[GtkWidget],
    menu_item : Pointer[GtkWidget],
    width : guint16,
    height : guint16,
);

record Struct__GtkOptionMenuClass (
    parent_class : GtkButtonClass,
    changed : CCodePointer[[Pointer[GtkOptionMenu]],[]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_option_menu_get_type() : GType;

external (cdecl) gtk_option_menu_new() : Pointer[GtkWidget];

external (cdecl) gtk_option_menu_get_menu(arg0:Pointer[GtkOptionMenu]) : Pointer[GtkWidget];

external (cdecl) gtk_option_menu_set_menu(arg0:Pointer[GtkOptionMenu], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_option_menu_remove_menu(arg0:Pointer[GtkOptionMenu]) : ;

external (cdecl) gtk_option_menu_get_history(arg0:Pointer[GtkOptionMenu]) : gint;

external (cdecl) gtk_option_menu_set_history(arg0:Pointer[GtkOptionMenu], arg1:guint) : ;

alias GtkPreview = Struct__GtkPreview;

alias GtkPreviewInfo = Struct__GtkPreviewInfo;

alias GtkDitherInfo = Union__GtkDitherInfo;

alias GtkPreviewClass = Struct__GtkPreviewClass;

record Struct__GtkPreview (
    widget : GtkWidget,
    buffer : Pointer[guchar],
    buffer_width : guint16,
    buffer_height : guint16,
    bpp : guint16,
    rowstride : guint16,
    dither : GdkRgbDither,
    type : guint,
    expand : guint,
);

record Struct__GtkPreviewInfo (
    lookup : Pointer[guchar],
    gamma : gdouble,
);

alias Union__GtkDitherInfo = Union[
    /* s */ Array[gushort, 2],
    /* c */ Array[guchar, 4],
];

record Struct__GtkPreviewClass (
    parent_class : GtkWidgetClass,
    info : GtkPreviewInfo,
);

external (cdecl) gtk_preview_get_type() : GType;

external (cdecl) gtk_preview_uninit() : ;

external (cdecl) gtk_preview_new(arg0:GtkPreviewType) : Pointer[GtkWidget];

external (cdecl) gtk_preview_size(arg0:Pointer[GtkPreview], arg1:gint, arg2:gint) : ;

external (cdecl) gtk_preview_put(arg0:Pointer[GtkPreview], arg1:Pointer[GdkWindow], arg2:Pointer[GdkGC], arg3:gint, arg4:gint, arg5:gint, arg6:gint, arg7:gint, arg8:gint) : ;

external (cdecl) gtk_preview_draw_row(arg0:Pointer[GtkPreview], arg1:Pointer[guchar], arg2:gint, arg3:gint, arg4:gint) : ;

external (cdecl) gtk_preview_set_expand(arg0:Pointer[GtkPreview], arg1:gboolean) : ;

external (cdecl) gtk_preview_set_gamma(arg0:CDouble) : ;

external (cdecl) gtk_preview_set_color_cube(arg0:guint, arg1:guint, arg2:guint, arg3:guint) : ;

external (cdecl) gtk_preview_set_install_cmap(arg0:gint) : ;

external (cdecl) gtk_preview_set_reserved(arg0:gint) : ;

external (cdecl) gtk_preview_set_dither(arg0:Pointer[GtkPreview], arg1:GdkRgbDither) : ;

external (cdecl) gtk_preview_get_visual() : Pointer[GdkVisual];

external (cdecl) gtk_preview_get_cmap() : Pointer[GdkColormap];

external (cdecl) gtk_preview_get_info() : Pointer[GtkPreviewInfo];

external (cdecl) gtk_preview_reset() : ;

alias GtkTipsQuery = Struct__GtkTipsQuery;

alias GtkTipsQueryClass = Struct__GtkTipsQueryClass;

record Struct__GtkTipsQuery (
    label : GtkLabel,
    emit_always : guint,
    in_query : guint,
    label_inactive : Pointer[gchar],
    label_no_tip : Pointer[gchar],
    caller : Pointer[GtkWidget],
    last_crossed : Pointer[GtkWidget],
    query_cursor : Pointer[GdkCursor],
);

record Struct__GtkTipsQueryClass (
    parent_class : GtkLabelClass,
    start_query : CCodePointer[[Pointer[GtkTipsQuery]],[]],
    stop_query : CCodePointer[[Pointer[GtkTipsQuery]],[]],
    widget_entered : CCodePointer[[Pointer[GtkTipsQuery], Pointer[GtkWidget], Pointer[gchar], Pointer[gchar]],[]],
    widget_selected : CCodePointer[[Pointer[GtkTipsQuery], Pointer[GtkWidget], Pointer[gchar], Pointer[gchar], Pointer[GdkEventButton]],[gint]],
    _gtk_reserved1 : CCodePointer[[],[]],
    _gtk_reserved2 : CCodePointer[[],[]],
    _gtk_reserved3 : CCodePointer[[],[]],
    _gtk_reserved4 : CCodePointer[[],[]],
);

external (cdecl) gtk_tips_query_get_type() : GType;

external (cdecl) gtk_tips_query_new() : Pointer[GtkWidget];

external (cdecl) gtk_tips_query_start_query(arg0:Pointer[GtkTipsQuery]) : ;

external (cdecl) gtk_tips_query_stop_query(arg0:Pointer[GtkTipsQuery]) : ;

external (cdecl) gtk_tips_query_set_caller(arg0:Pointer[GtkTipsQuery], arg1:Pointer[GtkWidget]) : ;

external (cdecl) gtk_tips_query_set_labels(arg0:Pointer[GtkTipsQuery], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

alias Union_Unnamed5 = Union[
    /* text */ Pointer[gchar],
    /* pm */ Struct_Unnamed6,
    /* pt */ Struct_Unnamed7,
    /* widget */ Pointer[GtkWidget],
];

alias Union_Unnamed1 = Union[
    /* b */ Array[CChar, 20],
    /* s */ Array[CShort, 10],
    /* l */ Array[CLong, 5],
];

alias Union_Unnamed4 = Union[
    /* pixmap */ GtkImagePixmapData,
    /* image */ GtkImageImageData,
    /* pixbuf */ GtkImagePixbufData,
    /* stock */ GtkImageStockData,
    /* icon_set */ GtkImageIconSetData,
    /* anim */ GtkImageAnimationData,
    /* name */ GtkImageIconNameData,
    /* gicon */ GtkImageGIconData,
];

record Struct_Unnamed8 (
    f : GCallback,
    d : gpointer,
);

alias Enum_Unnamed9 = CInt;
alias GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = CInt(-1);
alias GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = CInt(-2);

record Struct_Unnamed7 (
    text : Pointer[gchar],
    spacing : guint8,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
);

record Struct_Unnamed6 (
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
);

alias Enum_Unnamed10 = CUInt;
alias GTK_CLIST_IN_DRAG = CUInt(1);
alias GTK_CLIST_ROW_HEIGHT_SET = CUInt(2);
alias GTK_CLIST_SHOW_TITLES = CUInt(4);
alias GTK_CLIST_ADD_MODE = CUInt(16);
alias GTK_CLIST_AUTO_SORT = CUInt(32);
alias GTK_CLIST_AUTO_RESIZE_BLOCKED = CUInt(64);
alias GTK_CLIST_REORDERABLE = CUInt(128);
alias GTK_CLIST_USE_DRAG_ICONS = CUInt(256);
alias GTK_CLIST_DRAW_DRAG_LINE = CUInt(512);
alias GTK_CLIST_DRAW_DRAG_RECT = CUInt(1024);

alias Union_Unnamed3 = Union[
    /* long_data */ glong,
    /* double_data */ gdouble,
    /* string_data */ Pointer[gchar],
];

alias Union_Unnamed2 = Union[
    /* char_data */ gchar,
    /* uchar_data */ guchar,
    /* bool_data */ gboolean,
    /* int_data */ gint,
    /* uint_data */ guint,
    /* long_data */ glong,
    /* ulong_data */ gulong,
    /* float_data */ gfloat,
    /* double_data */ gdouble,
    /* string_data */ Pointer[gchar],
    /* object_data */ Pointer[GtkObject],
    /* pointer_data */ gpointer,
    /* signal_data */ Struct_Unnamed8,
];

