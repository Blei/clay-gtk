// Automatically generated by clay-bindgen
// language: c

import glib.generated.*;
import gobject.generated.*;
import pango.generated.*;
import cairo.generated.*;
import gdkpixbuf.generated.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias GdkPoint = Struct__GdkPoint;

alias GdkRectangle = Struct__GdkRectangle;

alias GdkSegment = Struct__GdkSegment;

alias GdkSpan = Struct__GdkSpan;

alias GdkWChar = UInt;

alias GdkAtom = OpaquePointer;

alias GdkNativeWindow = UInt;

alias GdkColor = Struct__GdkColor;

alias GdkColormap = Struct__GdkColormap;

alias GdkCursor = Struct__GdkCursor;

alias GdkFont = Struct__GdkFont;

alias GdkGC = Struct__GdkGC;

alias GdkImage = Struct__GdkImage;

alias GdkRegion = Opaque;

alias GdkVisual = Struct__GdkVisual;

alias GdkDrawable = Struct__GdkDrawable;

alias GdkBitmap = Struct__GdkDrawable;

alias GdkPixmap = Struct__GdkDrawable;

alias GdkWindow = Struct__GdkDrawable;

alias GdkDisplay = Struct__GdkDisplay;

alias GdkScreen = Struct__GdkScreen;

alias GDK_LSB_FIRST = 0;
alias GDK_MSB_FIRST = 1;

alias GdkByteOrder = Int;

alias GDK_SHIFT_MASK = 1;
alias GDK_LOCK_MASK = 2;
alias GDK_CONTROL_MASK = 4;
alias GDK_MOD1_MASK = 8;
alias GDK_MOD2_MASK = 16;
alias GDK_MOD3_MASK = 32;
alias GDK_MOD4_MASK = 64;
alias GDK_MOD5_MASK = 128;
alias GDK_BUTTON1_MASK = 256;
alias GDK_BUTTON2_MASK = 512;
alias GDK_BUTTON3_MASK = 1024;
alias GDK_BUTTON4_MASK = 2048;
alias GDK_BUTTON5_MASK = 4096;
alias GDK_SUPER_MASK = 67108864;
alias GDK_HYPER_MASK = 134217728;
alias GDK_META_MASK = 268435456;
alias GDK_RELEASE_MASK = 1073741824;
alias GDK_MODIFIER_MASK = 1543512063;

alias GdkModifierType = Int;

alias GDK_INPUT_READ = 1;
alias GDK_INPUT_WRITE = 2;
alias GDK_INPUT_EXCEPTION = 4;

alias GdkInputCondition = Int;

alias GDK_OK = 0;
alias GDK_ERROR = 4294967295;
alias GDK_ERROR_PARAM = 4294967294;
alias GDK_ERROR_FILE = 4294967293;
alias GDK_ERROR_MEM = 4294967292;

alias GdkStatus = Int;

alias GDK_GRAB_SUCCESS = 0;
alias GDK_GRAB_ALREADY_GRABBED = 1;
alias GDK_GRAB_INVALID_TIME = 2;
alias GDK_GRAB_NOT_VIEWABLE = 3;
alias GDK_GRAB_FROZEN = 4;

alias GdkGrabStatus = Int;

alias GdkInputFunction = CCodePointer[(RawPointer,Int,Int),()];

alias GdkDestroyNotify = CCodePointer[(RawPointer),()];

record Struct__GdkPoint (
    x : Int,
    y : Int,
);

record Struct__GdkRectangle (
    x : Int,
    y : Int,
    width : Int,
    height : Int,
);

record Struct__GdkSegment (
    x1 : Int,
    y1 : Int,
    x2 : Int,
    y2 : Int,
);

record Struct__GdkSpan (
    x : Int,
    y : Int,
    width : Int,
);

record Struct__GdkColor (
    pixel : UInt,
    red : UShort,
    green : UShort,
    blue : UShort,
);

alias GdkColormapClass = Struct__GdkColormapClass;

record Struct__GdkColormap (
    parent_instance : GObject,
    size : Int,
    colors : Pointer[GdkColor],
    visual : Pointer[GdkVisual],
    windowing_data : gpointer,
);

record Struct__GdkColormapClass (
    parent_class : GObjectClass,
);

external gdk_colormap_get_type() CULong;

external gdk_colormap_new(
    visual : Pointer[GdkVisual],
    allocate : Int) Pointer[GdkColormap];

external gdk_colormap_ref(
    cmap : Pointer[GdkColormap]) Pointer[GdkColormap];

external gdk_colormap_unref(
    cmap : Pointer[GdkColormap]);

external gdk_colormap_get_system() Pointer[GdkColormap];

external gdk_colormap_get_screen(
    cmap : Pointer[GdkColormap]) Pointer[GdkScreen];

external gdk_colormap_get_system_size() Int;

external gdk_colormap_change(
    colormap : Pointer[GdkColormap],
    ncolors : Int);

external gdk_colormap_alloc_colors(
    colormap : Pointer[GdkColormap],
    colors : Pointer[GdkColor],
    n_colors : Int,
    writeable : Int,
    best_match : Int,
    success : Pointer[Int]) Int;

external gdk_colormap_alloc_color(
    colormap : Pointer[GdkColormap],
    color : Pointer[GdkColor],
    writeable : Int,
    best_match : Int) Int;

external gdk_colormap_free_colors(
    colormap : Pointer[GdkColormap],
    colors : Pointer[GdkColor],
    n_colors : Int);

external gdk_colormap_query_color(
    colormap : Pointer[GdkColormap],
    pixel : CULong,
    result : Pointer[GdkColor]);

external gdk_colormap_get_visual(
    colormap : Pointer[GdkColormap]) Pointer[GdkVisual];

external gdk_color_copy(
    color : Pointer[GdkColor]) Pointer[GdkColor];

external gdk_color_free(
    color : Pointer[GdkColor]);

external gdk_color_parse(
    spec : Pointer[CChar],
    color : Pointer[GdkColor]) Int;

external gdk_color_hash(
    colora : Pointer[GdkColor]) UInt;

external gdk_color_equal(
    colora : Pointer[GdkColor],
    colorb : Pointer[GdkColor]) Int;

external gdk_color_to_string(
    color : Pointer[GdkColor]) Pointer[CChar];

external gdk_color_get_type() CULong;

external gdk_colors_store(
    colormap : Pointer[GdkColormap],
    colors : Pointer[GdkColor],
    ncolors : Int);

external gdk_color_white(
    colormap : Pointer[GdkColormap],
    color : Pointer[GdkColor]) Int;

external gdk_color_black(
    colormap : Pointer[GdkColormap],
    color : Pointer[GdkColor]) Int;

external gdk_color_alloc(
    colormap : Pointer[GdkColormap],
    color : Pointer[GdkColor]) Int;

external gdk_color_change(
    colormap : Pointer[GdkColormap],
    color : Pointer[GdkColor]) Int;

external gdk_colors_alloc(
    colormap : Pointer[GdkColormap],
    contiguous : Int,
    planes : Pointer[CULong],
    nplanes : Int,
    pixels : Pointer[CULong],
    npixels : Int) Int;

external gdk_colors_free(
    colormap : Pointer[GdkColormap],
    pixels : Pointer[CULong],
    npixels : Int,
    planes : CULong);

alias GdkDragContext = Struct__GdkDragContext;

alias GDK_ACTION_DEFAULT = 1;
alias GDK_ACTION_COPY = 2;
alias GDK_ACTION_MOVE = 4;
alias GDK_ACTION_LINK = 8;
alias GDK_ACTION_PRIVATE = 16;
alias GDK_ACTION_ASK = 32;

alias GdkDragAction = Int;

alias GDK_DRAG_PROTO_MOTIF = 0;
alias GDK_DRAG_PROTO_XDND = 1;
alias GDK_DRAG_PROTO_ROOTWIN = 2;
alias GDK_DRAG_PROTO_NONE = 3;
alias GDK_DRAG_PROTO_WIN32_DROPFILES = 4;
alias GDK_DRAG_PROTO_OLE2 = 5;
alias GDK_DRAG_PROTO_LOCAL = 6;

alias GdkDragProtocol = Int;

alias GdkDragContextClass = Struct__GdkDragContextClass;

record Struct__GdkDragContext (
    parent_instance : GObject,
    protocol : GdkDragProtocol,
    is_source : Int,
    source_window : Pointer[GdkWindow],
    dest_window : Pointer[GdkWindow],
    targets : Pointer[GList],
    actions : GdkDragAction,
    suggested_action : GdkDragAction,
    action : GdkDragAction,
    start_time : UInt,
    windowing_data : gpointer,
);

record Struct__GdkDragContextClass (
    parent_class : GObjectClass,
);

external gdk_drag_context_get_type() CULong;

external gdk_drag_context_new() Pointer[GdkDragContext];

external gdk_drag_context_list_targets(
    context : Pointer[GdkDragContext]) Pointer[GList];

external gdk_drag_context_get_actions(
    context : Pointer[GdkDragContext]) GdkDragAction;

external gdk_drag_context_get_suggested_action(
    context : Pointer[GdkDragContext]) GdkDragAction;

external gdk_drag_context_get_selected_action(
    context : Pointer[GdkDragContext]) GdkDragAction;

external gdk_drag_context_get_source_window(
    context : Pointer[GdkDragContext]) Pointer[GdkWindow];

external gdk_drag_context_ref(
    context : Pointer[GdkDragContext]);

external gdk_drag_context_unref(
    context : Pointer[GdkDragContext]);

external gdk_drag_status(
    context : Pointer[GdkDragContext],
    action : GdkDragAction,
    time_ : UInt);

external gdk_drop_reply(
    context : Pointer[GdkDragContext],
    ok : Int,
    time_ : UInt);

external gdk_drop_finish(
    context : Pointer[GdkDragContext],
    success : Int,
    time_ : UInt);

external gdk_drag_get_selection(
    context : Pointer[GdkDragContext]) GdkAtom;

external gdk_drag_begin(
    window : Pointer[GdkWindow],
    targets : Pointer[GList]) Pointer[GdkDragContext];

external gdk_drag_get_protocol_for_display(
    display : Pointer[GdkDisplay],
    xid : UInt,
    protocol : Pointer[GdkDragProtocol]) UInt;

external gdk_drag_find_window_for_screen(
    context : Pointer[GdkDragContext],
    drag_window : Pointer[GdkWindow],
    screen : Pointer[GdkScreen],
    x_root : Int,
    y_root : Int,
    dest_window : Pointer[Pointer[GdkWindow]],
    protocol : Pointer[GdkDragProtocol]);

external gdk_drag_get_protocol(
    xid : UInt,
    protocol : Pointer[GdkDragProtocol]) UInt;

external gdk_drag_find_window(
    context : Pointer[GdkDragContext],
    drag_window : Pointer[GdkWindow],
    x_root : Int,
    y_root : Int,
    dest_window : Pointer[Pointer[GdkWindow]],
    protocol : Pointer[GdkDragProtocol]);

external gdk_drag_motion(
    context : Pointer[GdkDragContext],
    dest_window : Pointer[GdkWindow],
    protocol : GdkDragProtocol,
    x_root : Int,
    y_root : Int,
    suggested_action : GdkDragAction,
    possible_actions : GdkDragAction,
    time_ : UInt) Int;

external gdk_drag_drop(
    context : Pointer[GdkDragContext],
    time_ : UInt);

external gdk_drag_abort(
    context : Pointer[GdkDragContext],
    time_ : UInt);

external gdk_drag_drop_succeeded(
    context : Pointer[GdkDragContext]) Int;

alias GdkDeviceKey = Struct__GdkDeviceKey;

alias GdkDeviceAxis = Struct__GdkDeviceAxis;

alias GdkDevice = Struct__GdkDevice;

alias GdkDeviceClass = Opaque;

alias GdkTimeCoord = Struct__GdkTimeCoord;

alias GDK_EXTENSION_EVENTS_NONE = 0;
alias GDK_EXTENSION_EVENTS_ALL = 1;
alias GDK_EXTENSION_EVENTS_CURSOR = 2;

alias GdkExtensionMode = Int;

alias GDK_SOURCE_MOUSE = 0;
alias GDK_SOURCE_PEN = 1;
alias GDK_SOURCE_ERASER = 2;
alias GDK_SOURCE_CURSOR = 3;

alias GdkInputSource = Int;

alias GDK_MODE_DISABLED = 0;
alias GDK_MODE_SCREEN = 1;
alias GDK_MODE_WINDOW = 2;

alias GdkInputMode = Int;

alias GDK_AXIS_IGNORE = 0;
alias GDK_AXIS_X = 1;
alias GDK_AXIS_Y = 2;
alias GDK_AXIS_PRESSURE = 3;
alias GDK_AXIS_XTILT = 4;
alias GDK_AXIS_YTILT = 5;
alias GDK_AXIS_WHEEL = 6;
alias GDK_AXIS_LAST = 7;

alias GdkAxisUse = Int;

record Struct__GdkDeviceKey (
    keyval : UInt,
    modifiers : GdkModifierType,
);

record Struct__GdkDeviceAxis (
    use : GdkAxisUse,
    min : Double,
    max : Double,
);

record Struct__GdkDevice (
    parent_instance : GObject,
    name : Pointer[CChar],
    source : GdkInputSource,
    mode : GdkInputMode,
    has_cursor : Int,
    num_axes : Int,
    axes : Pointer[GdkDeviceAxis],
    num_keys : Int,
    keys : Pointer[GdkDeviceKey],
);

record Struct__GdkTimeCoord (
    time : UInt,
    axes : Array[Double,128],
);

external gdk_device_get_type() CULong;

external gdk_devices_list() Pointer[GList];

external gdk_device_get_name(
    device : Pointer[GdkDevice]) Pointer[CChar];

external gdk_device_get_source(
    device : Pointer[GdkDevice]) GdkInputSource;

external gdk_device_get_mode(
    device : Pointer[GdkDevice]) GdkInputMode;

external gdk_device_get_has_cursor(
    device : Pointer[GdkDevice]) Int;

external gdk_device_get_key(
    device : Pointer[GdkDevice],
    index : UInt,
    keyval : Pointer[UInt],
    modifiers : Pointer[GdkModifierType]);

external gdk_device_get_axis_use(
    device : Pointer[GdkDevice],
    index : UInt) GdkAxisUse;

external gdk_device_get_n_axes(
    device : Pointer[GdkDevice]) Int;

external gdk_device_set_source(
    device : Pointer[GdkDevice],
    source : GdkInputSource);

external gdk_device_set_mode(
    device : Pointer[GdkDevice],
    mode : GdkInputMode) Int;

external gdk_device_set_key(
    device : Pointer[GdkDevice],
    index_ : UInt,
    keyval : UInt,
    modifiers : GdkModifierType);

external gdk_device_set_axis_use(
    device : Pointer[GdkDevice],
    index_ : UInt,
    use : GdkAxisUse);

external gdk_device_get_state(
    device : Pointer[GdkDevice],
    window : Pointer[GdkWindow],
    axes : Pointer[Double],
    mask : Pointer[GdkModifierType]);

external gdk_device_get_history(
    device : Pointer[GdkDevice],
    window : Pointer[GdkWindow],
    start : UInt,
    stop : UInt,
    events : Pointer[Pointer[Pointer[GdkTimeCoord]]],
    n_events : Pointer[Int]) Int;

external gdk_device_free_history(
    events : Pointer[Pointer[GdkTimeCoord]],
    n_events : Int);

external gdk_device_get_axis(
    device : Pointer[GdkDevice],
    axes : Pointer[Double],
    use : GdkAxisUse,
    value : Pointer[Double]) Int;

external gdk_input_set_extension_events(
    window : Pointer[GdkWindow],
    mask : Int,
    mode : GdkExtensionMode);

external gdk_device_get_core_pointer() Pointer[GdkDevice];

alias GdkEventAny = Struct__GdkEventAny;

alias GdkEventExpose = Struct__GdkEventExpose;

alias GdkEventNoExpose = Struct__GdkEventNoExpose;

alias GdkEventVisibility = Struct__GdkEventVisibility;

alias GdkEventMotion = Struct__GdkEventMotion;

alias GdkEventButton = Struct__GdkEventButton;

alias GdkEventScroll = Struct__GdkEventScroll;

alias GdkEventKey = Struct__GdkEventKey;

alias GdkEventFocus = Struct__GdkEventFocus;

alias GdkEventCrossing = Struct__GdkEventCrossing;

alias GdkEventConfigure = Struct__GdkEventConfigure;

alias GdkEventProperty = Struct__GdkEventProperty;

alias GdkEventSelection = Struct__GdkEventSelection;

alias GdkEventOwnerChange = Struct__GdkEventOwnerChange;

alias GdkEventProximity = Struct__GdkEventProximity;

alias GdkEventClient = Struct__GdkEventClient;

alias GdkEventDND = Struct__GdkEventDND;

alias GdkEventWindowState = Struct__GdkEventWindowState;

alias GdkEventSetting = Struct__GdkEventSetting;

alias GdkEventGrabBroken = Struct__GdkEventGrabBroken;

alias GdkEvent = AUnionType;

alias GdkEventFunc = CCodePointer[(OpaquePointer,RawPointer),()];

alias GdkXEvent = Void;

alias GDK_FILTER_CONTINUE = 0;
alias GDK_FILTER_TRANSLATE = 1;
alias GDK_FILTER_REMOVE = 2;

alias GdkFilterReturn = Int;

alias GdkFilterFunc = CCodePointer[(RawPointer,OpaquePointer,RawPointer),(Int)];

alias GDK_NOTHING = 4294967295;
alias GDK_DELETE = 0;
alias GDK_DESTROY = 1;
alias GDK_EXPOSE = 2;
alias GDK_MOTION_NOTIFY = 3;
alias GDK_BUTTON_PRESS = 4;
alias GDK_2BUTTON_PRESS = 5;
alias GDK_3BUTTON_PRESS = 6;
alias GDK_BUTTON_RELEASE = 7;
alias GDK_KEY_PRESS = 8;
alias GDK_KEY_RELEASE = 9;
alias GDK_ENTER_NOTIFY = 10;
alias GDK_LEAVE_NOTIFY = 11;
alias GDK_FOCUS_CHANGE = 12;
alias GDK_CONFIGURE = 13;
alias GDK_MAP = 14;
alias GDK_UNMAP = 15;
alias GDK_PROPERTY_NOTIFY = 16;
alias GDK_SELECTION_CLEAR = 17;
alias GDK_SELECTION_REQUEST = 18;
alias GDK_SELECTION_NOTIFY = 19;
alias GDK_PROXIMITY_IN = 20;
alias GDK_PROXIMITY_OUT = 21;
alias GDK_DRAG_ENTER = 22;
alias GDK_DRAG_LEAVE = 23;
alias GDK_DRAG_MOTION = 24;
alias GDK_DRAG_STATUS = 25;
alias GDK_DROP_START = 26;
alias GDK_DROP_FINISHED = 27;
alias GDK_CLIENT_EVENT = 28;
alias GDK_VISIBILITY_NOTIFY = 29;
alias GDK_NO_EXPOSE = 30;
alias GDK_SCROLL = 31;
alias GDK_WINDOW_STATE = 32;
alias GDK_SETTING = 33;
alias GDK_OWNER_CHANGE = 34;
alias GDK_GRAB_BROKEN = 35;
alias GDK_DAMAGE = 36;
alias GDK_EVENT_LAST = 37;

alias GdkEventType = Int;

alias GDK_EXPOSURE_MASK = 2;
alias GDK_POINTER_MOTION_MASK = 4;
alias GDK_POINTER_MOTION_HINT_MASK = 8;
alias GDK_BUTTON_MOTION_MASK = 16;
alias GDK_BUTTON1_MOTION_MASK = 32;
alias GDK_BUTTON2_MOTION_MASK = 64;
alias GDK_BUTTON3_MOTION_MASK = 128;
alias GDK_BUTTON_PRESS_MASK = 256;
alias GDK_BUTTON_RELEASE_MASK = 512;
alias GDK_KEY_PRESS_MASK = 1024;
alias GDK_KEY_RELEASE_MASK = 2048;
alias GDK_ENTER_NOTIFY_MASK = 4096;
alias GDK_LEAVE_NOTIFY_MASK = 8192;
alias GDK_FOCUS_CHANGE_MASK = 16384;
alias GDK_STRUCTURE_MASK = 32768;
alias GDK_PROPERTY_CHANGE_MASK = 65536;
alias GDK_VISIBILITY_NOTIFY_MASK = 131072;
alias GDK_PROXIMITY_IN_MASK = 262144;
alias GDK_PROXIMITY_OUT_MASK = 524288;
alias GDK_SUBSTRUCTURE_MASK = 1048576;
alias GDK_SCROLL_MASK = 2097152;
alias GDK_ALL_EVENTS_MASK = 4194302;

alias GdkEventMask = Int;

alias GDK_VISIBILITY_UNOBSCURED = 0;
alias GDK_VISIBILITY_PARTIAL = 1;
alias GDK_VISIBILITY_FULLY_OBSCURED = 2;

alias GdkVisibilityState = Int;

alias GDK_SCROLL_UP = 0;
alias GDK_SCROLL_DOWN = 1;
alias GDK_SCROLL_LEFT = 2;
alias GDK_SCROLL_RIGHT = 3;

alias GdkScrollDirection = Int;

alias GDK_NOTIFY_ANCESTOR = 0;
alias GDK_NOTIFY_VIRTUAL = 1;
alias GDK_NOTIFY_INFERIOR = 2;
alias GDK_NOTIFY_NONLINEAR = 3;
alias GDK_NOTIFY_NONLINEAR_VIRTUAL = 4;
alias GDK_NOTIFY_UNKNOWN = 5;

alias GdkNotifyType = Int;

alias GDK_CROSSING_NORMAL = 0;
alias GDK_CROSSING_GRAB = 1;
alias GDK_CROSSING_UNGRAB = 2;
alias GDK_CROSSING_GTK_GRAB = 3;
alias GDK_CROSSING_GTK_UNGRAB = 4;
alias GDK_CROSSING_STATE_CHANGED = 5;

alias GdkCrossingMode = Int;

alias GDK_PROPERTY_NEW_VALUE = 0;
alias GDK_PROPERTY_DELETE = 1;

alias GdkPropertyState = Int;

alias GDK_WINDOW_STATE_WITHDRAWN = 1;
alias GDK_WINDOW_STATE_ICONIFIED = 2;
alias GDK_WINDOW_STATE_MAXIMIZED = 4;
alias GDK_WINDOW_STATE_STICKY = 8;
alias GDK_WINDOW_STATE_FULLSCREEN = 16;
alias GDK_WINDOW_STATE_ABOVE = 32;
alias GDK_WINDOW_STATE_BELOW = 64;

alias GdkWindowState = Int;

alias GDK_SETTING_ACTION_NEW = 0;
alias GDK_SETTING_ACTION_CHANGED = 1;
alias GDK_SETTING_ACTION_DELETED = 2;

alias GdkSettingAction = Int;

alias GDK_OWNER_CHANGE_NEW_OWNER = 0;
alias GDK_OWNER_CHANGE_DESTROY = 1;
alias GDK_OWNER_CHANGE_CLOSE = 2;

alias GdkOwnerChange = Int;

record Struct__GdkEventAny (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
);

record Struct__GdkEventExpose (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    area : GdkRectangle,
    region : Pointer[GdkRegion],
    count : Int,
);

record Struct__GdkEventNoExpose (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
);

record Struct__GdkEventVisibility (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    state : GdkVisibilityState,
);

record Struct__GdkEventMotion (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    time : UInt,
    x : Double,
    y : Double,
    axes : Pointer[Double],
    state : UInt,
    is_hint : Short,
    device : Pointer[GdkDevice],
    x_root : Double,
    y_root : Double,
);

record Struct__GdkEventButton (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    time : UInt,
    x : Double,
    y : Double,
    axes : Pointer[Double],
    state : UInt,
    button : UInt,
    device : Pointer[GdkDevice],
    x_root : Double,
    y_root : Double,
);

record Struct__GdkEventScroll (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    time : UInt,
    x : Double,
    y : Double,
    state : UInt,
    direction : GdkScrollDirection,
    device : Pointer[GdkDevice],
    x_root : Double,
    y_root : Double,
);

record Struct__GdkEventKey (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    time : UInt,
    state : UInt,
    keyval : UInt,
    length : Int,
    string : Pointer[CChar],
    hardware_keycode : UShort,
    group : CUChar,
    is_modifier : UInt,
);

record Struct__GdkEventCrossing (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    subwindow : Pointer[GdkWindow],
    time : UInt,
    x : Double,
    y : Double,
    x_root : Double,
    y_root : Double,
    mode : GdkCrossingMode,
    detail : GdkNotifyType,
    focus : Int,
    state : UInt,
);

record Struct__GdkEventFocus (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    in_ : Short,
);

record Struct__GdkEventConfigure (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
);

record Struct__GdkEventProperty (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    atom : GdkAtom,
    time : UInt,
    state : UInt,
);

record Struct__GdkEventSelection (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    selection : GdkAtom,
    target : GdkAtom,
    property : GdkAtom,
    time : UInt,
    requestor : UInt,
);

record Struct__GdkEventOwnerChange (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    owner : UInt,
    reason : GdkOwnerChange,
    selection : GdkAtom,
    time : UInt,
    selection_time : UInt,
);

record Struct__GdkEventProximity (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    time : UInt,
    device : Pointer[GdkDevice],
);

record Struct__GdkEventClient (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    message_type : GdkAtom,
    data_format : UShort,
    data : AUnionType,
);

record Struct__GdkEventSetting (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    action : GdkSettingAction,
    name : Pointer[CChar],
);

record Struct__GdkEventWindowState (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    changed_mask : GdkWindowState,
    new_window_state : GdkWindowState,
);

record Struct__GdkEventGrabBroken (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    keyboard : Int,
    implicit : Int,
    grab_window : Pointer[GdkWindow],
);

record Struct__GdkEventDND (
    type : GdkEventType,
    window : Pointer[GdkWindow],
    send_event : CChar,
    context : Pointer[GdkDragContext],
    time : UInt,
    x_root : Short,
    y_root : Short,
);

external gdk_event_get_type() CULong;

external gdk_events_pending() Int;

external gdk_event_get() Pointer[GdkEvent];

external gdk_event_peek() Pointer[GdkEvent];

external gdk_event_get_graphics_expose(
    window : Pointer[GdkWindow]) Pointer[GdkEvent];

external gdk_event_put(
    event : Pointer[GdkEvent]);

external gdk_event_new(
    type : GdkEventType) Pointer[GdkEvent];

external gdk_event_copy(
    event : Pointer[GdkEvent]) Pointer[GdkEvent];

external gdk_event_free(
    event : Pointer[GdkEvent]);

external gdk_event_get_time(
    event : Pointer[GdkEvent]) UInt;

external gdk_event_get_state(
    event : Pointer[GdkEvent],
    state : Pointer[GdkModifierType]) Int;

external gdk_event_get_coords(
    event : Pointer[GdkEvent],
    x_win : Pointer[Double],
    y_win : Pointer[Double]) Int;

external gdk_event_get_root_coords(
    event : Pointer[GdkEvent],
    x_root : Pointer[Double],
    y_root : Pointer[Double]) Int;

external gdk_event_get_axis(
    event : Pointer[GdkEvent],
    axis_use : GdkAxisUse,
    value : Pointer[Double]) Int;

external gdk_event_request_motions(
    event : Pointer[GdkEventMotion]);

external gdk_event_handler_set(
    func : GdkEventFunc,
    data : gpointer,
    notify : GDestroyNotify);

external gdk_event_set_screen(
    event : Pointer[GdkEvent],
    screen : Pointer[GdkScreen]);

external gdk_event_get_screen(
    event : Pointer[GdkEvent]) Pointer[GdkScreen];

external gdk_set_show_events(
    show_events : Int);

external gdk_get_show_events() Int;

external gdk_add_client_message_filter(
    message_type : GdkAtom,
    func : GdkFilterFunc,
    data : gpointer);

external gdk_setting_get(
    name : Pointer[CChar],
    value : Pointer[GValue]) Int;

alias GdkDisplayClass = Struct__GdkDisplayClass;

alias GdkDisplayPointerHooks = Struct__GdkDisplayPointerHooks;

record UnnamedStruct13 (
    window : Pointer[GdkWindow],
    native_window : Pointer[GdkWindow],
    serial : CULong,
    owner_events : Int,
    time : UInt,
);

alias GdkKeyboardGrabInfo = UnnamedStruct13;

record UnnamedStruct14 (
    toplevel_under_pointer : Pointer[GdkWindow],
    window_under_pointer : Pointer[GdkWindow],
    toplevel_x : Double,
    toplevel_y : Double,
    state : UInt,
    button : UInt,
    motion_hint_serial : CULong,
);

alias GdkPointerWindowInfo = UnnamedStruct14;

record Struct__GdkDisplay (
    parent_instance : GObject,
    queued_events : Pointer[GList],
    queued_tail : Pointer[GList],
    button_click_time : Array[UInt,2],
    button_window : Array[Pointer[GdkWindow],2],
    button_number : Array[Int,2],
    double_click_time : UInt,
    core_pointer : Pointer[GdkDevice],
    pointer_hooks : Pointer[GdkDisplayPointerHooks],
    closed : UInt,
    ignore_core_events : UInt,
    double_click_distance : UInt,
    button_x : Array[Int,2],
    button_y : Array[Int,2],
    pointer_grabs : Pointer[GList],
    keyboard_grab : GdkKeyboardGrabInfo,
    pointer_info : GdkPointerWindowInfo,
    last_event_time : UInt,
);

record Struct__GdkDisplayClass (
    parent_class : GObjectClass,
    get_display_name : CCodePointer[(Pointer[Struct__GdkDisplay]),(Pointer[CChar])],
    get_n_screens : CCodePointer[(Pointer[Struct__GdkDisplay]),(Int)],
    get_screen : CCodePointer[(Pointer[Struct__GdkDisplay],Int),(Pointer[Struct__GdkScreen])],
    get_default_screen : CCodePointer[(Pointer[Struct__GdkDisplay]),(Pointer[Struct__GdkScreen])],
    closed : CCodePointer[(Pointer[Struct__GdkDisplay],Int),()],
);

record Struct__GdkDisplayPointerHooks (
    get_pointer : CCodePointer[(Pointer[Struct__GdkDisplay],Pointer[Pointer[Struct__GdkScreen]],Pointer[Int],Pointer[Int],Pointer[Int]),()],
    window_get_pointer : CCodePointer[(Pointer[Struct__GdkDisplay],Pointer[Struct__GdkDrawable],Pointer[Int],Pointer[Int],Pointer[Int]),(Pointer[Struct__GdkDrawable])],
    window_at_pointer : CCodePointer[(Pointer[Struct__GdkDisplay],Pointer[Int],Pointer[Int]),(Pointer[Struct__GdkDrawable])],
);

external gdk_display_get_type() CULong;

external gdk_display_open(
    display_name : Pointer[CChar]) Pointer[GdkDisplay];

external gdk_display_get_name(
    display : Pointer[GdkDisplay]) Pointer[CChar];

external gdk_display_get_n_screens(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_get_screen(
    display : Pointer[GdkDisplay],
    screen_num : Int) Pointer[GdkScreen];

external gdk_display_get_default_screen(
    display : Pointer[GdkDisplay]) Pointer[GdkScreen];

external gdk_display_pointer_ungrab(
    display : Pointer[GdkDisplay],
    time_ : UInt);

external gdk_display_keyboard_ungrab(
    display : Pointer[GdkDisplay],
    time_ : UInt);

external gdk_display_pointer_is_grabbed(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_beep(
    display : Pointer[GdkDisplay]);

external gdk_display_sync(
    display : Pointer[GdkDisplay]);

external gdk_display_flush(
    display : Pointer[GdkDisplay]);

external gdk_display_close(
    display : Pointer[GdkDisplay]);

external gdk_display_is_closed(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_list_devices(
    display : Pointer[GdkDisplay]) Pointer[GList];

external gdk_display_get_event(
    display : Pointer[GdkDisplay]) Pointer[GdkEvent];

external gdk_display_peek_event(
    display : Pointer[GdkDisplay]) Pointer[GdkEvent];

external gdk_display_put_event(
    display : Pointer[GdkDisplay],
    event : Pointer[GdkEvent]);

external gdk_display_add_client_message_filter(
    display : Pointer[GdkDisplay],
    message_type : GdkAtom,
    func : GdkFilterFunc,
    data : gpointer);

external gdk_display_set_double_click_time(
    display : Pointer[GdkDisplay],
    msec : UInt);

external gdk_display_set_double_click_distance(
    display : Pointer[GdkDisplay],
    distance : UInt);

external gdk_display_get_default() Pointer[GdkDisplay];

external gdk_display_get_core_pointer(
    display : Pointer[GdkDisplay]) Pointer[GdkDevice];

external gdk_display_get_pointer(
    display : Pointer[GdkDisplay],
    screen : Pointer[Pointer[GdkScreen]],
    x : Pointer[Int],
    y : Pointer[Int],
    mask : Pointer[GdkModifierType]);

external gdk_display_get_window_at_pointer(
    display : Pointer[GdkDisplay],
    win_x : Pointer[Int],
    win_y : Pointer[Int]) Pointer[GdkWindow];

external gdk_display_warp_pointer(
    display : Pointer[GdkDisplay],
    screen : Pointer[GdkScreen],
    x : Int,
    y : Int);

external gdk_display_set_pointer_hooks(
    display : Pointer[GdkDisplay],
    new_hooks : Pointer[GdkDisplayPointerHooks]) Pointer[GdkDisplayPointerHooks];

external gdk_display_open_default_libgtk_only() Pointer[GdkDisplay];

external gdk_display_supports_cursor_alpha(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_supports_cursor_color(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_get_default_cursor_size(
    display : Pointer[GdkDisplay]) UInt;

external gdk_display_get_maximal_cursor_size(
    display : Pointer[GdkDisplay],
    width : Pointer[UInt],
    height : Pointer[UInt]);

external gdk_display_get_default_group(
    display : Pointer[GdkDisplay]) Pointer[GdkWindow];

external gdk_display_supports_selection_notification(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_request_selection_notification(
    display : Pointer[GdkDisplay],
    selection : GdkAtom) Int;

external gdk_display_supports_clipboard_persistence(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_store_clipboard(
    display : Pointer[GdkDisplay],
    clipboard_window : Pointer[GdkWindow],
    time_ : UInt,
    targets : Pointer[GdkAtom],
    n_targets : Int);

external gdk_display_supports_shapes(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_supports_input_shapes(
    display : Pointer[GdkDisplay]) Int;

external gdk_display_supports_composite(
    display : Pointer[GdkDisplay]) Int;

alias GdkScreenClass = Struct__GdkScreenClass;

record Struct__GdkScreen (
    parent_instance : GObject,
    closed : UInt,
    normal_gcs : Array[Pointer[GdkGC],32],
    exposure_gcs : Array[Pointer[GdkGC],32],
    subwindow_gcs : Array[Pointer[GdkGC],32],
    font_options : Pointer[cairo_font_options_t],
    resolution : Double,
);

record Struct__GdkScreenClass (
    parent_class : GObjectClass,
    size_changed : CCodePointer[(Pointer[Struct__GdkScreen]),()],
    composited_changed : CCodePointer[(Pointer[Struct__GdkScreen]),()],
    monitors_changed : CCodePointer[(Pointer[Struct__GdkScreen]),()],
);

external gdk_screen_get_type() CULong;

external gdk_screen_get_default_colormap(
    screen : Pointer[GdkScreen]) Pointer[GdkColormap];

external gdk_screen_set_default_colormap(
    screen : Pointer[GdkScreen],
    colormap : Pointer[GdkColormap]);

external gdk_screen_get_system_colormap(
    screen : Pointer[GdkScreen]) Pointer[GdkColormap];

external gdk_screen_get_system_visual(
    screen : Pointer[GdkScreen]) Pointer[GdkVisual];

external gdk_screen_get_rgb_colormap(
    screen : Pointer[GdkScreen]) Pointer[GdkColormap];

external gdk_screen_get_rgb_visual(
    screen : Pointer[GdkScreen]) Pointer[GdkVisual];

external gdk_screen_get_rgba_colormap(
    screen : Pointer[GdkScreen]) Pointer[GdkColormap];

external gdk_screen_get_rgba_visual(
    screen : Pointer[GdkScreen]) Pointer[GdkVisual];

external gdk_screen_is_composited(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_root_window(
    screen : Pointer[GdkScreen]) Pointer[GdkWindow];

external gdk_screen_get_display(
    screen : Pointer[GdkScreen]) Pointer[GdkDisplay];

external gdk_screen_get_number(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_width(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_height(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_width_mm(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_height_mm(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_list_visuals(
    screen : Pointer[GdkScreen]) Pointer[GList];

external gdk_screen_get_toplevel_windows(
    screen : Pointer[GdkScreen]) Pointer[GList];

external gdk_screen_make_display_name(
    screen : Pointer[GdkScreen]) Pointer[CChar];

external gdk_screen_get_n_monitors(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_primary_monitor(
    screen : Pointer[GdkScreen]) Int;

external gdk_screen_get_monitor_geometry(
    screen : Pointer[GdkScreen],
    monitor_num : Int,
    dest : Pointer[GdkRectangle]);

external gdk_screen_get_monitor_at_point(
    screen : Pointer[GdkScreen],
    x : Int,
    y : Int) Int;

external gdk_screen_get_monitor_at_window(
    screen : Pointer[GdkScreen],
    window : Pointer[GdkWindow]) Int;

external gdk_screen_get_monitor_width_mm(
    screen : Pointer[GdkScreen],
    monitor_num : Int) Int;

external gdk_screen_get_monitor_height_mm(
    screen : Pointer[GdkScreen],
    monitor_num : Int) Int;

external gdk_screen_get_monitor_plug_name(
    screen : Pointer[GdkScreen],
    monitor_num : Int) Pointer[CChar];

external gdk_screen_broadcast_client_message(
    screen : Pointer[GdkScreen],
    event : Pointer[GdkEvent]);

external gdk_screen_get_default() Pointer[GdkScreen];

external gdk_screen_get_setting(
    screen : Pointer[GdkScreen],
    name : Pointer[CChar],
    value : Pointer[GValue]) Int;

external gdk_screen_set_font_options(
    screen : Pointer[GdkScreen],
    options : Pointer[cairo_font_options_t]);

external gdk_screen_get_font_options(
    screen : Pointer[GdkScreen]) Pointer[cairo_font_options_t];

external gdk_screen_set_resolution(
    screen : Pointer[GdkScreen],
    dpi : Double);

external gdk_screen_get_resolution(
    screen : Pointer[GdkScreen]) Double;

external gdk_screen_get_active_window(
    screen : Pointer[GdkScreen]) Pointer[GdkWindow];

external gdk_screen_get_window_stack(
    screen : Pointer[GdkScreen]) Pointer[GList];

alias GdkAppLaunchContext = Struct_GdkAppLaunchContext;

alias GdkAppLaunchContextClass = Struct_GdkAppLaunchContextClass;

alias GdkAppLaunchContextPrivate = Opaque;

record Struct_GdkAppLaunchContext (
    parent_instance : GAppLaunchContext,
    priv : Pointer[GdkAppLaunchContextPrivate],
);

record Struct_GdkAppLaunchContextClass (
    parent_class : GAppLaunchContextClass,
);

external gdk_app_launch_context_get_type() CULong;

external gdk_app_launch_context_new() Pointer[GdkAppLaunchContext];

external gdk_app_launch_context_set_display(
    context : Pointer[GdkAppLaunchContext],
    display : Pointer[GdkDisplay]);

external gdk_app_launch_context_set_screen(
    context : Pointer[GdkAppLaunchContext],
    screen : Pointer[GdkScreen]);

external gdk_app_launch_context_set_desktop(
    context : Pointer[GdkAppLaunchContext],
    desktop : Int);

external gdk_app_launch_context_set_timestamp(
    context : Pointer[GdkAppLaunchContext],
    timestamp : UInt);

external gdk_app_launch_context_set_icon(
    context : Pointer[GdkAppLaunchContext],
    icon : Pointer[GIcon]);

external gdk_app_launch_context_set_icon_name(
    context : Pointer[GdkAppLaunchContext],
    icon_name : Pointer[CChar]);

alias GdkRgbCmap = Struct__GdkRgbCmap;

alias GDK_RGB_DITHER_NONE = 0;
alias GDK_RGB_DITHER_NORMAL = 1;
alias GDK_RGB_DITHER_MAX = 2;

alias GdkRgbDither = Int;

record Struct__GdkRgbCmap (
    colors : Array[UInt,256],
    n_colors : Int,
    info_list : Pointer[GSList],
);

external gdk_rgb_init();

external gdk_rgb_xpixel_from_rgb(
    rgb : UInt) CULong;

external gdk_rgb_gc_set_foreground(
    gc : Pointer[GdkGC],
    rgb : UInt);

external gdk_rgb_gc_set_background(
    gc : Pointer[GdkGC],
    rgb : UInt);

external gdk_rgb_find_color(
    colormap : Pointer[GdkColormap],
    color : Pointer[GdkColor]);

external gdk_draw_rgb_image(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    dith : GdkRgbDither,
    rgb_buf : Pointer[CUChar],
    rowstride : Int);

external gdk_draw_rgb_image_dithalign(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    dith : GdkRgbDither,
    rgb_buf : Pointer[CUChar],
    rowstride : Int,
    xdith : Int,
    ydith : Int);

external gdk_draw_rgb_32_image(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    dith : GdkRgbDither,
    buf : Pointer[CUChar],
    rowstride : Int);

external gdk_draw_rgb_32_image_dithalign(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    dith : GdkRgbDither,
    buf : Pointer[CUChar],
    rowstride : Int,
    xdith : Int,
    ydith : Int);

external gdk_draw_gray_image(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    dith : GdkRgbDither,
    buf : Pointer[CUChar],
    rowstride : Int);

external gdk_draw_indexed_image(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    dith : GdkRgbDither,
    buf : Pointer[CUChar],
    rowstride : Int,
    cmap : Pointer[GdkRgbCmap]);

external gdk_rgb_cmap_new(
    colors : Pointer[UInt],
    n_colors : Int) Pointer[GdkRgbCmap];

external gdk_rgb_cmap_free(
    cmap : Pointer[GdkRgbCmap]);

external gdk_rgb_set_verbose(
    verbose : Int);

external gdk_rgb_set_install(
    install : Int);

external gdk_rgb_set_min_colors(
    min_colors : Int);

external gdk_rgb_get_colormap() Pointer[GdkColormap];

external gdk_rgb_get_visual() Pointer[GdkVisual];

external gdk_rgb_ditherable() Int;

external gdk_rgb_colormap_ditherable(
    cmap : Pointer[GdkColormap]) Int;

external gdk_pixbuf_render_threshold_alpha(
    pixbuf : Pointer[GdkPixbuf],
    bitmap : Pointer[GdkBitmap],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int,
    alpha_threshold : Int);

external gdk_pixbuf_render_to_drawable(
    pixbuf : Pointer[GdkPixbuf],
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int,
    dither : GdkRgbDither,
    x_dither : Int,
    y_dither : Int);

external gdk_pixbuf_render_to_drawable_alpha(
    pixbuf : Pointer[GdkPixbuf],
    drawable : Pointer[GdkDrawable],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int,
    alpha_mode : GdkPixbufAlphaMode,
    alpha_threshold : Int,
    dither : GdkRgbDither,
    x_dither : Int,
    y_dither : Int);

external gdk_pixbuf_render_pixmap_and_mask_for_colormap(
    pixbuf : Pointer[GdkPixbuf],
    colormap : Pointer[GdkColormap],
    pixmap_return : Pointer[Pointer[GdkPixmap]],
    mask_return : Pointer[Pointer[GdkBitmap]],
    alpha_threshold : Int);

external gdk_pixbuf_render_pixmap_and_mask(
    pixbuf : Pointer[GdkPixbuf],
    pixmap_return : Pointer[Pointer[GdkPixmap]],
    mask_return : Pointer[Pointer[GdkBitmap]],
    alpha_threshold : Int);

external gdk_pixbuf_get_from_drawable(
    dest : Pointer[GdkPixbuf],
    src : Pointer[GdkDrawable],
    cmap : Pointer[GdkColormap],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int) Pointer[GdkPixbuf];

external gdk_pixbuf_get_from_image(
    dest : Pointer[GdkPixbuf],
    src : Pointer[GdkImage],
    cmap : Pointer[GdkColormap],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int) Pointer[GdkPixbuf];

external gdk_cairo_create(
    drawable : Pointer[GdkDrawable]) Pointer[cairo_t];

external gdk_cairo_reset_clip(
    cr : Pointer[cairo_t],
    drawable : Pointer[GdkDrawable]);

external gdk_cairo_set_source_color(
    cr : Pointer[cairo_t],
    color : Pointer[GdkColor]);

external gdk_cairo_set_source_pixbuf(
    cr : Pointer[cairo_t],
    pixbuf : Pointer[GdkPixbuf],
    pixbuf_x : Double,
    pixbuf_y : Double);

external gdk_cairo_set_source_pixmap(
    cr : Pointer[cairo_t],
    pixmap : Pointer[GdkPixmap],
    pixmap_x : Double,
    pixmap_y : Double);

external gdk_cairo_rectangle(
    cr : Pointer[cairo_t],
    rectangle : Pointer[GdkRectangle]);

external gdk_cairo_region(
    cr : Pointer[cairo_t],
    region : Pointer[GdkRegion]);

alias GDK_X_CURSOR = 0;
alias GDK_ARROW = 2;
alias GDK_BASED_ARROW_DOWN = 4;
alias GDK_BASED_ARROW_UP = 6;
alias GDK_BOAT = 8;
alias GDK_BOGOSITY = 10;
alias GDK_BOTTOM_LEFT_CORNER = 12;
alias GDK_BOTTOM_RIGHT_CORNER = 14;
alias GDK_BOTTOM_SIDE = 16;
alias GDK_BOTTOM_TEE = 18;
alias GDK_BOX_SPIRAL = 20;
alias GDK_CENTER_PTR = 22;
alias GDK_CIRCLE = 24;
alias GDK_CLOCK = 26;
alias GDK_COFFEE_MUG = 28;
alias GDK_CROSS = 30;
alias GDK_CROSS_REVERSE = 32;
alias GDK_CROSSHAIR = 34;
alias GDK_DIAMOND_CROSS = 36;
alias GDK_DOT = 38;
alias GDK_DOTBOX = 40;
alias GDK_DOUBLE_ARROW = 42;
alias GDK_DRAFT_LARGE = 44;
alias GDK_DRAFT_SMALL = 46;
alias GDK_DRAPED_BOX = 48;
alias GDK_EXCHANGE = 50;
alias GDK_FLEUR = 52;
alias GDK_GOBBLER = 54;
alias GDK_GUMBY = 56;
alias GDK_HAND1 = 58;
alias GDK_HAND2 = 60;
alias GDK_HEART = 62;
alias GDK_ICON = 64;
alias GDK_IRON_CROSS = 66;
alias GDK_LEFT_PTR = 68;
alias GDK_LEFT_SIDE = 70;
alias GDK_LEFT_TEE = 72;
alias GDK_LEFTBUTTON = 74;
alias GDK_LL_ANGLE = 76;
alias GDK_LR_ANGLE = 78;
alias GDK_MAN = 80;
alias GDK_MIDDLEBUTTON = 82;
alias GDK_MOUSE = 84;
alias GDK_PENCIL = 86;
alias GDK_PIRATE = 88;
alias GDK_PLUS = 90;
alias GDK_QUESTION_ARROW = 92;
alias GDK_RIGHT_PTR = 94;
alias GDK_RIGHT_SIDE = 96;
alias GDK_RIGHT_TEE = 98;
alias GDK_RIGHTBUTTON = 100;
alias GDK_RTL_LOGO = 102;
alias GDK_SAILBOAT = 104;
alias GDK_SB_DOWN_ARROW = 106;
alias GDK_SB_H_DOUBLE_ARROW = 108;
alias GDK_SB_LEFT_ARROW = 110;
alias GDK_SB_RIGHT_ARROW = 112;
alias GDK_SB_UP_ARROW = 114;
alias GDK_SB_V_DOUBLE_ARROW = 116;
alias GDK_SHUTTLE = 118;
alias GDK_SIZING = 120;
alias GDK_SPIDER = 122;
alias GDK_SPRAYCAN = 124;
alias GDK_STAR = 126;
alias GDK_TARGET = 128;
alias GDK_TCROSS = 130;
alias GDK_TOP_LEFT_ARROW = 132;
alias GDK_TOP_LEFT_CORNER = 134;
alias GDK_TOP_RIGHT_CORNER = 136;
alias GDK_TOP_SIDE = 138;
alias GDK_TOP_TEE = 140;
alias GDK_TREK = 142;
alias GDK_UL_ANGLE = 144;
alias GDK_UMBRELLA = 146;
alias GDK_UR_ANGLE = 148;
alias GDK_WATCH = 150;
alias GDK_XTERM = 152;
alias GDK_LAST_CURSOR = 153;
alias GDK_BLANK_CURSOR = 4294967294;
alias GDK_CURSOR_IS_PIXMAP = 4294967295;

alias GdkCursorType = Int;

record Struct__GdkCursor (
    type : GdkCursorType,
    ref_count : UInt,
);

external gdk_cursor_get_type() CULong;

external gdk_cursor_new_for_display(
    display : Pointer[GdkDisplay],
    cursor_type : GdkCursorType) Pointer[GdkCursor];

external gdk_cursor_new(
    cursor_type : GdkCursorType) Pointer[GdkCursor];

external gdk_cursor_new_from_pixmap(
    source : Pointer[GdkPixmap],
    mask : Pointer[GdkPixmap],
    fg : Pointer[GdkColor],
    bg : Pointer[GdkColor],
    x : Int,
    y : Int) Pointer[GdkCursor];

external gdk_cursor_new_from_pixbuf(
    display : Pointer[GdkDisplay],
    pixbuf : Pointer[GdkPixbuf],
    x : Int,
    y : Int) Pointer[GdkCursor];

external gdk_cursor_get_display(
    cursor : Pointer[GdkCursor]) Pointer[GdkDisplay];

external gdk_cursor_ref(
    cursor : Pointer[GdkCursor]) Pointer[GdkCursor];

external gdk_cursor_unref(
    cursor : Pointer[GdkCursor]);

external gdk_cursor_new_from_name(
    display : Pointer[GdkDisplay],
    name : Pointer[CChar]) Pointer[GdkCursor];

external gdk_cursor_get_image(
    cursor : Pointer[GdkCursor]) Pointer[GdkPixbuf];

external gdk_cursor_get_cursor_type(
    cursor : Pointer[GdkCursor]) GdkCursorType;

alias GdkDisplayManager = Opaque;

alias GdkDisplayManagerClass = Struct__GdkDisplayManagerClass;

record Struct__GdkDisplayManagerClass (
    parent_class : GObjectClass,
    display_opened : CCodePointer[(OpaquePointer,Pointer[Struct__GdkDisplay]),()],
);

external gdk_display_manager_get_type() CULong;

external gdk_display_manager_get() Pointer[GdkDisplayManager];

external gdk_display_manager_get_default_display(
    display_manager : Pointer[GdkDisplayManager]) Pointer[GdkDisplay];

external gdk_display_manager_set_default_display(
    display_manager : Pointer[GdkDisplayManager],
    display : Pointer[GdkDisplay]);

external gdk_display_manager_list_displays(
    display_manager : Pointer[GdkDisplayManager]) Pointer[GSList];

alias GdkGCValues = Struct__GdkGCValues;

alias GdkGCClass = Struct__GdkGCClass;

alias GDK_CAP_NOT_LAST = 0;
alias GDK_CAP_BUTT = 1;
alias GDK_CAP_ROUND = 2;
alias GDK_CAP_PROJECTING = 3;

alias GdkCapStyle = Int;

alias GDK_SOLID = 0;
alias GDK_TILED = 1;
alias GDK_STIPPLED = 2;
alias GDK_OPAQUE_STIPPLED = 3;

alias GdkFill = Int;

alias GDK_COPY = 0;
alias GDK_INVERT = 1;
alias GDK_XOR = 2;
alias GDK_CLEAR = 3;
alias GDK_AND = 4;
alias GDK_AND_REVERSE = 5;
alias GDK_AND_INVERT = 6;
alias GDK_NOOP = 7;
alias GDK_OR = 8;
alias GDK_EQUIV = 9;
alias GDK_OR_REVERSE = 10;
alias GDK_COPY_INVERT = 11;
alias GDK_OR_INVERT = 12;
alias GDK_NAND = 13;
alias GDK_NOR = 14;
alias GDK_SET = 15;

alias GdkFunction = Int;

alias GDK_JOIN_MITER = 0;
alias GDK_JOIN_ROUND = 1;
alias GDK_JOIN_BEVEL = 2;

alias GdkJoinStyle = Int;

alias GDK_LINE_SOLID = 0;
alias GDK_LINE_ON_OFF_DASH = 1;
alias GDK_LINE_DOUBLE_DASH = 2;

alias GdkLineStyle = Int;

alias GDK_CLIP_BY_CHILDREN = 0;
alias GDK_INCLUDE_INFERIORS = 1;

alias GdkSubwindowMode = Int;

alias GDK_GC_FOREGROUND = 1;
alias GDK_GC_BACKGROUND = 2;
alias GDK_GC_FONT = 4;
alias GDK_GC_FUNCTION = 8;
alias GDK_GC_FILL = 16;
alias GDK_GC_TILE = 32;
alias GDK_GC_STIPPLE = 64;
alias GDK_GC_CLIP_MASK = 128;
alias GDK_GC_SUBWINDOW = 256;
alias GDK_GC_TS_X_ORIGIN = 512;
alias GDK_GC_TS_Y_ORIGIN = 1024;
alias GDK_GC_CLIP_X_ORIGIN = 2048;
alias GDK_GC_CLIP_Y_ORIGIN = 4096;
alias GDK_GC_EXPOSURES = 8192;
alias GDK_GC_LINE_WIDTH = 16384;
alias GDK_GC_LINE_STYLE = 32768;
alias GDK_GC_CAP_STYLE = 65536;
alias GDK_GC_JOIN_STYLE = 131072;

alias GdkGCValuesMask = Int;

record Struct__GdkGCValues (
    foreground : GdkColor,
    background : GdkColor,
    font : Pointer[GdkFont],
    function : GdkFunction,
    fill : GdkFill,
    tile : Pointer[GdkPixmap],
    stipple : Pointer[GdkPixmap],
    clip_mask : Pointer[GdkPixmap],
    subwindow_mode : GdkSubwindowMode,
    ts_x_origin : Int,
    ts_y_origin : Int,
    clip_x_origin : Int,
    clip_y_origin : Int,
    graphics_exposures : Int,
    line_width : Int,
    line_style : GdkLineStyle,
    cap_style : GdkCapStyle,
    join_style : GdkJoinStyle,
);

record Struct__GdkGC (
    parent_instance : GObject,
    clip_x_origin : Int,
    clip_y_origin : Int,
    ts_x_origin : Int,
    ts_y_origin : Int,
    colormap : Pointer[GdkColormap],
);

record Struct__GdkGCClass (
    parent_class : GObjectClass,
    get_values : CCodePointer[(Pointer[Struct__GdkGC],Pointer[Struct__GdkGCValues]),()],
    set_values : CCodePointer[(Pointer[Struct__GdkGC],Pointer[Struct__GdkGCValues],Int),()],
    set_dashes : CCodePointer[(Pointer[Struct__GdkGC],Int,Pointer[CChar],Int),()],
    _gdk_reserved1 : CCodePointer[(),()],
    _gdk_reserved2 : CCodePointer[(),()],
    _gdk_reserved3 : CCodePointer[(),()],
    _gdk_reserved4 : CCodePointer[(),()],
);

external gdk_gc_get_type() CULong;

external gdk_gc_new(
    drawable : Pointer[GdkDrawable]) Pointer[GdkGC];

external gdk_gc_new_with_values(
    drawable : Pointer[GdkDrawable],
    values : Pointer[GdkGCValues],
    values_mask : GdkGCValuesMask) Pointer[GdkGC];

external gdk_gc_ref(
    gc : Pointer[GdkGC]) Pointer[GdkGC];

external gdk_gc_unref(
    gc : Pointer[GdkGC]);

external gdk_gc_get_values(
    gc : Pointer[GdkGC],
    values : Pointer[GdkGCValues]);

external gdk_gc_set_values(
    gc : Pointer[GdkGC],
    values : Pointer[GdkGCValues],
    values_mask : GdkGCValuesMask);

external gdk_gc_set_foreground(
    gc : Pointer[GdkGC],
    color : Pointer[GdkColor]);

external gdk_gc_set_background(
    gc : Pointer[GdkGC],
    color : Pointer[GdkColor]);

external gdk_gc_set_font(
    gc : Pointer[GdkGC],
    font : Pointer[GdkFont]);

external gdk_gc_set_function(
    gc : Pointer[GdkGC],
    function : GdkFunction);

external gdk_gc_set_fill(
    gc : Pointer[GdkGC],
    fill : GdkFill);

external gdk_gc_set_tile(
    gc : Pointer[GdkGC],
    tile : Pointer[GdkPixmap]);

external gdk_gc_set_stipple(
    gc : Pointer[GdkGC],
    stipple : Pointer[GdkPixmap]);

external gdk_gc_set_ts_origin(
    gc : Pointer[GdkGC],
    x : Int,
    y : Int);

external gdk_gc_set_clip_origin(
    gc : Pointer[GdkGC],
    x : Int,
    y : Int);

external gdk_gc_set_clip_mask(
    gc : Pointer[GdkGC],
    mask : Pointer[GdkBitmap]);

external gdk_gc_set_clip_rectangle(
    gc : Pointer[GdkGC],
    rectangle : Pointer[GdkRectangle]);

external gdk_gc_set_clip_region(
    gc : Pointer[GdkGC],
    region : Pointer[GdkRegion]);

external gdk_gc_set_subwindow(
    gc : Pointer[GdkGC],
    mode : GdkSubwindowMode);

external gdk_gc_set_exposures(
    gc : Pointer[GdkGC],
    exposures : Int);

external gdk_gc_set_line_attributes(
    gc : Pointer[GdkGC],
    line_width : Int,
    line_style : GdkLineStyle,
    cap_style : GdkCapStyle,
    join_style : GdkJoinStyle);

external gdk_gc_set_dashes(
    gc : Pointer[GdkGC],
    dash_offset : Int,
    dash_list : Pointer[CChar],
    n : Int);

external gdk_gc_offset(
    gc : Pointer[GdkGC],
    x_offset : Int,
    y_offset : Int);

external gdk_gc_copy(
    dst_gc : Pointer[GdkGC],
    src_gc : Pointer[GdkGC]);

external gdk_gc_set_colormap(
    gc : Pointer[GdkGC],
    colormap : Pointer[GdkColormap]);

external gdk_gc_get_colormap(
    gc : Pointer[GdkGC]) Pointer[GdkColormap];

external gdk_gc_set_rgb_fg_color(
    gc : Pointer[GdkGC],
    color : Pointer[GdkColor]);

external gdk_gc_set_rgb_bg_color(
    gc : Pointer[GdkGC],
    color : Pointer[GdkColor]);

external gdk_gc_get_screen(
    gc : Pointer[GdkGC]) Pointer[GdkScreen];

alias GdkDrawableClass = Struct__GdkDrawableClass;

alias GdkTrapezoid = Struct__GdkTrapezoid;

record Struct__GdkDrawable (
    parent_instance : GObject,
);

record Struct__GdkDrawableClass (
    parent_class : GObjectClass,
    create_gc : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGCValues],Int),(Pointer[Struct__GdkGC])],
    draw_rectangle : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Int,Int,Int,Int,Int),()],
    draw_arc : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Int,Int,Int,Int,Int,Int,Int),()],
    draw_polygon : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Int,Pointer[Struct__GdkPoint],Int),()],
    draw_text : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkFont],Pointer[Struct__GdkGC],Int,Int,Pointer[CChar],Int),()],
    draw_text_wc : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkFont],Pointer[Struct__GdkGC],Int,Int,Pointer[UInt],Int),()],
    draw_drawable : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkDrawable],Int,Int,Int,Int,Int,Int),()],
    draw_points : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkPoint],Int),()],
    draw_segments : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkSegment],Int),()],
    draw_lines : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkPoint],Int),()],
    draw_glyphs : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],OpaquePointer,Int,Int,Pointer[Struct__PangoGlyphString]),()],
    draw_image : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkImage],Int,Int,Int,Int,Int,Int),()],
    get_depth : CCodePointer[(Pointer[Struct__GdkDrawable]),(Int)],
    get_size : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Int],Pointer[Int]),()],
    set_colormap : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkColormap]),()],
    get_colormap : CCodePointer[(Pointer[Struct__GdkDrawable]),(Pointer[Struct__GdkColormap])],
    get_visual : CCodePointer[(Pointer[Struct__GdkDrawable]),(Pointer[Struct__GdkVisual])],
    get_screen : CCodePointer[(Pointer[Struct__GdkDrawable]),(Pointer[Struct__GdkScreen])],
    get_image : CCodePointer[(Pointer[Struct__GdkDrawable],Int,Int,Int,Int),(Pointer[Struct__GdkImage])],
    get_clip_region : CCodePointer[(Pointer[Struct__GdkDrawable]),(OpaquePointer)],
    get_visible_region : CCodePointer[(Pointer[Struct__GdkDrawable]),(OpaquePointer)],
    get_composite_drawable : CCodePointer[(Pointer[Struct__GdkDrawable],Int,Int,Int,Int,Pointer[Int],Pointer[Int]),(Pointer[Struct__GdkDrawable])],
    draw_pixbuf : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],OpaquePointer,Int,Int,Int,Int,Int,Int,Int,Int,Int),()],
    _copy_to_image : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkImage],Int,Int,Int,Int,Int,Int),(Pointer[Struct__GdkImage])],
    draw_glyphs_transformed : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__PangoMatrix],OpaquePointer,Int,Int,Pointer[Struct__PangoGlyphString]),()],
    draw_trapezoids : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkTrapezoid],Int),()],
    ref_cairo_surface : CCodePointer[(Pointer[Struct__GdkDrawable]),(OpaquePointer)],
    get_source_drawable : CCodePointer[(Pointer[Struct__GdkDrawable]),(Pointer[Struct__GdkDrawable])],
    set_cairo_clip : CCodePointer[(Pointer[Struct__GdkDrawable],OpaquePointer),()],
    create_cairo_surface : CCodePointer[(Pointer[Struct__GdkDrawable],Int,Int),(OpaquePointer)],
    draw_drawable_with_src : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Struct__GdkGC],Pointer[Struct__GdkDrawable],Int,Int,Int,Int,Int,Int,Pointer[Struct__GdkDrawable]),()],
    _gdk_reserved7 : CCodePointer[(),()],
    _gdk_reserved9 : CCodePointer[(),()],
    _gdk_reserved10 : CCodePointer[(),()],
    _gdk_reserved11 : CCodePointer[(),()],
    _gdk_reserved12 : CCodePointer[(),()],
    _gdk_reserved13 : CCodePointer[(),()],
    _gdk_reserved14 : CCodePointer[(),()],
    _gdk_reserved15 : CCodePointer[(),()],
);

record Struct__GdkTrapezoid (
    y1 : Double,
    x11 : Double,
    x21 : Double,
    y2 : Double,
    x12 : Double,
    x22 : Double,
);

external gdk_drawable_get_type() CULong;

external gdk_drawable_set_data(
    drawable : Pointer[GdkDrawable],
    key : Pointer[CChar],
    data : gpointer,
    destroy_func : GDestroyNotify);

external gdk_drawable_get_data(
    drawable : Pointer[GdkDrawable],
    key : Pointer[CChar]) gpointer;

external gdk_drawable_get_size(
    drawable : Pointer[GdkDrawable],
    width : Pointer[Int],
    height : Pointer[Int]);

external gdk_drawable_set_colormap(
    drawable : Pointer[GdkDrawable],
    colormap : Pointer[GdkColormap]);

external gdk_drawable_get_colormap(
    drawable : Pointer[GdkDrawable]) Pointer[GdkColormap];

external gdk_drawable_get_visual(
    drawable : Pointer[GdkDrawable]) Pointer[GdkVisual];

external gdk_drawable_get_depth(
    drawable : Pointer[GdkDrawable]) Int;

external gdk_drawable_get_screen(
    drawable : Pointer[GdkDrawable]) Pointer[GdkScreen];

external gdk_drawable_get_display(
    drawable : Pointer[GdkDrawable]) Pointer[GdkDisplay];

external gdk_drawable_ref(
    drawable : Pointer[GdkDrawable]) Pointer[GdkDrawable];

external gdk_drawable_unref(
    drawable : Pointer[GdkDrawable]);

external gdk_draw_point(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int);

external gdk_draw_line(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x1_ : Int,
    y1_ : Int,
    x2_ : Int,
    y2_ : Int);

external gdk_draw_rectangle(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    filled : Int,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gdk_draw_arc(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    filled : Int,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    angle1 : Int,
    angle2 : Int);

external gdk_draw_polygon(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    filled : Int,
    points : Pointer[GdkPoint],
    n_points : Int);

external gdk_draw_string(
    drawable : Pointer[GdkDrawable],
    font : Pointer[GdkFont],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    string : Pointer[CChar]);

external gdk_draw_text(
    drawable : Pointer[GdkDrawable],
    font : Pointer[GdkFont],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    text : Pointer[CChar],
    text_length : Int);

external gdk_draw_text_wc(
    drawable : Pointer[GdkDrawable],
    font : Pointer[GdkFont],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    text : Pointer[UInt],
    text_length : Int);

external gdk_draw_drawable(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    src : Pointer[GdkDrawable],
    xsrc : Int,
    ysrc : Int,
    xdest : Int,
    ydest : Int,
    width : Int,
    height : Int);

external gdk_draw_image(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    image : Pointer[GdkImage],
    xsrc : Int,
    ysrc : Int,
    xdest : Int,
    ydest : Int,
    width : Int,
    height : Int);

external gdk_draw_points(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    points : Pointer[GdkPoint],
    n_points : Int);

external gdk_draw_segments(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    segs : Pointer[GdkSegment],
    n_segs : Int);

external gdk_draw_lines(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    points : Pointer[GdkPoint],
    n_points : Int);

external gdk_draw_pixbuf(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    pixbuf : Pointer[GdkPixbuf],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int,
    dither : GdkRgbDither,
    x_dither : Int,
    y_dither : Int);

external gdk_draw_glyphs(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    font : Pointer[PangoFont],
    x : Int,
    y : Int,
    glyphs : Pointer[PangoGlyphString]);

external gdk_draw_layout_line(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    line : Pointer[PangoLayoutLine]);

external gdk_draw_layout(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    layout : Pointer[PangoLayout]);

external gdk_draw_layout_line_with_colors(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    line : Pointer[PangoLayoutLine],
    foreground : Pointer[GdkColor],
    background : Pointer[GdkColor]);

external gdk_draw_layout_with_colors(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    x : Int,
    y : Int,
    layout : Pointer[PangoLayout],
    foreground : Pointer[GdkColor],
    background : Pointer[GdkColor]);

external gdk_draw_glyphs_transformed(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    matrix : Pointer[PangoMatrix],
    font : Pointer[PangoFont],
    x : Int,
    y : Int,
    glyphs : Pointer[PangoGlyphString]);

external gdk_draw_trapezoids(
    drawable : Pointer[GdkDrawable],
    gc : Pointer[GdkGC],
    trapezoids : Pointer[GdkTrapezoid],
    n_trapezoids : Int);

external gdk_drawable_get_image(
    drawable : Pointer[GdkDrawable],
    x : Int,
    y : Int,
    width : Int,
    height : Int) Pointer[GdkImage];

external gdk_drawable_copy_to_image(
    drawable : Pointer[GdkDrawable],
    image : Pointer[GdkImage],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int) Pointer[GdkImage];

external gdk_drawable_get_clip_region(
    drawable : Pointer[GdkDrawable]) Pointer[GdkRegion];

external gdk_drawable_get_visible_region(
    drawable : Pointer[GdkDrawable]) Pointer[GdkRegion];

external gdk_cursor_type_get_type() CULong;

external gdk_drag_action_get_type() CULong;

external gdk_drag_protocol_get_type() CULong;

external gdk_filter_return_get_type() CULong;

external gdk_event_type_get_type() CULong;

external gdk_event_mask_get_type() CULong;

external gdk_visibility_state_get_type() CULong;

external gdk_scroll_direction_get_type() CULong;

external gdk_notify_type_get_type() CULong;

external gdk_crossing_mode_get_type() CULong;

external gdk_property_state_get_type() CULong;

external gdk_window_state_get_type() CULong;

external gdk_setting_action_get_type() CULong;

external gdk_owner_change_get_type() CULong;

external gdk_font_type_get_type() CULong;

external gdk_cap_style_get_type() CULong;

external gdk_fill_get_type() CULong;

external gdk_function_get_type() CULong;

external gdk_join_style_get_type() CULong;

external gdk_line_style_get_type() CULong;

external gdk_subwindow_mode_get_type() CULong;

external gdk_gc_values_mask_get_type() CULong;

external gdk_image_type_get_type() CULong;

external gdk_extension_mode_get_type() CULong;

external gdk_input_source_get_type() CULong;

external gdk_input_mode_get_type() CULong;

external gdk_axis_use_get_type() CULong;

external gdk_prop_mode_get_type() CULong;

external gdk_fill_rule_get_type() CULong;

external gdk_overlap_type_get_type() CULong;

external gdk_rgb_dither_get_type() CULong;

external gdk_byte_order_get_type() CULong;

external gdk_modifier_type_get_type() CULong;

external gdk_input_condition_get_type() CULong;

external gdk_status_get_type() CULong;

external gdk_grab_status_get_type() CULong;

external gdk_visual_type_get_type() CULong;

external gdk_window_class_get_type() CULong;

external gdk_window_type_get_type() CULong;

external gdk_window_attributes_type_get_type() CULong;

external gdk_window_hints_get_type() CULong;

external gdk_window_type_hint_get_type() CULong;

external gdk_wm_decoration_get_type() CULong;

external gdk_wm_function_get_type() CULong;

external gdk_gravity_get_type() CULong;

external gdk_window_edge_get_type() CULong;

alias GDK_FONT_FONT = 0;
alias GDK_FONT_FONTSET = 1;

alias GdkFontType = Int;

record Struct__GdkFont (
    type : GdkFontType,
    ascent : Int,
    descent : Int,
);

external gdk_font_get_type() CULong;

external gdk_font_ref(
    font : Pointer[GdkFont]) Pointer[GdkFont];

external gdk_font_unref(
    font : Pointer[GdkFont]);

external gdk_font_id(
    font : Pointer[GdkFont]) Int;

external gdk_font_equal(
    fonta : Pointer[GdkFont],
    fontb : Pointer[GdkFont]) Int;

external gdk_font_load_for_display(
    display : Pointer[GdkDisplay],
    font_name : Pointer[CChar]) Pointer[GdkFont];

external gdk_fontset_load_for_display(
    display : Pointer[GdkDisplay],
    fontset_name : Pointer[CChar]) Pointer[GdkFont];

external gdk_font_from_description_for_display(
    display : Pointer[GdkDisplay],
    font_desc : Pointer[PangoFontDescription]) Pointer[GdkFont];

external gdk_font_load(
    font_name : Pointer[CChar]) Pointer[GdkFont];

external gdk_fontset_load(
    fontset_name : Pointer[CChar]) Pointer[GdkFont];

external gdk_font_from_description(
    font_desc : Pointer[PangoFontDescription]) Pointer[GdkFont];

external gdk_string_width(
    font : Pointer[GdkFont],
    string : Pointer[CChar]) Int;

external gdk_text_width(
    font : Pointer[GdkFont],
    text : Pointer[CChar],
    text_length : Int) Int;

external gdk_text_width_wc(
    font : Pointer[GdkFont],
    text : Pointer[UInt],
    text_length : Int) Int;

external gdk_char_width(
    font : Pointer[GdkFont],
    character : CChar) Int;

external gdk_char_width_wc(
    font : Pointer[GdkFont],
    character : UInt) Int;

external gdk_string_measure(
    font : Pointer[GdkFont],
    string : Pointer[CChar]) Int;

external gdk_text_measure(
    font : Pointer[GdkFont],
    text : Pointer[CChar],
    text_length : Int) Int;

external gdk_char_measure(
    font : Pointer[GdkFont],
    character : CChar) Int;

external gdk_string_height(
    font : Pointer[GdkFont],
    string : Pointer[CChar]) Int;

external gdk_text_height(
    font : Pointer[GdkFont],
    text : Pointer[CChar],
    text_length : Int) Int;

external gdk_char_height(
    font : Pointer[GdkFont],
    character : CChar) Int;

external gdk_text_extents(
    font : Pointer[GdkFont],
    text : Pointer[CChar],
    text_length : Int,
    lbearing : Pointer[Int],
    rbearing : Pointer[Int],
    width : Pointer[Int],
    ascent : Pointer[Int],
    descent : Pointer[Int]);

external gdk_text_extents_wc(
    font : Pointer[GdkFont],
    text : Pointer[UInt],
    text_length : Int,
    lbearing : Pointer[Int],
    rbearing : Pointer[Int],
    width : Pointer[Int],
    ascent : Pointer[Int],
    descent : Pointer[Int]);

external gdk_string_extents(
    font : Pointer[GdkFont],
    string : Pointer[CChar],
    lbearing : Pointer[Int],
    rbearing : Pointer[Int],
    width : Pointer[Int],
    ascent : Pointer[Int],
    descent : Pointer[Int]);

external gdk_font_get_display(
    font : Pointer[GdkFont]) Pointer[GdkDisplay];

alias GDK_IMAGE_NORMAL = 0;
alias GDK_IMAGE_SHARED = 1;
alias GDK_IMAGE_FASTEST = 2;

alias GdkImageType = Int;

alias GdkImageClass = Struct__GdkImageClass;

record Struct__GdkImage (
    parent_instance : GObject,
    type : GdkImageType,
    visual : Pointer[GdkVisual],
    byte_order : GdkByteOrder,
    width : Int,
    height : Int,
    depth : UShort,
    bpp : UShort,
    bpl : UShort,
    bits_per_pixel : UShort,
    mem : gpointer,
    colormap : Pointer[GdkColormap],
    windowing_data : gpointer,
);

record Struct__GdkImageClass (
    parent_class : GObjectClass,
);

external gdk_image_get_type() CULong;

external gdk_image_new(
    type : GdkImageType,
    visual : Pointer[GdkVisual],
    width : Int,
    height : Int) Pointer[GdkImage];

external gdk_image_get(
    drawable : Pointer[GdkDrawable],
    x : Int,
    y : Int,
    width : Int,
    height : Int) Pointer[GdkImage];

external gdk_image_ref(
    image : Pointer[GdkImage]) Pointer[GdkImage];

external gdk_image_unref(
    image : Pointer[GdkImage]);

external gdk_image_put_pixel(
    image : Pointer[GdkImage],
    x : Int,
    y : Int,
    pixel : UInt);

external gdk_image_get_pixel(
    image : Pointer[GdkImage],
    x : Int,
    y : Int) UInt;

external gdk_image_set_colormap(
    image : Pointer[GdkImage],
    colormap : Pointer[GdkColormap]);

external gdk_image_get_colormap(
    image : Pointer[GdkImage]) Pointer[GdkColormap];

external gdk_image_get_image_type(
    image : Pointer[GdkImage]) GdkImageType;

external gdk_image_get_visual(
    image : Pointer[GdkImage]) Pointer[GdkVisual];

external gdk_image_get_byte_order(
    image : Pointer[GdkImage]) GdkByteOrder;

external gdk_image_get_width(
    image : Pointer[GdkImage]) Int;

external gdk_image_get_height(
    image : Pointer[GdkImage]) Int;

external gdk_image_get_depth(
    image : Pointer[GdkImage]) UShort;

external gdk_image_get_bytes_per_pixel(
    image : Pointer[GdkImage]) UShort;

external gdk_image_get_bytes_per_line(
    image : Pointer[GdkImage]) UShort;

external gdk_image_get_bits_per_pixel(
    image : Pointer[GdkImage]) UShort;

external gdk_image_get_pixels(
    image : Pointer[GdkImage]) gpointer;

alias GdkKeymapKey = Struct__GdkKeymapKey;

record Struct__GdkKeymapKey (
    keycode : UInt,
    group : Int,
    level : Int,
);

alias GdkKeymap = Struct__GdkKeymap;

alias GdkKeymapClass = Struct__GdkKeymapClass;

record Struct__GdkKeymap (
    parent_instance : GObject,
    display : Pointer[GdkDisplay],
);

record Struct__GdkKeymapClass (
    parent_class : GObjectClass,
    direction_changed : CCodePointer[(Pointer[Struct__GdkKeymap]),()],
    keys_changed : CCodePointer[(Pointer[Struct__GdkKeymap]),()],
    state_changed : CCodePointer[(Pointer[Struct__GdkKeymap]),()],
);

external gdk_keymap_get_type() CULong;

external gdk_keymap_get_default() Pointer[GdkKeymap];

external gdk_keymap_get_for_display(
    display : Pointer[GdkDisplay]) Pointer[GdkKeymap];

external gdk_keymap_lookup_key(
    keymap : Pointer[GdkKeymap],
    key : Pointer[GdkKeymapKey]) UInt;

external gdk_keymap_translate_keyboard_state(
    keymap : Pointer[GdkKeymap],
    hardware_keycode : UInt,
    state : GdkModifierType,
    group : Int,
    keyval : Pointer[UInt],
    effective_group : Pointer[Int],
    level : Pointer[Int],
    consumed_modifiers : Pointer[GdkModifierType]) Int;

external gdk_keymap_get_entries_for_keyval(
    keymap : Pointer[GdkKeymap],
    keyval : UInt,
    keys : Pointer[Pointer[GdkKeymapKey]],
    n_keys : Pointer[Int]) Int;

external gdk_keymap_get_entries_for_keycode(
    keymap : Pointer[GdkKeymap],
    hardware_keycode : UInt,
    keys : Pointer[Pointer[GdkKeymapKey]],
    keyvals : Pointer[Pointer[UInt]],
    n_entries : Pointer[Int]) Int;

external gdk_keymap_get_direction(
    keymap : Pointer[GdkKeymap]) PangoDirection;

external gdk_keymap_have_bidi_layouts(
    keymap : Pointer[GdkKeymap]) Int;

external gdk_keymap_get_caps_lock_state(
    keymap : Pointer[GdkKeymap]) Int;

external gdk_keymap_add_virtual_modifiers(
    keymap : Pointer[GdkKeymap],
    state : Pointer[GdkModifierType]);

external gdk_keymap_map_virtual_modifiers(
    keymap : Pointer[GdkKeymap],
    state : Pointer[GdkModifierType]) Int;

external gdk_keyval_name(
    keyval : UInt) Pointer[CChar];

external gdk_keyval_from_name(
    keyval_name : Pointer[CChar]) UInt;

external gdk_keyval_convert_case(
    symbol : UInt,
    lower : Pointer[UInt],
    upper : Pointer[UInt]);

external gdk_keyval_to_upper(
    keyval : UInt) UInt;

external gdk_keyval_to_lower(
    keyval : UInt) UInt;

external gdk_keyval_is_upper(
    keyval : UInt) Int;

external gdk_keyval_is_lower(
    keyval : UInt) Int;

external gdk_keyval_to_unicode(
    keyval : UInt) UInt;

external gdk_unicode_to_keyval(
    wc : UInt) UInt;

alias GdkPangoRenderer = Struct__GdkPangoRenderer;

alias GdkPangoRendererClass = Struct__GdkPangoRendererClass;

alias GdkPangoRendererPrivate = Opaque;

record Struct__GdkPangoRenderer (
    parent_instance : PangoRenderer,
    priv : Pointer[GdkPangoRendererPrivate],
);

record Struct__GdkPangoRendererClass (
    parent_class : PangoRendererClass,
);

external gdk_pango_renderer_get_type() CULong;

external gdk_pango_renderer_new(
    screen : Pointer[GdkScreen]) Pointer[PangoRenderer];

external gdk_pango_renderer_get_default(
    screen : Pointer[GdkScreen]) Pointer[PangoRenderer];

external gdk_pango_renderer_set_drawable(
    gdk_renderer : Pointer[GdkPangoRenderer],
    drawable : Pointer[GdkDrawable]);

external gdk_pango_renderer_set_gc(
    gdk_renderer : Pointer[GdkPangoRenderer],
    gc : Pointer[GdkGC]);

external gdk_pango_renderer_set_stipple(
    gdk_renderer : Pointer[GdkPangoRenderer],
    part : PangoRenderPart,
    stipple : Pointer[GdkBitmap]);

external gdk_pango_renderer_set_override_color(
    gdk_renderer : Pointer[GdkPangoRenderer],
    part : PangoRenderPart,
    color : Pointer[GdkColor]);

external gdk_pango_context_get_for_screen(
    screen : Pointer[GdkScreen]) Pointer[PangoContext];

external gdk_pango_context_get() Pointer[PangoContext];

external gdk_pango_context_set_colormap(
    context : Pointer[PangoContext],
    colormap : Pointer[GdkColormap]);

external gdk_pango_layout_line_get_clip_region(
    line : Pointer[PangoLayoutLine],
    x_origin : Int,
    y_origin : Int,
    index_ranges : Pointer[Int],
    n_ranges : Int) Pointer[GdkRegion];

external gdk_pango_layout_get_clip_region(
    layout : Pointer[PangoLayout],
    x_origin : Int,
    y_origin : Int,
    index_ranges : Pointer[Int],
    n_ranges : Int) Pointer[GdkRegion];

alias GdkPangoAttrStipple = Struct__GdkPangoAttrStipple;

alias GdkPangoAttrEmbossed = Struct__GdkPangoAttrEmbossed;

alias GdkPangoAttrEmbossColor = Struct__GdkPangoAttrEmbossColor;

record Struct__GdkPangoAttrStipple (
    attr : PangoAttribute,
    stipple : Pointer[GdkBitmap],
);

record Struct__GdkPangoAttrEmbossed (
    attr : PangoAttribute,
    embossed : Int,
);

record Struct__GdkPangoAttrEmbossColor (
    attr : PangoAttribute,
    color : PangoColor,
);

external gdk_pango_attr_stipple_new(
    stipple : Pointer[GdkBitmap]) Pointer[PangoAttribute];

external gdk_pango_attr_embossed_new(
    embossed : Int) Pointer[PangoAttribute];

external gdk_pango_attr_emboss_color_new(
    color : Pointer[GdkColor]) Pointer[PangoAttribute];

alias GdkPixmapObject = Struct__GdkPixmapObject;

alias GdkPixmapObjectClass = Struct__GdkPixmapObjectClass;

record Struct__GdkPixmapObject (
    parent_instance : GdkDrawable,
    impl : Pointer[GdkDrawable],
    depth : Int,
);

record Struct__GdkPixmapObjectClass (
    parent_class : GdkDrawableClass,
);

external gdk_pixmap_get_type() CULong;

external gdk_pixmap_new(
    drawable : Pointer[GdkDrawable],
    width : Int,
    height : Int,
    depth : Int) Pointer[GdkPixmap];

external gdk_bitmap_create_from_data(
    drawable : Pointer[GdkDrawable],
    data : Pointer[CChar],
    width : Int,
    height : Int) Pointer[GdkBitmap];

external gdk_pixmap_create_from_data(
    drawable : Pointer[GdkDrawable],
    data : Pointer[CChar],
    width : Int,
    height : Int,
    depth : Int,
    fg : Pointer[GdkColor],
    bg : Pointer[GdkColor]) Pointer[GdkPixmap];

external gdk_pixmap_create_from_xpm(
    drawable : Pointer[GdkDrawable],
    mask : Pointer[Pointer[GdkBitmap]],
    transparent_color : Pointer[GdkColor],
    filename : Pointer[CChar]) Pointer[GdkPixmap];

external gdk_pixmap_colormap_create_from_xpm(
    drawable : Pointer[GdkDrawable],
    colormap : Pointer[GdkColormap],
    mask : Pointer[Pointer[GdkBitmap]],
    transparent_color : Pointer[GdkColor],
    filename : Pointer[CChar]) Pointer[GdkPixmap];

external gdk_pixmap_create_from_xpm_d(
    drawable : Pointer[GdkDrawable],
    mask : Pointer[Pointer[GdkBitmap]],
    transparent_color : Pointer[GdkColor],
    data : Pointer[Pointer[CChar]]) Pointer[GdkPixmap];

external gdk_pixmap_colormap_create_from_xpm_d(
    drawable : Pointer[GdkDrawable],
    colormap : Pointer[GdkColormap],
    mask : Pointer[Pointer[GdkBitmap]],
    transparent_color : Pointer[GdkColor],
    data : Pointer[Pointer[CChar]]) Pointer[GdkPixmap];

external gdk_pixmap_foreign_new(
    anid : UInt) Pointer[GdkPixmap];

external gdk_pixmap_lookup(
    anid : UInt) Pointer[GdkPixmap];

external gdk_pixmap_foreign_new_for_display(
    display : Pointer[GdkDisplay],
    anid : UInt) Pointer[GdkPixmap];

external gdk_pixmap_lookup_for_display(
    display : Pointer[GdkDisplay],
    anid : UInt) Pointer[GdkPixmap];

external gdk_pixmap_foreign_new_for_screen(
    screen : Pointer[GdkScreen],
    anid : UInt,
    width : Int,
    height : Int,
    depth : Int) Pointer[GdkPixmap];

alias GDK_PROP_MODE_REPLACE = 0;
alias GDK_PROP_MODE_PREPEND = 1;
alias GDK_PROP_MODE_APPEND = 2;

alias GdkPropMode = Int;

external gdk_atom_intern(
    atom_name : Pointer[CChar],
    only_if_exists : Int) GdkAtom;

external gdk_atom_intern_static_string(
    atom_name : Pointer[CChar]) GdkAtom;

external gdk_atom_name(
    atom : GdkAtom) Pointer[CChar];

external gdk_property_get(
    window : Pointer[GdkWindow],
    property : GdkAtom,
    type : GdkAtom,
    offset : CULong,
    length : CULong,
    pdelete : Int,
    actual_property_type : Pointer[GdkAtom],
    actual_format : Pointer[Int],
    actual_length : Pointer[Int],
    data : Pointer[Pointer[CUChar]]) Int;

external gdk_property_change(
    window : Pointer[GdkWindow],
    property : GdkAtom,
    type : GdkAtom,
    format : Int,
    mode : GdkPropMode,
    data : Pointer[CUChar],
    nelements : Int);

external gdk_property_delete(
    window : Pointer[GdkWindow],
    property : GdkAtom);

external gdk_text_property_to_text_list(
    encoding : GdkAtom,
    format : Int,
    text : Pointer[CUChar],
    length : Int,
    list : Pointer[Pointer[Pointer[CChar]]]) Int;

external gdk_text_property_to_utf8_list(
    encoding : GdkAtom,
    format : Int,
    text : Pointer[CUChar],
    length : Int,
    list : Pointer[Pointer[Pointer[CChar]]]) Int;

external gdk_utf8_to_compound_text(
    str : Pointer[CChar],
    encoding : Pointer[GdkAtom],
    format : Pointer[Int],
    ctext : Pointer[Pointer[CUChar]],
    length : Pointer[Int]) Int;

external gdk_string_to_compound_text(
    str : Pointer[CChar],
    encoding : Pointer[GdkAtom],
    format : Pointer[Int],
    ctext : Pointer[Pointer[CUChar]],
    length : Pointer[Int]) Int;

external gdk_text_property_to_text_list_for_display(
    display : Pointer[GdkDisplay],
    encoding : GdkAtom,
    format : Int,
    text : Pointer[CUChar],
    length : Int,
    list : Pointer[Pointer[Pointer[CChar]]]) Int;

external gdk_text_property_to_utf8_list_for_display(
    display : Pointer[GdkDisplay],
    encoding : GdkAtom,
    format : Int,
    text : Pointer[CUChar],
    length : Int,
    list : Pointer[Pointer[Pointer[CChar]]]) Int;

external gdk_utf8_to_string_target(
    str : Pointer[CChar]) Pointer[CChar];

external gdk_string_to_compound_text_for_display(
    display : Pointer[GdkDisplay],
    str : Pointer[CChar],
    encoding : Pointer[GdkAtom],
    format : Pointer[Int],
    ctext : Pointer[Pointer[CUChar]],
    length : Pointer[Int]) Int;

external gdk_utf8_to_compound_text_for_display(
    display : Pointer[GdkDisplay],
    str : Pointer[CChar],
    encoding : Pointer[GdkAtom],
    format : Pointer[Int],
    ctext : Pointer[Pointer[CUChar]],
    length : Pointer[Int]) Int;

external gdk_free_text_list(
    list : Pointer[Pointer[CChar]]);

external gdk_free_compound_text(
    ctext : Pointer[CUChar]);

alias GDK_EVEN_ODD_RULE = 0;
alias GDK_WINDING_RULE = 1;

alias GdkFillRule = Int;

alias GDK_OVERLAP_RECTANGLE_IN = 0;
alias GDK_OVERLAP_RECTANGLE_OUT = 1;
alias GDK_OVERLAP_RECTANGLE_PART = 2;

alias GdkOverlapType = Int;

alias GdkSpanFunc = CCodePointer[(Pointer[Struct__GdkSpan],RawPointer),()];

external gdk_region_new() Pointer[GdkRegion];

external gdk_region_polygon(
    points : Pointer[GdkPoint],
    n_points : Int,
    fill_rule : GdkFillRule) Pointer[GdkRegion];

external gdk_region_copy(
    region : Pointer[GdkRegion]) Pointer[GdkRegion];

external gdk_region_rectangle(
    rectangle : Pointer[GdkRectangle]) Pointer[GdkRegion];

external gdk_region_destroy(
    region : Pointer[GdkRegion]);

external gdk_region_get_clipbox(
    region : Pointer[GdkRegion],
    rectangle : Pointer[GdkRectangle]);

external gdk_region_get_rectangles(
    region : Pointer[GdkRegion],
    rectangles : Pointer[Pointer[GdkRectangle]],
    n_rectangles : Pointer[Int]);

external gdk_region_empty(
    region : Pointer[GdkRegion]) Int;

external gdk_region_equal(
    region1 : Pointer[GdkRegion],
    region2 : Pointer[GdkRegion]) Int;

external gdk_region_rect_equal(
    region : Pointer[GdkRegion],
    rectangle : Pointer[GdkRectangle]) Int;

external gdk_region_point_in(
    region : Pointer[GdkRegion],
    x : Int,
    y : Int) Int;

external gdk_region_rect_in(
    region : Pointer[GdkRegion],
    rectangle : Pointer[GdkRectangle]) GdkOverlapType;

external gdk_region_offset(
    region : Pointer[GdkRegion],
    dx : Int,
    dy : Int);

external gdk_region_shrink(
    region : Pointer[GdkRegion],
    dx : Int,
    dy : Int);

external gdk_region_union_with_rect(
    region : Pointer[GdkRegion],
    rect : Pointer[GdkRectangle]);

external gdk_region_intersect(
    source1 : Pointer[GdkRegion],
    source2 : Pointer[GdkRegion]);

external gdk_region_union(
    source1 : Pointer[GdkRegion],
    source2 : Pointer[GdkRegion]);

external gdk_region_subtract(
    source1 : Pointer[GdkRegion],
    source2 : Pointer[GdkRegion]);

external gdk_region_xor(
    source1 : Pointer[GdkRegion],
    source2 : Pointer[GdkRegion]);

external gdk_region_spans_intersect_foreach(
    region : Pointer[GdkRegion],
    spans : Pointer[GdkSpan],
    n_spans : Int,
    sorted : Int,
    function : GdkSpanFunc,
    data : gpointer);

alias GdkSelection = GdkAtom;

alias GdkTarget = GdkAtom;

alias GdkSelectionType = GdkAtom;

external gdk_selection_owner_set(
    owner : Pointer[GdkWindow],
    selection : GdkAtom,
    time_ : UInt,
    send_event : Int) Int;

external gdk_selection_owner_get(
    selection : GdkAtom) Pointer[GdkWindow];

external gdk_selection_owner_set_for_display(
    display : Pointer[GdkDisplay],
    owner : Pointer[GdkWindow],
    selection : GdkAtom,
    time_ : UInt,
    send_event : Int) Int;

external gdk_selection_owner_get_for_display(
    display : Pointer[GdkDisplay],
    selection : GdkAtom) Pointer[GdkWindow];

external gdk_selection_convert(
    requestor : Pointer[GdkWindow],
    selection : GdkAtom,
    target : GdkAtom,
    time_ : UInt);

external gdk_selection_property_get(
    requestor : Pointer[GdkWindow],
    data : Pointer[Pointer[CUChar]],
    prop_type : Pointer[GdkAtom],
    prop_format : Pointer[Int]) Int;

external gdk_selection_send_notify(
    requestor : UInt,
    selection : GdkAtom,
    target : GdkAtom,
    property : GdkAtom,
    time_ : UInt);

external gdk_selection_send_notify_for_display(
    display : Pointer[GdkDisplay],
    requestor : UInt,
    selection : GdkAtom,
    target : GdkAtom,
    property : GdkAtom,
    time_ : UInt);

external gdk_spawn_on_screen(
    screen : Pointer[GdkScreen],
    working_directory : Pointer[CChar],
    argv : Pointer[Pointer[CChar]],
    envp : Pointer[Pointer[CChar]],
    flags : GSpawnFlags,
    child_setup : GSpawnChildSetupFunc,
    user_data : gpointer,
    child_pid : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external gdk_spawn_on_screen_with_pipes(
    screen : Pointer[GdkScreen],
    working_directory : Pointer[CChar],
    argv : Pointer[Pointer[CChar]],
    envp : Pointer[Pointer[CChar]],
    flags : GSpawnFlags,
    child_setup : GSpawnChildSetupFunc,
    user_data : gpointer,
    child_pid : Pointer[Int],
    standard_input : Pointer[Int],
    standard_output : Pointer[Int],
    standard_error : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external gdk_spawn_command_line_on_screen(
    screen : Pointer[GdkScreen],
    command_line : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

alias GdkGeometry = Struct__GdkGeometry;

alias GdkWindowAttr = Struct__GdkWindowAttr;

alias GdkPointerHooks = Struct__GdkPointerHooks;

alias GdkWindowRedirect = Opaque;

alias GDK_INPUT_OUTPUT = 0;
alias GDK_INPUT_ONLY = 1;

alias GdkWindowClass = Int;

alias GDK_WINDOW_ROOT = 0;
alias GDK_WINDOW_TOPLEVEL = 1;
alias GDK_WINDOW_CHILD = 2;
alias GDK_WINDOW_DIALOG = 3;
alias GDK_WINDOW_TEMP = 4;
alias GDK_WINDOW_FOREIGN = 5;
alias GDK_WINDOW_OFFSCREEN = 6;

alias GdkWindowType = Int;

alias GDK_WA_TITLE = 2;
alias GDK_WA_X = 4;
alias GDK_WA_Y = 8;
alias GDK_WA_CURSOR = 16;
alias GDK_WA_COLORMAP = 32;
alias GDK_WA_VISUAL = 64;
alias GDK_WA_WMCLASS = 128;
alias GDK_WA_NOREDIR = 256;
alias GDK_WA_TYPE_HINT = 512;

alias GdkWindowAttributesType = Int;

alias GDK_HINT_POS = 1;
alias GDK_HINT_MIN_SIZE = 2;
alias GDK_HINT_MAX_SIZE = 4;
alias GDK_HINT_BASE_SIZE = 8;
alias GDK_HINT_ASPECT = 16;
alias GDK_HINT_RESIZE_INC = 32;
alias GDK_HINT_WIN_GRAVITY = 64;
alias GDK_HINT_USER_POS = 128;
alias GDK_HINT_USER_SIZE = 256;

alias GdkWindowHints = Int;

alias GDK_WINDOW_TYPE_HINT_NORMAL = 0;
alias GDK_WINDOW_TYPE_HINT_DIALOG = 1;
alias GDK_WINDOW_TYPE_HINT_MENU = 2;
alias GDK_WINDOW_TYPE_HINT_TOOLBAR = 3;
alias GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = 4;
alias GDK_WINDOW_TYPE_HINT_UTILITY = 5;
alias GDK_WINDOW_TYPE_HINT_DOCK = 6;
alias GDK_WINDOW_TYPE_HINT_DESKTOP = 7;
alias GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = 8;
alias GDK_WINDOW_TYPE_HINT_POPUP_MENU = 9;
alias GDK_WINDOW_TYPE_HINT_TOOLTIP = 10;
alias GDK_WINDOW_TYPE_HINT_NOTIFICATION = 11;
alias GDK_WINDOW_TYPE_HINT_COMBO = 12;
alias GDK_WINDOW_TYPE_HINT_DND = 13;

alias GdkWindowTypeHint = Int;

alias GDK_DECOR_ALL = 1;
alias GDK_DECOR_BORDER = 2;
alias GDK_DECOR_RESIZEH = 4;
alias GDK_DECOR_TITLE = 8;
alias GDK_DECOR_MENU = 16;
alias GDK_DECOR_MINIMIZE = 32;
alias GDK_DECOR_MAXIMIZE = 64;

alias GdkWMDecoration = Int;

alias GDK_FUNC_ALL = 1;
alias GDK_FUNC_RESIZE = 2;
alias GDK_FUNC_MOVE = 4;
alias GDK_FUNC_MINIMIZE = 8;
alias GDK_FUNC_MAXIMIZE = 16;
alias GDK_FUNC_CLOSE = 32;

alias GdkWMFunction = Int;

alias GDK_GRAVITY_NORTH_WEST = 1;
alias GDK_GRAVITY_NORTH = 2;
alias GDK_GRAVITY_NORTH_EAST = 3;
alias GDK_GRAVITY_WEST = 4;
alias GDK_GRAVITY_CENTER = 5;
alias GDK_GRAVITY_EAST = 6;
alias GDK_GRAVITY_SOUTH_WEST = 7;
alias GDK_GRAVITY_SOUTH = 8;
alias GDK_GRAVITY_SOUTH_EAST = 9;
alias GDK_GRAVITY_STATIC = 10;

alias GdkGravity = Int;

alias GDK_WINDOW_EDGE_NORTH_WEST = 0;
alias GDK_WINDOW_EDGE_NORTH = 1;
alias GDK_WINDOW_EDGE_NORTH_EAST = 2;
alias GDK_WINDOW_EDGE_WEST = 3;
alias GDK_WINDOW_EDGE_EAST = 4;
alias GDK_WINDOW_EDGE_SOUTH_WEST = 5;
alias GDK_WINDOW_EDGE_SOUTH = 6;
alias GDK_WINDOW_EDGE_SOUTH_EAST = 7;

alias GdkWindowEdge = Int;

record Struct__GdkWindowAttr (
    title : Pointer[CChar],
    event_mask : Int,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    wclass : GdkWindowClass,
    visual : Pointer[GdkVisual],
    colormap : Pointer[GdkColormap],
    window_type : GdkWindowType,
    cursor : Pointer[GdkCursor],
    wmclass_name : Pointer[CChar],
    wmclass_class : Pointer[CChar],
    override_redirect : Int,
    type_hint : GdkWindowTypeHint,
);

record Struct__GdkGeometry (
    min_width : Int,
    min_height : Int,
    max_width : Int,
    max_height : Int,
    base_width : Int,
    base_height : Int,
    width_inc : Int,
    height_inc : Int,
    min_aspect : Double,
    max_aspect : Double,
    win_gravity : GdkGravity,
);

record Struct__GdkPointerHooks (
    get_pointer : CCodePointer[(Pointer[Struct__GdkDrawable],Pointer[Int],Pointer[Int],Pointer[Int]),(Pointer[Struct__GdkDrawable])],
    window_at_pointer : CCodePointer[(Pointer[Struct__GdkScreen],Pointer[Int],Pointer[Int]),(Pointer[Struct__GdkDrawable])],
);

alias GdkWindowObject = Struct__GdkWindowObject;

alias GdkWindowObjectClass = Struct__GdkWindowObjectClass;

record Struct__GdkWindowObject (
    parent_instance : GdkDrawable,
    impl : Pointer[GdkDrawable],
    parent : Pointer[GdkWindowObject],
    user_data : gpointer,
    x : Int,
    y : Int,
    extension_events : Int,
    filters : Pointer[GList],
    children : Pointer[GList],
    bg_color : GdkColor,
    bg_pixmap : Pointer[GdkPixmap],
    paint_stack : Pointer[GSList],
    update_area : Pointer[GdkRegion],
    update_freeze_count : UInt,
    window_type : CUChar,
    depth : CUChar,
    resize_count : CUChar,
    state : GdkWindowState,
    guffaw_gravity : UInt,
    input_only : UInt,
    modal_hint : UInt,
    composited : UInt,
    destroyed : UInt,
    accept_focus : UInt,
    focus_on_map : UInt,
    shaped : UInt,
    event_mask : GdkEventMask,
    update_and_descendants_freeze_count : UInt,
    redirect : Pointer[GdkWindowRedirect],
);

record Struct__GdkWindowObjectClass (
    parent_class : GdkDrawableClass,
);

external gdk_window_object_get_type() CULong;

external gdk_window_new(
    parent : Pointer[GdkWindow],
    attributes : Pointer[GdkWindowAttr],
    attributes_mask : Int) Pointer[GdkWindow];

external gdk_window_destroy(
    window : Pointer[GdkWindow]);

external gdk_window_get_window_type(
    window : Pointer[GdkWindow]) GdkWindowType;

external gdk_window_is_destroyed(
    window : Pointer[GdkWindow]) Int;

external gdk_window_at_pointer(
    win_x : Pointer[Int],
    win_y : Pointer[Int]) Pointer[GdkWindow];

external gdk_window_show(
    window : Pointer[GdkWindow]);

external gdk_window_hide(
    window : Pointer[GdkWindow]);

external gdk_window_withdraw(
    window : Pointer[GdkWindow]);

external gdk_window_show_unraised(
    window : Pointer[GdkWindow]);

external gdk_window_move(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int);

external gdk_window_resize(
    window : Pointer[GdkWindow],
    width : Int,
    height : Int);

external gdk_window_move_resize(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gdk_window_reparent(
    window : Pointer[GdkWindow],
    new_parent : Pointer[GdkWindow],
    x : Int,
    y : Int);

external gdk_window_clear(
    window : Pointer[GdkWindow]);

external gdk_window_clear_area(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gdk_window_clear_area_e(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gdk_window_raise(
    window : Pointer[GdkWindow]);

external gdk_window_lower(
    window : Pointer[GdkWindow]);

external gdk_window_restack(
    window : Pointer[GdkWindow],
    sibling : Pointer[GdkWindow],
    above : Int);

external gdk_window_focus(
    window : Pointer[GdkWindow],
    timestamp : UInt);

external gdk_window_set_user_data(
    window : Pointer[GdkWindow],
    user_data : gpointer);

external gdk_window_set_override_redirect(
    window : Pointer[GdkWindow],
    override_redirect : Int);

external gdk_window_get_accept_focus(
    window : Pointer[GdkWindow]) Int;

external gdk_window_set_accept_focus(
    window : Pointer[GdkWindow],
    accept_focus : Int);

external gdk_window_get_focus_on_map(
    window : Pointer[GdkWindow]) Int;

external gdk_window_set_focus_on_map(
    window : Pointer[GdkWindow],
    focus_on_map : Int);

external gdk_window_add_filter(
    window : Pointer[GdkWindow],
    function : GdkFilterFunc,
    data : gpointer);

external gdk_window_remove_filter(
    window : Pointer[GdkWindow],
    function : GdkFilterFunc,
    data : gpointer);

external gdk_window_scroll(
    window : Pointer[GdkWindow],
    dx : Int,
    dy : Int);

external gdk_window_move_region(
    window : Pointer[GdkWindow],
    region : Pointer[GdkRegion],
    dx : Int,
    dy : Int);

external gdk_window_ensure_native(
    window : Pointer[GdkWindow]) Int;

external gdk_window_shape_combine_mask(
    window : Pointer[GdkWindow],
    mask : Pointer[GdkBitmap],
    x : Int,
    y : Int);

external gdk_window_shape_combine_region(
    window : Pointer[GdkWindow],
    shape_region : Pointer[GdkRegion],
    offset_x : Int,
    offset_y : Int);

external gdk_window_set_child_shapes(
    window : Pointer[GdkWindow]);

external gdk_window_get_composited(
    window : Pointer[GdkWindow]) Int;

external gdk_window_set_composited(
    window : Pointer[GdkWindow],
    composited : Int);

external gdk_window_merge_child_shapes(
    window : Pointer[GdkWindow]);

external gdk_window_input_shape_combine_mask(
    window : Pointer[GdkWindow],
    mask : Pointer[GdkBitmap],
    x : Int,
    y : Int);

external gdk_window_input_shape_combine_region(
    window : Pointer[GdkWindow],
    shape_region : Pointer[GdkRegion],
    offset_x : Int,
    offset_y : Int);

external gdk_window_set_child_input_shapes(
    window : Pointer[GdkWindow]);

external gdk_window_merge_child_input_shapes(
    window : Pointer[GdkWindow]);

external gdk_window_is_visible(
    window : Pointer[GdkWindow]) Int;

external gdk_window_is_viewable(
    window : Pointer[GdkWindow]) Int;

external gdk_window_is_input_only(
    window : Pointer[GdkWindow]) Int;

external gdk_window_is_shaped(
    window : Pointer[GdkWindow]) Int;

external gdk_window_get_state(
    window : Pointer[GdkWindow]) GdkWindowState;

external gdk_window_set_static_gravities(
    window : Pointer[GdkWindow],
    use_static : Int) Int;

external gdk_window_foreign_new(
    anid : UInt) Pointer[GdkWindow];

external gdk_window_lookup(
    anid : UInt) Pointer[GdkWindow];

external gdk_window_foreign_new_for_display(
    display : Pointer[GdkDisplay],
    anid : UInt) Pointer[GdkWindow];

external gdk_window_lookup_for_display(
    display : Pointer[GdkDisplay],
    anid : UInt) Pointer[GdkWindow];

external gdk_window_has_native(
    window : Pointer[GdkWindow]) Int;

external gdk_window_set_hints(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    min_width : Int,
    min_height : Int,
    max_width : Int,
    max_height : Int,
    flags : Int);

external gdk_window_set_type_hint(
    window : Pointer[GdkWindow],
    hint : GdkWindowTypeHint);

external gdk_window_get_type_hint(
    window : Pointer[GdkWindow]) GdkWindowTypeHint;

external gdk_window_get_modal_hint(
    window : Pointer[GdkWindow]) Int;

external gdk_window_set_modal_hint(
    window : Pointer[GdkWindow],
    modal : Int);

external gdk_window_set_skip_taskbar_hint(
    window : Pointer[GdkWindow],
    skips_taskbar : Int);

external gdk_window_set_skip_pager_hint(
    window : Pointer[GdkWindow],
    skips_pager : Int);

external gdk_window_set_urgency_hint(
    window : Pointer[GdkWindow],
    urgent : Int);

external gdk_window_set_geometry_hints(
    window : Pointer[GdkWindow],
    geometry : Pointer[GdkGeometry],
    geom_mask : GdkWindowHints);

external gdk_set_sm_client_id(
    sm_client_id : Pointer[CChar]);

external gdk_window_begin_paint_rect(
    window : Pointer[GdkWindow],
    rectangle : Pointer[GdkRectangle]);

external gdk_window_begin_paint_region(
    window : Pointer[GdkWindow],
    region : Pointer[GdkRegion]);

external gdk_window_end_paint(
    window : Pointer[GdkWindow]);

external gdk_window_flush(
    window : Pointer[GdkWindow]);

external gdk_window_set_title(
    window : Pointer[GdkWindow],
    title : Pointer[CChar]);

external gdk_window_set_role(
    window : Pointer[GdkWindow],
    role : Pointer[CChar]);

external gdk_window_set_startup_id(
    window : Pointer[GdkWindow],
    startup_id : Pointer[CChar]);

external gdk_window_set_transient_for(
    window : Pointer[GdkWindow],
    parent : Pointer[GdkWindow]);

external gdk_window_set_background(
    window : Pointer[GdkWindow],
    color : Pointer[GdkColor]);

external gdk_window_set_back_pixmap(
    window : Pointer[GdkWindow],
    pixmap : Pointer[GdkPixmap],
    parent_relative : Int);

external gdk_window_get_background_pattern(
    window : Pointer[GdkWindow]) Pointer[cairo_pattern_t];

external gdk_window_set_cursor(
    window : Pointer[GdkWindow],
    cursor : Pointer[GdkCursor]);

external gdk_window_get_cursor(
    window : Pointer[GdkWindow]) Pointer[GdkCursor];

external gdk_window_get_user_data(
    window : Pointer[GdkWindow],
    data : Pointer[gpointer]);

external gdk_window_get_geometry(
    window : Pointer[GdkWindow],
    x : Pointer[Int],
    y : Pointer[Int],
    width : Pointer[Int],
    height : Pointer[Int],
    depth : Pointer[Int]);

external gdk_window_get_position(
    window : Pointer[GdkWindow],
    x : Pointer[Int],
    y : Pointer[Int]);

external gdk_window_get_origin(
    window : Pointer[GdkWindow],
    x : Pointer[Int],
    y : Pointer[Int]) Int;

external gdk_window_get_root_coords(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    root_x : Pointer[Int],
    root_y : Pointer[Int]);

external gdk_window_coords_to_parent(
    window : Pointer[GdkWindow],
    x : Double,
    y : Double,
    parent_x : Pointer[Double],
    parent_y : Pointer[Double]);

external gdk_window_coords_from_parent(
    window : Pointer[GdkWindow],
    parent_x : Double,
    parent_y : Double,
    x : Pointer[Double],
    y : Pointer[Double]);

external gdk_window_get_deskrelative_origin(
    window : Pointer[GdkWindow],
    x : Pointer[Int],
    y : Pointer[Int]) Int;

external gdk_window_get_root_origin(
    window : Pointer[GdkWindow],
    x : Pointer[Int],
    y : Pointer[Int]);

external gdk_window_get_frame_extents(
    window : Pointer[GdkWindow],
    rect : Pointer[GdkRectangle]);

external gdk_window_get_pointer(
    window : Pointer[GdkWindow],
    x : Pointer[Int],
    y : Pointer[Int],
    mask : Pointer[GdkModifierType]) Pointer[GdkWindow];

external gdk_window_get_parent(
    window : Pointer[GdkWindow]) Pointer[GdkWindow];

external gdk_window_get_toplevel(
    window : Pointer[GdkWindow]) Pointer[GdkWindow];

external gdk_window_get_effective_parent(
    window : Pointer[GdkWindow]) Pointer[GdkWindow];

external gdk_window_get_effective_toplevel(
    window : Pointer[GdkWindow]) Pointer[GdkWindow];

external gdk_window_get_children(
    window : Pointer[GdkWindow]) Pointer[GList];

external gdk_window_peek_children(
    window : Pointer[GdkWindow]) Pointer[GList];

external gdk_window_get_events(
    window : Pointer[GdkWindow]) GdkEventMask;

external gdk_window_set_events(
    window : Pointer[GdkWindow],
    event_mask : GdkEventMask);

external gdk_window_set_icon_list(
    window : Pointer[GdkWindow],
    pixbufs : Pointer[GList]);

external gdk_window_set_icon(
    window : Pointer[GdkWindow],
    icon_window : Pointer[GdkWindow],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gdk_window_set_icon_name(
    window : Pointer[GdkWindow],
    name : Pointer[CChar]);

external gdk_window_set_group(
    window : Pointer[GdkWindow],
    leader : Pointer[GdkWindow]);

external gdk_window_get_group(
    window : Pointer[GdkWindow]) Pointer[GdkWindow];

external gdk_window_set_decorations(
    window : Pointer[GdkWindow],
    decorations : GdkWMDecoration);

external gdk_window_get_decorations(
    window : Pointer[GdkWindow],
    decorations : Pointer[GdkWMDecoration]) Int;

external gdk_window_set_functions(
    window : Pointer[GdkWindow],
    functions : GdkWMFunction);

external gdk_window_get_toplevels() Pointer[GList];

external gdk_window_create_similar_surface(
    window : Pointer[GdkWindow],
    content : cairo_content_t,
    width : Int,
    height : Int) Pointer[cairo_surface_t];

external gdk_window_beep(
    window : Pointer[GdkWindow]);

external gdk_window_iconify(
    window : Pointer[GdkWindow]);

external gdk_window_deiconify(
    window : Pointer[GdkWindow]);

external gdk_window_stick(
    window : Pointer[GdkWindow]);

external gdk_window_unstick(
    window : Pointer[GdkWindow]);

external gdk_window_maximize(
    window : Pointer[GdkWindow]);

external gdk_window_unmaximize(
    window : Pointer[GdkWindow]);

external gdk_window_fullscreen(
    window : Pointer[GdkWindow]);

external gdk_window_unfullscreen(
    window : Pointer[GdkWindow]);

external gdk_window_set_keep_above(
    window : Pointer[GdkWindow],
    setting : Int);

external gdk_window_set_keep_below(
    window : Pointer[GdkWindow],
    setting : Int);

external gdk_window_set_opacity(
    window : Pointer[GdkWindow],
    opacity : Double);

external gdk_window_register_dnd(
    window : Pointer[GdkWindow]);

external gdk_window_begin_resize_drag(
    window : Pointer[GdkWindow],
    edge : GdkWindowEdge,
    button : Int,
    root_x : Int,
    root_y : Int,
    timestamp : UInt);

external gdk_window_begin_move_drag(
    window : Pointer[GdkWindow],
    button : Int,
    root_x : Int,
    root_y : Int,
    timestamp : UInt);

external gdk_window_invalidate_rect(
    window : Pointer[GdkWindow],
    rect : Pointer[GdkRectangle],
    invalidate_children : Int);

external gdk_window_invalidate_region(
    window : Pointer[GdkWindow],
    region : Pointer[GdkRegion],
    invalidate_children : Int);

external gdk_window_invalidate_maybe_recurse(
    window : Pointer[GdkWindow],
    region : Pointer[GdkRegion],
    child_func : CCodePointer[(Pointer[Struct__GdkDrawable],RawPointer),(Int)],
    user_data : gpointer);

external gdk_window_get_update_area(
    window : Pointer[GdkWindow]) Pointer[GdkRegion];

external gdk_window_freeze_updates(
    window : Pointer[GdkWindow]);

external gdk_window_thaw_updates(
    window : Pointer[GdkWindow]);

external gdk_window_freeze_toplevel_updates_libgtk_only(
    window : Pointer[GdkWindow]);

external gdk_window_thaw_toplevel_updates_libgtk_only(
    window : Pointer[GdkWindow]);

external gdk_window_process_all_updates();

external gdk_window_process_updates(
    window : Pointer[GdkWindow],
    update_children : Int);

external gdk_window_set_debug_updates(
    setting : Int);

external gdk_window_constrain_size(
    geometry : Pointer[GdkGeometry],
    flags : UInt,
    width : Int,
    height : Int,
    new_width : Pointer[Int],
    new_height : Pointer[Int]);

external gdk_window_get_internal_paint_info(
    window : Pointer[GdkWindow],
    real_drawable : Pointer[Pointer[GdkDrawable]],
    x_offset : Pointer[Int],
    y_offset : Pointer[Int]);

external gdk_window_enable_synchronized_configure(
    window : Pointer[GdkWindow]);

external gdk_window_configure_finished(
    window : Pointer[GdkWindow]);

external gdk_set_pointer_hooks(
    new_hooks : Pointer[GdkPointerHooks]) Pointer[GdkPointerHooks];

external gdk_get_default_root_window() Pointer[GdkWindow];

external gdk_offscreen_window_get_pixmap(
    window : Pointer[GdkWindow]) Pointer[GdkPixmap];

external gdk_offscreen_window_set_embedder(
    window : Pointer[GdkWindow],
    embedder : Pointer[GdkWindow]);

external gdk_offscreen_window_get_embedder(
    window : Pointer[GdkWindow]) Pointer[GdkWindow];

external gdk_window_geometry_changed(
    window : Pointer[GdkWindow]);

external gdk_window_redirect_to_drawable(
    window : Pointer[GdkWindow],
    drawable : Pointer[GdkDrawable],
    src_x : Int,
    src_y : Int,
    dest_x : Int,
    dest_y : Int,
    width : Int,
    height : Int);

external gdk_window_remove_redirection(
    window : Pointer[GdkWindow]);

external gdk_test_render_sync(
    window : Pointer[GdkWindow]);

external gdk_test_simulate_key(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    keyval : UInt,
    modifiers : GdkModifierType,
    key_pressrelease : GdkEventType) Int;

external gdk_test_simulate_button(
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    button : UInt,
    modifiers : GdkModifierType,
    button_pressrelease : GdkEventType) Int;

alias GdkVisualClass = Opaque;

alias GDK_VISUAL_STATIC_GRAY = 0;
alias GDK_VISUAL_GRAYSCALE = 1;
alias GDK_VISUAL_STATIC_COLOR = 2;
alias GDK_VISUAL_PSEUDO_COLOR = 3;
alias GDK_VISUAL_TRUE_COLOR = 4;
alias GDK_VISUAL_DIRECT_COLOR = 5;

alias GdkVisualType = Int;

record Struct__GdkVisual (
    parent_instance : GObject,
    type : GdkVisualType,
    depth : Int,
    byte_order : GdkByteOrder,
    colormap_size : Int,
    bits_per_rgb : Int,
    red_mask : UInt,
    red_shift : Int,
    red_prec : Int,
    green_mask : UInt,
    green_shift : Int,
    green_prec : Int,
    blue_mask : UInt,
    blue_shift : Int,
    blue_prec : Int,
);

external gdk_visual_get_type() CULong;

external gdk_visual_get_best_depth() Int;

external gdk_visual_get_best_type() GdkVisualType;

external gdk_visual_get_system() Pointer[GdkVisual];

external gdk_visual_get_best() Pointer[GdkVisual];

external gdk_visual_get_best_with_depth(
    depth : Int) Pointer[GdkVisual];

external gdk_visual_get_best_with_type(
    visual_type : GdkVisualType) Pointer[GdkVisual];

external gdk_visual_get_best_with_both(
    depth : Int,
    visual_type : GdkVisualType) Pointer[GdkVisual];

external gdk_query_depths(
    depths : Pointer[Pointer[Int]],
    count : Pointer[Int]);

external gdk_query_visual_types(
    visual_types : Pointer[Pointer[GdkVisualType]],
    count : Pointer[Int]);

external gdk_list_visuals() Pointer[GList];

external gdk_visual_get_screen(
    visual : Pointer[GdkVisual]) Pointer[GdkScreen];

external gdk_visual_get_visual_type(
    visual : Pointer[GdkVisual]) GdkVisualType;

external gdk_visual_get_depth(
    visual : Pointer[GdkVisual]) Int;

external gdk_visual_get_byte_order(
    visual : Pointer[GdkVisual]) GdkByteOrder;

external gdk_visual_get_colormap_size(
    visual : Pointer[GdkVisual]) Int;

external gdk_visual_get_bits_per_rgb(
    visual : Pointer[GdkVisual]) Int;

external gdk_visual_get_red_pixel_details(
    visual : Pointer[GdkVisual],
    mask : Pointer[UInt],
    shift : Pointer[Int],
    precision : Pointer[Int]);

external gdk_visual_get_green_pixel_details(
    visual : Pointer[GdkVisual],
    mask : Pointer[UInt],
    shift : Pointer[Int],
    precision : Pointer[Int]);

external gdk_visual_get_blue_pixel_details(
    visual : Pointer[GdkVisual],
    mask : Pointer[UInt],
    shift : Pointer[Int],
    precision : Pointer[Int]);

external gdk_parse_args(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]);

external gdk_init(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]);

external gdk_init_check(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]) Int;

external gdk_add_option_entries_libgtk_only(
    group : Pointer[GOptionGroup]);

external gdk_pre_parse_libgtk_only();

external gdk_exit(
    error_code : Int);

external gdk_set_locale() Pointer[CChar];

external gdk_get_program_class() Pointer[CChar];

external gdk_set_program_class(
    program_class : Pointer[CChar]);

external gdk_error_trap_push();

external gdk_error_trap_pop() Int;

external gdk_set_use_xshm(
    use_xshm : Int);

external gdk_get_use_xshm() Int;

external gdk_get_display() Pointer[CChar];

external gdk_get_display_arg_name() Pointer[CChar];

external gdk_input_add_full(
    source : Int,
    condition : GdkInputCondition,
    function : GdkInputFunction,
    data : gpointer,
    destroy : GDestroyNotify) Int;

external gdk_input_add(
    source : Int,
    condition : GdkInputCondition,
    function : GdkInputFunction,
    data : gpointer) Int;

external gdk_input_remove(
    tag : Int);

external gdk_pointer_grab(
    window : Pointer[GdkWindow],
    owner_events : Int,
    event_mask : GdkEventMask,
    confine_to : Pointer[GdkWindow],
    cursor : Pointer[GdkCursor],
    time_ : UInt) GdkGrabStatus;

external gdk_keyboard_grab(
    window : Pointer[GdkWindow],
    owner_events : Int,
    time_ : UInt) GdkGrabStatus;

external gdk_pointer_grab_info_libgtk_only(
    display : Pointer[GdkDisplay],
    grab_window : Pointer[Pointer[GdkWindow]],
    owner_events : Pointer[Int]) Int;

external gdk_keyboard_grab_info_libgtk_only(
    display : Pointer[GdkDisplay],
    grab_window : Pointer[Pointer[GdkWindow]],
    owner_events : Pointer[Int]) Int;

external gdk_pointer_ungrab(
    time_ : UInt);

external gdk_keyboard_ungrab(
    time_ : UInt);

external gdk_pointer_is_grabbed() Int;

external gdk_screen_width() Int;

external gdk_screen_height() Int;

external gdk_screen_width_mm() Int;

external gdk_screen_height_mm() Int;

external gdk_beep();

external gdk_flush();

external gdk_set_double_click_time(
    msec : UInt);

external gdk_rectangle_intersect(
    src1 : Pointer[GdkRectangle],
    src2 : Pointer[GdkRectangle],
    dest : Pointer[GdkRectangle]) Int;

external gdk_rectangle_union(
    src1 : Pointer[GdkRectangle],
    src2 : Pointer[GdkRectangle],
    dest : Pointer[GdkRectangle]);

external gdk_rectangle_get_type() CULong;

external gdk_wcstombs(
    src : Pointer[UInt]) Pointer[CChar];

external gdk_mbstowcs(
    dest : Pointer[UInt],
    src : Pointer[CChar],
    dest_max : Int) Int;

external gdk_event_send_client_message(
    event : Pointer[GdkEvent],
    winid : UInt) Int;

external gdk_event_send_clientmessage_toall(
    event : Pointer[GdkEvent]);

external gdk_event_send_client_message_for_display(
    display : Pointer[GdkDisplay],
    event : Pointer[GdkEvent],
    winid : UInt) Int;

external gdk_notify_startup_complete();

external gdk_notify_startup_complete_with_id(
    startup_id : Pointer[CChar]);

external gdk_threads_mutex : Pointer[GMutex];

external gdk_threads_lock : GCallback;

external gdk_threads_unlock : GCallback;

external gdk_threads_enter();

external gdk_threads_leave();

external gdk_threads_init();

external gdk_threads_set_lock_functions(
    enter_fn : GCallback,
    leave_fn : GCallback);

external gdk_threads_add_idle_full(
    priority : Int,
    function : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external gdk_threads_add_idle(
    function : GSourceFunc,
    data : gpointer) UInt;

external gdk_threads_add_timeout_full(
    priority : Int,
    interval : UInt,
    function : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external gdk_threads_add_timeout(
    interval : UInt,
    function : GSourceFunc,
    data : gpointer) UInt;

external gdk_threads_add_timeout_seconds_full(
    priority : Int,
    interval : UInt,
    function : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external gdk_threads_add_timeout_seconds(
    interval : UInt,
    function : GSourceFunc,
    data : gpointer) UInt;

alias GTK_ANCHOR_CENTER = 0;
alias GTK_ANCHOR_NORTH = 1;
alias GTK_ANCHOR_NORTH_WEST = 2;
alias GTK_ANCHOR_NORTH_EAST = 3;
alias GTK_ANCHOR_SOUTH = 4;
alias GTK_ANCHOR_SOUTH_WEST = 5;
alias GTK_ANCHOR_SOUTH_EAST = 6;
alias GTK_ANCHOR_WEST = 7;
alias GTK_ANCHOR_EAST = 8;
alias GTK_ANCHOR_N = 1;
alias GTK_ANCHOR_NW = 2;
alias GTK_ANCHOR_NE = 3;
alias GTK_ANCHOR_S = 4;
alias GTK_ANCHOR_SW = 5;
alias GTK_ANCHOR_SE = 6;
alias GTK_ANCHOR_W = 7;
alias GTK_ANCHOR_E = 8;

alias GtkAnchorType = Int;

alias GTK_ARROWS_BOTH = 0;
alias GTK_ARROWS_START = 1;
alias GTK_ARROWS_END = 2;

alias GtkArrowPlacement = Int;

alias GTK_ARROW_UP = 0;
alias GTK_ARROW_DOWN = 1;
alias GTK_ARROW_LEFT = 2;
alias GTK_ARROW_RIGHT = 3;
alias GTK_ARROW_NONE = 4;

alias GtkArrowType = Int;

alias GTK_EXPAND = 1;
alias GTK_SHRINK = 2;
alias GTK_FILL = 4;

alias GtkAttachOptions = Int;

alias GTK_BUTTONBOX_DEFAULT_STYLE = 0;
alias GTK_BUTTONBOX_SPREAD = 1;
alias GTK_BUTTONBOX_EDGE = 2;
alias GTK_BUTTONBOX_START = 3;
alias GTK_BUTTONBOX_END = 4;
alias GTK_BUTTONBOX_CENTER = 5;

alias GtkButtonBoxStyle = Int;

alias GTK_CURVE_TYPE_LINEAR = 0;
alias GTK_CURVE_TYPE_SPLINE = 1;
alias GTK_CURVE_TYPE_FREE = 2;

alias GtkCurveType = Int;

alias GTK_DELETE_CHARS = 0;
alias GTK_DELETE_WORD_ENDS = 1;
alias GTK_DELETE_WORDS = 2;
alias GTK_DELETE_DISPLAY_LINES = 3;
alias GTK_DELETE_DISPLAY_LINE_ENDS = 4;
alias GTK_DELETE_PARAGRAPH_ENDS = 5;
alias GTK_DELETE_PARAGRAPHS = 6;
alias GTK_DELETE_WHITESPACE = 7;

alias GtkDeleteType = Int;

alias GTK_DIR_TAB_FORWARD = 0;
alias GTK_DIR_TAB_BACKWARD = 1;
alias GTK_DIR_UP = 2;
alias GTK_DIR_DOWN = 3;
alias GTK_DIR_LEFT = 4;
alias GTK_DIR_RIGHT = 5;

alias GtkDirectionType = Int;

alias GTK_EXPANDER_COLLAPSED = 0;
alias GTK_EXPANDER_SEMI_COLLAPSED = 1;
alias GTK_EXPANDER_SEMI_EXPANDED = 2;
alias GTK_EXPANDER_EXPANDED = 3;

alias GtkExpanderStyle = Int;

alias GTK_ICON_SIZE_INVALID = 0;
alias GTK_ICON_SIZE_MENU = 1;
alias GTK_ICON_SIZE_SMALL_TOOLBAR = 2;
alias GTK_ICON_SIZE_LARGE_TOOLBAR = 3;
alias GTK_ICON_SIZE_BUTTON = 4;
alias GTK_ICON_SIZE_DND = 5;
alias GTK_ICON_SIZE_DIALOG = 6;

alias GtkIconSize = Int;

alias GTK_SENSITIVITY_AUTO = 0;
alias GTK_SENSITIVITY_ON = 1;
alias GTK_SENSITIVITY_OFF = 2;

alias GtkSensitivityType = Int;

alias GTK_SIDE_TOP = 0;
alias GTK_SIDE_BOTTOM = 1;
alias GTK_SIDE_LEFT = 2;
alias GTK_SIDE_RIGHT = 3;

alias GtkSideType = Int;

alias GTK_TEXT_DIR_NONE = 0;
alias GTK_TEXT_DIR_LTR = 1;
alias GTK_TEXT_DIR_RTL = 2;

alias GtkTextDirection = Int;

alias GTK_JUSTIFY_LEFT = 0;
alias GTK_JUSTIFY_RIGHT = 1;
alias GTK_JUSTIFY_CENTER = 2;
alias GTK_JUSTIFY_FILL = 3;

alias GtkJustification = Int;

alias GTK_MATCH_ALL = 0;
alias GTK_MATCH_ALL_TAIL = 1;
alias GTK_MATCH_HEAD = 2;
alias GTK_MATCH_TAIL = 3;
alias GTK_MATCH_EXACT = 4;
alias GTK_MATCH_LAST = 5;

alias GtkMatchType = Int;

alias GTK_MENU_DIR_PARENT = 0;
alias GTK_MENU_DIR_CHILD = 1;
alias GTK_MENU_DIR_NEXT = 2;
alias GTK_MENU_DIR_PREV = 3;

alias GtkMenuDirectionType = Int;

alias GTK_MESSAGE_INFO = 0;
alias GTK_MESSAGE_WARNING = 1;
alias GTK_MESSAGE_QUESTION = 2;
alias GTK_MESSAGE_ERROR = 3;
alias GTK_MESSAGE_OTHER = 4;

alias GtkMessageType = Int;

alias GTK_PIXELS = 0;
alias GTK_INCHES = 1;
alias GTK_CENTIMETERS = 2;

alias GtkMetricType = Int;

alias GTK_MOVEMENT_LOGICAL_POSITIONS = 0;
alias GTK_MOVEMENT_VISUAL_POSITIONS = 1;
alias GTK_MOVEMENT_WORDS = 2;
alias GTK_MOVEMENT_DISPLAY_LINES = 3;
alias GTK_MOVEMENT_DISPLAY_LINE_ENDS = 4;
alias GTK_MOVEMENT_PARAGRAPHS = 5;
alias GTK_MOVEMENT_PARAGRAPH_ENDS = 6;
alias GTK_MOVEMENT_PAGES = 7;
alias GTK_MOVEMENT_BUFFER_ENDS = 8;
alias GTK_MOVEMENT_HORIZONTAL_PAGES = 9;

alias GtkMovementStep = Int;

alias GTK_SCROLL_STEPS = 0;
alias GTK_SCROLL_PAGES = 1;
alias GTK_SCROLL_ENDS = 2;
alias GTK_SCROLL_HORIZONTAL_STEPS = 3;
alias GTK_SCROLL_HORIZONTAL_PAGES = 4;
alias GTK_SCROLL_HORIZONTAL_ENDS = 5;

alias GtkScrollStep = Int;

alias GTK_ORIENTATION_HORIZONTAL = 0;
alias GTK_ORIENTATION_VERTICAL = 1;

alias GtkOrientation = Int;

alias GTK_CORNER_TOP_LEFT = 0;
alias GTK_CORNER_BOTTOM_LEFT = 1;
alias GTK_CORNER_TOP_RIGHT = 2;
alias GTK_CORNER_BOTTOM_RIGHT = 3;

alias GtkCornerType = Int;

alias GTK_PACK_START = 0;
alias GTK_PACK_END = 1;

alias GtkPackType = Int;

alias GTK_PATH_PRIO_LOWEST = 0;
alias GTK_PATH_PRIO_GTK = 4;
alias GTK_PATH_PRIO_APPLICATION = 8;
alias GTK_PATH_PRIO_THEME = 10;
alias GTK_PATH_PRIO_RC = 12;
alias GTK_PATH_PRIO_HIGHEST = 15;

alias GtkPathPriorityType = Int;

alias GTK_PATH_WIDGET = 0;
alias GTK_PATH_WIDGET_CLASS = 1;
alias GTK_PATH_CLASS = 2;

alias GtkPathType = Int;

alias GTK_POLICY_ALWAYS = 0;
alias GTK_POLICY_AUTOMATIC = 1;
alias GTK_POLICY_NEVER = 2;

alias GtkPolicyType = Int;

alias GTK_POS_LEFT = 0;
alias GTK_POS_RIGHT = 1;
alias GTK_POS_TOP = 2;
alias GTK_POS_BOTTOM = 3;

alias GtkPositionType = Int;

alias GTK_PREVIEW_COLOR = 0;
alias GTK_PREVIEW_GRAYSCALE = 1;

alias GtkPreviewType = Int;

alias GTK_RELIEF_NORMAL = 0;
alias GTK_RELIEF_HALF = 1;
alias GTK_RELIEF_NONE = 2;

alias GtkReliefStyle = Int;

alias GTK_RESIZE_PARENT = 0;
alias GTK_RESIZE_QUEUE = 1;
alias GTK_RESIZE_IMMEDIATE = 2;

alias GtkResizeMode = Int;

alias GTK_RUN_FIRST = 1;
alias GTK_RUN_LAST = 2;
alias GTK_RUN_BOTH = 3;
alias GTK_RUN_NO_RECURSE = 8;
alias GTK_RUN_ACTION = 32;
alias GTK_RUN_NO_HOOKS = 64;

alias GtkSignalRunType = Int;

alias GTK_SCROLL_NONE = 0;
alias GTK_SCROLL_JUMP = 1;
alias GTK_SCROLL_STEP_BACKWARD = 2;
alias GTK_SCROLL_STEP_FORWARD = 3;
alias GTK_SCROLL_PAGE_BACKWARD = 4;
alias GTK_SCROLL_PAGE_FORWARD = 5;
alias GTK_SCROLL_STEP_UP = 6;
alias GTK_SCROLL_STEP_DOWN = 7;
alias GTK_SCROLL_PAGE_UP = 8;
alias GTK_SCROLL_PAGE_DOWN = 9;
alias GTK_SCROLL_STEP_LEFT = 10;
alias GTK_SCROLL_STEP_RIGHT = 11;
alias GTK_SCROLL_PAGE_LEFT = 12;
alias GTK_SCROLL_PAGE_RIGHT = 13;
alias GTK_SCROLL_START = 14;
alias GTK_SCROLL_END = 15;

alias GtkScrollType = Int;

alias GTK_SELECTION_NONE = 0;
alias GTK_SELECTION_SINGLE = 1;
alias GTK_SELECTION_BROWSE = 2;
alias GTK_SELECTION_MULTIPLE = 3;
alias GTK_SELECTION_EXTENDED = 3;

alias GtkSelectionMode = Int;

alias GTK_SHADOW_NONE = 0;
alias GTK_SHADOW_IN = 1;
alias GTK_SHADOW_OUT = 2;
alias GTK_SHADOW_ETCHED_IN = 3;
alias GTK_SHADOW_ETCHED_OUT = 4;

alias GtkShadowType = Int;

alias GTK_STATE_NORMAL = 0;
alias GTK_STATE_ACTIVE = 1;
alias GTK_STATE_PRELIGHT = 2;
alias GTK_STATE_SELECTED = 3;
alias GTK_STATE_INSENSITIVE = 4;

alias GtkStateType = Int;

alias GTK_DIRECTION_LEFT = 0;
alias GTK_DIRECTION_RIGHT = 1;

alias GtkSubmenuDirection = Int;

alias GTK_TOP_BOTTOM = 0;
alias GTK_LEFT_RIGHT = 1;

alias GtkSubmenuPlacement = Int;

alias GTK_TOOLBAR_ICONS = 0;
alias GTK_TOOLBAR_TEXT = 1;
alias GTK_TOOLBAR_BOTH = 2;
alias GTK_TOOLBAR_BOTH_HORIZ = 3;

alias GtkToolbarStyle = Int;

alias GTK_UPDATE_CONTINUOUS = 0;
alias GTK_UPDATE_DISCONTINUOUS = 1;
alias GTK_UPDATE_DELAYED = 2;

alias GtkUpdateType = Int;

alias GTK_VISIBILITY_NONE = 0;
alias GTK_VISIBILITY_PARTIAL = 1;
alias GTK_VISIBILITY_FULL = 2;

alias GtkVisibility = Int;

alias GTK_WIN_POS_NONE = 0;
alias GTK_WIN_POS_CENTER = 1;
alias GTK_WIN_POS_MOUSE = 2;
alias GTK_WIN_POS_CENTER_ALWAYS = 3;
alias GTK_WIN_POS_CENTER_ON_PARENT = 4;

alias GtkWindowPosition = Int;

alias GTK_WINDOW_TOPLEVEL = 0;
alias GTK_WINDOW_POPUP = 1;

alias GtkWindowType = Int;

alias GTK_WRAP_NONE = 0;
alias GTK_WRAP_CHAR = 1;
alias GTK_WRAP_WORD = 2;
alias GTK_WRAP_WORD_CHAR = 3;

alias GtkWrapMode = Int;

alias GTK_SORT_ASCENDING = 0;
alias GTK_SORT_DESCENDING = 1;

alias GtkSortType = Int;

alias GTK_IM_PREEDIT_NOTHING = 0;
alias GTK_IM_PREEDIT_CALLBACK = 1;
alias GTK_IM_PREEDIT_NONE = 2;

alias GtkIMPreeditStyle = Int;

alias GTK_IM_STATUS_NOTHING = 0;
alias GTK_IM_STATUS_CALLBACK = 1;
alias GTK_IM_STATUS_NONE = 2;

alias GtkIMStatusStyle = Int;

alias GTK_PACK_DIRECTION_LTR = 0;
alias GTK_PACK_DIRECTION_RTL = 1;
alias GTK_PACK_DIRECTION_TTB = 2;
alias GTK_PACK_DIRECTION_BTT = 3;

alias GtkPackDirection = Int;

alias GTK_PRINT_PAGES_ALL = 0;
alias GTK_PRINT_PAGES_CURRENT = 1;
alias GTK_PRINT_PAGES_RANGES = 2;
alias GTK_PRINT_PAGES_SELECTION = 3;

alias GtkPrintPages = Int;

alias GTK_PAGE_SET_ALL = 0;
alias GTK_PAGE_SET_EVEN = 1;
alias GTK_PAGE_SET_ODD = 2;

alias GtkPageSet = Int;

alias GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0;
alias GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1;
alias GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2;
alias GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3;
alias GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4;
alias GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5;
alias GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6;
alias GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7;

alias GtkNumberUpLayout = Int;

alias GTK_PAGE_ORIENTATION_PORTRAIT = 0;
alias GTK_PAGE_ORIENTATION_LANDSCAPE = 1;
alias GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = 2;
alias GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3;

alias GtkPageOrientation = Int;

alias GTK_PRINT_QUALITY_LOW = 0;
alias GTK_PRINT_QUALITY_NORMAL = 1;
alias GTK_PRINT_QUALITY_HIGH = 2;
alias GTK_PRINT_QUALITY_DRAFT = 3;

alias GtkPrintQuality = Int;

alias GTK_PRINT_DUPLEX_SIMPLEX = 0;
alias GTK_PRINT_DUPLEX_HORIZONTAL = 1;
alias GTK_PRINT_DUPLEX_VERTICAL = 2;

alias GtkPrintDuplex = Int;

alias GTK_UNIT_PIXEL = 0;
alias GTK_UNIT_POINTS = 1;
alias GTK_UNIT_INCH = 2;
alias GTK_UNIT_MM = 3;

alias GtkUnit = Int;

alias GTK_TREE_VIEW_GRID_LINES_NONE = 0;
alias GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = 1;
alias GTK_TREE_VIEW_GRID_LINES_VERTICAL = 2;
alias GTK_TREE_VIEW_GRID_LINES_BOTH = 3;

alias GtkTreeViewGridLines = Int;

alias GTK_DRAG_RESULT_SUCCESS = 0;
alias GTK_DRAG_RESULT_NO_TARGET = 1;
alias GTK_DRAG_RESULT_USER_CANCELLED = 2;
alias GTK_DRAG_RESULT_TIMEOUT_EXPIRED = 3;
alias GTK_DRAG_RESULT_GRAB_BROKEN = 4;
alias GTK_DRAG_RESULT_ERROR = 5;

alias GtkDragResult = Int;

alias GTK_ACCEL_VISIBLE = 1;
alias GTK_ACCEL_LOCKED = 2;
alias GTK_ACCEL_MASK = 7;

alias GtkAccelFlags = Int;

alias GtkAccelGroup = Struct__GtkAccelGroup;

alias GtkAccelGroupClass = Struct__GtkAccelGroupClass;

alias GtkAccelKey = Struct__GtkAccelKey;

alias GtkAccelGroupEntry = Struct__GtkAccelGroupEntry;

alias GtkAccelGroupActivate = CCodePointer[(Pointer[Struct__GtkAccelGroup],Pointer[Struct__GObject],UInt,Int),(Int)];

alias GtkAccelGroupFindFunc = CCodePointer[(Pointer[Struct__GtkAccelKey],Pointer[Struct__GClosure],RawPointer),(Int)];

record Struct__GtkAccelGroup (
    parent : GObject,
    lock_count : UInt,
    modifier_mask : GdkModifierType,
    acceleratables : Pointer[GSList],
    n_accels : UInt,
    priv_accels : Pointer[GtkAccelGroupEntry],
);

record Struct__GtkAccelGroupClass (
    parent_class : GObjectClass,
    accel_changed : CCodePointer[(Pointer[Struct__GtkAccelGroup],UInt,Int,Pointer[Struct__GClosure]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkAccelKey (
    accel_key : UInt,
    accel_mods : GdkModifierType,
    accel_flags : UInt,
);

external gtk_accel_group_get_type() CULong;

external gtk_accel_group_new() Pointer[GtkAccelGroup];

external gtk_accel_group_get_is_locked(
    accel_group : Pointer[GtkAccelGroup]) Int;

external gtk_accel_group_get_modifier_mask(
    accel_group : Pointer[GtkAccelGroup]) GdkModifierType;

external gtk_accel_group_lock(
    accel_group : Pointer[GtkAccelGroup]);

external gtk_accel_group_unlock(
    accel_group : Pointer[GtkAccelGroup]);

external gtk_accel_group_connect(
    accel_group : Pointer[GtkAccelGroup],
    accel_key : UInt,
    accel_mods : GdkModifierType,
    accel_flags : GtkAccelFlags,
    closure : Pointer[GClosure]);

external gtk_accel_group_connect_by_path(
    accel_group : Pointer[GtkAccelGroup],
    accel_path : Pointer[CChar],
    closure : Pointer[GClosure]);

external gtk_accel_group_disconnect(
    accel_group : Pointer[GtkAccelGroup],
    closure : Pointer[GClosure]) Int;

external gtk_accel_group_disconnect_key(
    accel_group : Pointer[GtkAccelGroup],
    accel_key : UInt,
    accel_mods : GdkModifierType) Int;

external gtk_accel_group_activate(
    accel_group : Pointer[GtkAccelGroup],
    accel_quark : UInt,
    acceleratable : Pointer[GObject],
    accel_key : UInt,
    accel_mods : GdkModifierType) Int;

external _gtk_accel_group_attach(
    accel_group : Pointer[GtkAccelGroup],
    object : Pointer[GObject]);

external _gtk_accel_group_detach(
    accel_group : Pointer[GtkAccelGroup],
    object : Pointer[GObject]);

external gtk_accel_groups_activate(
    object : Pointer[GObject],
    accel_key : UInt,
    accel_mods : GdkModifierType) Int;

external gtk_accel_groups_from_object(
    object : Pointer[GObject]) Pointer[GSList];

external gtk_accel_group_find(
    accel_group : Pointer[GtkAccelGroup],
    find_func : GtkAccelGroupFindFunc,
    data : gpointer) Pointer[GtkAccelKey];

external gtk_accel_group_from_accel_closure(
    closure : Pointer[GClosure]) Pointer[GtkAccelGroup];

external gtk_accelerator_valid(
    keyval : UInt,
    modifiers : GdkModifierType) Int;

external gtk_accelerator_parse(
    accelerator : Pointer[CChar],
    accelerator_key : Pointer[UInt],
    accelerator_mods : Pointer[GdkModifierType]);

external gtk_accelerator_name(
    accelerator_key : UInt,
    accelerator_mods : GdkModifierType) Pointer[CChar];

external gtk_accelerator_get_label(
    accelerator_key : UInt,
    accelerator_mods : GdkModifierType) Pointer[CChar];

external gtk_accelerator_set_default_mod_mask(
    default_mod_mask : GdkModifierType);

external gtk_accelerator_get_default_mod_mask() UInt;

external gtk_accel_group_query(
    accel_group : Pointer[GtkAccelGroup],
    accel_key : UInt,
    accel_mods : GdkModifierType,
    n_entries : Pointer[UInt]) Pointer[GtkAccelGroupEntry];

external _gtk_accel_group_reconnect(
    accel_group : Pointer[GtkAccelGroup],
    accel_path_quark : UInt);

record Struct__GtkAccelGroupEntry (
    key : GtkAccelKey,
    closure : Pointer[GClosure],
    accel_path_quark : UInt,
);

external gtk_accel_flags_get_type() CULong;

external gtk_assistant_page_type_get_type() CULong;

external gtk_builder_error_get_type() CULong;

external gtk_calendar_display_options_get_type() CULong;

external gtk_cell_renderer_state_get_type() CULong;

external gtk_cell_renderer_mode_get_type() CULong;

external gtk_cell_renderer_accel_mode_get_type() CULong;

external gtk_debug_flag_get_type() CULong;

external gtk_dialog_flags_get_type() CULong;

external gtk_response_type_get_type() CULong;

external gtk_dest_defaults_get_type() CULong;

external gtk_target_flags_get_type() CULong;

external gtk_entry_icon_position_get_type() CULong;

external gtk_anchor_type_get_type() CULong;

external gtk_arrow_placement_get_type() CULong;

external gtk_arrow_type_get_type() CULong;

external gtk_attach_options_get_type() CULong;

external gtk_button_box_style_get_type() CULong;

external gtk_curve_type_get_type() CULong;

external gtk_delete_type_get_type() CULong;

external gtk_direction_type_get_type() CULong;

external gtk_expander_style_get_type() CULong;

external gtk_icon_size_get_type() CULong;

external gtk_sensitivity_type_get_type() CULong;

external gtk_side_type_get_type() CULong;

external gtk_text_direction_get_type() CULong;

external gtk_justification_get_type() CULong;

external gtk_match_type_get_type() CULong;

external gtk_menu_direction_type_get_type() CULong;

external gtk_message_type_get_type() CULong;

external gtk_metric_type_get_type() CULong;

external gtk_movement_step_get_type() CULong;

external gtk_scroll_step_get_type() CULong;

external gtk_orientation_get_type() CULong;

external gtk_corner_type_get_type() CULong;

external gtk_pack_type_get_type() CULong;

external gtk_path_priority_type_get_type() CULong;

external gtk_path_type_get_type() CULong;

external gtk_policy_type_get_type() CULong;

external gtk_position_type_get_type() CULong;

external gtk_preview_type_get_type() CULong;

external gtk_relief_style_get_type() CULong;

external gtk_resize_mode_get_type() CULong;

external gtk_signal_run_type_get_type() CULong;

external gtk_scroll_type_get_type() CULong;

external gtk_selection_mode_get_type() CULong;

external gtk_shadow_type_get_type() CULong;

external gtk_state_type_get_type() CULong;

external gtk_submenu_direction_get_type() CULong;

external gtk_submenu_placement_get_type() CULong;

external gtk_toolbar_style_get_type() CULong;

external gtk_update_type_get_type() CULong;

external gtk_visibility_get_type() CULong;

external gtk_window_position_get_type() CULong;

external gtk_window_type_get_type() CULong;

external gtk_wrap_mode_get_type() CULong;

external gtk_sort_type_get_type() CULong;

external gtk_im_preedit_style_get_type() CULong;

external gtk_im_status_style_get_type() CULong;

external gtk_pack_direction_get_type() CULong;

external gtk_print_pages_get_type() CULong;

external gtk_page_set_get_type() CULong;

external gtk_number_up_layout_get_type() CULong;

external gtk_page_orientation_get_type() CULong;

external gtk_print_quality_get_type() CULong;

external gtk_print_duplex_get_type() CULong;

external gtk_unit_get_type() CULong;

external gtk_tree_view_grid_lines_get_type() CULong;

external gtk_drag_result_get_type() CULong;

external gtk_file_chooser_action_get_type() CULong;

external gtk_file_chooser_confirmation_get_type() CULong;

external gtk_file_chooser_error_get_type() CULong;

external gtk_file_filter_flags_get_type() CULong;

external gtk_icon_lookup_flags_get_type() CULong;

external gtk_icon_theme_error_get_type() CULong;

external gtk_icon_view_drop_position_get_type() CULong;

external gtk_image_type_get_type() CULong;

external gtk_buttons_type_get_type() CULong;

external gtk_notebook_tab_get_type() CULong;

external gtk_object_flags_get_type() CULong;

external gtk_arg_flags_get_type() CULong;

external gtk_print_status_get_type() CULong;

external gtk_print_operation_result_get_type() CULong;

external gtk_print_operation_action_get_type() CULong;

external gtk_print_error_get_type() CULong;

external gtk_private_flags_get_type() CULong;

external gtk_progress_bar_style_get_type() CULong;

external gtk_progress_bar_orientation_get_type() CULong;

external gtk_rc_flags_get_type() CULong;

external gtk_rc_token_type_get_type() CULong;

external gtk_recent_sort_type_get_type() CULong;

external gtk_recent_chooser_error_get_type() CULong;

external gtk_recent_filter_flags_get_type() CULong;

external gtk_recent_manager_error_get_type() CULong;

external gtk_size_group_mode_get_type() CULong;

external gtk_spin_button_update_policy_get_type() CULong;

external gtk_spin_type_get_type() CULong;

external gtk_text_buffer_target_info_get_type() CULong;

external gtk_text_search_flags_get_type() CULong;

external gtk_text_window_type_get_type() CULong;

external gtk_toolbar_child_type_get_type() CULong;

external gtk_toolbar_space_style_get_type() CULong;

external gtk_tool_palette_drag_targets_get_type() CULong;

external gtk_tree_model_flags_get_type() CULong;

external gtk_tree_view_drop_position_get_type() CULong;

external gtk_tree_view_column_sizing_get_type() CULong;

external gtk_ui_manager_item_type_get_type() CULong;

external gtk_widget_flags_get_type() CULong;

external gtk_widget_help_type_get_type() CULong;

external gtk_tree_view_mode_get_type() CULong;

external gtk_cell_type_get_type() CULong;

external gtk_clist_drag_pos_get_type() CULong;

external gtk_button_action_get_type() CULong;

external gtk_ctree_pos_get_type() CULong;

external gtk_ctree_line_style_get_type() CULong;

external gtk_ctree_expander_style_get_type() CULong;

external gtk_ctree_expansion_type_get_type() CULong;

external gtk_identifier_get_type() CULong;

alias GtkArg = Struct__GtkArg;

alias GtkObject = Struct__GtkObject;

alias GtkFunction = CCodePointer[(RawPointer),(Int)];

alias GtkCallbackMarshal = CCodePointer[(Pointer[Struct__GtkObject],RawPointer,UInt,Pointer[Struct__GtkArg]),()];

alias GtkTranslateFunc = CCodePointer[(Pointer[CChar],RawPointer),(Pointer[CChar])];

alias GtkFundamentalType = CULong;

alias GtkType = CULong;

alias GtkTypeObject = GTypeInstance;

alias GtkTypeClass = GTypeClass;

alias GtkClassInitFunc = GBaseInitFunc;

alias GtkObjectInitFunc = GInstanceInitFunc;

alias GtkSignalMarshaller = GSignalCMarshaller;

alias GtkDestroyNotify = CCodePointer[(RawPointer),()];

alias GtkSignalFunc = CCodePointer[(),()];

record Struct__GtkArg (
    type : CULong,
    name : Pointer[CChar],
    d : AUnionType,
);

alias GtkTypeInfo = Struct__GtkTypeInfo;

record Struct__GtkTypeInfo (
    type_name : Pointer[CChar],
    object_size : UInt,
    class_size : UInt,
    class_init_func : GtkClassInitFunc,
    object_init_func : GtkObjectInitFunc,
    reserved_1 : gpointer,
    reserved_2 : gpointer,
    base_class_init_func : GtkClassInitFunc,
);

external gtk_type_init(
    debug_flags : GTypeDebugFlags);

external gtk_type_unique(
    parent_type : CULong,
    gtkinfo : Pointer[GtkTypeInfo]) CULong;

external gtk_type_class(
    type : CULong) gpointer;

external gtk_type_new(
    type : CULong) gpointer;

alias GtkEnumValue = GEnumValue;

alias GtkFlagValue = GFlagsValue;

external gtk_type_enum_get_values(
    enum_type : CULong) Pointer[GtkEnumValue];

external gtk_type_flags_get_values(
    flags_type : CULong) Pointer[GtkFlagValue];

external gtk_type_enum_find_value(
    enum_type : CULong,
    value_name : Pointer[CChar]) Pointer[GtkEnumValue];

external gtk_type_flags_find_value(
    flags_type : CULong,
    value_name : Pointer[CChar]) Pointer[GtkFlagValue];

alias GTK_DEBUG_MISC = 1;
alias GTK_DEBUG_PLUGSOCKET = 2;
alias GTK_DEBUG_TEXT = 4;
alias GTK_DEBUG_TREE = 8;
alias GTK_DEBUG_UPDATES = 16;
alias GTK_DEBUG_KEYBINDINGS = 32;
alias GTK_DEBUG_MULTIHEAD = 64;
alias GTK_DEBUG_MODULES = 128;
alias GTK_DEBUG_GEOMETRY = 256;
alias GTK_DEBUG_ICONTHEME = 512;
alias GTK_DEBUG_PRINTING = 1024;
alias GTK_DEBUG_BUILDER = 2048;

alias GtkDebugFlag = Int;

external gtk_debug_flags : UInt;

alias GTK_IN_DESTRUCTION = 1;
alias GTK_FLOATING = 2;
alias GTK_RESERVED_1 = 4;
alias GTK_RESERVED_2 = 8;

alias GtkObjectFlags = Int;

alias GtkObjectClass = Struct__GtkObjectClass;

record Struct__GtkObject (
    parent_instance : GInitiallyUnowned,
    flags : UInt,
);

record Struct__GtkObjectClass (
    parent_class : GInitiallyUnownedClass,
    set_arg : CCodePointer[(Pointer[Struct__GtkObject],Pointer[Struct__GtkArg],UInt),()],
    get_arg : CCodePointer[(Pointer[Struct__GtkObject],Pointer[Struct__GtkArg],UInt),()],
    destroy : CCodePointer[(Pointer[Struct__GtkObject]),()],
);

external gtk_object_get_type() CULong;

external gtk_object_sink(
    object : Pointer[GtkObject]);

external gtk_object_destroy(
    object : Pointer[GtkObject]);

external gtk_object_new(
    type : CULong,
    first_property_name : Pointer[CChar],
    ...) Pointer[GtkObject];

external gtk_object_ref(
    object : Pointer[GtkObject]) Pointer[GtkObject];

external gtk_object_unref(
    object : Pointer[GtkObject]);

external gtk_object_weakref(
    object : Pointer[GtkObject],
    notify : GDestroyNotify,
    data : gpointer);

external gtk_object_weakunref(
    object : Pointer[GtkObject],
    notify : GDestroyNotify,
    data : gpointer);

external gtk_object_set_data(
    object : Pointer[GtkObject],
    key : Pointer[CChar],
    data : gpointer);

external gtk_object_set_data_full(
    object : Pointer[GtkObject],
    key : Pointer[CChar],
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_object_remove_data(
    object : Pointer[GtkObject],
    key : Pointer[CChar]);

external gtk_object_get_data(
    object : Pointer[GtkObject],
    key : Pointer[CChar]) gpointer;

external gtk_object_remove_no_notify(
    object : Pointer[GtkObject],
    key : Pointer[CChar]);

external gtk_object_set_user_data(
    object : Pointer[GtkObject],
    data : gpointer);

external gtk_object_get_user_data(
    object : Pointer[GtkObject]) gpointer;

external gtk_object_set_data_by_id(
    object : Pointer[GtkObject],
    data_id : UInt,
    data : gpointer);

external gtk_object_set_data_by_id_full(
    object : Pointer[GtkObject],
    data_id : UInt,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_object_get_data_by_id(
    object : Pointer[GtkObject],
    data_id : UInt) gpointer;

external gtk_object_remove_data_by_id(
    object : Pointer[GtkObject],
    data_id : UInt);

external gtk_object_remove_no_notify_by_id(
    object : Pointer[GtkObject],
    key_id : UInt);

alias GTK_ARG_READABLE = 1;
alias GTK_ARG_WRITABLE = 2;
alias GTK_ARG_CONSTRUCT = 4;
alias GTK_ARG_CONSTRUCT_ONLY = 8;
alias GTK_ARG_CHILD_ARG = 16;

alias GtkArgFlags = Int;

external gtk_object_get(
    object : Pointer[GtkObject],
    first_property_name : Pointer[CChar],
    ...);

external gtk_object_set(
    object : Pointer[GtkObject],
    first_property_name : Pointer[CChar],
    ...);

external gtk_object_add_arg_type(
    arg_name : Pointer[CChar],
    arg_type : CULong,
    arg_flags : UInt,
    arg_id : UInt);

alias GtkAdjustment = Struct__GtkAdjustment;

alias GtkAdjustmentClass = Struct__GtkAdjustmentClass;

record Struct__GtkAdjustment (
    parent_instance : GtkObject,
    lower : Double,
    upper : Double,
    value : Double,
    step_increment : Double,
    page_increment : Double,
    page_size : Double,
);

record Struct__GtkAdjustmentClass (
    parent_class : GtkObjectClass,
    changed : CCodePointer[(Pointer[Struct__GtkAdjustment]),()],
    value_changed : CCodePointer[(Pointer[Struct__GtkAdjustment]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_adjustment_get_type() CULong;

external gtk_adjustment_new(
    value : Double,
    lower : Double,
    upper : Double,
    step_increment : Double,
    page_increment : Double,
    page_size : Double) Pointer[GtkObject];

external gtk_adjustment_changed(
    adjustment : Pointer[GtkAdjustment]);

external gtk_adjustment_value_changed(
    adjustment : Pointer[GtkAdjustment]);

external gtk_adjustment_clamp_page(
    adjustment : Pointer[GtkAdjustment],
    lower : Double,
    upper : Double);

external gtk_adjustment_get_value(
    adjustment : Pointer[GtkAdjustment]) Double;

external gtk_adjustment_set_value(
    adjustment : Pointer[GtkAdjustment],
    value : Double);

external gtk_adjustment_get_lower(
    adjustment : Pointer[GtkAdjustment]) Double;

external gtk_adjustment_set_lower(
    adjustment : Pointer[GtkAdjustment],
    lower : Double);

external gtk_adjustment_get_upper(
    adjustment : Pointer[GtkAdjustment]) Double;

external gtk_adjustment_set_upper(
    adjustment : Pointer[GtkAdjustment],
    upper : Double);

external gtk_adjustment_get_step_increment(
    adjustment : Pointer[GtkAdjustment]) Double;

external gtk_adjustment_set_step_increment(
    adjustment : Pointer[GtkAdjustment],
    step_increment : Double);

external gtk_adjustment_get_page_increment(
    adjustment : Pointer[GtkAdjustment]) Double;

external gtk_adjustment_set_page_increment(
    adjustment : Pointer[GtkAdjustment],
    page_increment : Double);

external gtk_adjustment_get_page_size(
    adjustment : Pointer[GtkAdjustment]) Double;

external gtk_adjustment_set_page_size(
    adjustment : Pointer[GtkAdjustment],
    page_size : Double);

external gtk_adjustment_configure(
    adjustment : Pointer[GtkAdjustment],
    value : Double,
    lower : Double,
    upper : Double,
    step_increment : Double,
    page_increment : Double,
    page_size : Double);

alias GtkBorder = Struct__GtkBorder;

alias GtkStyle = Struct__GtkStyle;

alias GtkStyleClass = Struct__GtkStyleClass;

alias GtkThemeEngine = Opaque;

alias GtkRcStyle = Struct__GtkRcStyle;

alias GtkIconSet = Opaque;

alias GtkIconSource = Opaque;

alias GtkRcProperty = Struct__GtkRcProperty;

alias GtkSettings = Struct__GtkSettings;

alias GtkRcPropertyParser = CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GString],Pointer[Struct__GValue]),(Int)];

alias GtkWidget = Struct__GtkWidget;

record Struct__GtkStyle (
    parent_instance : GObject,
    fg : Array[GdkColor,5],
    bg : Array[GdkColor,5],
    light : Array[GdkColor,5],
    dark : Array[GdkColor,5],
    mid : Array[GdkColor,5],
    text : Array[GdkColor,5],
    base : Array[GdkColor,5],
    text_aa : Array[GdkColor,5],
    black : GdkColor,
    white : GdkColor,
    font_desc : Pointer[PangoFontDescription],
    xthickness : Int,
    ythickness : Int,
    fg_gc : Array[Pointer[GdkGC],5],
    bg_gc : Array[Pointer[GdkGC],5],
    light_gc : Array[Pointer[GdkGC],5],
    dark_gc : Array[Pointer[GdkGC],5],
    mid_gc : Array[Pointer[GdkGC],5],
    text_gc : Array[Pointer[GdkGC],5],
    base_gc : Array[Pointer[GdkGC],5],
    text_aa_gc : Array[Pointer[GdkGC],5],
    black_gc : Pointer[GdkGC],
    white_gc : Pointer[GdkGC],
    bg_pixmap : Array[Pointer[GdkPixmap],5],
    attach_count : Int,
    depth : Int,
    colormap : Pointer[GdkColormap],
    private_font : Pointer[GdkFont],
    private_font_desc : Pointer[PangoFontDescription],
    rc_style : Pointer[GtkRcStyle],
    styles : Pointer[GSList],
    property_cache : Pointer[GArray],
    icon_factories : Pointer[GSList],
);

record Struct__GtkStyleClass (
    parent_class : GObjectClass,
    realize : CCodePointer[(Pointer[Struct__GtkStyle]),()],
    unrealize : CCodePointer[(Pointer[Struct__GtkStyle]),()],
    copy : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GtkStyle]),()],
    clone : CCodePointer[(Pointer[Struct__GtkStyle]),(Pointer[Struct__GtkStyle])],
    init_from_rc : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GtkRcStyle]),()],
    set_background : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int),()],
    render_icon : CCodePointer[(Pointer[Struct__GtkStyle],OpaquePointer,Int,Int,Int,Pointer[Struct__GtkWidget],Pointer[CChar]),(OpaquePointer)],
    draw_hline : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int),()],
    draw_vline : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int),()],
    draw_shadow : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_polygon : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Pointer[Struct__GdkPoint],Int,Int),()],
    draw_arrow : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int,Int),()],
    draw_diamond : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_string : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Pointer[CChar]),()],
    draw_box : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_flat_box : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_check : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_option : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_tab : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_shadow_gap : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int,Int,Int),()],
    draw_box_gap : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int,Int,Int),()],
    draw_extension : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int),()],
    draw_focus : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int),()],
    draw_slider : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int),()],
    draw_handle : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int),()],
    draw_expander : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int),()],
    draw_layout : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,OpaquePointer),()],
    draw_resize_grip : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],Int,Int,Int,Int,Int),()],
    draw_spinner : CCodePointer[(Pointer[Struct__GtkStyle],Pointer[Struct__GdkDrawable],Int,Pointer[Struct__GdkRectangle],Pointer[Struct__GtkWidget],Pointer[CChar],UInt,Int,Int,Int,Int),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
    _gtk_reserved7 : CCodePointer[(),()],
    _gtk_reserved8 : CCodePointer[(),()],
    _gtk_reserved9 : CCodePointer[(),()],
    _gtk_reserved10 : CCodePointer[(),()],
    _gtk_reserved11 : CCodePointer[(),()],
);

record Struct__GtkBorder (
    left : Int,
    right : Int,
    top : Int,
    bottom : Int,
);

external gtk_style_get_type() CULong;

external gtk_style_new() Pointer[GtkStyle];

external gtk_style_copy(
    style : Pointer[GtkStyle]) Pointer[GtkStyle];

external gtk_style_attach(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow]) Pointer[GtkStyle];

external gtk_style_detach(
    style : Pointer[GtkStyle]);

external gtk_style_ref(
    style : Pointer[GtkStyle]) Pointer[GtkStyle];

external gtk_style_unref(
    style : Pointer[GtkStyle]);

external gtk_style_get_font(
    style : Pointer[GtkStyle]) Pointer[GdkFont];

external gtk_style_set_font(
    style : Pointer[GtkStyle],
    font : Pointer[GdkFont]);

external gtk_style_set_background(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType);

external gtk_style_apply_default_background(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    set_bg : Int,
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_style_lookup_icon_set(
    style : Pointer[GtkStyle],
    stock_id : Pointer[CChar]) Pointer[GtkIconSet];

external gtk_style_lookup_color(
    style : Pointer[GtkStyle],
    color_name : Pointer[CChar],
    color : Pointer[GdkColor]) Int;

external gtk_style_render_icon(
    style : Pointer[GtkStyle],
    source : Pointer[GtkIconSource],
    direction : GtkTextDirection,
    state : GtkStateType,
    size : GtkIconSize,
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar]) Pointer[GdkPixbuf];

external gtk_draw_hline(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    x1 : Int,
    x2 : Int,
    y : Int);

external gtk_draw_vline(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    y1_ : Int,
    y2_ : Int,
    x : Int);

external gtk_draw_shadow(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_polygon(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    points : Pointer[GdkPoint],
    npoints : Int,
    fill : Int);

external gtk_draw_arrow(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    arrow_type : GtkArrowType,
    fill : Int,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_diamond(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_box(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_flat_box(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_check(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_option(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_tab(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_shadow_gap(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    gap_side : GtkPositionType,
    gap_x : Int,
    gap_width : Int);

external gtk_draw_box_gap(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    gap_side : GtkPositionType,
    gap_x : Int,
    gap_width : Int);

external gtk_draw_extension(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    gap_side : GtkPositionType);

external gtk_draw_focus(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_draw_slider(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    orientation : GtkOrientation);

external gtk_draw_handle(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    orientation : GtkOrientation);

external gtk_draw_expander(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    x : Int,
    y : Int,
    expander_style : GtkExpanderStyle);

external gtk_draw_layout(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    use_text : Int,
    x : Int,
    y : Int,
    layout : Pointer[PangoLayout]);

external gtk_draw_resize_grip(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    edge : GdkWindowEdge,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_hline(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x1 : Int,
    x2 : Int,
    y : Int);

external gtk_paint_vline(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    y1_ : Int,
    y2_ : Int,
    x : Int);

external gtk_paint_shadow(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_polygon(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    points : Pointer[GdkPoint],
    n_points : Int,
    fill : Int);

external gtk_paint_arrow(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    arrow_type : GtkArrowType,
    fill : Int,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_diamond(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_box(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_flat_box(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_check(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_option(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_tab(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_shadow_gap(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    gap_side : GtkPositionType,
    gap_x : Int,
    gap_width : Int);

external gtk_paint_box_gap(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    gap_side : GtkPositionType,
    gap_x : Int,
    gap_width : Int);

external gtk_paint_extension(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    gap_side : GtkPositionType);

external gtk_paint_focus(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_slider(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    orientation : GtkOrientation);

external gtk_paint_handle(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    orientation : GtkOrientation);

external gtk_paint_expander(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    expander_style : GtkExpanderStyle);

external gtk_paint_layout(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    use_text : Int,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    layout : Pointer[PangoLayout]);

external gtk_paint_resize_grip(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    edge : GdkWindowEdge,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_paint_spinner(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    step : UInt,
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_border_get_type() CULong;

external gtk_border_new() Pointer[GtkBorder];

external gtk_border_copy(
    border_ : Pointer[GtkBorder]) Pointer[GtkBorder];

external gtk_border_free(
    border_ : Pointer[GtkBorder]);

external gtk_style_get_style_property(
    style : Pointer[GtkStyle],
    widget_type : CULong,
    property_name : Pointer[CChar],
    value : Pointer[GValue]);

external gtk_style_get_valist(
    style : Pointer[GtkStyle],
    widget_type : CULong,
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gtk_style_get(
    style : Pointer[GtkStyle],
    widget_type : CULong,
    first_property_name : Pointer[CChar],
    ...);

external _gtk_style_peek_property_value(
    style : Pointer[GtkStyle],
    widget_type : CULong,
    pspec : Pointer[GParamSpec],
    parser : GtkRcPropertyParser) Pointer[GValue];

external _gtk_style_init_for_settings(
    style : Pointer[GtkStyle],
    settings : Pointer[GtkSettings]);

external _gtk_style_shade(
    a : Pointer[GdkColor],
    b : Pointer[GdkColor],
    k : Double);

external gtk_draw_string(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    x : Int,
    y : Int,
    string : Pointer[CChar]);

external gtk_paint_string(
    style : Pointer[GtkStyle],
    window : Pointer[GdkWindow],
    state_type : GtkStateType,
    area : Pointer[GdkRectangle],
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar],
    x : Int,
    y : Int,
    string : Pointer[CChar]);

external gtk_draw_insertion_cursor(
    widget : Pointer[GtkWidget],
    drawable : Pointer[GdkDrawable],
    area : Pointer[GdkRectangle],
    location : Pointer[GdkRectangle],
    is_primary : Int,
    direction : GtkTextDirection,
    draw_arrow : Int);

external _gtk_widget_get_cursor_gc(
    widget : Pointer[GtkWidget]) Pointer[GdkGC];

external _gtk_widget_get_cursor_color(
    widget : Pointer[GtkWidget],
    color : Pointer[GdkColor]);

alias GtkIconFactory = Struct__GtkIconFactory;

alias GtkRcContext = Opaque;

alias GtkRcStyleClass = Struct__GtkRcStyleClass;

alias GTK_RC_FG = 1;
alias GTK_RC_BG = 2;
alias GTK_RC_TEXT = 4;
alias GTK_RC_BASE = 8;

alias GtkRcFlags = Int;

record Struct__GtkRcStyle (
    parent_instance : GObject,
    name : Pointer[CChar],
    bg_pixmap_name : Array[Pointer[CChar],5],
    font_desc : Pointer[PangoFontDescription],
    color_flags : Array[GtkRcFlags,5],
    fg : Array[GdkColor,5],
    bg : Array[GdkColor,5],
    text : Array[GdkColor,5],
    base : Array[GdkColor,5],
    xthickness : Int,
    ythickness : Int,
    rc_properties : Pointer[GArray],
    rc_style_lists : Pointer[GSList],
    icon_factories : Pointer[GSList],
    engine_specified : UInt,
);

record Struct__GtkRcStyleClass (
    parent_class : GObjectClass,
    create_rc_style : CCodePointer[(Pointer[Struct__GtkRcStyle]),(Pointer[Struct__GtkRcStyle])],
    parse : CCodePointer[(Pointer[Struct__GtkRcStyle],Pointer[Struct__GtkSettings],Pointer[Struct__GScanner]),(UInt)],
    merge : CCodePointer[(Pointer[Struct__GtkRcStyle],Pointer[Struct__GtkRcStyle]),()],
    create_style : CCodePointer[(Pointer[Struct__GtkRcStyle]),(Pointer[Struct__GtkStyle])],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external _gtk_rc_init();

external _gtk_rc_parse_widget_class_path(
    pattern : Pointer[CChar]) Pointer[GSList];

external _gtk_rc_free_widget_class_path(
    list : Pointer[GSList]);

external _gtk_rc_match_widget_class(
    list : Pointer[GSList],
    length : Int,
    path : Pointer[CChar],
    path_reversed : Pointer[CChar]) Int;

external gtk_rc_add_default_file(
    filename : Pointer[CChar]);

external gtk_rc_set_default_files(
    filenames : Pointer[Pointer[CChar]]);

external gtk_rc_get_default_files() Pointer[Pointer[CChar]];

external gtk_rc_get_style(
    widget : Pointer[GtkWidget]) Pointer[GtkStyle];

external gtk_rc_get_style_by_paths(
    settings : Pointer[GtkSettings],
    widget_path : Pointer[CChar],
    class_path : Pointer[CChar],
    type : CULong) Pointer[GtkStyle];

external gtk_rc_reparse_all_for_settings(
    settings : Pointer[GtkSettings],
    force_load : Int) Int;

external gtk_rc_reset_styles(
    settings : Pointer[GtkSettings]);

external gtk_rc_find_pixmap_in_path(
    settings : Pointer[GtkSettings],
    scanner : Pointer[GScanner],
    pixmap_file : Pointer[CChar]) Pointer[CChar];

external gtk_rc_parse(
    filename : Pointer[CChar]);

external gtk_rc_parse_string(
    rc_string : Pointer[CChar]);

external gtk_rc_reparse_all() Int;

external gtk_rc_add_widget_name_style(
    rc_style : Pointer[GtkRcStyle],
    pattern : Pointer[CChar]);

external gtk_rc_add_widget_class_style(
    rc_style : Pointer[GtkRcStyle],
    pattern : Pointer[CChar]);

external gtk_rc_add_class_style(
    rc_style : Pointer[GtkRcStyle],
    pattern : Pointer[CChar]);

external gtk_rc_style_get_type() CULong;

external gtk_rc_style_new() Pointer[GtkRcStyle];

external gtk_rc_style_copy(
    orig : Pointer[GtkRcStyle]) Pointer[GtkRcStyle];

external gtk_rc_style_ref(
    rc_style : Pointer[GtkRcStyle]);

external gtk_rc_style_unref(
    rc_style : Pointer[GtkRcStyle]);

external gtk_rc_find_module_in_path(
    module_file : Pointer[CChar]) Pointer[CChar];

external gtk_rc_get_theme_dir() Pointer[CChar];

external gtk_rc_get_module_dir() Pointer[CChar];

external gtk_rc_get_im_module_path() Pointer[CChar];

external gtk_rc_get_im_module_file() Pointer[CChar];

alias GTK_RC_TOKEN_INVALID = 270;
alias GTK_RC_TOKEN_INCLUDE = 271;
alias GTK_RC_TOKEN_NORMAL = 272;
alias GTK_RC_TOKEN_ACTIVE = 273;
alias GTK_RC_TOKEN_PRELIGHT = 274;
alias GTK_RC_TOKEN_SELECTED = 275;
alias GTK_RC_TOKEN_INSENSITIVE = 276;
alias GTK_RC_TOKEN_FG = 277;
alias GTK_RC_TOKEN_BG = 278;
alias GTK_RC_TOKEN_TEXT = 279;
alias GTK_RC_TOKEN_BASE = 280;
alias GTK_RC_TOKEN_XTHICKNESS = 281;
alias GTK_RC_TOKEN_YTHICKNESS = 282;
alias GTK_RC_TOKEN_FONT = 283;
alias GTK_RC_TOKEN_FONTSET = 284;
alias GTK_RC_TOKEN_FONT_NAME = 285;
alias GTK_RC_TOKEN_BG_PIXMAP = 286;
alias GTK_RC_TOKEN_PIXMAP_PATH = 287;
alias GTK_RC_TOKEN_STYLE = 288;
alias GTK_RC_TOKEN_BINDING = 289;
alias GTK_RC_TOKEN_BIND = 290;
alias GTK_RC_TOKEN_WIDGET = 291;
alias GTK_RC_TOKEN_WIDGET_CLASS = 292;
alias GTK_RC_TOKEN_CLASS = 293;
alias GTK_RC_TOKEN_LOWEST = 294;
alias GTK_RC_TOKEN_GTK = 295;
alias GTK_RC_TOKEN_APPLICATION = 296;
alias GTK_RC_TOKEN_THEME = 297;
alias GTK_RC_TOKEN_RC = 298;
alias GTK_RC_TOKEN_HIGHEST = 299;
alias GTK_RC_TOKEN_ENGINE = 300;
alias GTK_RC_TOKEN_MODULE_PATH = 301;
alias GTK_RC_TOKEN_IM_MODULE_PATH = 302;
alias GTK_RC_TOKEN_IM_MODULE_FILE = 303;
alias GTK_RC_TOKEN_STOCK = 304;
alias GTK_RC_TOKEN_LTR = 305;
alias GTK_RC_TOKEN_RTL = 306;
alias GTK_RC_TOKEN_COLOR = 307;
alias GTK_RC_TOKEN_UNBIND = 308;
alias GTK_RC_TOKEN_LAST = 309;

alias GtkRcTokenType = Int;

external gtk_rc_scanner_new() Pointer[GScanner];

external gtk_rc_parse_color(
    scanner : Pointer[GScanner],
    color : Pointer[GdkColor]) UInt;

external gtk_rc_parse_color_full(
    scanner : Pointer[GScanner],
    style : Pointer[GtkRcStyle],
    color : Pointer[GdkColor]) UInt;

external gtk_rc_parse_state(
    scanner : Pointer[GScanner],
    state : Pointer[GtkStateType]) UInt;

external gtk_rc_parse_priority(
    scanner : Pointer[GScanner],
    priority : Pointer[GtkPathPriorityType]) UInt;

record Struct__GtkRcProperty (
    type_name : UInt,
    property_name : UInt,
    origin : Pointer[CChar],
    value : GValue,
);

external _gtk_rc_style_lookup_rc_property(
    rc_style : Pointer[GtkRcStyle],
    type_name : UInt,
    property_name : UInt) Pointer[GtkRcProperty];

external _gtk_rc_style_set_rc_property(
    rc_style : Pointer[GtkRcStyle],
    property : Pointer[GtkRcProperty]);

external _gtk_rc_style_unset_rc_property(
    rc_style : Pointer[GtkRcStyle],
    type_name : UInt,
    property_name : UInt);

external _gtk_rc_style_get_color_hashes(
    rc_style : Pointer[GtkRcStyle]) Pointer[GSList];

external _gtk_rc_context_get_default_font_name(
    settings : Pointer[GtkSettings]) Pointer[CChar];

external _gtk_rc_context_destroy(
    settings : Pointer[GtkSettings]);

alias GtkSettingsClass = Struct__GtkSettingsClass;

alias GtkSettingsValue = Struct__GtkSettingsValue;

alias GtkSettingsPropertyValue = Opaque;

record Struct__GtkSettings (
    parent_instance : GObject,
    queued_settings : Pointer[GData],
    property_values : Pointer[GtkSettingsPropertyValue],
    rc_context : Pointer[GtkRcContext],
    screen : Pointer[GdkScreen],
);

record Struct__GtkSettingsClass (
    parent_class : GObjectClass,
);

record Struct__GtkSettingsValue (
    origin : Pointer[CChar],
    value : GValue,
);

external gtk_settings_get_type() CULong;

external gtk_settings_get_default() Pointer[GtkSettings];

external gtk_settings_get_for_screen(
    screen : Pointer[GdkScreen]) Pointer[GtkSettings];

external gtk_settings_install_property(
    pspec : Pointer[GParamSpec]);

external gtk_settings_install_property_parser(
    pspec : Pointer[GParamSpec],
    parser : GtkRcPropertyParser);

external gtk_rc_property_parse_color(
    pspec : Pointer[GParamSpec],
    gstring : Pointer[GString],
    property_value : Pointer[GValue]) Int;

external gtk_rc_property_parse_enum(
    pspec : Pointer[GParamSpec],
    gstring : Pointer[GString],
    property_value : Pointer[GValue]) Int;

external gtk_rc_property_parse_flags(
    pspec : Pointer[GParamSpec],
    gstring : Pointer[GString],
    property_value : Pointer[GValue]) Int;

external gtk_rc_property_parse_requisition(
    pspec : Pointer[GParamSpec],
    gstring : Pointer[GString],
    property_value : Pointer[GValue]) Int;

external gtk_rc_property_parse_border(
    pspec : Pointer[GParamSpec],
    gstring : Pointer[GString],
    property_value : Pointer[GValue]) Int;

external gtk_settings_set_property_value(
    settings : Pointer[GtkSettings],
    name : Pointer[CChar],
    svalue : Pointer[GtkSettingsValue]);

external gtk_settings_set_string_property(
    settings : Pointer[GtkSettings],
    name : Pointer[CChar],
    v_string : Pointer[CChar],
    origin : Pointer[CChar]);

external gtk_settings_set_long_property(
    settings : Pointer[GtkSettings],
    name : Pointer[CChar],
    v_long : CLong,
    origin : Pointer[CChar]);

external gtk_settings_set_double_property(
    settings : Pointer[GtkSettings],
    name : Pointer[CChar],
    v_double : Double,
    origin : Pointer[CChar]);

external _gtk_settings_set_property_value_from_rc(
    settings : Pointer[GtkSettings],
    name : Pointer[CChar],
    svalue : Pointer[GtkSettingsValue]);

external _gtk_settings_reset_rc_values(
    settings : Pointer[GtkSettings]);

external _gtk_settings_handle_event(
    event : Pointer[GdkEventSetting]);

external _gtk_rc_property_parser_from_type(
    type : CULong) GtkRcPropertyParser;

external _gtk_settings_parse_convert(
    parser : GtkRcPropertyParser,
    src_value : Pointer[GValue],
    pspec : Pointer[GParamSpec],
    dest_value : Pointer[GValue]) Int;

alias GTK_TOPLEVEL = 16;
alias GTK_NO_WINDOW = 32;
alias GTK_REALIZED = 64;
alias GTK_MAPPED = 128;
alias GTK_VISIBLE = 256;
alias GTK_SENSITIVE = 512;
alias GTK_PARENT_SENSITIVE = 1024;
alias GTK_CAN_FOCUS = 2048;
alias GTK_HAS_FOCUS = 4096;
alias GTK_CAN_DEFAULT = 8192;
alias GTK_HAS_DEFAULT = 16384;
alias GTK_HAS_GRAB = 32768;
alias GTK_RC_STYLE = 65536;
alias GTK_COMPOSITE_CHILD = 131072;
alias GTK_NO_REPARENT = 262144;
alias GTK_APP_PAINTABLE = 524288;
alias GTK_RECEIVES_DEFAULT = 1048576;
alias GTK_DOUBLE_BUFFERED = 2097152;
alias GTK_NO_SHOW_ALL = 4194304;

alias GtkWidgetFlags = Int;

alias GTK_WIDGET_HELP_TOOLTIP = 0;
alias GTK_WIDGET_HELP_WHATS_THIS = 1;

alias GtkWidgetHelpType = Int;

alias GtkRequisition = Struct__GtkRequisition;

alias GtkSelectionData = Struct__GtkSelectionData;

alias GtkWidgetClass = Struct__GtkWidgetClass;

alias GtkWidgetAuxInfo = Struct__GtkWidgetAuxInfo;

alias GtkWidgetShapeInfo = Struct__GtkWidgetShapeInfo;

alias GtkClipboard = Opaque;

alias GtkTooltip = Opaque;

alias GtkWindow = Struct__GtkWindow;

alias GtkAllocation = GdkRectangle;

alias GtkCallback = CCodePointer[(Pointer[Struct__GtkWidget],RawPointer),()];

record Struct__GtkRequisition (
    width : Int,
    height : Int,
);

record Struct__GtkWidget (
    object : GtkObject,
    private_flags : UShort,
    state : CUChar,
    saved_state : CUChar,
    name : Pointer[CChar],
    style : Pointer[GtkStyle],
    requisition : GtkRequisition,
    allocation : GtkAllocation,
    window : Pointer[GdkWindow],
    parent : Pointer[GtkWidget],
);

record Struct__GtkWidgetClass (
    parent_class : GtkObjectClass,
    activate_signal : UInt,
    set_scroll_adjustments_signal : UInt,
    dispatch_child_properties_changed : CCodePointer[(Pointer[Struct__GtkWidget],UInt,Pointer[Pointer[Struct__GParamSpec]]),()],
    show : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    show_all : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    hide : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    hide_all : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    map : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    unmap : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    realize : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    unrealize : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    size_request : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkRequisition]),()],
    size_allocate : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkRectangle]),()],
    state_changed : CCodePointer[(Pointer[Struct__GtkWidget],Int),()],
    parent_set : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkWidget]),()],
    hierarchy_changed : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkWidget]),()],
    style_set : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkStyle]),()],
    direction_changed : CCodePointer[(Pointer[Struct__GtkWidget],Int),()],
    grab_notify : CCodePointer[(Pointer[Struct__GtkWidget],Int),()],
    child_notify : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GParamSpec]),()],
    mnemonic_activate : CCodePointer[(Pointer[Struct__GtkWidget],Int),(Int)],
    grab_focus : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    focus : CCodePointer[(Pointer[Struct__GtkWidget],Int),(Int)],
    event : CCodePointer[(Pointer[Struct__GtkWidget],OpaquePointer),(Int)],
    button_press_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventButton]),(Int)],
    button_release_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventButton]),(Int)],
    scroll_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventScroll]),(Int)],
    motion_notify_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventMotion]),(Int)],
    delete_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventAny]),(Int)],
    destroy_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventAny]),(Int)],
    expose_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventExpose]),(Int)],
    key_press_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventKey]),(Int)],
    key_release_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventKey]),(Int)],
    enter_notify_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventCrossing]),(Int)],
    leave_notify_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventCrossing]),(Int)],
    configure_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventConfigure]),(Int)],
    focus_in_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventFocus]),(Int)],
    focus_out_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventFocus]),(Int)],
    map_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventAny]),(Int)],
    unmap_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventAny]),(Int)],
    property_notify_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventProperty]),(Int)],
    selection_clear_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventSelection]),(Int)],
    selection_request_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventSelection]),(Int)],
    selection_notify_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventSelection]),(Int)],
    proximity_in_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventProximity]),(Int)],
    proximity_out_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventProximity]),(Int)],
    visibility_notify_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventVisibility]),(Int)],
    client_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventClient]),(Int)],
    no_expose_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventAny]),(Int)],
    window_state_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventWindowState]),(Int)],
    selection_get : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkSelectionData],UInt,UInt),()],
    selection_received : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkSelectionData],UInt),()],
    drag_begin : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext]),()],
    drag_end : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext]),()],
    drag_data_get : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext],Pointer[Struct__GtkSelectionData],UInt,UInt),()],
    drag_data_delete : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext]),()],
    drag_leave : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext],UInt),()],
    drag_motion : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext],Int,Int,UInt),(Int)],
    drag_drop : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext],Int,Int,UInt),(Int)],
    drag_data_received : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkDragContext],Int,Int,Pointer[Struct__GtkSelectionData],UInt,UInt),()],
    popup_menu : CCodePointer[(Pointer[Struct__GtkWidget]),(Int)],
    show_help : CCodePointer[(Pointer[Struct__GtkWidget],Int),(Int)],
    get_accessible : CCodePointer[(Pointer[Struct__GtkWidget]),(Pointer[Struct__AtkObject])],
    screen_changed : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkScreen]),()],
    can_activate_accel : CCodePointer[(Pointer[Struct__GtkWidget],UInt),(Int)],
    grab_broken_event : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventGrabBroken]),(Int)],
    composited_changed : CCodePointer[(Pointer[Struct__GtkWidget]),()],
    query_tooltip : CCodePointer[(Pointer[Struct__GtkWidget],Int,Int,Int,OpaquePointer),(Int)],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
    _gtk_reserved7 : CCodePointer[(),()],
);

record Struct__GtkWidgetAuxInfo (
    x : Int,
    y : Int,
    width : Int,
    height : Int,
    x_set : UInt,
    y_set : UInt,
);

record Struct__GtkWidgetShapeInfo (
    offset_x : Short,
    offset_y : Short,
    shape_mask : Pointer[GdkBitmap],
);

external gtk_widget_get_type() CULong;

external gtk_widget_new(
    type : CULong,
    first_property_name : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_widget_destroy(
    widget : Pointer[GtkWidget]);

external gtk_widget_destroyed(
    widget : Pointer[GtkWidget],
    widget_pointer : Pointer[Pointer[GtkWidget]]);

external gtk_widget_ref(
    widget : Pointer[GtkWidget]) Pointer[GtkWidget];

external gtk_widget_unref(
    widget : Pointer[GtkWidget]);

external gtk_widget_set(
    widget : Pointer[GtkWidget],
    first_property_name : Pointer[CChar],
    ...);

external gtk_widget_unparent(
    widget : Pointer[GtkWidget]);

external gtk_widget_show(
    widget : Pointer[GtkWidget]);

external gtk_widget_show_now(
    widget : Pointer[GtkWidget]);

external gtk_widget_hide(
    widget : Pointer[GtkWidget]);

external gtk_widget_show_all(
    widget : Pointer[GtkWidget]);

external gtk_widget_hide_all(
    widget : Pointer[GtkWidget]);

external gtk_widget_set_no_show_all(
    widget : Pointer[GtkWidget],
    no_show_all : Int);

external gtk_widget_get_no_show_all(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_map(
    widget : Pointer[GtkWidget]);

external gtk_widget_unmap(
    widget : Pointer[GtkWidget]);

external gtk_widget_realize(
    widget : Pointer[GtkWidget]);

external gtk_widget_unrealize(
    widget : Pointer[GtkWidget]);

external gtk_widget_queue_draw(
    widget : Pointer[GtkWidget]);

external gtk_widget_queue_draw_area(
    widget : Pointer[GtkWidget],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_widget_queue_clear(
    widget : Pointer[GtkWidget]);

external gtk_widget_queue_clear_area(
    widget : Pointer[GtkWidget],
    x : Int,
    y : Int,
    width : Int,
    height : Int);

external gtk_widget_queue_resize(
    widget : Pointer[GtkWidget]);

external gtk_widget_queue_resize_no_redraw(
    widget : Pointer[GtkWidget]);

external gtk_widget_draw(
    widget : Pointer[GtkWidget],
    area : Pointer[GdkRectangle]);

external gtk_widget_size_request(
    widget : Pointer[GtkWidget],
    requisition : Pointer[GtkRequisition]);

external gtk_widget_size_allocate(
    widget : Pointer[GtkWidget],
    allocation : Pointer[GtkAllocation]);

external gtk_widget_get_child_requisition(
    widget : Pointer[GtkWidget],
    requisition : Pointer[GtkRequisition]);

external gtk_widget_add_accelerator(
    widget : Pointer[GtkWidget],
    accel_signal : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup],
    accel_key : UInt,
    accel_mods : GdkModifierType,
    accel_flags : GtkAccelFlags);

external gtk_widget_remove_accelerator(
    widget : Pointer[GtkWidget],
    accel_group : Pointer[GtkAccelGroup],
    accel_key : UInt,
    accel_mods : GdkModifierType) Int;

external gtk_widget_set_accel_path(
    widget : Pointer[GtkWidget],
    accel_path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup]);

external _gtk_widget_get_accel_path(
    widget : Pointer[GtkWidget],
    locked : Pointer[Int]) Pointer[CChar];

external gtk_widget_list_accel_closures(
    widget : Pointer[GtkWidget]) Pointer[GList];

external gtk_widget_can_activate_accel(
    widget : Pointer[GtkWidget],
    signal_id : UInt) Int;

external gtk_widget_mnemonic_activate(
    widget : Pointer[GtkWidget],
    group_cycling : Int) Int;

external gtk_widget_event(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEvent]) Int;

external gtk_widget_send_expose(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEvent]) Int;

external gtk_widget_send_focus_change(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEvent]) Int;

external gtk_widget_activate(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_scroll_adjustments(
    widget : Pointer[GtkWidget],
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment]) Int;

external gtk_widget_reparent(
    widget : Pointer[GtkWidget],
    new_parent : Pointer[GtkWidget]);

external gtk_widget_intersect(
    widget : Pointer[GtkWidget],
    area : Pointer[GdkRectangle],
    intersection : Pointer[GdkRectangle]) Int;

external gtk_widget_region_intersect(
    widget : Pointer[GtkWidget],
    region : Pointer[GdkRegion]) Pointer[GdkRegion];

external gtk_widget_freeze_child_notify(
    widget : Pointer[GtkWidget]);

external gtk_widget_child_notify(
    widget : Pointer[GtkWidget],
    child_property : Pointer[CChar]);

external gtk_widget_thaw_child_notify(
    widget : Pointer[GtkWidget]);

external gtk_widget_set_can_focus(
    widget : Pointer[GtkWidget],
    can_focus : Int);

external gtk_widget_get_can_focus(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_has_focus(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_is_focus(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_grab_focus(
    widget : Pointer[GtkWidget]);

external gtk_widget_set_can_default(
    widget : Pointer[GtkWidget],
    can_default : Int);

external gtk_widget_get_can_default(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_has_default(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_grab_default(
    widget : Pointer[GtkWidget]);

external gtk_widget_set_receives_default(
    widget : Pointer[GtkWidget],
    receives_default : Int);

external gtk_widget_get_receives_default(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_has_grab(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_name(
    widget : Pointer[GtkWidget],
    name : Pointer[CChar]);

external gtk_widget_get_name(
    widget : Pointer[GtkWidget]) Pointer[CChar];

external gtk_widget_set_state(
    widget : Pointer[GtkWidget],
    state : GtkStateType);

external gtk_widget_get_state(
    widget : Pointer[GtkWidget]) GtkStateType;

external gtk_widget_set_sensitive(
    widget : Pointer[GtkWidget],
    sensitive : Int);

external gtk_widget_get_sensitive(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_is_sensitive(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_visible(
    widget : Pointer[GtkWidget],
    visible : Int);

external gtk_widget_get_visible(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_has_window(
    widget : Pointer[GtkWidget],
    has_window : Int);

external gtk_widget_get_has_window(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_is_toplevel(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_is_drawable(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_realized(
    widget : Pointer[GtkWidget],
    realized : Int);

external gtk_widget_get_realized(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_mapped(
    widget : Pointer[GtkWidget],
    mapped : Int);

external gtk_widget_get_mapped(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_app_paintable(
    widget : Pointer[GtkWidget],
    app_paintable : Int);

external gtk_widget_get_app_paintable(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_double_buffered(
    widget : Pointer[GtkWidget],
    double_buffered : Int);

external gtk_widget_get_double_buffered(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_redraw_on_allocate(
    widget : Pointer[GtkWidget],
    redraw_on_allocate : Int);

external gtk_widget_set_parent(
    widget : Pointer[GtkWidget],
    parent : Pointer[GtkWidget]);

external gtk_widget_get_parent(
    widget : Pointer[GtkWidget]) Pointer[GtkWidget];

external gtk_widget_set_parent_window(
    widget : Pointer[GtkWidget],
    parent_window : Pointer[GdkWindow]);

external gtk_widget_get_parent_window(
    widget : Pointer[GtkWidget]) Pointer[GdkWindow];

external gtk_widget_set_child_visible(
    widget : Pointer[GtkWidget],
    is_visible : Int);

external gtk_widget_get_child_visible(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_window(
    widget : Pointer[GtkWidget],
    window : Pointer[GdkWindow]);

external gtk_widget_get_window(
    widget : Pointer[GtkWidget]) Pointer[GdkWindow];

external gtk_widget_get_allocation(
    widget : Pointer[GtkWidget],
    allocation : Pointer[GtkAllocation]);

external gtk_widget_set_allocation(
    widget : Pointer[GtkWidget],
    allocation : Pointer[GtkAllocation]);

external gtk_widget_get_requisition(
    widget : Pointer[GtkWidget],
    requisition : Pointer[GtkRequisition]);

external gtk_widget_child_focus(
    widget : Pointer[GtkWidget],
    direction : GtkDirectionType) Int;

external gtk_widget_keynav_failed(
    widget : Pointer[GtkWidget],
    direction : GtkDirectionType) Int;

external gtk_widget_error_bell(
    widget : Pointer[GtkWidget]);

external gtk_widget_set_size_request(
    widget : Pointer[GtkWidget],
    width : Int,
    height : Int);

external gtk_widget_get_size_request(
    widget : Pointer[GtkWidget],
    width : Pointer[Int],
    height : Pointer[Int]);

external gtk_widget_set_uposition(
    widget : Pointer[GtkWidget],
    x : Int,
    y : Int);

external gtk_widget_set_usize(
    widget : Pointer[GtkWidget],
    width : Int,
    height : Int);

external gtk_widget_set_events(
    widget : Pointer[GtkWidget],
    events : Int);

external gtk_widget_add_events(
    widget : Pointer[GtkWidget],
    events : Int);

external gtk_widget_set_extension_events(
    widget : Pointer[GtkWidget],
    mode : GdkExtensionMode);

external gtk_widget_get_extension_events(
    widget : Pointer[GtkWidget]) GdkExtensionMode;

external gtk_widget_get_toplevel(
    widget : Pointer[GtkWidget]) Pointer[GtkWidget];

external gtk_widget_get_ancestor(
    widget : Pointer[GtkWidget],
    widget_type : CULong) Pointer[GtkWidget];

external gtk_widget_get_colormap(
    widget : Pointer[GtkWidget]) Pointer[GdkColormap];

external gtk_widget_get_visual(
    widget : Pointer[GtkWidget]) Pointer[GdkVisual];

external gtk_widget_get_screen(
    widget : Pointer[GtkWidget]) Pointer[GdkScreen];

external gtk_widget_has_screen(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_get_display(
    widget : Pointer[GtkWidget]) Pointer[GdkDisplay];

external gtk_widget_get_root_window(
    widget : Pointer[GtkWidget]) Pointer[GdkWindow];

external gtk_widget_get_settings(
    widget : Pointer[GtkWidget]) Pointer[GtkSettings];

external gtk_widget_get_clipboard(
    widget : Pointer[GtkWidget],
    selection : GdkAtom) Pointer[GtkClipboard];

external gtk_widget_get_snapshot(
    widget : Pointer[GtkWidget],
    clip_rect : Pointer[GdkRectangle]) Pointer[GdkPixmap];

external gtk_widget_get_accessible(
    widget : Pointer[GtkWidget]) Pointer[AtkObject];

external gtk_widget_set_colormap(
    widget : Pointer[GtkWidget],
    colormap : Pointer[GdkColormap]);

external gtk_widget_get_events(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_get_pointer(
    widget : Pointer[GtkWidget],
    x : Pointer[Int],
    y : Pointer[Int]);

external gtk_widget_is_ancestor(
    widget : Pointer[GtkWidget],
    ancestor : Pointer[GtkWidget]) Int;

external gtk_widget_translate_coordinates(
    src_widget : Pointer[GtkWidget],
    dest_widget : Pointer[GtkWidget],
    src_x : Int,
    src_y : Int,
    dest_x : Pointer[Int],
    dest_y : Pointer[Int]) Int;

external gtk_widget_hide_on_delete(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_style_attach(
    style : Pointer[GtkWidget]);

external gtk_widget_has_rc_style(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_set_style(
    widget : Pointer[GtkWidget],
    style : Pointer[GtkStyle]);

external gtk_widget_ensure_style(
    widget : Pointer[GtkWidget]);

external gtk_widget_get_style(
    widget : Pointer[GtkWidget]) Pointer[GtkStyle];

external gtk_widget_modify_style(
    widget : Pointer[GtkWidget],
    style : Pointer[GtkRcStyle]);

external gtk_widget_get_modifier_style(
    widget : Pointer[GtkWidget]) Pointer[GtkRcStyle];

external gtk_widget_modify_fg(
    widget : Pointer[GtkWidget],
    state : GtkStateType,
    color : Pointer[GdkColor]);

external gtk_widget_modify_bg(
    widget : Pointer[GtkWidget],
    state : GtkStateType,
    color : Pointer[GdkColor]);

external gtk_widget_modify_text(
    widget : Pointer[GtkWidget],
    state : GtkStateType,
    color : Pointer[GdkColor]);

external gtk_widget_modify_base(
    widget : Pointer[GtkWidget],
    state : GtkStateType,
    color : Pointer[GdkColor]);

external gtk_widget_modify_cursor(
    widget : Pointer[GtkWidget],
    primary : Pointer[GdkColor],
    secondary : Pointer[GdkColor]);

external gtk_widget_modify_font(
    widget : Pointer[GtkWidget],
    font_desc : Pointer[PangoFontDescription]);

external gtk_widget_create_pango_context(
    widget : Pointer[GtkWidget]) Pointer[PangoContext];

external gtk_widget_get_pango_context(
    widget : Pointer[GtkWidget]) Pointer[PangoContext];

external gtk_widget_create_pango_layout(
    widget : Pointer[GtkWidget],
    text : Pointer[CChar]) Pointer[PangoLayout];

external gtk_widget_render_icon(
    widget : Pointer[GtkWidget],
    stock_id : Pointer[CChar],
    size : GtkIconSize,
    detail : Pointer[CChar]) Pointer[GdkPixbuf];

external gtk_widget_set_composite_name(
    widget : Pointer[GtkWidget],
    name : Pointer[CChar]);

external gtk_widget_get_composite_name(
    widget : Pointer[GtkWidget]) Pointer[CChar];

external gtk_widget_reset_rc_styles(
    widget : Pointer[GtkWidget]);

external gtk_widget_push_colormap(
    cmap : Pointer[GdkColormap]);

external gtk_widget_push_composite_child();

external gtk_widget_pop_composite_child();

external gtk_widget_pop_colormap();

external gtk_widget_class_install_style_property(
    klass : Pointer[GtkWidgetClass],
    pspec : Pointer[GParamSpec]);

external gtk_widget_class_install_style_property_parser(
    klass : Pointer[GtkWidgetClass],
    pspec : Pointer[GParamSpec],
    parser : GtkRcPropertyParser);

external gtk_widget_class_find_style_property(
    klass : Pointer[GtkWidgetClass],
    property_name : Pointer[CChar]) Pointer[GParamSpec];

external gtk_widget_class_list_style_properties(
    klass : Pointer[GtkWidgetClass],
    n_properties : Pointer[UInt]) Pointer[Pointer[GParamSpec]];

external gtk_widget_style_get_property(
    widget : Pointer[GtkWidget],
    property_name : Pointer[CChar],
    value : Pointer[GValue]);

external gtk_widget_style_get_valist(
    widget : Pointer[GtkWidget],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gtk_widget_style_get(
    widget : Pointer[GtkWidget],
    first_property_name : Pointer[CChar],
    ...);

external gtk_widget_set_default_colormap(
    colormap : Pointer[GdkColormap]);

external gtk_widget_get_default_style() Pointer[GtkStyle];

external gtk_widget_get_default_colormap() Pointer[GdkColormap];

external gtk_widget_get_default_visual() Pointer[GdkVisual];

external gtk_widget_set_direction(
    widget : Pointer[GtkWidget],
    dir : GtkTextDirection);

external gtk_widget_get_direction(
    widget : Pointer[GtkWidget]) GtkTextDirection;

external gtk_widget_set_default_direction(
    dir : GtkTextDirection);

external gtk_widget_get_default_direction() GtkTextDirection;

external gtk_widget_is_composited(
    widget : Pointer[GtkWidget]) Int;

external gtk_widget_shape_combine_mask(
    widget : Pointer[GtkWidget],
    shape_mask : Pointer[GdkBitmap],
    offset_x : Int,
    offset_y : Int);

external gtk_widget_input_shape_combine_mask(
    widget : Pointer[GtkWidget],
    shape_mask : Pointer[GdkBitmap],
    offset_x : Int,
    offset_y : Int);

external gtk_widget_reset_shapes(
    widget : Pointer[GtkWidget]);

external gtk_widget_path(
    widget : Pointer[GtkWidget],
    path_length : Pointer[UInt],
    path : Pointer[Pointer[CChar]],
    path_reversed : Pointer[Pointer[CChar]]);

external gtk_widget_class_path(
    widget : Pointer[GtkWidget],
    path_length : Pointer[UInt],
    path : Pointer[Pointer[CChar]],
    path_reversed : Pointer[Pointer[CChar]]);

external gtk_widget_list_mnemonic_labels(
    widget : Pointer[GtkWidget]) Pointer[GList];

external gtk_widget_add_mnemonic_label(
    widget : Pointer[GtkWidget],
    label : Pointer[GtkWidget]);

external gtk_widget_remove_mnemonic_label(
    widget : Pointer[GtkWidget],
    label : Pointer[GtkWidget]);

external gtk_widget_set_tooltip_window(
    widget : Pointer[GtkWidget],
    custom_window : Pointer[GtkWindow]);

external gtk_widget_get_tooltip_window(
    widget : Pointer[GtkWidget]) Pointer[GtkWindow];

external gtk_widget_trigger_tooltip_query(
    widget : Pointer[GtkWidget]);

external gtk_widget_set_tooltip_text(
    widget : Pointer[GtkWidget],
    text : Pointer[CChar]);

external gtk_widget_get_tooltip_text(
    widget : Pointer[GtkWidget]) Pointer[CChar];

external gtk_widget_set_tooltip_markup(
    widget : Pointer[GtkWidget],
    markup : Pointer[CChar]);

external gtk_widget_get_tooltip_markup(
    widget : Pointer[GtkWidget]) Pointer[CChar];

external gtk_widget_set_has_tooltip(
    widget : Pointer[GtkWidget],
    has_tooltip : Int);

external gtk_widget_get_has_tooltip(
    widget : Pointer[GtkWidget]) Int;

external gtk_requisition_get_type() CULong;

external gtk_requisition_copy(
    requisition : Pointer[GtkRequisition]) Pointer[GtkRequisition];

external gtk_requisition_free(
    requisition : Pointer[GtkRequisition]);

external _gtk_widget_set_has_default(
    widget : Pointer[GtkWidget],
    has_default : Int);

external _gtk_widget_set_has_grab(
    widget : Pointer[GtkWidget],
    has_grab : Int);

external _gtk_widget_set_is_toplevel(
    widget : Pointer[GtkWidget],
    is_toplevel : Int);

external _gtk_widget_grab_notify(
    widget : Pointer[GtkWidget],
    was_grabbed : Int);

external _gtk_widget_get_aux_info(
    widget : Pointer[GtkWidget],
    create : Int) Pointer[GtkWidgetAuxInfo];

external _gtk_widget_propagate_hierarchy_changed(
    widget : Pointer[GtkWidget],
    previous_toplevel : Pointer[GtkWidget]);

external _gtk_widget_propagate_screen_changed(
    widget : Pointer[GtkWidget],
    previous_screen : Pointer[GdkScreen]);

external _gtk_widget_propagate_composited_changed(
    widget : Pointer[GtkWidget]);

external _gtk_widget_set_pointer_window(
    widget : Pointer[GtkWidget],
    pointer_window : Pointer[GdkWindow]);

external _gtk_widget_get_pointer_window(
    widget : Pointer[GtkWidget]) Pointer[GdkWindow];

external _gtk_widget_is_pointer_widget(
    widget : Pointer[GtkWidget]) Int;

external _gtk_widget_synthesize_crossing(
    from : Pointer[GtkWidget],
    to : Pointer[GtkWidget],
    mode : GdkCrossingMode);

external _gtk_widget_peek_colormap() Pointer[GdkColormap];

external _gtk_widget_buildable_finish_accelerator(
    widget : Pointer[GtkWidget],
    toplevel : Pointer[GtkWidget],
    user_data : gpointer);

alias GtkContainer = Struct__GtkContainer;

alias GtkContainerClass = Struct__GtkContainerClass;

record Struct__GtkContainer (
    widget : GtkWidget,
    focus_child : Pointer[GtkWidget],
    border_width : UInt,
    need_resize : UInt,
    resize_mode : UInt,
    reallocate_redraws : UInt,
    has_focus_chain : UInt,
);

record Struct__GtkContainerClass (
    parent_class : GtkWidgetClass,
    add : CCodePointer[(Pointer[Struct__GtkContainer],Pointer[Struct__GtkWidget]),()],
    remove : CCodePointer[(Pointer[Struct__GtkContainer],Pointer[Struct__GtkWidget]),()],
    check_resize : CCodePointer[(Pointer[Struct__GtkContainer]),()],
    forall : CCodePointer[(Pointer[Struct__GtkContainer],Int,CCodePointer[(Pointer[Struct__GtkWidget],RawPointer),()],RawPointer),()],
    set_focus_child : CCodePointer[(Pointer[Struct__GtkContainer],Pointer[Struct__GtkWidget]),()],
    child_type : CCodePointer[(Pointer[Struct__GtkContainer]),(CULong)],
    composite_name : CCodePointer[(Pointer[Struct__GtkContainer],Pointer[Struct__GtkWidget]),(Pointer[CChar])],
    set_child_property : CCodePointer[(Pointer[Struct__GtkContainer],Pointer[Struct__GtkWidget],UInt,Pointer[Struct__GValue],Pointer[Struct__GParamSpec]),()],
    get_child_property : CCodePointer[(Pointer[Struct__GtkContainer],Pointer[Struct__GtkWidget],UInt,Pointer[Struct__GValue],Pointer[Struct__GParamSpec]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_container_get_type() CULong;

external gtk_container_set_border_width(
    container : Pointer[GtkContainer],
    border_width : UInt);

external gtk_container_get_border_width(
    container : Pointer[GtkContainer]) UInt;

external gtk_container_add(
    container : Pointer[GtkContainer],
    widget : Pointer[GtkWidget]);

external gtk_container_remove(
    container : Pointer[GtkContainer],
    widget : Pointer[GtkWidget]);

external gtk_container_set_resize_mode(
    container : Pointer[GtkContainer],
    resize_mode : GtkResizeMode);

external gtk_container_get_resize_mode(
    container : Pointer[GtkContainer]) GtkResizeMode;

external gtk_container_check_resize(
    container : Pointer[GtkContainer]);

external gtk_container_foreach(
    container : Pointer[GtkContainer],
    callback : GtkCallback,
    callback_data : gpointer);

external gtk_container_foreach_full(
    container : Pointer[GtkContainer],
    callback : GtkCallback,
    marshal : GtkCallbackMarshal,
    callback_data : gpointer,
    notify : GDestroyNotify);

external gtk_container_get_children(
    container : Pointer[GtkContainer]) Pointer[GList];

external gtk_container_propagate_expose(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    event : Pointer[GdkEventExpose]);

external gtk_container_set_focus_chain(
    container : Pointer[GtkContainer],
    focusable_widgets : Pointer[GList]);

external gtk_container_get_focus_chain(
    container : Pointer[GtkContainer],
    focusable_widgets : Pointer[Pointer[GList]]) Int;

external gtk_container_unset_focus_chain(
    container : Pointer[GtkContainer]);

external gtk_container_set_reallocate_redraws(
    container : Pointer[GtkContainer],
    needs_redraws : Int);

external gtk_container_set_focus_child(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget]);

external gtk_container_get_focus_child(
    container : Pointer[GtkContainer]) Pointer[GtkWidget];

external gtk_container_set_focus_vadjustment(
    container : Pointer[GtkContainer],
    adjustment : Pointer[GtkAdjustment]);

external gtk_container_get_focus_vadjustment(
    container : Pointer[GtkContainer]) Pointer[GtkAdjustment];

external gtk_container_set_focus_hadjustment(
    container : Pointer[GtkContainer],
    adjustment : Pointer[GtkAdjustment]);

external gtk_container_get_focus_hadjustment(
    container : Pointer[GtkContainer]) Pointer[GtkAdjustment];

external gtk_container_resize_children(
    container : Pointer[GtkContainer]);

external gtk_container_child_type(
    container : Pointer[GtkContainer]) CULong;

external gtk_container_class_install_child_property(
    cclass : Pointer[GtkContainerClass],
    property_id : UInt,
    pspec : Pointer[GParamSpec]);

external gtk_container_class_find_child_property(
    cclass : Pointer[GObjectClass],
    property_name : Pointer[CChar]) Pointer[GParamSpec];

external gtk_container_class_list_child_properties(
    cclass : Pointer[GObjectClass],
    n_properties : Pointer[UInt]) Pointer[Pointer[GParamSpec]];

external gtk_container_add_with_properties(
    container : Pointer[GtkContainer],
    widget : Pointer[GtkWidget],
    first_prop_name : Pointer[CChar],
    ...);

external gtk_container_child_set(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    first_prop_name : Pointer[CChar],
    ...);

external gtk_container_child_get(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    first_prop_name : Pointer[CChar],
    ...);

external gtk_container_child_set_valist(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gtk_container_child_get_valist(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external gtk_container_child_set_property(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    property_name : Pointer[CChar],
    value : Pointer[GValue]);

external gtk_container_child_get_property(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget],
    property_name : Pointer[CChar],
    value : Pointer[GValue]);

external gtk_container_forall(
    container : Pointer[GtkContainer],
    callback : GtkCallback,
    callback_data : gpointer);

external _gtk_container_queue_resize(
    container : Pointer[GtkContainer]);

external _gtk_container_clear_resize_widgets(
    container : Pointer[GtkContainer]);

external _gtk_container_child_composite_name(
    container : Pointer[GtkContainer],
    child : Pointer[GtkWidget]) Pointer[CChar];

external _gtk_container_dequeue_resize_handler(
    container : Pointer[GtkContainer]);

external _gtk_container_focus_sort(
    container : Pointer[GtkContainer],
    children : Pointer[GList],
    direction : GtkDirectionType,
    old_focus : Pointer[GtkWidget]) Pointer[GList];

alias GtkBin = Struct__GtkBin;

alias GtkBinClass = Struct__GtkBinClass;

record Struct__GtkBin (
    container : GtkContainer,
    child : Pointer[GtkWidget],
);

record Struct__GtkBinClass (
    parent_class : GtkContainerClass,
);

external gtk_bin_get_type() CULong;

external gtk_bin_get_child(
    bin : Pointer[GtkBin]) Pointer[GtkWidget];

alias GtkWindowClass = Struct__GtkWindowClass;

alias GtkWindowGeometryInfo = Opaque;

alias GtkWindowGroup = Struct__GtkWindowGroup;

alias GtkWindowGroupClass = Struct__GtkWindowGroupClass;

record Struct__GtkWindow (
    bin : GtkBin,
    title : Pointer[CChar],
    wmclass_name : Pointer[CChar],
    wmclass_class : Pointer[CChar],
    wm_role : Pointer[CChar],
    focus_widget : Pointer[GtkWidget],
    default_widget : Pointer[GtkWidget],
    transient_parent : Pointer[GtkWindow],
    geometry_info : Pointer[GtkWindowGeometryInfo],
    frame : Pointer[GdkWindow],
    group : Pointer[GtkWindowGroup],
    configure_request_count : UShort,
    allow_shrink : UInt,
    allow_grow : UInt,
    configure_notify_received : UInt,
    need_default_position : UInt,
    need_default_size : UInt,
    position : UInt,
    type : UInt,
    has_user_ref_count : UInt,
    has_focus : UInt,
    modal : UInt,
    destroy_with_parent : UInt,
    has_frame : UInt,
    iconify_initially : UInt,
    stick_initially : UInt,
    maximize_initially : UInt,
    decorated : UInt,
    type_hint : UInt,
    gravity : UInt,
    is_active : UInt,
    has_toplevel_focus : UInt,
    frame_left : UInt,
    frame_top : UInt,
    frame_right : UInt,
    frame_bottom : UInt,
    keys_changed_handler : UInt,
    mnemonic_modifier : GdkModifierType,
    screen : Pointer[GdkScreen],
);

record Struct__GtkWindowClass (
    parent_class : GtkBinClass,
    set_focus : CCodePointer[(Pointer[Struct__GtkWindow],Pointer[Struct__GtkWidget]),()],
    frame_event : CCodePointer[(Pointer[Struct__GtkWindow],OpaquePointer),(Int)],
    activate_focus : CCodePointer[(Pointer[Struct__GtkWindow]),()],
    activate_default : CCodePointer[(Pointer[Struct__GtkWindow]),()],
    move_focus : CCodePointer[(Pointer[Struct__GtkWindow],Int),()],
    keys_changed : CCodePointer[(Pointer[Struct__GtkWindow]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkWindowGroup (
    parent_instance : GObject,
    grabs : Pointer[GSList],
);

record Struct__GtkWindowGroupClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_window_get_type() CULong;

external gtk_window_new(
    type : GtkWindowType) Pointer[GtkWidget];

external gtk_window_set_title(
    window : Pointer[GtkWindow],
    title : Pointer[CChar]);

external gtk_window_get_title(
    window : Pointer[GtkWindow]) Pointer[CChar];

external gtk_window_set_wmclass(
    window : Pointer[GtkWindow],
    wmclass_name : Pointer[CChar],
    wmclass_class : Pointer[CChar]);

external gtk_window_set_role(
    window : Pointer[GtkWindow],
    role : Pointer[CChar]);

external gtk_window_set_startup_id(
    window : Pointer[GtkWindow],
    startup_id : Pointer[CChar]);

external gtk_window_get_role(
    window : Pointer[GtkWindow]) Pointer[CChar];

external gtk_window_add_accel_group(
    window : Pointer[GtkWindow],
    accel_group : Pointer[GtkAccelGroup]);

external gtk_window_remove_accel_group(
    window : Pointer[GtkWindow],
    accel_group : Pointer[GtkAccelGroup]);

external gtk_window_set_position(
    window : Pointer[GtkWindow],
    position : GtkWindowPosition);

external gtk_window_activate_focus(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_focus(
    window : Pointer[GtkWindow],
    focus : Pointer[GtkWidget]);

external gtk_window_get_focus(
    window : Pointer[GtkWindow]) Pointer[GtkWidget];

external gtk_window_set_default(
    window : Pointer[GtkWindow],
    default_widget : Pointer[GtkWidget]);

external gtk_window_get_default_widget(
    window : Pointer[GtkWindow]) Pointer[GtkWidget];

external gtk_window_activate_default(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_transient_for(
    window : Pointer[GtkWindow],
    parent : Pointer[GtkWindow]);

external gtk_window_get_transient_for(
    window : Pointer[GtkWindow]) Pointer[GtkWindow];

external gtk_window_set_opacity(
    window : Pointer[GtkWindow],
    opacity : Double);

external gtk_window_get_opacity(
    window : Pointer[GtkWindow]) Double;

external gtk_window_set_type_hint(
    window : Pointer[GtkWindow],
    hint : GdkWindowTypeHint);

external gtk_window_get_type_hint(
    window : Pointer[GtkWindow]) GdkWindowTypeHint;

external gtk_window_set_skip_taskbar_hint(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_skip_taskbar_hint(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_skip_pager_hint(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_skip_pager_hint(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_urgency_hint(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_urgency_hint(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_accept_focus(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_accept_focus(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_focus_on_map(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_focus_on_map(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_destroy_with_parent(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_destroy_with_parent(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_mnemonics_visible(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_mnemonics_visible(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_resizable(
    window : Pointer[GtkWindow],
    resizable : Int);

external gtk_window_get_resizable(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_gravity(
    window : Pointer[GtkWindow],
    gravity : GdkGravity);

external gtk_window_get_gravity(
    window : Pointer[GtkWindow]) GdkGravity;

external gtk_window_set_geometry_hints(
    window : Pointer[GtkWindow],
    geometry_widget : Pointer[GtkWidget],
    geometry : Pointer[GdkGeometry],
    geom_mask : GdkWindowHints);

external gtk_window_set_screen(
    window : Pointer[GtkWindow],
    screen : Pointer[GdkScreen]);

external gtk_window_get_screen(
    window : Pointer[GtkWindow]) Pointer[GdkScreen];

external gtk_window_is_active(
    window : Pointer[GtkWindow]) Int;

external gtk_window_has_toplevel_focus(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_has_frame(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_has_frame(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_frame_dimensions(
    window : Pointer[GtkWindow],
    left : Int,
    top : Int,
    right : Int,
    bottom : Int);

external gtk_window_get_frame_dimensions(
    window : Pointer[GtkWindow],
    left : Pointer[Int],
    top : Pointer[Int],
    right : Pointer[Int],
    bottom : Pointer[Int]);

external gtk_window_set_decorated(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_decorated(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_deletable(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_get_deletable(
    window : Pointer[GtkWindow]) Int;

external gtk_window_set_icon_list(
    window : Pointer[GtkWindow],
    list : Pointer[GList]);

external gtk_window_get_icon_list(
    window : Pointer[GtkWindow]) Pointer[GList];

external gtk_window_set_icon(
    window : Pointer[GtkWindow],
    icon : Pointer[GdkPixbuf]);

external gtk_window_set_icon_name(
    window : Pointer[GtkWindow],
    name : Pointer[CChar]);

external gtk_window_set_icon_from_file(
    window : Pointer[GtkWindow],
    filename : Pointer[CChar],
    err : Pointer[Pointer[GError]]) Int;

external gtk_window_get_icon(
    window : Pointer[GtkWindow]) Pointer[GdkPixbuf];

external gtk_window_get_icon_name(
    window : Pointer[GtkWindow]) Pointer[CChar];

external gtk_window_set_default_icon_list(
    list : Pointer[GList]);

external gtk_window_get_default_icon_list() Pointer[GList];

external gtk_window_set_default_icon(
    icon : Pointer[GdkPixbuf]);

external gtk_window_set_default_icon_name(
    name : Pointer[CChar]);

external gtk_window_get_default_icon_name() Pointer[CChar];

external gtk_window_set_default_icon_from_file(
    filename : Pointer[CChar],
    err : Pointer[Pointer[GError]]) Int;

external gtk_window_set_auto_startup_notification(
    setting : Int);

external gtk_window_set_modal(
    window : Pointer[GtkWindow],
    modal : Int);

external gtk_window_get_modal(
    window : Pointer[GtkWindow]) Int;

external gtk_window_list_toplevels() Pointer[GList];

external gtk_window_add_mnemonic(
    window : Pointer[GtkWindow],
    keyval : UInt,
    target : Pointer[GtkWidget]);

external gtk_window_remove_mnemonic(
    window : Pointer[GtkWindow],
    keyval : UInt,
    target : Pointer[GtkWidget]);

external gtk_window_mnemonic_activate(
    window : Pointer[GtkWindow],
    keyval : UInt,
    modifier : GdkModifierType) Int;

external gtk_window_set_mnemonic_modifier(
    window : Pointer[GtkWindow],
    modifier : GdkModifierType);

external gtk_window_get_mnemonic_modifier(
    window : Pointer[GtkWindow]) GdkModifierType;

external gtk_window_activate_key(
    window : Pointer[GtkWindow],
    event : Pointer[GdkEventKey]) Int;

external gtk_window_propagate_key_event(
    window : Pointer[GtkWindow],
    event : Pointer[GdkEventKey]) Int;

external gtk_window_present(
    window : Pointer[GtkWindow]);

external gtk_window_present_with_time(
    window : Pointer[GtkWindow],
    timestamp : UInt);

external gtk_window_iconify(
    window : Pointer[GtkWindow]);

external gtk_window_deiconify(
    window : Pointer[GtkWindow]);

external gtk_window_stick(
    window : Pointer[GtkWindow]);

external gtk_window_unstick(
    window : Pointer[GtkWindow]);

external gtk_window_maximize(
    window : Pointer[GtkWindow]);

external gtk_window_unmaximize(
    window : Pointer[GtkWindow]);

external gtk_window_fullscreen(
    window : Pointer[GtkWindow]);

external gtk_window_unfullscreen(
    window : Pointer[GtkWindow]);

external gtk_window_set_keep_above(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_set_keep_below(
    window : Pointer[GtkWindow],
    setting : Int);

external gtk_window_begin_resize_drag(
    window : Pointer[GtkWindow],
    edge : GdkWindowEdge,
    button : Int,
    root_x : Int,
    root_y : Int,
    timestamp : UInt);

external gtk_window_begin_move_drag(
    window : Pointer[GtkWindow],
    button : Int,
    root_x : Int,
    root_y : Int,
    timestamp : UInt);

external gtk_window_set_policy(
    window : Pointer[GtkWindow],
    allow_shrink : Int,
    allow_grow : Int,
    auto_shrink : Int);

external gtk_window_set_default_size(
    window : Pointer[GtkWindow],
    width : Int,
    height : Int);

external gtk_window_get_default_size(
    window : Pointer[GtkWindow],
    width : Pointer[Int],
    height : Pointer[Int]);

external gtk_window_resize(
    window : Pointer[GtkWindow],
    width : Int,
    height : Int);

external gtk_window_get_size(
    window : Pointer[GtkWindow],
    width : Pointer[Int],
    height : Pointer[Int]);

external gtk_window_move(
    window : Pointer[GtkWindow],
    x : Int,
    y : Int);

external gtk_window_get_position(
    window : Pointer[GtkWindow],
    root_x : Pointer[Int],
    root_y : Pointer[Int]);

external gtk_window_parse_geometry(
    window : Pointer[GtkWindow],
    geometry : Pointer[CChar]) Int;

external gtk_window_get_group(
    window : Pointer[GtkWindow]) Pointer[GtkWindowGroup];

external gtk_window_has_group(
    window : Pointer[GtkWindow]) Int;

external gtk_window_reshow_with_initial_size(
    window : Pointer[GtkWindow]);

external gtk_window_get_window_type(
    window : Pointer[GtkWindow]) GtkWindowType;

external gtk_window_group_get_type() CULong;

external gtk_window_group_new() Pointer[GtkWindowGroup];

external gtk_window_group_add_window(
    window_group : Pointer[GtkWindowGroup],
    window : Pointer[GtkWindow]);

external gtk_window_group_remove_window(
    window_group : Pointer[GtkWindowGroup],
    window : Pointer[GtkWindow]);

external gtk_window_group_list_windows(
    window_group : Pointer[GtkWindowGroup]) Pointer[GList];

external _gtk_window_internal_set_focus(
    window : Pointer[GtkWindow],
    focus : Pointer[GtkWidget]);

external gtk_window_remove_embedded_xid(
    window : Pointer[GtkWindow],
    xid : UInt);

external gtk_window_add_embedded_xid(
    window : Pointer[GtkWindow],
    xid : UInt);

external _gtk_window_reposition(
    window : Pointer[GtkWindow],
    x : Int,
    y : Int);

external _gtk_window_constrain_size(
    window : Pointer[GtkWindow],
    width : Int,
    height : Int,
    new_width : Pointer[Int],
    new_height : Pointer[Int]);

external gtk_window_group_get_current_grab(
    window_group : Pointer[GtkWindowGroup]) Pointer[GtkWidget];

external _gtk_window_set_has_toplevel_focus(
    window : Pointer[GtkWindow],
    has_toplevel_focus : Int);

external _gtk_window_unset_focus_and_default(
    window : Pointer[GtkWindow],
    widget : Pointer[GtkWidget]);

external _gtk_window_set_is_active(
    window : Pointer[GtkWindow],
    is_active : Int);

external _gtk_window_set_is_toplevel(
    window : Pointer[GtkWindow],
    is_toplevel : Int);

alias GtkWindowKeysForeachFunc = CCodePointer[(Pointer[Struct__GtkWindow],UInt,Int,Int,RawPointer),()];

external _gtk_window_keys_foreach(
    window : Pointer[GtkWindow],
    func : GtkWindowKeysForeachFunc,
    func_data : gpointer);

external _gtk_window_query_nonaccels(
    window : Pointer[GtkWindow],
    accel_key : UInt,
    accel_mods : GdkModifierType) Int;

alias GTK_DIALOG_MODAL = 1;
alias GTK_DIALOG_DESTROY_WITH_PARENT = 2;
alias GTK_DIALOG_NO_SEPARATOR = 4;

alias GtkDialogFlags = Int;

alias GTK_RESPONSE_NONE = 4294967295;
alias GTK_RESPONSE_REJECT = 4294967294;
alias GTK_RESPONSE_ACCEPT = 4294967293;
alias GTK_RESPONSE_DELETE_EVENT = 4294967292;
alias GTK_RESPONSE_OK = 4294967291;
alias GTK_RESPONSE_CANCEL = 4294967290;
alias GTK_RESPONSE_CLOSE = 4294967289;
alias GTK_RESPONSE_YES = 4294967288;
alias GTK_RESPONSE_NO = 4294967287;
alias GTK_RESPONSE_APPLY = 4294967286;
alias GTK_RESPONSE_HELP = 4294967285;

alias GtkResponseType = Int;

alias GtkDialog = Struct__GtkDialog;

alias GtkDialogClass = Struct__GtkDialogClass;

record Struct__GtkDialog (
    window : GtkWindow,
    vbox : Pointer[GtkWidget],
    action_area : Pointer[GtkWidget],
    separator : Pointer[GtkWidget],
);

record Struct__GtkDialogClass (
    parent_class : GtkWindowClass,
    response : CCodePointer[(Pointer[Struct__GtkDialog],Int),()],
    close : CCodePointer[(Pointer[Struct__GtkDialog]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_dialog_get_type() CULong;

external gtk_dialog_new() Pointer[GtkWidget];

external gtk_dialog_new_with_buttons(
    title : Pointer[CChar],
    parent : Pointer[GtkWindow],
    flags : GtkDialogFlags,
    first_button_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_dialog_add_action_widget(
    dialog : Pointer[GtkDialog],
    child : Pointer[GtkWidget],
    response_id : Int);

external gtk_dialog_add_button(
    dialog : Pointer[GtkDialog],
    button_text : Pointer[CChar],
    response_id : Int) Pointer[GtkWidget];

external gtk_dialog_add_buttons(
    dialog : Pointer[GtkDialog],
    first_button_text : Pointer[CChar],
    ...);

external gtk_dialog_set_response_sensitive(
    dialog : Pointer[GtkDialog],
    response_id : Int,
    setting : Int);

external gtk_dialog_set_default_response(
    dialog : Pointer[GtkDialog],
    response_id : Int);

external gtk_dialog_get_widget_for_response(
    dialog : Pointer[GtkDialog],
    response_id : Int) Pointer[GtkWidget];

external gtk_dialog_get_response_for_widget(
    dialog : Pointer[GtkDialog],
    widget : Pointer[GtkWidget]) Int;

external gtk_dialog_set_has_separator(
    dialog : Pointer[GtkDialog],
    setting : Int);

external gtk_dialog_get_has_separator(
    dialog : Pointer[GtkDialog]) Int;

external gtk_alternative_dialog_button_order(
    screen : Pointer[GdkScreen]) Int;

external gtk_dialog_set_alternative_button_order(
    dialog : Pointer[GtkDialog],
    first_response_id : Int,
    ...);

external gtk_dialog_set_alternative_button_order_from_array(
    dialog : Pointer[GtkDialog],
    n_params : Int,
    new_order : Pointer[Int]);

external gtk_dialog_response(
    dialog : Pointer[GtkDialog],
    response_id : Int);

external gtk_dialog_run(
    dialog : Pointer[GtkDialog]) Int;

external gtk_dialog_get_action_area(
    dialog : Pointer[GtkDialog]) Pointer[GtkWidget];

external gtk_dialog_get_content_area(
    dialog : Pointer[GtkDialog]) Pointer[GtkWidget];

external _gtk_dialog_set_ignore_separator(
    dialog : Pointer[GtkDialog],
    ignore_separator : Int);

alias GtkAboutDialog = Struct__GtkAboutDialog;

alias GtkAboutDialogClass = Struct__GtkAboutDialogClass;

record Struct__GtkAboutDialog (
    parent_instance : GtkDialog,
    private_data : gpointer,
);

record Struct__GtkAboutDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_about_dialog_get_type() CULong;

external gtk_about_dialog_new() Pointer[GtkWidget];

external gtk_show_about_dialog(
    parent : Pointer[GtkWindow],
    first_property_name : Pointer[CChar],
    ...);

external gtk_about_dialog_get_name(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_name(
    about : Pointer[GtkAboutDialog],
    name : Pointer[CChar]);

external gtk_about_dialog_get_program_name(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_program_name(
    about : Pointer[GtkAboutDialog],
    name : Pointer[CChar]);

external gtk_about_dialog_get_version(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_version(
    about : Pointer[GtkAboutDialog],
    version : Pointer[CChar]);

external gtk_about_dialog_get_copyright(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_copyright(
    about : Pointer[GtkAboutDialog],
    copyright : Pointer[CChar]);

external gtk_about_dialog_get_comments(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_comments(
    about : Pointer[GtkAboutDialog],
    comments : Pointer[CChar]);

external gtk_about_dialog_get_license(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_license(
    about : Pointer[GtkAboutDialog],
    license : Pointer[CChar]);

external gtk_about_dialog_get_wrap_license(
    about : Pointer[GtkAboutDialog]) Int;

external gtk_about_dialog_set_wrap_license(
    about : Pointer[GtkAboutDialog],
    wrap_license : Int);

external gtk_about_dialog_get_website(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_website(
    about : Pointer[GtkAboutDialog],
    website : Pointer[CChar]);

external gtk_about_dialog_get_website_label(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_website_label(
    about : Pointer[GtkAboutDialog],
    website_label : Pointer[CChar]);

external gtk_about_dialog_get_authors(
    about : Pointer[GtkAboutDialog]) Pointer[Pointer[CChar]];

external gtk_about_dialog_set_authors(
    about : Pointer[GtkAboutDialog],
    authors : Pointer[Pointer[CChar]]);

external gtk_about_dialog_get_documenters(
    about : Pointer[GtkAboutDialog]) Pointer[Pointer[CChar]];

external gtk_about_dialog_set_documenters(
    about : Pointer[GtkAboutDialog],
    documenters : Pointer[Pointer[CChar]]);

external gtk_about_dialog_get_artists(
    about : Pointer[GtkAboutDialog]) Pointer[Pointer[CChar]];

external gtk_about_dialog_set_artists(
    about : Pointer[GtkAboutDialog],
    artists : Pointer[Pointer[CChar]]);

external gtk_about_dialog_get_translator_credits(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_translator_credits(
    about : Pointer[GtkAboutDialog],
    translator_credits : Pointer[CChar]);

external gtk_about_dialog_get_logo(
    about : Pointer[GtkAboutDialog]) Pointer[GdkPixbuf];

external gtk_about_dialog_set_logo(
    about : Pointer[GtkAboutDialog],
    logo : Pointer[GdkPixbuf]);

external gtk_about_dialog_get_logo_icon_name(
    about : Pointer[GtkAboutDialog]) Pointer[CChar];

external gtk_about_dialog_set_logo_icon_name(
    about : Pointer[GtkAboutDialog],
    icon_name : Pointer[CChar]);

alias GtkAboutDialogActivateLinkFunc = CCodePointer[(Pointer[Struct__GtkAboutDialog],Pointer[CChar],RawPointer),()];

external gtk_about_dialog_set_email_hook(
    func : GtkAboutDialogActivateLinkFunc,
    data : gpointer,
    destroy : GDestroyNotify) GtkAboutDialogActivateLinkFunc;

external gtk_about_dialog_set_url_hook(
    func : GtkAboutDialogActivateLinkFunc,
    data : gpointer,
    destroy : GDestroyNotify) GtkAboutDialogActivateLinkFunc;

alias GtkMisc = Struct__GtkMisc;

alias GtkMiscClass = Struct__GtkMiscClass;

record Struct__GtkMisc (
    widget : GtkWidget,
    xalign : Float,
    yalign : Float,
    xpad : UShort,
    ypad : UShort,
);

record Struct__GtkMiscClass (
    parent_class : GtkWidgetClass,
);

external gtk_misc_get_type() CULong;

external gtk_misc_set_alignment(
    misc : Pointer[GtkMisc],
    xalign : Float,
    yalign : Float);

external gtk_misc_get_alignment(
    misc : Pointer[GtkMisc],
    xalign : Pointer[Float],
    yalign : Pointer[Float]);

external gtk_misc_set_padding(
    misc : Pointer[GtkMisc],
    xpad : Int,
    ypad : Int);

external gtk_misc_get_padding(
    misc : Pointer[GtkMisc],
    xpad : Pointer[Int],
    ypad : Pointer[Int]);

alias GtkMenuShell = Struct__GtkMenuShell;

alias GtkMenuShellClass = Struct__GtkMenuShellClass;

record Struct__GtkMenuShell (
    container : GtkContainer,
    children : Pointer[GList],
    active_menu_item : Pointer[GtkWidget],
    parent_menu_shell : Pointer[GtkWidget],
    button : UInt,
    activate_time : UInt,
    active : UInt,
    have_grab : UInt,
    have_xgrab : UInt,
    ignore_leave : UInt,
    menu_flag : UInt,
    ignore_enter : UInt,
    keyboard_mode : UInt,
);

record Struct__GtkMenuShellClass (
    parent_class : GtkContainerClass,
    submenu_placement : UInt,
    deactivate : CCodePointer[(Pointer[Struct__GtkMenuShell]),()],
    selection_done : CCodePointer[(Pointer[Struct__GtkMenuShell]),()],
    move_current : CCodePointer[(Pointer[Struct__GtkMenuShell],Int),()],
    activate_current : CCodePointer[(Pointer[Struct__GtkMenuShell],Int),()],
    cancel : CCodePointer[(Pointer[Struct__GtkMenuShell]),()],
    select_item : CCodePointer[(Pointer[Struct__GtkMenuShell],Pointer[Struct__GtkWidget]),()],
    insert : CCodePointer[(Pointer[Struct__GtkMenuShell],Pointer[Struct__GtkWidget],Int),()],
    get_popup_delay : CCodePointer[(Pointer[Struct__GtkMenuShell]),(Int)],
    move_selected : CCodePointer[(Pointer[Struct__GtkMenuShell],Int),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
);

external gtk_menu_shell_get_type() CULong;

external gtk_menu_shell_append(
    menu_shell : Pointer[GtkMenuShell],
    child : Pointer[GtkWidget]);

external gtk_menu_shell_prepend(
    menu_shell : Pointer[GtkMenuShell],
    child : Pointer[GtkWidget]);

external gtk_menu_shell_insert(
    menu_shell : Pointer[GtkMenuShell],
    child : Pointer[GtkWidget],
    position : Int);

external gtk_menu_shell_deactivate(
    menu_shell : Pointer[GtkMenuShell]);

external gtk_menu_shell_select_item(
    menu_shell : Pointer[GtkMenuShell],
    menu_item : Pointer[GtkWidget]);

external gtk_menu_shell_deselect(
    menu_shell : Pointer[GtkMenuShell]);

external gtk_menu_shell_activate_item(
    menu_shell : Pointer[GtkMenuShell],
    menu_item : Pointer[GtkWidget],
    force_deactivate : Int);

external gtk_menu_shell_select_first(
    menu_shell : Pointer[GtkMenuShell],
    search_sensitive : Int);

external _gtk_menu_shell_select_last(
    menu_shell : Pointer[GtkMenuShell],
    search_sensitive : Int);

external _gtk_menu_shell_activate(
    menu_shell : Pointer[GtkMenuShell]);

external _gtk_menu_shell_get_popup_delay(
    menu_shell : Pointer[GtkMenuShell]) Int;

external gtk_menu_shell_cancel(
    menu_shell : Pointer[GtkMenuShell]);

external _gtk_menu_shell_add_mnemonic(
    menu_shell : Pointer[GtkMenuShell],
    keyval : UInt,
    target : Pointer[GtkWidget]);

external _gtk_menu_shell_remove_mnemonic(
    menu_shell : Pointer[GtkMenuShell],
    keyval : UInt,
    target : Pointer[GtkWidget]);

external gtk_menu_shell_get_take_focus(
    menu_shell : Pointer[GtkMenuShell]) Int;

external gtk_menu_shell_set_take_focus(
    menu_shell : Pointer[GtkMenuShell],
    take_focus : Int);

external _gtk_menu_shell_update_mnemonics(
    menu_shell : Pointer[GtkMenuShell]);

external _gtk_menu_shell_set_keyboard_mode(
    menu_shell : Pointer[GtkMenuShell],
    keyboard_mode : Int);

external _gtk_menu_shell_get_keyboard_mode(
    menu_shell : Pointer[GtkMenuShell]) Int;

alias GtkMenu = Struct__GtkMenu;

alias GtkMenuClass = Struct__GtkMenuClass;

alias GtkMenuPositionFunc = CCodePointer[(Pointer[Struct__GtkMenu],Pointer[Int],Pointer[Int],Pointer[Int],RawPointer),()];

alias GtkMenuDetachFunc = CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkMenu]),()];

record Struct__GtkMenu (
    menu_shell : GtkMenuShell,
    parent_menu_item : Pointer[GtkWidget],
    old_active_menu_item : Pointer[GtkWidget],
    accel_group : Pointer[GtkAccelGroup],
    accel_path : Pointer[CChar],
    position_func : GtkMenuPositionFunc,
    position_func_data : gpointer,
    toggle_size : UInt,
    toplevel : Pointer[GtkWidget],
    tearoff_window : Pointer[GtkWidget],
    tearoff_hbox : Pointer[GtkWidget],
    tearoff_scrollbar : Pointer[GtkWidget],
    tearoff_adjustment : Pointer[GtkAdjustment],
    view_window : Pointer[GdkWindow],
    bin_window : Pointer[GdkWindow],
    scroll_offset : Int,
    saved_scroll_offset : Int,
    scroll_step : Int,
    timeout_id : UInt,
    navigation_region : Pointer[GdkRegion],
    navigation_timeout : UInt,
    needs_destruction_ref_count : UInt,
    torn_off : UInt,
    tearoff_active : UInt,
    scroll_fast : UInt,
    upper_arrow_visible : UInt,
    lower_arrow_visible : UInt,
    upper_arrow_prelight : UInt,
    lower_arrow_prelight : UInt,
);

record Struct__GtkMenuClass (
    parent_class : GtkMenuShellClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_menu_get_type() CULong;

external gtk_menu_new() Pointer[GtkWidget];

external gtk_menu_popup(
    menu : Pointer[GtkMenu],
    parent_menu_shell : Pointer[GtkWidget],
    parent_menu_item : Pointer[GtkWidget],
    func : GtkMenuPositionFunc,
    data : gpointer,
    button : UInt,
    activate_time : UInt);

external gtk_menu_reposition(
    menu : Pointer[GtkMenu]);

external gtk_menu_popdown(
    menu : Pointer[GtkMenu]);

external gtk_menu_get_active(
    menu : Pointer[GtkMenu]) Pointer[GtkWidget];

external gtk_menu_set_active(
    menu : Pointer[GtkMenu],
    index_ : UInt);

external gtk_menu_set_accel_group(
    menu : Pointer[GtkMenu],
    accel_group : Pointer[GtkAccelGroup]);

external gtk_menu_get_accel_group(
    menu : Pointer[GtkMenu]) Pointer[GtkAccelGroup];

external gtk_menu_set_accel_path(
    menu : Pointer[GtkMenu],
    accel_path : Pointer[CChar]);

external gtk_menu_get_accel_path(
    menu : Pointer[GtkMenu]) Pointer[CChar];

external gtk_menu_attach_to_widget(
    menu : Pointer[GtkMenu],
    attach_widget : Pointer[GtkWidget],
    detacher : GtkMenuDetachFunc);

external gtk_menu_detach(
    menu : Pointer[GtkMenu]);

external gtk_menu_get_attach_widget(
    menu : Pointer[GtkMenu]) Pointer[GtkWidget];

external gtk_menu_set_tearoff_state(
    menu : Pointer[GtkMenu],
    torn_off : Int);

external gtk_menu_get_tearoff_state(
    menu : Pointer[GtkMenu]) Int;

external gtk_menu_set_title(
    menu : Pointer[GtkMenu],
    title : Pointer[CChar]);

external gtk_menu_get_title(
    menu : Pointer[GtkMenu]) Pointer[CChar];

external gtk_menu_reorder_child(
    menu : Pointer[GtkMenu],
    child : Pointer[GtkWidget],
    position : Int);

external gtk_menu_set_screen(
    menu : Pointer[GtkMenu],
    screen : Pointer[GdkScreen]);

external gtk_menu_attach(
    menu : Pointer[GtkMenu],
    child : Pointer[GtkWidget],
    left_attach : UInt,
    right_attach : UInt,
    top_attach : UInt,
    bottom_attach : UInt);

external gtk_menu_set_monitor(
    menu : Pointer[GtkMenu],
    monitor_num : Int);

external gtk_menu_get_monitor(
    menu : Pointer[GtkMenu]) Int;

external gtk_menu_get_for_attach_widget(
    widget : Pointer[GtkWidget]) Pointer[GList];

external gtk_menu_set_reserve_toggle_size(
    menu : Pointer[GtkMenu],
    reserve_toggle_size : Int);

external gtk_menu_get_reserve_toggle_size(
    menu : Pointer[GtkMenu]) Int;

alias GtkLabel = Struct__GtkLabel;

alias GtkLabelClass = Struct__GtkLabelClass;

alias GtkLabelSelectionInfo = Opaque;

record Struct__GtkLabel (
    misc : GtkMisc,
    label : Pointer[CChar],
    jtype : UInt,
    wrap : UInt,
    use_underline : UInt,
    use_markup : UInt,
    ellipsize : UInt,
    single_line_mode : UInt,
    have_transform : UInt,
    in_click : UInt,
    wrap_mode : UInt,
    pattern_set : UInt,
    track_links : UInt,
    mnemonic_keyval : UInt,
    text : Pointer[CChar],
    attrs : Pointer[PangoAttrList],
    effective_attrs : Pointer[PangoAttrList],
    layout : Pointer[PangoLayout],
    mnemonic_widget : Pointer[GtkWidget],
    mnemonic_window : Pointer[GtkWindow],
    select_info : Pointer[GtkLabelSelectionInfo],
);

record Struct__GtkLabelClass (
    parent_class : GtkMiscClass,
    move_cursor : CCodePointer[(Pointer[Struct__GtkLabel],Int,Int,Int),()],
    copy_clipboard : CCodePointer[(Pointer[Struct__GtkLabel]),()],
    populate_popup : CCodePointer[(Pointer[Struct__GtkLabel],Pointer[Struct__GtkMenu]),()],
    activate_link : CCodePointer[(Pointer[Struct__GtkLabel],Pointer[CChar]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_label_get_type() CULong;

external gtk_label_new(
    str : Pointer[CChar]) Pointer[GtkWidget];

external gtk_label_new_with_mnemonic(
    str : Pointer[CChar]) Pointer[GtkWidget];

external gtk_label_set_text(
    label : Pointer[GtkLabel],
    str : Pointer[CChar]);

external gtk_label_get_text(
    label : Pointer[GtkLabel]) Pointer[CChar];

external gtk_label_set_attributes(
    label : Pointer[GtkLabel],
    attrs : Pointer[PangoAttrList]);

external gtk_label_get_attributes(
    label : Pointer[GtkLabel]) Pointer[PangoAttrList];

external gtk_label_set_label(
    label : Pointer[GtkLabel],
    str : Pointer[CChar]);

external gtk_label_get_label(
    label : Pointer[GtkLabel]) Pointer[CChar];

external gtk_label_set_markup(
    label : Pointer[GtkLabel],
    str : Pointer[CChar]);

external gtk_label_set_use_markup(
    label : Pointer[GtkLabel],
    setting : Int);

external gtk_label_get_use_markup(
    label : Pointer[GtkLabel]) Int;

external gtk_label_set_use_underline(
    label : Pointer[GtkLabel],
    setting : Int);

external gtk_label_get_use_underline(
    label : Pointer[GtkLabel]) Int;

external gtk_label_set_markup_with_mnemonic(
    label : Pointer[GtkLabel],
    str : Pointer[CChar]);

external gtk_label_get_mnemonic_keyval(
    label : Pointer[GtkLabel]) UInt;

external gtk_label_set_mnemonic_widget(
    label : Pointer[GtkLabel],
    widget : Pointer[GtkWidget]);

external gtk_label_get_mnemonic_widget(
    label : Pointer[GtkLabel]) Pointer[GtkWidget];

external gtk_label_set_text_with_mnemonic(
    label : Pointer[GtkLabel],
    str : Pointer[CChar]);

external gtk_label_set_justify(
    label : Pointer[GtkLabel],
    jtype : GtkJustification);

external gtk_label_get_justify(
    label : Pointer[GtkLabel]) GtkJustification;

external gtk_label_set_ellipsize(
    label : Pointer[GtkLabel],
    mode : PangoEllipsizeMode);

external gtk_label_get_ellipsize(
    label : Pointer[GtkLabel]) PangoEllipsizeMode;

external gtk_label_set_width_chars(
    label : Pointer[GtkLabel],
    n_chars : Int);

external gtk_label_get_width_chars(
    label : Pointer[GtkLabel]) Int;

external gtk_label_set_max_width_chars(
    label : Pointer[GtkLabel],
    n_chars : Int);

external gtk_label_get_max_width_chars(
    label : Pointer[GtkLabel]) Int;

external gtk_label_set_pattern(
    label : Pointer[GtkLabel],
    pattern : Pointer[CChar]);

external gtk_label_set_line_wrap(
    label : Pointer[GtkLabel],
    wrap : Int);

external gtk_label_get_line_wrap(
    label : Pointer[GtkLabel]) Int;

external gtk_label_set_line_wrap_mode(
    label : Pointer[GtkLabel],
    wrap_mode : PangoWrapMode);

external gtk_label_get_line_wrap_mode(
    label : Pointer[GtkLabel]) PangoWrapMode;

external gtk_label_set_selectable(
    label : Pointer[GtkLabel],
    setting : Int);

external gtk_label_get_selectable(
    label : Pointer[GtkLabel]) Int;

external gtk_label_set_angle(
    label : Pointer[GtkLabel],
    angle : Double);

external gtk_label_get_angle(
    label : Pointer[GtkLabel]) Double;

external gtk_label_select_region(
    label : Pointer[GtkLabel],
    start_offset : Int,
    end_offset : Int);

external gtk_label_get_selection_bounds(
    label : Pointer[GtkLabel],
    start : Pointer[Int],
    end : Pointer[Int]) Int;

external gtk_label_get_layout(
    label : Pointer[GtkLabel]) Pointer[PangoLayout];

external gtk_label_get_layout_offsets(
    label : Pointer[GtkLabel],
    x : Pointer[Int],
    y : Pointer[Int]);

external gtk_label_set_single_line_mode(
    label : Pointer[GtkLabel],
    single_line_mode : Int);

external gtk_label_get_single_line_mode(
    label : Pointer[GtkLabel]) Int;

external gtk_label_get_current_uri(
    label : Pointer[GtkLabel]) Pointer[CChar];

external gtk_label_set_track_visited_links(
    label : Pointer[GtkLabel],
    track_links : Int);

external gtk_label_get_track_visited_links(
    label : Pointer[GtkLabel]) Int;

external gtk_label_get(
    label : Pointer[GtkLabel],
    str : Pointer[Pointer[CChar]]);

external gtk_label_parse_uline(
    label : Pointer[GtkLabel],
    string : Pointer[CChar]) UInt;

external _gtk_label_mnemonics_visible_apply_recursively(
    widget : Pointer[GtkWidget],
    mnemonics_visible : Int);

alias GtkAccelLabel = Struct__GtkAccelLabel;

alias GtkAccelLabelClass = Struct__GtkAccelLabelClass;

record Struct__GtkAccelLabel (
    label : GtkLabel,
    gtk_reserved : UInt,
    accel_padding : UInt,
    accel_widget : Pointer[GtkWidget],
    accel_closure : Pointer[GClosure],
    accel_group : Pointer[GtkAccelGroup],
    accel_string : Pointer[CChar],
    accel_string_width : UShort,
);

record Struct__GtkAccelLabelClass (
    parent_class : GtkLabelClass,
    signal_quote1 : Pointer[CChar],
    signal_quote2 : Pointer[CChar],
    mod_name_shift : Pointer[CChar],
    mod_name_control : Pointer[CChar],
    mod_name_alt : Pointer[CChar],
    mod_separator : Pointer[CChar],
    accel_seperator : Pointer[CChar],
    latin1_to_char : UInt,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_accel_label_get_type() CULong;

external gtk_accel_label_new(
    string : Pointer[CChar]) Pointer[GtkWidget];

external gtk_accel_label_get_accel_widget(
    accel_label : Pointer[GtkAccelLabel]) Pointer[GtkWidget];

external gtk_accel_label_get_accel_width(
    accel_label : Pointer[GtkAccelLabel]) UInt;

external gtk_accel_label_set_accel_widget(
    accel_label : Pointer[GtkAccelLabel],
    accel_widget : Pointer[GtkWidget]);

external gtk_accel_label_set_accel_closure(
    accel_label : Pointer[GtkAccelLabel],
    accel_closure : Pointer[GClosure]);

external gtk_accel_label_refetch(
    accel_label : Pointer[GtkAccelLabel]) Int;

external _gtk_accel_label_class_get_accelerator_label(
    klass : Pointer[GtkAccelLabelClass],
    accelerator_key : UInt,
    accelerator_mods : GdkModifierType) Pointer[CChar];

alias GtkAccelMap = Opaque;

alias GtkAccelMapClass = Opaque;

alias GtkAccelMapForeach = CCodePointer[(RawPointer,Pointer[CChar],UInt,Int,Int),()];

external gtk_accel_map_add_entry(
    accel_path : Pointer[CChar],
    accel_key : UInt,
    accel_mods : GdkModifierType);

external gtk_accel_map_lookup_entry(
    accel_path : Pointer[CChar],
    key : Pointer[GtkAccelKey]) Int;

external gtk_accel_map_change_entry(
    accel_path : Pointer[CChar],
    accel_key : UInt,
    accel_mods : GdkModifierType,
    replace : Int) Int;

external gtk_accel_map_load(
    file_name : Pointer[CChar]);

external gtk_accel_map_save(
    file_name : Pointer[CChar]);

external gtk_accel_map_foreach(
    data : gpointer,
    foreach_func : GtkAccelMapForeach);

external gtk_accel_map_load_fd(
    fd : Int);

external gtk_accel_map_load_scanner(
    scanner : Pointer[GScanner]);

external gtk_accel_map_save_fd(
    fd : Int);

external gtk_accel_map_lock_path(
    accel_path : Pointer[CChar]);

external gtk_accel_map_unlock_path(
    accel_path : Pointer[CChar]);

external gtk_accel_map_add_filter(
    filter_pattern : Pointer[CChar]);

external gtk_accel_map_foreach_unfiltered(
    data : gpointer,
    foreach_func : GtkAccelMapForeach);

external gtk_accel_map_get_type() CULong;

external gtk_accel_map_get() Pointer[GtkAccelMap];

external _gtk_accel_map_init();

external _gtk_accel_map_add_group(
    accel_path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup]);

external _gtk_accel_map_remove_group(
    accel_path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup]);

external _gtk_accel_path_is_valid(
    accel_path : Pointer[CChar]) Int;

alias GtkAccessible = Struct__GtkAccessible;

alias GtkAccessibleClass = Struct__GtkAccessibleClass;

record Struct__GtkAccessible (
    parent : AtkObject,
    widget : Pointer[GtkWidget],
);

record Struct__GtkAccessibleClass (
    parent_class : AtkObjectClass,
    connect_widget_destroyed : CCodePointer[(Pointer[Struct__GtkAccessible]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_accessible_get_type() CULong;

external gtk_accessible_set_widget(
    accessible : Pointer[GtkAccessible],
    widget : Pointer[GtkWidget]);

external gtk_accessible_get_widget(
    accessible : Pointer[GtkAccessible]) Pointer[GtkWidget];

external gtk_accessible_connect_widget_destroyed(
    accessible : Pointer[GtkAccessible]);

alias GtkAction = Struct__GtkAction;

alias GtkActionClass = Struct__GtkActionClass;

alias GtkActionPrivate = Opaque;

record Struct__GtkAction (
    object : GObject,
    private_data : Pointer[GtkActionPrivate],
);

record Struct__GtkActionClass (
    parent_class : GObjectClass,
    activate : CCodePointer[(Pointer[Struct__GtkAction]),()],
    menu_item_type : CULong,
    toolbar_item_type : CULong,
    create_menu_item : CCodePointer[(Pointer[Struct__GtkAction]),(Pointer[Struct__GtkWidget])],
    create_tool_item : CCodePointer[(Pointer[Struct__GtkAction]),(Pointer[Struct__GtkWidget])],
    connect_proxy : CCodePointer[(Pointer[Struct__GtkAction],Pointer[Struct__GtkWidget]),()],
    disconnect_proxy : CCodePointer[(Pointer[Struct__GtkAction],Pointer[Struct__GtkWidget]),()],
    create_menu : CCodePointer[(Pointer[Struct__GtkAction]),(Pointer[Struct__GtkWidget])],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_action_get_type() CULong;

external gtk_action_new(
    name : Pointer[CChar],
    label : Pointer[CChar],
    tooltip : Pointer[CChar],
    stock_id : Pointer[CChar]) Pointer[GtkAction];

external gtk_action_get_name(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_is_sensitive(
    action : Pointer[GtkAction]) Int;

external gtk_action_get_sensitive(
    action : Pointer[GtkAction]) Int;

external gtk_action_set_sensitive(
    action : Pointer[GtkAction],
    sensitive : Int);

external gtk_action_is_visible(
    action : Pointer[GtkAction]) Int;

external gtk_action_get_visible(
    action : Pointer[GtkAction]) Int;

external gtk_action_set_visible(
    action : Pointer[GtkAction],
    visible : Int);

external gtk_action_activate(
    action : Pointer[GtkAction]);

external gtk_action_create_icon(
    action : Pointer[GtkAction],
    icon_size : GtkIconSize) Pointer[GtkWidget];

external gtk_action_create_menu_item(
    action : Pointer[GtkAction]) Pointer[GtkWidget];

external gtk_action_create_tool_item(
    action : Pointer[GtkAction]) Pointer[GtkWidget];

external gtk_action_create_menu(
    action : Pointer[GtkAction]) Pointer[GtkWidget];

external gtk_action_get_proxies(
    action : Pointer[GtkAction]) Pointer[GSList];

external gtk_action_connect_accelerator(
    action : Pointer[GtkAction]);

external gtk_action_disconnect_accelerator(
    action : Pointer[GtkAction]);

external gtk_action_get_accel_path(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_get_accel_closure(
    action : Pointer[GtkAction]) Pointer[GClosure];

external gtk_widget_get_action(
    widget : Pointer[GtkWidget]) Pointer[GtkAction];

external gtk_action_connect_proxy(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external gtk_action_disconnect_proxy(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external gtk_action_block_activate_from(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external gtk_action_unblock_activate_from(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external gtk_action_block_activate(
    action : Pointer[GtkAction]);

external gtk_action_unblock_activate(
    action : Pointer[GtkAction]);

external _gtk_action_add_to_proxy_list(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external _gtk_action_remove_from_proxy_list(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external _gtk_action_emit_activate(
    action : Pointer[GtkAction]);

external gtk_action_set_accel_path(
    action : Pointer[GtkAction],
    accel_path : Pointer[CChar]);

external gtk_action_set_accel_group(
    action : Pointer[GtkAction],
    accel_group : Pointer[GtkAccelGroup]);

external _gtk_action_sync_menu_visible(
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget],
    empty : Int);

external gtk_action_set_label(
    action : Pointer[GtkAction],
    label : Pointer[CChar]);

external gtk_action_get_label(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_set_short_label(
    action : Pointer[GtkAction],
    short_label : Pointer[CChar]);

external gtk_action_get_short_label(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_set_tooltip(
    action : Pointer[GtkAction],
    tooltip : Pointer[CChar]);

external gtk_action_get_tooltip(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_set_stock_id(
    action : Pointer[GtkAction],
    stock_id : Pointer[CChar]);

external gtk_action_get_stock_id(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_set_gicon(
    action : Pointer[GtkAction],
    icon : Pointer[GIcon]);

external gtk_action_get_gicon(
    action : Pointer[GtkAction]) Pointer[GIcon];

external gtk_action_set_icon_name(
    action : Pointer[GtkAction],
    icon_name : Pointer[CChar]);

external gtk_action_get_icon_name(
    action : Pointer[GtkAction]) Pointer[CChar];

external gtk_action_set_visible_horizontal(
    action : Pointer[GtkAction],
    visible_horizontal : Int);

external gtk_action_get_visible_horizontal(
    action : Pointer[GtkAction]) Int;

external gtk_action_set_visible_vertical(
    action : Pointer[GtkAction],
    visible_vertical : Int);

external gtk_action_get_visible_vertical(
    action : Pointer[GtkAction]) Int;

external gtk_action_set_is_important(
    action : Pointer[GtkAction],
    is_important : Int);

external gtk_action_get_is_important(
    action : Pointer[GtkAction]) Int;

external gtk_action_set_always_show_image(
    action : Pointer[GtkAction],
    always_show : Int);

external gtk_action_get_always_show_image(
    action : Pointer[GtkAction]) Int;

alias GtkActionGroup = Struct__GtkActionGroup;

alias GtkActionGroupPrivate = Opaque;

alias GtkActionGroupClass = Struct__GtkActionGroupClass;

alias GtkActionEntry = Struct__GtkActionEntry;

alias GtkToggleActionEntry = Struct__GtkToggleActionEntry;

alias GtkRadioActionEntry = Struct__GtkRadioActionEntry;

record Struct__GtkActionGroup (
    parent : GObject,
    private_data : Pointer[GtkActionGroupPrivate],
);

record Struct__GtkActionGroupClass (
    parent_class : GObjectClass,
    get_action : CCodePointer[(Pointer[Struct__GtkActionGroup],Pointer[CChar]),(Pointer[Struct__GtkAction])],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkActionEntry (
    name : Pointer[CChar],
    stock_id : Pointer[CChar],
    label : Pointer[CChar],
    accelerator : Pointer[CChar],
    tooltip : Pointer[CChar],
    callback : GCallback,
);

record Struct__GtkToggleActionEntry (
    name : Pointer[CChar],
    stock_id : Pointer[CChar],
    label : Pointer[CChar],
    accelerator : Pointer[CChar],
    tooltip : Pointer[CChar],
    callback : GCallback,
    is_active : Int,
);

record Struct__GtkRadioActionEntry (
    name : Pointer[CChar],
    stock_id : Pointer[CChar],
    label : Pointer[CChar],
    accelerator : Pointer[CChar],
    tooltip : Pointer[CChar],
    value : Int,
);

external gtk_action_group_get_type() CULong;

external gtk_action_group_new(
    name : Pointer[CChar]) Pointer[GtkActionGroup];

external gtk_action_group_get_name(
    action_group : Pointer[GtkActionGroup]) Pointer[CChar];

external gtk_action_group_get_sensitive(
    action_group : Pointer[GtkActionGroup]) Int;

external gtk_action_group_set_sensitive(
    action_group : Pointer[GtkActionGroup],
    sensitive : Int);

external gtk_action_group_get_visible(
    action_group : Pointer[GtkActionGroup]) Int;

external gtk_action_group_set_visible(
    action_group : Pointer[GtkActionGroup],
    visible : Int);

external gtk_action_group_get_action(
    action_group : Pointer[GtkActionGroup],
    action_name : Pointer[CChar]) Pointer[GtkAction];

external gtk_action_group_list_actions(
    action_group : Pointer[GtkActionGroup]) Pointer[GList];

external gtk_action_group_add_action(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction]);

external gtk_action_group_add_action_with_accel(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction],
    accelerator : Pointer[CChar]);

external gtk_action_group_remove_action(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction]);

external gtk_action_group_add_actions(
    action_group : Pointer[GtkActionGroup],
    entries : Pointer[GtkActionEntry],
    n_entries : UInt,
    user_data : gpointer);

external gtk_action_group_add_toggle_actions(
    action_group : Pointer[GtkActionGroup],
    entries : Pointer[GtkToggleActionEntry],
    n_entries : UInt,
    user_data : gpointer);

external gtk_action_group_add_radio_actions(
    action_group : Pointer[GtkActionGroup],
    entries : Pointer[GtkRadioActionEntry],
    n_entries : UInt,
    value : Int,
    on_change : GCallback,
    user_data : gpointer);

external gtk_action_group_add_actions_full(
    action_group : Pointer[GtkActionGroup],
    entries : Pointer[GtkActionEntry],
    n_entries : UInt,
    user_data : gpointer,
    destroy : GDestroyNotify);

external gtk_action_group_add_toggle_actions_full(
    action_group : Pointer[GtkActionGroup],
    entries : Pointer[GtkToggleActionEntry],
    n_entries : UInt,
    user_data : gpointer,
    destroy : GDestroyNotify);

external gtk_action_group_add_radio_actions_full(
    action_group : Pointer[GtkActionGroup],
    entries : Pointer[GtkRadioActionEntry],
    n_entries : UInt,
    value : Int,
    on_change : GCallback,
    user_data : gpointer,
    destroy : GDestroyNotify);

external gtk_action_group_set_translate_func(
    action_group : Pointer[GtkActionGroup],
    func : GtkTranslateFunc,
    data : gpointer,
    notify : GDestroyNotify);

external gtk_action_group_set_translation_domain(
    action_group : Pointer[GtkActionGroup],
    domain : Pointer[CChar]);

external gtk_action_group_translate_string(
    action_group : Pointer[GtkActionGroup],
    string : Pointer[CChar]) Pointer[CChar];

external _gtk_action_group_emit_connect_proxy(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external _gtk_action_group_emit_disconnect_proxy(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction],
    proxy : Pointer[GtkWidget]);

external _gtk_action_group_emit_pre_activate(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction]);

external _gtk_action_group_emit_post_activate(
    action_group : Pointer[GtkActionGroup],
    action : Pointer[GtkAction]);

alias GtkActivatable = Opaque;

alias GtkActivatableIface = Struct__GtkActivatableIface;

record Struct__GtkActivatableIface (
    g_iface : GTypeInterface,
    update : CCodePointer[(OpaquePointer,Pointer[Struct__GtkAction],Pointer[CChar]),()],
    sync_action_properties : CCodePointer[(OpaquePointer,Pointer[Struct__GtkAction]),()],
);

external gtk_activatable_get_type() CULong;

external gtk_activatable_sync_action_properties(
    activatable : Pointer[GtkActivatable],
    action : Pointer[GtkAction]);

external gtk_activatable_set_related_action(
    activatable : Pointer[GtkActivatable],
    action : Pointer[GtkAction]);

external gtk_activatable_get_related_action(
    activatable : Pointer[GtkActivatable]) Pointer[GtkAction];

external gtk_activatable_set_use_action_appearance(
    activatable : Pointer[GtkActivatable],
    use_appearance : Int);

external gtk_activatable_get_use_action_appearance(
    activatable : Pointer[GtkActivatable]) Int;

external gtk_activatable_do_set_related_action(
    activatable : Pointer[GtkActivatable],
    action : Pointer[GtkAction]);

alias GtkAlignment = Struct__GtkAlignment;

alias GtkAlignmentClass = Struct__GtkAlignmentClass;

alias GtkAlignmentPrivate = Opaque;

record Struct__GtkAlignment (
    bin : GtkBin,
    xalign : Float,
    yalign : Float,
    xscale : Float,
    yscale : Float,
);

record Struct__GtkAlignmentClass (
    parent_class : GtkBinClass,
);

external gtk_alignment_get_type() CULong;

external gtk_alignment_new(
    xalign : Float,
    yalign : Float,
    xscale : Float,
    yscale : Float) Pointer[GtkWidget];

external gtk_alignment_set(
    alignment : Pointer[GtkAlignment],
    xalign : Float,
    yalign : Float,
    xscale : Float,
    yscale : Float);

external gtk_alignment_set_padding(
    alignment : Pointer[GtkAlignment],
    padding_top : UInt,
    padding_bottom : UInt,
    padding_left : UInt,
    padding_right : UInt);

external gtk_alignment_get_padding(
    alignment : Pointer[GtkAlignment],
    padding_top : Pointer[UInt],
    padding_bottom : Pointer[UInt],
    padding_left : Pointer[UInt],
    padding_right : Pointer[UInt]);

alias GtkArrow = Struct__GtkArrow;

alias GtkArrowClass = Struct__GtkArrowClass;

record Struct__GtkArrow (
    misc : GtkMisc,
    arrow_type : Short,
    shadow_type : Short,
);

record Struct__GtkArrowClass (
    parent_class : GtkMiscClass,
);

external gtk_arrow_get_type() CULong;

external gtk_arrow_new(
    arrow_type : GtkArrowType,
    shadow_type : GtkShadowType) Pointer[GtkWidget];

external gtk_arrow_set(
    arrow : Pointer[GtkArrow],
    arrow_type : GtkArrowType,
    shadow_type : GtkShadowType);

alias GtkFrame = Struct__GtkFrame;

alias GtkFrameClass = Struct__GtkFrameClass;

record Struct__GtkFrame (
    bin : GtkBin,
    label_widget : Pointer[GtkWidget],
    shadow_type : Short,
    label_xalign : Float,
    label_yalign : Float,
    child_allocation : GtkAllocation,
);

record Struct__GtkFrameClass (
    parent_class : GtkBinClass,
    compute_child_allocation : CCodePointer[(Pointer[Struct__GtkFrame],Pointer[Struct__GdkRectangle]),()],
);

external gtk_frame_get_type() CULong;

external gtk_frame_new(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_frame_set_label(
    frame : Pointer[GtkFrame],
    label : Pointer[CChar]);

external gtk_frame_get_label(
    frame : Pointer[GtkFrame]) Pointer[CChar];

external gtk_frame_set_label_widget(
    frame : Pointer[GtkFrame],
    label_widget : Pointer[GtkWidget]);

external gtk_frame_get_label_widget(
    frame : Pointer[GtkFrame]) Pointer[GtkWidget];

external gtk_frame_set_label_align(
    frame : Pointer[GtkFrame],
    xalign : Float,
    yalign : Float);

external gtk_frame_get_label_align(
    frame : Pointer[GtkFrame],
    xalign : Pointer[Float],
    yalign : Pointer[Float]);

external gtk_frame_set_shadow_type(
    frame : Pointer[GtkFrame],
    type : GtkShadowType);

external gtk_frame_get_shadow_type(
    frame : Pointer[GtkFrame]) GtkShadowType;

alias GtkAspectFrame = Struct__GtkAspectFrame;

alias GtkAspectFrameClass = Struct__GtkAspectFrameClass;

record Struct__GtkAspectFrame (
    frame : GtkFrame,
    xalign : Float,
    yalign : Float,
    ratio : Float,
    obey_child : Int,
    center_allocation : GtkAllocation,
);

record Struct__GtkAspectFrameClass (
    parent_class : GtkFrameClass,
);

external gtk_aspect_frame_get_type() CULong;

external gtk_aspect_frame_new(
    label : Pointer[CChar],
    xalign : Float,
    yalign : Float,
    ratio : Float,
    obey_child : Int) Pointer[GtkWidget];

external gtk_aspect_frame_set(
    aspect_frame : Pointer[GtkAspectFrame],
    xalign : Float,
    yalign : Float,
    ratio : Float,
    obey_child : Int);

alias GTK_ASSISTANT_PAGE_CONTENT = 0;
alias GTK_ASSISTANT_PAGE_INTRO = 1;
alias GTK_ASSISTANT_PAGE_CONFIRM = 2;
alias GTK_ASSISTANT_PAGE_SUMMARY = 3;
alias GTK_ASSISTANT_PAGE_PROGRESS = 4;

alias GtkAssistantPageType = Int;

alias GtkAssistant = Struct__GtkAssistant;

alias GtkAssistantPrivate = Opaque;

alias GtkAssistantClass = Struct__GtkAssistantClass;

record Struct__GtkAssistant (
    parent : GtkWindow,
    cancel : Pointer[GtkWidget],
    forward_ : Pointer[GtkWidget],
    back : Pointer[GtkWidget],
    apply : Pointer[GtkWidget],
    close : Pointer[GtkWidget],
    last : Pointer[GtkWidget],
    priv : Pointer[GtkAssistantPrivate],
);

record Struct__GtkAssistantClass (
    parent_class : GtkWindowClass,
    prepare : CCodePointer[(Pointer[Struct__GtkAssistant],Pointer[Struct__GtkWidget]),()],
    apply : CCodePointer[(Pointer[Struct__GtkAssistant]),()],
    close : CCodePointer[(Pointer[Struct__GtkAssistant]),()],
    cancel : CCodePointer[(Pointer[Struct__GtkAssistant]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
);

alias GtkAssistantPageFunc = CCodePointer[(Int,RawPointer),(Int)];

external gtk_assistant_get_type() CULong;

external gtk_assistant_new() Pointer[GtkWidget];

external gtk_assistant_get_current_page(
    assistant : Pointer[GtkAssistant]) Int;

external gtk_assistant_set_current_page(
    assistant : Pointer[GtkAssistant],
    page_num : Int);

external gtk_assistant_get_n_pages(
    assistant : Pointer[GtkAssistant]) Int;

external gtk_assistant_get_nth_page(
    assistant : Pointer[GtkAssistant],
    page_num : Int) Pointer[GtkWidget];

external gtk_assistant_prepend_page(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) Int;

external gtk_assistant_append_page(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) Int;

external gtk_assistant_insert_page(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget],
    position : Int) Int;

external gtk_assistant_set_forward_page_func(
    assistant : Pointer[GtkAssistant],
    page_func : GtkAssistantPageFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_assistant_set_page_type(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget],
    type : GtkAssistantPageType);

external gtk_assistant_get_page_type(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) GtkAssistantPageType;

external gtk_assistant_set_page_title(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget],
    title : Pointer[CChar]);

external gtk_assistant_get_page_title(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) Pointer[CChar];

external gtk_assistant_set_page_header_image(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_assistant_get_page_header_image(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) Pointer[GdkPixbuf];

external gtk_assistant_set_page_side_image(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_assistant_get_page_side_image(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) Pointer[GdkPixbuf];

external gtk_assistant_set_page_complete(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget],
    complete : Int);

external gtk_assistant_get_page_complete(
    assistant : Pointer[GtkAssistant],
    page : Pointer[GtkWidget]) Int;

external gtk_assistant_add_action_widget(
    assistant : Pointer[GtkAssistant],
    child : Pointer[GtkWidget]);

external gtk_assistant_remove_action_widget(
    assistant : Pointer[GtkAssistant],
    child : Pointer[GtkWidget]);

external gtk_assistant_update_buttons_state(
    assistant : Pointer[GtkAssistant]);

external gtk_assistant_commit(
    assistant : Pointer[GtkAssistant]);

alias GtkBox = Struct__GtkBox;

alias GtkBoxClass = Struct__GtkBoxClass;

record Struct__GtkBox (
    container : GtkContainer,
    children : Pointer[GList],
    spacing : Short,
    homogeneous : UInt,
);

record Struct__GtkBoxClass (
    parent_class : GtkContainerClass,
);

alias GtkBoxChild = Struct__GtkBoxChild;

record Struct__GtkBoxChild (
    widget : Pointer[GtkWidget],
    padding : UShort,
    expand : UInt,
    fill : UInt,
    pack : UInt,
    is_secondary : UInt,
);

external gtk_box_get_type() CULong;

external _gtk_box_new(
    orientation : GtkOrientation,
    homogeneous : Int,
    spacing : Int) Pointer[GtkWidget];

external gtk_box_pack_start(
    box : Pointer[GtkBox],
    child : Pointer[GtkWidget],
    expand : Int,
    fill : Int,
    padding : UInt);

external gtk_box_pack_end(
    box : Pointer[GtkBox],
    child : Pointer[GtkWidget],
    expand : Int,
    fill : Int,
    padding : UInt);

external gtk_box_pack_start_defaults(
    box : Pointer[GtkBox],
    widget : Pointer[GtkWidget]);

external gtk_box_pack_end_defaults(
    box : Pointer[GtkBox],
    widget : Pointer[GtkWidget]);

external gtk_box_set_homogeneous(
    box : Pointer[GtkBox],
    homogeneous : Int);

external gtk_box_get_homogeneous(
    box : Pointer[GtkBox]) Int;

external gtk_box_set_spacing(
    box : Pointer[GtkBox],
    spacing : Int);

external gtk_box_get_spacing(
    box : Pointer[GtkBox]) Int;

external gtk_box_reorder_child(
    box : Pointer[GtkBox],
    child : Pointer[GtkWidget],
    position : Int);

external gtk_box_query_child_packing(
    box : Pointer[GtkBox],
    child : Pointer[GtkWidget],
    expand : Pointer[Int],
    fill : Pointer[Int],
    padding : Pointer[UInt],
    pack_type : Pointer[GtkPackType]);

external gtk_box_set_child_packing(
    box : Pointer[GtkBox],
    child : Pointer[GtkWidget],
    expand : Int,
    fill : Int,
    padding : UInt,
    pack_type : GtkPackType);

external _gtk_box_set_old_defaults(
    box : Pointer[GtkBox]);

external _gtk_box_get_spacing_set(
    box : Pointer[GtkBox]) Int;

external _gtk_box_set_spacing_set(
    box : Pointer[GtkBox],
    spacing_set : Int);

alias GtkButtonBox = Struct__GtkButtonBox;

alias GtkButtonBoxClass = Struct__GtkButtonBoxClass;

record Struct__GtkButtonBox (
    box : GtkBox,
    child_min_width : Int,
    child_min_height : Int,
    child_ipad_x : Int,
    child_ipad_y : Int,
    layout_style : GtkButtonBoxStyle,
);

record Struct__GtkButtonBoxClass (
    parent_class : GtkBoxClass,
);

external gtk_button_box_get_type() CULong;

external gtk_button_box_get_layout(
    widget : Pointer[GtkButtonBox]) GtkButtonBoxStyle;

external gtk_button_box_set_layout(
    widget : Pointer[GtkButtonBox],
    layout_style : GtkButtonBoxStyle);

external gtk_button_box_get_child_secondary(
    widget : Pointer[GtkButtonBox],
    child : Pointer[GtkWidget]) Int;

external gtk_button_box_set_child_secondary(
    widget : Pointer[GtkButtonBox],
    child : Pointer[GtkWidget],
    is_secondary : Int);

external gtk_button_box_set_child_size(
    widget : Pointer[GtkButtonBox],
    min_width : Int,
    min_height : Int);

external gtk_button_box_set_child_ipadding(
    widget : Pointer[GtkButtonBox],
    ipad_x : Int,
    ipad_y : Int);

external gtk_button_box_get_child_size(
    widget : Pointer[GtkButtonBox],
    min_width : Pointer[Int],
    min_height : Pointer[Int]);

external gtk_button_box_get_child_ipadding(
    widget : Pointer[GtkButtonBox],
    ipad_x : Pointer[Int],
    ipad_y : Pointer[Int]);

external _gtk_button_box_child_requisition(
    widget : Pointer[GtkWidget],
    nvis_children : Pointer[Int],
    nvis_secondaries : Pointer[Int],
    width : Pointer[Int],
    height : Pointer[Int]);

alias GtkBindingSet = Struct__GtkBindingSet;

alias GtkBindingEntry = Struct__GtkBindingEntry;

alias GtkBindingSignal = Struct__GtkBindingSignal;

alias GtkBindingArg = Struct__GtkBindingArg;

record Struct__GtkBindingSet (
    set_name : Pointer[CChar],
    priority : Int,
    widget_path_pspecs : Pointer[GSList],
    widget_class_pspecs : Pointer[GSList],
    class_branch_pspecs : Pointer[GSList],
    entries : Pointer[GtkBindingEntry],
    current : Pointer[GtkBindingEntry],
    parsed : UInt,
);

record Struct__GtkBindingEntry (
    keyval : UInt,
    modifiers : GdkModifierType,
    binding_set : Pointer[GtkBindingSet],
    destroyed : UInt,
    in_emission : UInt,
    marks_unbound : UInt,
    set_next : Pointer[GtkBindingEntry],
    hash_next : Pointer[GtkBindingEntry],
    signals : Pointer[GtkBindingSignal],
);

record Struct__GtkBindingArg (
    arg_type : CULong,
    d : AUnionType,
);

record Struct__GtkBindingSignal (
    next : Pointer[GtkBindingSignal],
    signal_name : Pointer[CChar],
    n_args : UInt,
    args : Pointer[GtkBindingArg],
);

external gtk_binding_set_new(
    set_name : Pointer[CChar]) Pointer[GtkBindingSet];

external gtk_binding_set_by_class(
    object_class : gpointer) Pointer[GtkBindingSet];

external gtk_binding_set_find(
    set_name : Pointer[CChar]) Pointer[GtkBindingSet];

external gtk_bindings_activate(
    object : Pointer[GtkObject],
    keyval : UInt,
    modifiers : GdkModifierType) Int;

external gtk_bindings_activate_event(
    object : Pointer[GtkObject],
    event : Pointer[GdkEventKey]) Int;

external gtk_binding_set_activate(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType,
    object : Pointer[GtkObject]) Int;

external gtk_binding_entry_clear(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType);

external gtk_binding_parse_binding(
    scanner : Pointer[GScanner]) UInt;

external gtk_binding_entry_skip(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType);

external gtk_binding_entry_add_signal(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType,
    signal_name : Pointer[CChar],
    n_args : UInt,
    ...);

external gtk_binding_entry_add_signall(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType,
    signal_name : Pointer[CChar],
    binding_args : Pointer[GSList]);

external gtk_binding_entry_remove(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType);

external gtk_binding_set_add_path(
    binding_set : Pointer[GtkBindingSet],
    path_type : GtkPathType,
    path_pattern : Pointer[CChar],
    priority : GtkPathPriorityType);

external _gtk_binding_parse_binding(
    scanner : Pointer[GScanner]) UInt;

external _gtk_binding_reset_parsed();

external _gtk_binding_entry_add_signall(
    binding_set : Pointer[GtkBindingSet],
    keyval : UInt,
    modifiers : GdkModifierType,
    signal_name : Pointer[CChar],
    binding_args : Pointer[GSList]);

alias GtkBuilder = Struct__GtkBuilder;

alias GtkBuilderClass = Struct__GtkBuilderClass;

alias GtkBuilderPrivate = Opaque;

alias GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0;
alias GTK_BUILDER_ERROR_UNHANDLED_TAG = 1;
alias GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = 2;
alias GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = 3;
alias GTK_BUILDER_ERROR_INVALID_TAG = 4;
alias GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5;
alias GTK_BUILDER_ERROR_INVALID_VALUE = 6;
alias GTK_BUILDER_ERROR_VERSION_MISMATCH = 7;
alias GTK_BUILDER_ERROR_DUPLICATE_ID = 8;

alias GtkBuilderError = Int;

external gtk_builder_error_quark() UInt;

record Struct__GtkBuilder (
    parent_instance : GObject,
    priv : Pointer[GtkBuilderPrivate],
);

record Struct__GtkBuilderClass (
    parent_class : GObjectClass,
    get_type_from_name : CCodePointer[(Pointer[Struct__GtkBuilder],Pointer[CChar]),(CULong)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
    _gtk_reserved7 : CCodePointer[(),()],
    _gtk_reserved8 : CCodePointer[(),()],
);

alias GtkBuilderConnectFunc = CCodePointer[(Pointer[Struct__GtkBuilder],Pointer[Struct__GObject],Pointer[CChar],Pointer[CChar],Pointer[Struct__GObject],Int,RawPointer),()];

external gtk_builder_get_type() CULong;

external gtk_builder_new() Pointer[GtkBuilder];

external gtk_builder_add_from_file(
    builder : Pointer[GtkBuilder],
    filename : Pointer[CChar],
    error : Pointer[Pointer[GError]]) UInt;

external gtk_builder_add_from_string(
    builder : Pointer[GtkBuilder],
    buffer : Pointer[CChar],
    length : CULong,
    error : Pointer[Pointer[GError]]) UInt;

external gtk_builder_add_objects_from_file(
    builder : Pointer[GtkBuilder],
    filename : Pointer[CChar],
    object_ids : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) UInt;

external gtk_builder_add_objects_from_string(
    builder : Pointer[GtkBuilder],
    buffer : Pointer[CChar],
    length : CULong,
    object_ids : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) UInt;

external gtk_builder_get_object(
    builder : Pointer[GtkBuilder],
    name : Pointer[CChar]) Pointer[GObject];

external gtk_builder_get_objects(
    builder : Pointer[GtkBuilder]) Pointer[GSList];

external gtk_builder_connect_signals(
    builder : Pointer[GtkBuilder],
    user_data : gpointer);

external gtk_builder_connect_signals_full(
    builder : Pointer[GtkBuilder],
    func : GtkBuilderConnectFunc,
    user_data : gpointer);

external gtk_builder_set_translation_domain(
    builder : Pointer[GtkBuilder],
    domain : Pointer[CChar]);

external gtk_builder_get_translation_domain(
    builder : Pointer[GtkBuilder]) Pointer[CChar];

external gtk_builder_get_type_from_name(
    builder : Pointer[GtkBuilder],
    type_name : Pointer[CChar]) CULong;

external gtk_builder_value_from_string(
    builder : Pointer[GtkBuilder],
    pspec : Pointer[GParamSpec],
    string : Pointer[CChar],
    value : Pointer[GValue],
    error : Pointer[Pointer[GError]]) Int;

external gtk_builder_value_from_string_type(
    builder : Pointer[GtkBuilder],
    type : CULong,
    string : Pointer[CChar],
    value : Pointer[GValue],
    error : Pointer[Pointer[GError]]) Int;

alias GtkBuildable = Opaque;

alias GtkBuildableIface = Struct__GtkBuildableIface;

record Struct__GtkBuildableIface (
    g_iface : GTypeInterface,
    set_name : CCodePointer[(OpaquePointer,Pointer[CChar]),()],
    get_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    add_child : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[Struct__GObject],Pointer[CChar]),()],
    set_buildable_property : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[CChar],Pointer[Struct__GValue]),()],
    construct_child : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[CChar]),(Pointer[Struct__GObject])],
    custom_tag_start : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[Struct__GObject],Pointer[CChar],Pointer[Struct__GMarkupParser],Pointer[RawPointer]),(Int)],
    custom_tag_end : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[Struct__GObject],Pointer[CChar],Pointer[RawPointer]),()],
    custom_finished : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[Struct__GObject],Pointer[CChar],RawPointer),()],
    parser_finished : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder]),()],
    get_internal_child : CCodePointer[(OpaquePointer,Pointer[Struct__GtkBuilder],Pointer[CChar]),(Pointer[Struct__GObject])],
);

external gtk_buildable_get_type() CULong;

external gtk_buildable_set_name(
    buildable : Pointer[GtkBuildable],
    name : Pointer[CChar]);

external gtk_buildable_get_name(
    buildable : Pointer[GtkBuildable]) Pointer[CChar];

external gtk_buildable_add_child(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    type : Pointer[CChar]);

external gtk_buildable_set_buildable_property(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    name : Pointer[CChar],
    value : Pointer[GValue]);

external gtk_buildable_construct_child(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    name : Pointer[CChar]) Pointer[GObject];

external gtk_buildable_custom_tag_start(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    tagname : Pointer[CChar],
    parser : Pointer[GMarkupParser],
    data : Pointer[gpointer]) Int;

external gtk_buildable_custom_tag_end(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    tagname : Pointer[CChar],
    data : Pointer[gpointer]);

external gtk_buildable_custom_finished(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    tagname : Pointer[CChar],
    data : gpointer);

external gtk_buildable_parser_finished(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder]);

external gtk_buildable_get_internal_child(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    childname : Pointer[CChar]) Pointer[GObject];

alias GtkImage = Struct__GtkImage;

alias GtkImageClass = Struct__GtkImageClass;

alias GtkImagePixmapData = Struct__GtkImagePixmapData;

alias GtkImageImageData = Struct__GtkImageImageData;

alias GtkImagePixbufData = Struct__GtkImagePixbufData;

alias GtkImageStockData = Struct__GtkImageStockData;

alias GtkImageIconSetData = Struct__GtkImageIconSetData;

alias GtkImageAnimationData = Struct__GtkImageAnimationData;

alias GtkImageIconNameData = Struct__GtkImageIconNameData;

alias GtkImageGIconData = Struct__GtkImageGIconData;

record Struct__GtkImagePixmapData (
    pixmap : Pointer[GdkPixmap],
);

record Struct__GtkImageImageData (
    image : Pointer[GdkImage],
);

record Struct__GtkImagePixbufData (
    pixbuf : Pointer[GdkPixbuf],
);

record Struct__GtkImageStockData (
    stock_id : Pointer[CChar],
);

record Struct__GtkImageIconSetData (
    icon_set : Pointer[GtkIconSet],
);

record Struct__GtkImageAnimationData (
    anim : Pointer[GdkPixbufAnimation],
    iter : Pointer[GdkPixbufAnimationIter],
    frame_timeout : UInt,
);

record Struct__GtkImageIconNameData (
    icon_name : Pointer[CChar],
    pixbuf : Pointer[GdkPixbuf],
    theme_change_id : UInt,
);

record Struct__GtkImageGIconData (
    icon : Pointer[GIcon],
    pixbuf : Pointer[GdkPixbuf],
    theme_change_id : UInt,
);

alias GTK_IMAGE_EMPTY = 0;
alias GTK_IMAGE_PIXMAP = 1;
alias GTK_IMAGE_IMAGE = 2;
alias GTK_IMAGE_PIXBUF = 3;
alias GTK_IMAGE_STOCK = 4;
alias GTK_IMAGE_ICON_SET = 5;
alias GTK_IMAGE_ANIMATION = 6;
alias GTK_IMAGE_ICON_NAME = 7;
alias GTK_IMAGE_GICON = 8;

alias GtkImageType = Int;

record Struct__GtkImage (
    misc : GtkMisc,
    storage_type : GtkImageType,
    data : AUnionType,
    mask : Pointer[GdkBitmap],
    icon_size : GtkIconSize,
);

record Struct__GtkImageClass (
    parent_class : GtkMiscClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_image_get_type() CULong;

external gtk_image_new() Pointer[GtkWidget];

external gtk_image_new_from_pixmap(
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]) Pointer[GtkWidget];

external gtk_image_new_from_image(
    image : Pointer[GdkImage],
    mask : Pointer[GdkBitmap]) Pointer[GtkWidget];

external gtk_image_new_from_file(
    filename : Pointer[CChar]) Pointer[GtkWidget];

external gtk_image_new_from_pixbuf(
    pixbuf : Pointer[GdkPixbuf]) Pointer[GtkWidget];

external gtk_image_new_from_stock(
    stock_id : Pointer[CChar],
    size : GtkIconSize) Pointer[GtkWidget];

external gtk_image_new_from_icon_set(
    icon_set : Pointer[GtkIconSet],
    size : GtkIconSize) Pointer[GtkWidget];

external gtk_image_new_from_animation(
    animation : Pointer[GdkPixbufAnimation]) Pointer[GtkWidget];

external gtk_image_new_from_icon_name(
    icon_name : Pointer[CChar],
    size : GtkIconSize) Pointer[GtkWidget];

external gtk_image_new_from_gicon(
    icon : Pointer[GIcon],
    size : GtkIconSize) Pointer[GtkWidget];

external gtk_image_clear(
    image : Pointer[GtkImage]);

external gtk_image_set_from_pixmap(
    image : Pointer[GtkImage],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_image_set_from_image(
    image : Pointer[GtkImage],
    gdk_image : Pointer[GdkImage],
    mask : Pointer[GdkBitmap]);

external gtk_image_set_from_file(
    image : Pointer[GtkImage],
    filename : Pointer[CChar]);

external gtk_image_set_from_pixbuf(
    image : Pointer[GtkImage],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_image_set_from_stock(
    image : Pointer[GtkImage],
    stock_id : Pointer[CChar],
    size : GtkIconSize);

external gtk_image_set_from_icon_set(
    image : Pointer[GtkImage],
    icon_set : Pointer[GtkIconSet],
    size : GtkIconSize);

external gtk_image_set_from_animation(
    image : Pointer[GtkImage],
    animation : Pointer[GdkPixbufAnimation]);

external gtk_image_set_from_icon_name(
    image : Pointer[GtkImage],
    icon_name : Pointer[CChar],
    size : GtkIconSize);

external gtk_image_set_from_gicon(
    image : Pointer[GtkImage],
    icon : Pointer[GIcon],
    size : GtkIconSize);

external gtk_image_set_pixel_size(
    image : Pointer[GtkImage],
    pixel_size : Int);

external gtk_image_get_storage_type(
    image : Pointer[GtkImage]) GtkImageType;

external gtk_image_get_pixmap(
    image : Pointer[GtkImage],
    pixmap : Pointer[Pointer[GdkPixmap]],
    mask : Pointer[Pointer[GdkBitmap]]);

external gtk_image_get_image(
    image : Pointer[GtkImage],
    gdk_image : Pointer[Pointer[GdkImage]],
    mask : Pointer[Pointer[GdkBitmap]]);

external gtk_image_get_pixbuf(
    image : Pointer[GtkImage]) Pointer[GdkPixbuf];

external gtk_image_get_stock(
    image : Pointer[GtkImage],
    stock_id : Pointer[Pointer[CChar]],
    size : Pointer[GtkIconSize]);

external gtk_image_get_icon_set(
    image : Pointer[GtkImage],
    icon_set : Pointer[Pointer[GtkIconSet]],
    size : Pointer[GtkIconSize]);

external gtk_image_get_animation(
    image : Pointer[GtkImage]) Pointer[GdkPixbufAnimation];

external gtk_image_get_icon_name(
    image : Pointer[GtkImage],
    icon_name : Pointer[Pointer[CChar]],
    size : Pointer[GtkIconSize]);

external gtk_image_get_gicon(
    image : Pointer[GtkImage],
    gicon : Pointer[Pointer[GIcon]],
    size : Pointer[GtkIconSize]);

external gtk_image_get_pixel_size(
    image : Pointer[GtkImage]) Int;

external gtk_image_set(
    image : Pointer[GtkImage],
    val : Pointer[GdkImage],
    mask : Pointer[GdkBitmap]);

external gtk_image_get(
    image : Pointer[GtkImage],
    val : Pointer[Pointer[GdkImage]],
    mask : Pointer[Pointer[GdkBitmap]]);

alias GtkButton = Struct__GtkButton;

alias GtkButtonClass = Struct__GtkButtonClass;

record Struct__GtkButton (
    bin : GtkBin,
    event_window : Pointer[GdkWindow],
    label_text : Pointer[CChar],
    activate_timeout : UInt,
    constructed : UInt,
    in_button : UInt,
    button_down : UInt,
    relief : UInt,
    use_underline : UInt,
    use_stock : UInt,
    depressed : UInt,
    depress_on_activate : UInt,
    focus_on_click : UInt,
);

record Struct__GtkButtonClass (
    parent_class : GtkBinClass,
    pressed : CCodePointer[(Pointer[Struct__GtkButton]),()],
    released : CCodePointer[(Pointer[Struct__GtkButton]),()],
    clicked : CCodePointer[(Pointer[Struct__GtkButton]),()],
    enter : CCodePointer[(Pointer[Struct__GtkButton]),()],
    leave : CCodePointer[(Pointer[Struct__GtkButton]),()],
    activate : CCodePointer[(Pointer[Struct__GtkButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_button_get_type() CULong;

external gtk_button_new() Pointer[GtkWidget];

external gtk_button_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_button_new_from_stock(
    stock_id : Pointer[CChar]) Pointer[GtkWidget];

external gtk_button_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_button_pressed(
    button : Pointer[GtkButton]);

external gtk_button_released(
    button : Pointer[GtkButton]);

external gtk_button_clicked(
    button : Pointer[GtkButton]);

external gtk_button_enter(
    button : Pointer[GtkButton]);

external gtk_button_leave(
    button : Pointer[GtkButton]);

external gtk_button_set_relief(
    button : Pointer[GtkButton],
    newstyle : GtkReliefStyle);

external gtk_button_get_relief(
    button : Pointer[GtkButton]) GtkReliefStyle;

external gtk_button_set_label(
    button : Pointer[GtkButton],
    label : Pointer[CChar]);

external gtk_button_get_label(
    button : Pointer[GtkButton]) Pointer[CChar];

external gtk_button_set_use_underline(
    button : Pointer[GtkButton],
    use_underline : Int);

external gtk_button_get_use_underline(
    button : Pointer[GtkButton]) Int;

external gtk_button_set_use_stock(
    button : Pointer[GtkButton],
    use_stock : Int);

external gtk_button_get_use_stock(
    button : Pointer[GtkButton]) Int;

external gtk_button_set_focus_on_click(
    button : Pointer[GtkButton],
    focus_on_click : Int);

external gtk_button_get_focus_on_click(
    button : Pointer[GtkButton]) Int;

external gtk_button_set_alignment(
    button : Pointer[GtkButton],
    xalign : Float,
    yalign : Float);

external gtk_button_get_alignment(
    button : Pointer[GtkButton],
    xalign : Pointer[Float],
    yalign : Pointer[Float]);

external gtk_button_set_image(
    button : Pointer[GtkButton],
    image : Pointer[GtkWidget]);

external gtk_button_get_image(
    button : Pointer[GtkButton]) Pointer[GtkWidget];

external gtk_button_set_image_position(
    button : Pointer[GtkButton],
    position : GtkPositionType);

external gtk_button_get_image_position(
    button : Pointer[GtkButton]) GtkPositionType;

external gtk_button_get_event_window(
    button : Pointer[GtkButton]) Pointer[GdkWindow];

external _gtk_button_set_depressed(
    button : Pointer[GtkButton],
    depressed : Int);

external _gtk_button_paint(
    button : Pointer[GtkButton],
    area : Pointer[GdkRectangle],
    state_type : GtkStateType,
    shadow_type : GtkShadowType,
    main_detail : Pointer[CChar],
    default_detail : Pointer[CChar]);

external gtk_marshal_BOOLEAN__VOID(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_BOOLEAN__POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_BOOLEAN__POINTER_INT_INT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_ENUM__ENUM(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_INT__POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_INT__POINTER_CHAR_CHAR(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__ENUM_FLOAT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__INT_INT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__INT_INT_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_INT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_POINTER_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_STRING_STRING(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_UINT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_UINT_ENUM(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_POINTER_UINT_UINT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__POINTER_UINT_UINT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__STRING_INT_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_marshal_VOID__UINT_STRING(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external gtk_signal_newv(
    name : Pointer[CChar],
    signal_flags : GtkSignalRunType,
    object_type : CULong,
    function_offset : UInt,
    marshaller : GSignalCMarshaller,
    return_val : CULong,
    n_args : UInt,
    args : Pointer[CULong]) UInt;

external gtk_signal_new(
    name : Pointer[CChar],
    signal_flags : GtkSignalRunType,
    object_type : CULong,
    function_offset : UInt,
    marshaller : GSignalCMarshaller,
    return_val : CULong,
    n_args : UInt,
    ...) UInt;

external gtk_signal_emit_stop_by_name(
    object : Pointer[GtkObject],
    name : Pointer[CChar]);

external gtk_signal_connect_object_while_alive(
    object : Pointer[GtkObject],
    name : Pointer[CChar],
    func : GCallback,
    alive_object : Pointer[GtkObject]);

external gtk_signal_connect_while_alive(
    object : Pointer[GtkObject],
    name : Pointer[CChar],
    func : GCallback,
    func_data : gpointer,
    alive_object : Pointer[GtkObject]);

external gtk_signal_connect_full(
    object : Pointer[GtkObject],
    name : Pointer[CChar],
    func : GCallback,
    unsupported : GtkCallbackMarshal,
    data : gpointer,
    destroy_func : GDestroyNotify,
    object_signal : Int,
    after : Int) CULong;

external gtk_signal_emitv(
    object : Pointer[GtkObject],
    signal_id : UInt,
    args : Pointer[GtkArg]);

external gtk_signal_emit(
    object : Pointer[GtkObject],
    signal_id : UInt,
    ...);

external gtk_signal_emit_by_name(
    object : Pointer[GtkObject],
    name : Pointer[CChar],
    ...);

external gtk_signal_emitv_by_name(
    object : Pointer[GtkObject],
    name : Pointer[CChar],
    args : Pointer[GtkArg]);

external gtk_signal_compat_matched(
    object : Pointer[GtkObject],
    func : GCallback,
    data : gpointer,
    match : GSignalMatchType,
    action : UInt);

alias GtkCalendar = Struct__GtkCalendar;

alias GtkCalendarClass = Struct__GtkCalendarClass;

alias GtkCalendarPrivate = Opaque;

alias GTK_CALENDAR_SHOW_HEADING = 1;
alias GTK_CALENDAR_SHOW_DAY_NAMES = 2;
alias GTK_CALENDAR_NO_MONTH_CHANGE = 4;
alias GTK_CALENDAR_SHOW_WEEK_NUMBERS = 8;
alias GTK_CALENDAR_WEEK_START_MONDAY = 16;
alias GTK_CALENDAR_SHOW_DETAILS = 32;

alias GtkCalendarDisplayOptions = Int;

alias GtkCalendarDetailFunc = CCodePointer[(Pointer[Struct__GtkCalendar],UInt,UInt,UInt,RawPointer),(Pointer[CChar])];

record Struct__GtkCalendar (
    widget : GtkWidget,
    header_style : Pointer[GtkStyle],
    label_style : Pointer[GtkStyle],
    month : Int,
    year : Int,
    selected_day : Int,
    day_month : Array[Array[Int,7],6],
    day : Array[Array[Int,7],6],
    num_marked_dates : Int,
    marked_date : Array[Int,31],
    display_flags : GtkCalendarDisplayOptions,
    marked_date_color : Array[GdkColor,31],
    gc : Pointer[GdkGC],
    xor_gc : Pointer[GdkGC],
    focus_row : Int,
    focus_col : Int,
    highlight_row : Int,
    highlight_col : Int,
    priv : Pointer[GtkCalendarPrivate],
    grow_space : Array[CChar,32],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkCalendarClass (
    parent_class : GtkWidgetClass,
    month_changed : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
    day_selected : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
    day_selected_double_click : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
    prev_month : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
    next_month : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
    prev_year : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
    next_year : CCodePointer[(Pointer[Struct__GtkCalendar]),()],
);

external gtk_calendar_get_type() CULong;

external gtk_calendar_new() Pointer[GtkWidget];

external gtk_calendar_select_month(
    calendar : Pointer[GtkCalendar],
    month : UInt,
    year : UInt) Int;

external gtk_calendar_select_day(
    calendar : Pointer[GtkCalendar],
    day : UInt);

external gtk_calendar_mark_day(
    calendar : Pointer[GtkCalendar],
    day : UInt) Int;

external gtk_calendar_unmark_day(
    calendar : Pointer[GtkCalendar],
    day : UInt) Int;

external gtk_calendar_clear_marks(
    calendar : Pointer[GtkCalendar]);

external gtk_calendar_set_display_options(
    calendar : Pointer[GtkCalendar],
    flags : GtkCalendarDisplayOptions);

external gtk_calendar_get_display_options(
    calendar : Pointer[GtkCalendar]) GtkCalendarDisplayOptions;

external gtk_calendar_display_options(
    calendar : Pointer[GtkCalendar],
    flags : GtkCalendarDisplayOptions);

external gtk_calendar_get_date(
    calendar : Pointer[GtkCalendar],
    year : Pointer[UInt],
    month : Pointer[UInt],
    day : Pointer[UInt]);

external gtk_calendar_set_detail_func(
    calendar : Pointer[GtkCalendar],
    func : GtkCalendarDetailFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_calendar_set_detail_width_chars(
    calendar : Pointer[GtkCalendar],
    chars : Int);

external gtk_calendar_set_detail_height_rows(
    calendar : Pointer[GtkCalendar],
    rows : Int);

external gtk_calendar_get_detail_width_chars(
    calendar : Pointer[GtkCalendar]) Int;

external gtk_calendar_get_detail_height_rows(
    calendar : Pointer[GtkCalendar]) Int;

external gtk_calendar_freeze(
    calendar : Pointer[GtkCalendar]);

external gtk_calendar_thaw(
    calendar : Pointer[GtkCalendar]);

alias GtkCellEditable = Opaque;

alias GtkCellEditableIface = Struct__GtkCellEditableIface;

record Struct__GtkCellEditableIface (
    g_iface : GTypeInterface,
    editing_done : CCodePointer[(OpaquePointer),()],
    remove_widget : CCodePointer[(OpaquePointer),()],
    start_editing : CCodePointer[(OpaquePointer,OpaquePointer),()],
);

external gtk_cell_editable_get_type() CULong;

external gtk_cell_editable_start_editing(
    cell_editable : Pointer[GtkCellEditable],
    event : Pointer[GdkEvent]);

external gtk_cell_editable_editing_done(
    cell_editable : Pointer[GtkCellEditable]);

external gtk_cell_editable_remove_widget(
    cell_editable : Pointer[GtkCellEditable]);

alias GTK_CELL_RENDERER_SELECTED = 1;
alias GTK_CELL_RENDERER_PRELIT = 2;
alias GTK_CELL_RENDERER_INSENSITIVE = 4;
alias GTK_CELL_RENDERER_SORTED = 8;
alias GTK_CELL_RENDERER_FOCUSED = 16;

alias GtkCellRendererState = Int;

alias GTK_CELL_RENDERER_MODE_INERT = 0;
alias GTK_CELL_RENDERER_MODE_ACTIVATABLE = 1;
alias GTK_CELL_RENDERER_MODE_EDITABLE = 2;

alias GtkCellRendererMode = Int;

alias GtkCellRenderer = Struct__GtkCellRenderer;

alias GtkCellRendererClass = Struct__GtkCellRendererClass;

record Struct__GtkCellRenderer (
    parent : GtkObject,
    xalign : Float,
    yalign : Float,
    width : Int,
    height : Int,
    xpad : UShort,
    ypad : UShort,
    mode : UInt,
    visible : UInt,
    is_expander : UInt,
    is_expanded : UInt,
    cell_background_set : UInt,
    sensitive : UInt,
    editing : UInt,
);

record Struct__GtkCellRendererClass (
    parent_class : GtkObjectClass,
    get_size : CCodePointer[(Pointer[Struct__GtkCellRenderer],Pointer[Struct__GtkWidget],Pointer[Struct__GdkRectangle],Pointer[Int],Pointer[Int],Pointer[Int],Pointer[Int]),()],
    render : CCodePointer[(Pointer[Struct__GtkCellRenderer],Pointer[Struct__GdkDrawable],Pointer[Struct__GtkWidget],Pointer[Struct__GdkRectangle],Pointer[Struct__GdkRectangle],Pointer[Struct__GdkRectangle],Int),()],
    activate : CCodePointer[(Pointer[Struct__GtkCellRenderer],OpaquePointer,Pointer[Struct__GtkWidget],Pointer[CChar],Pointer[Struct__GdkRectangle],Pointer[Struct__GdkRectangle],Int),(Int)],
    start_editing : CCodePointer[(Pointer[Struct__GtkCellRenderer],OpaquePointer,Pointer[Struct__GtkWidget],Pointer[CChar],Pointer[Struct__GdkRectangle],Pointer[Struct__GdkRectangle],Int),(OpaquePointer)],
    editing_canceled : CCodePointer[(Pointer[Struct__GtkCellRenderer]),()],
    editing_started : CCodePointer[(Pointer[Struct__GtkCellRenderer],OpaquePointer,Pointer[CChar]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
);

external gtk_cell_renderer_get_type() CULong;

external gtk_cell_renderer_get_size(
    cell : Pointer[GtkCellRenderer],
    widget : Pointer[GtkWidget],
    cell_area : Pointer[GdkRectangle],
    x_offset : Pointer[Int],
    y_offset : Pointer[Int],
    width : Pointer[Int],
    height : Pointer[Int]);

external gtk_cell_renderer_render(
    cell : Pointer[GtkCellRenderer],
    window : Pointer[GdkWindow],
    widget : Pointer[GtkWidget],
    background_area : Pointer[GdkRectangle],
    cell_area : Pointer[GdkRectangle],
    expose_area : Pointer[GdkRectangle],
    flags : GtkCellRendererState);

external gtk_cell_renderer_activate(
    cell : Pointer[GtkCellRenderer],
    event : Pointer[GdkEvent],
    widget : Pointer[GtkWidget],
    path : Pointer[CChar],
    background_area : Pointer[GdkRectangle],
    cell_area : Pointer[GdkRectangle],
    flags : GtkCellRendererState) Int;

external gtk_cell_renderer_start_editing(
    cell : Pointer[GtkCellRenderer],
    event : Pointer[GdkEvent],
    widget : Pointer[GtkWidget],
    path : Pointer[CChar],
    background_area : Pointer[GdkRectangle],
    cell_area : Pointer[GdkRectangle],
    flags : GtkCellRendererState) Pointer[GtkCellEditable];

external gtk_cell_renderer_set_fixed_size(
    cell : Pointer[GtkCellRenderer],
    width : Int,
    height : Int);

external gtk_cell_renderer_get_fixed_size(
    cell : Pointer[GtkCellRenderer],
    width : Pointer[Int],
    height : Pointer[Int]);

external gtk_cell_renderer_set_alignment(
    cell : Pointer[GtkCellRenderer],
    xalign : Float,
    yalign : Float);

external gtk_cell_renderer_get_alignment(
    cell : Pointer[GtkCellRenderer],
    xalign : Pointer[Float],
    yalign : Pointer[Float]);

external gtk_cell_renderer_set_padding(
    cell : Pointer[GtkCellRenderer],
    xpad : Int,
    ypad : Int);

external gtk_cell_renderer_get_padding(
    cell : Pointer[GtkCellRenderer],
    xpad : Pointer[Int],
    ypad : Pointer[Int]);

external gtk_cell_renderer_set_visible(
    cell : Pointer[GtkCellRenderer],
    visible : Int);

external gtk_cell_renderer_get_visible(
    cell : Pointer[GtkCellRenderer]) Int;

external gtk_cell_renderer_set_sensitive(
    cell : Pointer[GtkCellRenderer],
    sensitive : Int);

external gtk_cell_renderer_get_sensitive(
    cell : Pointer[GtkCellRenderer]) Int;

external gtk_cell_renderer_editing_canceled(
    cell : Pointer[GtkCellRenderer]);

external gtk_cell_renderer_stop_editing(
    cell : Pointer[GtkCellRenderer],
    canceled : Int);

alias GtkTreeIter = Struct__GtkTreeIter;

alias GtkTreePath = Opaque;

alias GtkTreeRowReference = Opaque;

alias GtkTreeModel = Opaque;

alias GtkTreeModelIface = Struct__GtkTreeModelIface;

alias GtkTreeModelForeachFunc = CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),(Int)];

alias GTK_TREE_MODEL_ITERS_PERSIST = 1;
alias GTK_TREE_MODEL_LIST_ONLY = 2;

alias GtkTreeModelFlags = Int;

record Struct__GtkTreeIter (
    stamp : Int,
    user_data : gpointer,
    user_data2 : gpointer,
    user_data3 : gpointer,
);

record Struct__GtkTreeModelIface (
    g_iface : GTypeInterface,
    row_changed : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkTreeIter]),()],
    row_inserted : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkTreeIter]),()],
    row_has_child_toggled : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkTreeIter]),()],
    row_deleted : CCodePointer[(OpaquePointer,OpaquePointer),()],
    rows_reordered : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Int]),()],
    get_flags : CCodePointer[(OpaquePointer),(Int)],
    get_n_columns : CCodePointer[(OpaquePointer),(Int)],
    get_column_type : CCodePointer[(OpaquePointer,Int),(CULong)],
    get_iter : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],OpaquePointer),(Int)],
    get_path : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter]),(OpaquePointer)],
    get_value : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Int,Pointer[Struct__GValue]),()],
    iter_next : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter]),(Int)],
    iter_children : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GtkTreeIter]),(Int)],
    iter_has_child : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter]),(Int)],
    iter_n_children : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter]),(Int)],
    iter_nth_child : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GtkTreeIter],Int),(Int)],
    iter_parent : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GtkTreeIter]),(Int)],
    ref_node : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter]),()],
    unref_node : CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter]),()],
);

external gtk_tree_path_new() Pointer[GtkTreePath];

external gtk_tree_path_new_from_string(
    path : Pointer[CChar]) Pointer[GtkTreePath];

external gtk_tree_path_new_from_indices(
    first_index : Int,
    ...) Pointer[GtkTreePath];

external gtk_tree_path_to_string(
    path : Pointer[GtkTreePath]) Pointer[CChar];

external gtk_tree_path_new_first() Pointer[GtkTreePath];

external gtk_tree_path_append_index(
    path : Pointer[GtkTreePath],
    index_ : Int);

external gtk_tree_path_prepend_index(
    path : Pointer[GtkTreePath],
    index_ : Int);

external gtk_tree_path_get_depth(
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_path_get_indices(
    path : Pointer[GtkTreePath]) Pointer[Int];

external gtk_tree_path_get_indices_with_depth(
    path : Pointer[GtkTreePath],
    depth : Pointer[Int]) Pointer[Int];

external gtk_tree_path_free(
    path : Pointer[GtkTreePath]);

external gtk_tree_path_copy(
    path : Pointer[GtkTreePath]) Pointer[GtkTreePath];

external gtk_tree_path_get_type() CULong;

external gtk_tree_path_compare(
    a : Pointer[GtkTreePath],
    b : Pointer[GtkTreePath]) Int;

external gtk_tree_path_next(
    path : Pointer[GtkTreePath]);

external gtk_tree_path_prev(
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_path_up(
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_path_down(
    path : Pointer[GtkTreePath]);

external gtk_tree_path_is_ancestor(
    path : Pointer[GtkTreePath],
    descendant : Pointer[GtkTreePath]) Int;

external gtk_tree_path_is_descendant(
    path : Pointer[GtkTreePath],
    ancestor : Pointer[GtkTreePath]) Int;

external gtk_tree_row_reference_get_type() CULong;

external gtk_tree_row_reference_new(
    model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath]) Pointer[GtkTreeRowReference];

external gtk_tree_row_reference_new_proxy(
    proxy : Pointer[GObject],
    model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath]) Pointer[GtkTreeRowReference];

external gtk_tree_row_reference_get_path(
    reference : Pointer[GtkTreeRowReference]) Pointer[GtkTreePath];

external gtk_tree_row_reference_get_model(
    reference : Pointer[GtkTreeRowReference]) Pointer[GtkTreeModel];

external gtk_tree_row_reference_valid(
    reference : Pointer[GtkTreeRowReference]) Int;

external gtk_tree_row_reference_copy(
    reference : Pointer[GtkTreeRowReference]) Pointer[GtkTreeRowReference];

external gtk_tree_row_reference_free(
    reference : Pointer[GtkTreeRowReference]);

external gtk_tree_row_reference_inserted(
    proxy : Pointer[GObject],
    path : Pointer[GtkTreePath]);

external gtk_tree_row_reference_deleted(
    proxy : Pointer[GObject],
    path : Pointer[GtkTreePath]);

external gtk_tree_row_reference_reordered(
    proxy : Pointer[GObject],
    path : Pointer[GtkTreePath],
    iter : Pointer[GtkTreeIter],
    new_order : Pointer[Int]);

external gtk_tree_iter_copy(
    iter : Pointer[GtkTreeIter]) Pointer[GtkTreeIter];

external gtk_tree_iter_free(
    iter : Pointer[GtkTreeIter]);

external gtk_tree_iter_get_type() CULong;

external gtk_tree_model_get_type() CULong;

external gtk_tree_model_get_flags(
    tree_model : Pointer[GtkTreeModel]) GtkTreeModelFlags;

external gtk_tree_model_get_n_columns(
    tree_model : Pointer[GtkTreeModel]) Int;

external gtk_tree_model_get_column_type(
    tree_model : Pointer[GtkTreeModel],
    index_ : Int) CULong;

external gtk_tree_model_get_iter(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_model_get_iter_from_string(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    path_string : Pointer[CChar]) Int;

external gtk_tree_model_get_string_from_iter(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]) Pointer[CChar];

external gtk_tree_model_get_iter_first(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_get_path(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]) Pointer[GtkTreePath];

external gtk_tree_model_get_value(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    column : Int,
    value : Pointer[GValue]);

external gtk_tree_model_iter_next(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_iter_children(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_iter_has_child(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_iter_n_children(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_iter_nth_child(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter],
    n : Int) Int;

external gtk_tree_model_iter_parent(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    child : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_ref_node(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_model_unref_node(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_model_get(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    ...);

external gtk_tree_model_get_valist(
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    var_args : Pointer[__va_list_tag]);

external gtk_tree_model_foreach(
    model : Pointer[GtkTreeModel],
    func : GtkTreeModelForeachFunc,
    user_data : gpointer);

external gtk_tree_model_row_changed(
    tree_model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_model_row_inserted(
    tree_model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_model_row_has_child_toggled(
    tree_model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_model_row_deleted(
    tree_model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath]);

external gtk_tree_model_rows_reordered(
    tree_model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath],
    iter : Pointer[GtkTreeIter],
    new_order : Pointer[Int]);

alias GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = 4294967295;
alias GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = 4294967294;

alias GtkTreeSortable = Opaque;

alias GtkTreeSortableIface = Struct__GtkTreeSortableIface;

alias GtkTreeIterCompareFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GtkTreeIter],RawPointer),(Int)];

record Struct__GtkTreeSortableIface (
    g_iface : GTypeInterface,
    sort_column_changed : CCodePointer[(OpaquePointer),()],
    get_sort_column_id : CCodePointer[(OpaquePointer,Pointer[Int],Pointer[Int]),(Int)],
    set_sort_column_id : CCodePointer[(OpaquePointer,Int,Int),()],
    set_sort_func : CCodePointer[(OpaquePointer,Int,CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GtkTreeIter],RawPointer),(Int)],RawPointer,CCodePointer[(RawPointer),()]),()],
    set_default_sort_func : CCodePointer[(OpaquePointer,CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GtkTreeIter],RawPointer),(Int)],RawPointer,CCodePointer[(RawPointer),()]),()],
    has_default_sort_func : CCodePointer[(OpaquePointer),(Int)],
);

external gtk_tree_sortable_get_type() CULong;

external gtk_tree_sortable_sort_column_changed(
    sortable : Pointer[GtkTreeSortable]);

external gtk_tree_sortable_get_sort_column_id(
    sortable : Pointer[GtkTreeSortable],
    sort_column_id : Pointer[Int],
    order : Pointer[GtkSortType]) Int;

external gtk_tree_sortable_set_sort_column_id(
    sortable : Pointer[GtkTreeSortable],
    sort_column_id : Int,
    order : GtkSortType);

external gtk_tree_sortable_set_sort_func(
    sortable : Pointer[GtkTreeSortable],
    sort_column_id : Int,
    sort_func : GtkTreeIterCompareFunc,
    user_data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_sortable_set_default_sort_func(
    sortable : Pointer[GtkTreeSortable],
    sort_func : GtkTreeIterCompareFunc,
    user_data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_sortable_has_default_sort_func(
    sortable : Pointer[GtkTreeSortable]) Int;

alias GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0;
alias GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1;
alias GTK_TREE_VIEW_COLUMN_FIXED = 2;

alias GtkTreeViewColumnSizing = Int;

alias GtkTreeViewColumn = Struct__GtkTreeViewColumn;

alias GtkTreeViewColumnClass = Struct__GtkTreeViewColumnClass;

alias GtkTreeCellDataFunc = CCodePointer[(Pointer[Struct__GtkTreeViewColumn],Pointer[Struct__GtkCellRenderer],OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),()];

record Struct__GtkTreeViewColumn (
    parent : GtkObject,
    tree_view : Pointer[GtkWidget],
    button : Pointer[GtkWidget],
    child : Pointer[GtkWidget],
    arrow : Pointer[GtkWidget],
    alignment : Pointer[GtkWidget],
    window : Pointer[GdkWindow],
    editable_widget : Pointer[GtkCellEditable],
    xalign : Float,
    property_changed_signal : UInt,
    spacing : Int,
    column_type : GtkTreeViewColumnSizing,
    requested_width : Int,
    button_request : Int,
    resized_width : Int,
    width : Int,
    fixed_width : Int,
    min_width : Int,
    max_width : Int,
    drag_x : Int,
    drag_y : Int,
    title : Pointer[CChar],
    cell_list : Pointer[GList],
    sort_clicked_signal : UInt,
    sort_column_changed_signal : UInt,
    sort_column_id : Int,
    sort_order : GtkSortType,
    visible : UInt,
    resizable : UInt,
    clickable : UInt,
    dirty : UInt,
    show_sort_indicator : UInt,
    maybe_reordered : UInt,
    reorderable : UInt,
    use_resized_width : UInt,
    expand : UInt,
);

record Struct__GtkTreeViewColumnClass (
    parent_class : GtkObjectClass,
    clicked : CCodePointer[(Pointer[Struct__GtkTreeViewColumn]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tree_view_column_get_type() CULong;

external gtk_tree_view_column_new() Pointer[GtkTreeViewColumn];

external gtk_tree_view_column_new_with_attributes(
    title : Pointer[CChar],
    cell : Pointer[GtkCellRenderer],
    ...) Pointer[GtkTreeViewColumn];

external gtk_tree_view_column_pack_start(
    tree_column : Pointer[GtkTreeViewColumn],
    cell : Pointer[GtkCellRenderer],
    expand : Int);

external gtk_tree_view_column_pack_end(
    tree_column : Pointer[GtkTreeViewColumn],
    cell : Pointer[GtkCellRenderer],
    expand : Int);

external gtk_tree_view_column_clear(
    tree_column : Pointer[GtkTreeViewColumn]);

external gtk_tree_view_column_get_cell_renderers(
    tree_column : Pointer[GtkTreeViewColumn]) Pointer[GList];

external gtk_tree_view_column_add_attribute(
    tree_column : Pointer[GtkTreeViewColumn],
    cell_renderer : Pointer[GtkCellRenderer],
    attribute : Pointer[CChar],
    column : Int);

external gtk_tree_view_column_set_attributes(
    tree_column : Pointer[GtkTreeViewColumn],
    cell_renderer : Pointer[GtkCellRenderer],
    ...);

external gtk_tree_view_column_set_cell_data_func(
    tree_column : Pointer[GtkTreeViewColumn],
    cell_renderer : Pointer[GtkCellRenderer],
    func : GtkTreeCellDataFunc,
    func_data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_view_column_clear_attributes(
    tree_column : Pointer[GtkTreeViewColumn],
    cell_renderer : Pointer[GtkCellRenderer]);

external gtk_tree_view_column_set_spacing(
    tree_column : Pointer[GtkTreeViewColumn],
    spacing : Int);

external gtk_tree_view_column_get_spacing(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_visible(
    tree_column : Pointer[GtkTreeViewColumn],
    visible : Int);

external gtk_tree_view_column_get_visible(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_resizable(
    tree_column : Pointer[GtkTreeViewColumn],
    resizable : Int);

external gtk_tree_view_column_get_resizable(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_sizing(
    tree_column : Pointer[GtkTreeViewColumn],
    type : GtkTreeViewColumnSizing);

external gtk_tree_view_column_get_sizing(
    tree_column : Pointer[GtkTreeViewColumn]) GtkTreeViewColumnSizing;

external gtk_tree_view_column_get_width(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_get_fixed_width(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_fixed_width(
    tree_column : Pointer[GtkTreeViewColumn],
    fixed_width : Int);

external gtk_tree_view_column_set_min_width(
    tree_column : Pointer[GtkTreeViewColumn],
    min_width : Int);

external gtk_tree_view_column_get_min_width(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_max_width(
    tree_column : Pointer[GtkTreeViewColumn],
    max_width : Int);

external gtk_tree_view_column_get_max_width(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_clicked(
    tree_column : Pointer[GtkTreeViewColumn]);

external gtk_tree_view_column_set_title(
    tree_column : Pointer[GtkTreeViewColumn],
    title : Pointer[CChar]);

external gtk_tree_view_column_get_title(
    tree_column : Pointer[GtkTreeViewColumn]) Pointer[CChar];

external gtk_tree_view_column_set_expand(
    tree_column : Pointer[GtkTreeViewColumn],
    expand : Int);

external gtk_tree_view_column_get_expand(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_clickable(
    tree_column : Pointer[GtkTreeViewColumn],
    clickable : Int);

external gtk_tree_view_column_get_clickable(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_widget(
    tree_column : Pointer[GtkTreeViewColumn],
    widget : Pointer[GtkWidget]);

external gtk_tree_view_column_get_widget(
    tree_column : Pointer[GtkTreeViewColumn]) Pointer[GtkWidget];

external gtk_tree_view_column_set_alignment(
    tree_column : Pointer[GtkTreeViewColumn],
    xalign : Float);

external gtk_tree_view_column_get_alignment(
    tree_column : Pointer[GtkTreeViewColumn]) Float;

external gtk_tree_view_column_set_reorderable(
    tree_column : Pointer[GtkTreeViewColumn],
    reorderable : Int);

external gtk_tree_view_column_get_reorderable(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_sort_column_id(
    tree_column : Pointer[GtkTreeViewColumn],
    sort_column_id : Int);

external gtk_tree_view_column_get_sort_column_id(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_sort_indicator(
    tree_column : Pointer[GtkTreeViewColumn],
    setting : Int);

external gtk_tree_view_column_get_sort_indicator(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_set_sort_order(
    tree_column : Pointer[GtkTreeViewColumn],
    order : GtkSortType);

external gtk_tree_view_column_get_sort_order(
    tree_column : Pointer[GtkTreeViewColumn]) GtkSortType;

external gtk_tree_view_column_cell_set_cell_data(
    tree_column : Pointer[GtkTreeViewColumn],
    tree_model : Pointer[GtkTreeModel],
    iter : Pointer[GtkTreeIter],
    is_expander : Int,
    is_expanded : Int);

external gtk_tree_view_column_cell_get_size(
    tree_column : Pointer[GtkTreeViewColumn],
    cell_area : Pointer[GdkRectangle],
    x_offset : Pointer[Int],
    y_offset : Pointer[Int],
    width : Pointer[Int],
    height : Pointer[Int]);

external gtk_tree_view_column_cell_is_visible(
    tree_column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_column_focus_cell(
    tree_column : Pointer[GtkTreeViewColumn],
    cell : Pointer[GtkCellRenderer]);

external gtk_tree_view_column_cell_get_position(
    tree_column : Pointer[GtkTreeViewColumn],
    cell_renderer : Pointer[GtkCellRenderer],
    start_pos : Pointer[Int],
    width : Pointer[Int]) Int;

external gtk_tree_view_column_queue_resize(
    tree_column : Pointer[GtkTreeViewColumn]);

external gtk_tree_view_column_get_tree_view(
    tree_column : Pointer[GtkTreeViewColumn]) Pointer[GtkWidget];

alias GtkCellLayout = Opaque;

alias GtkCellLayoutIface = Struct__GtkCellLayoutIface;

alias GtkCellLayoutDataFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),()];

record Struct__GtkCellLayoutIface (
    g_iface : GTypeInterface,
    pack_start : CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],Int),()],
    pack_end : CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],Int),()],
    clear : CCodePointer[(OpaquePointer),()],
    add_attribute : CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],Pointer[CChar],Int),()],
    set_cell_data_func : CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),()],RawPointer,CCodePointer[(RawPointer),()]),()],
    clear_attributes : CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer]),()],
    reorder : CCodePointer[(OpaquePointer,Pointer[Struct__GtkCellRenderer],Int),()],
    get_cells : CCodePointer[(OpaquePointer),(Pointer[Struct__GList])],
);

external gtk_cell_layout_get_type() CULong;

external gtk_cell_layout_pack_start(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer],
    expand : Int);

external gtk_cell_layout_pack_end(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer],
    expand : Int);

external gtk_cell_layout_get_cells(
    cell_layout : Pointer[GtkCellLayout]) Pointer[GList];

external gtk_cell_layout_clear(
    cell_layout : Pointer[GtkCellLayout]);

external gtk_cell_layout_set_attributes(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer],
    ...);

external gtk_cell_layout_add_attribute(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer],
    attribute : Pointer[CChar],
    column : Int);

external gtk_cell_layout_set_cell_data_func(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer],
    func : GtkCellLayoutDataFunc,
    func_data : gpointer,
    destroy : GDestroyNotify);

external gtk_cell_layout_clear_attributes(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer]);

external gtk_cell_layout_reorder(
    cell_layout : Pointer[GtkCellLayout],
    cell : Pointer[GtkCellRenderer],
    position : Int);

external _gtk_cell_layout_buildable_custom_tag_start(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    tagname : Pointer[CChar],
    parser : Pointer[GMarkupParser],
    data : Pointer[gpointer]) Int;

external _gtk_cell_layout_buildable_custom_tag_end(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    tagname : Pointer[CChar],
    data : Pointer[gpointer]);

external _gtk_cell_layout_buildable_add_child(
    buildable : Pointer[GtkBuildable],
    builder : Pointer[GtkBuilder],
    child : Pointer[GObject],
    type : Pointer[CChar]);

alias GtkCellRendererText = Struct__GtkCellRendererText;

alias GtkCellRendererTextClass = Struct__GtkCellRendererTextClass;

record Struct__GtkCellRendererText (
    parent : GtkCellRenderer,
    text : Pointer[CChar],
    font : Pointer[PangoFontDescription],
    font_scale : Double,
    foreground : PangoColor,
    background : PangoColor,
    extra_attrs : Pointer[PangoAttrList],
    underline_style : PangoUnderline,
    rise : Int,
    fixed_height_rows : Int,
    strikethrough : UInt,
    editable : UInt,
    scale_set : UInt,
    foreground_set : UInt,
    background_set : UInt,
    underline_set : UInt,
    rise_set : UInt,
    strikethrough_set : UInt,
    editable_set : UInt,
    calc_fixed_height : UInt,
);

record Struct__GtkCellRendererTextClass (
    parent_class : GtkCellRendererClass,
    edited : CCodePointer[(Pointer[Struct__GtkCellRendererText],Pointer[CChar],Pointer[CChar]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_cell_renderer_text_get_type() CULong;

external gtk_cell_renderer_text_new() Pointer[GtkCellRenderer];

external gtk_cell_renderer_text_set_fixed_height_from_font(
    renderer : Pointer[GtkCellRendererText],
    number_of_rows : Int);

alias GtkCellRendererAccel = Struct__GtkCellRendererAccel;

alias GtkCellRendererAccelClass = Struct__GtkCellRendererAccelClass;

alias GTK_CELL_RENDERER_ACCEL_MODE_GTK = 0;
alias GTK_CELL_RENDERER_ACCEL_MODE_OTHER = 1;

alias GtkCellRendererAccelMode = Int;

record Struct__GtkCellRendererAccel (
    parent : GtkCellRendererText,
    accel_key : UInt,
    accel_mods : GdkModifierType,
    keycode : UInt,
    accel_mode : GtkCellRendererAccelMode,
    edit_widget : Pointer[GtkWidget],
    grab_widget : Pointer[GtkWidget],
    sizing_label : Pointer[GtkWidget],
);

record Struct__GtkCellRendererAccelClass (
    parent_class : GtkCellRendererTextClass,
    accel_edited : CCodePointer[(Pointer[Struct__GtkCellRendererAccel],Pointer[CChar],UInt,Int,UInt),()],
    accel_cleared : CCodePointer[(Pointer[Struct__GtkCellRendererAccel],Pointer[CChar]),()],
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_cell_renderer_accel_get_type() CULong;

external gtk_cell_renderer_accel_new() Pointer[GtkCellRenderer];

alias GtkCellRendererCombo = Struct__GtkCellRendererCombo;

alias GtkCellRendererComboClass = Struct__GtkCellRendererComboClass;

record Struct__GtkCellRendererCombo (
    parent : GtkCellRendererText,
    model : Pointer[GtkTreeModel],
    text_column : Int,
    has_entry : Int,
    focus_out_id : UInt,
);

record Struct__GtkCellRendererComboClass (
    parent : GtkCellRendererTextClass,
);

external gtk_cell_renderer_combo_get_type() CULong;

external gtk_cell_renderer_combo_new() Pointer[GtkCellRenderer];

alias GtkCellRendererPixbuf = Struct__GtkCellRendererPixbuf;

alias GtkCellRendererPixbufClass = Struct__GtkCellRendererPixbufClass;

record Struct__GtkCellRendererPixbuf (
    parent : GtkCellRenderer,
    pixbuf : Pointer[GdkPixbuf],
    pixbuf_expander_open : Pointer[GdkPixbuf],
    pixbuf_expander_closed : Pointer[GdkPixbuf],
);

record Struct__GtkCellRendererPixbufClass (
    parent_class : GtkCellRendererClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_cell_renderer_pixbuf_get_type() CULong;

external gtk_cell_renderer_pixbuf_new() Pointer[GtkCellRenderer];

alias GtkCellRendererProgress = Struct__GtkCellRendererProgress;

alias GtkCellRendererProgressClass = Struct__GtkCellRendererProgressClass;

alias GtkCellRendererProgressPrivate = Opaque;

record Struct__GtkCellRendererProgress (
    parent_instance : GtkCellRenderer,
    priv : Pointer[GtkCellRendererProgressPrivate],
);

record Struct__GtkCellRendererProgressClass (
    parent_class : GtkCellRendererClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_cell_renderer_progress_get_type() CULong;

external gtk_cell_renderer_progress_new() Pointer[GtkCellRenderer];

alias GtkCellRendererSpin = Struct__GtkCellRendererSpin;

alias GtkCellRendererSpinClass = Struct__GtkCellRendererSpinClass;

alias GtkCellRendererSpinPrivate = Opaque;

record Struct__GtkCellRendererSpin (
    parent : GtkCellRendererText,
);

record Struct__GtkCellRendererSpinClass (
    parent : GtkCellRendererTextClass,
);

external gtk_cell_renderer_spin_get_type() CULong;

external gtk_cell_renderer_spin_new() Pointer[GtkCellRenderer];

alias GtkCellRendererSpinner = Struct__GtkCellRendererSpinner;

alias GtkCellRendererSpinnerClass = Struct__GtkCellRendererSpinnerClass;

alias GtkCellRendererSpinnerPrivate = Opaque;

record Struct__GtkCellRendererSpinner (
    parent : GtkCellRenderer,
    priv : Pointer[GtkCellRendererSpinnerPrivate],
);

record Struct__GtkCellRendererSpinnerClass (
    parent_class : GtkCellRendererClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_cell_renderer_spinner_get_type() CULong;

external gtk_cell_renderer_spinner_new() Pointer[GtkCellRenderer];

alias GtkCellRendererToggle = Struct__GtkCellRendererToggle;

alias GtkCellRendererToggleClass = Struct__GtkCellRendererToggleClass;

record Struct__GtkCellRendererToggle (
    parent : GtkCellRenderer,
    active : UInt,
    activatable : UInt,
    radio : UInt,
);

record Struct__GtkCellRendererToggleClass (
    parent_class : GtkCellRendererClass,
    toggled : CCodePointer[(Pointer[Struct__GtkCellRendererToggle],Pointer[CChar]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_cell_renderer_toggle_get_type() CULong;

external gtk_cell_renderer_toggle_new() Pointer[GtkCellRenderer];

external gtk_cell_renderer_toggle_get_radio(
    toggle : Pointer[GtkCellRendererToggle]) Int;

external gtk_cell_renderer_toggle_set_radio(
    toggle : Pointer[GtkCellRendererToggle],
    radio : Int);

external gtk_cell_renderer_toggle_get_active(
    toggle : Pointer[GtkCellRendererToggle]) Int;

external gtk_cell_renderer_toggle_set_active(
    toggle : Pointer[GtkCellRendererToggle],
    setting : Int);

external gtk_cell_renderer_toggle_get_activatable(
    toggle : Pointer[GtkCellRendererToggle]) Int;

external gtk_cell_renderer_toggle_set_activatable(
    toggle : Pointer[GtkCellRendererToggle],
    setting : Int);

alias GtkCellView = Struct__GtkCellView;

alias GtkCellViewClass = Struct__GtkCellViewClass;

alias GtkCellViewPrivate = Opaque;

record Struct__GtkCellView (
    parent_instance : GtkWidget,
    priv : Pointer[GtkCellViewPrivate],
);

record Struct__GtkCellViewClass (
    parent_class : GtkWidgetClass,
);

external gtk_cell_view_get_type() CULong;

external gtk_cell_view_new() Pointer[GtkWidget];

external gtk_cell_view_new_with_text(
    text : Pointer[CChar]) Pointer[GtkWidget];

external gtk_cell_view_new_with_markup(
    markup : Pointer[CChar]) Pointer[GtkWidget];

external gtk_cell_view_new_with_pixbuf(
    pixbuf : Pointer[GdkPixbuf]) Pointer[GtkWidget];

external gtk_cell_view_set_model(
    cell_view : Pointer[GtkCellView],
    model : Pointer[GtkTreeModel]);

external gtk_cell_view_get_model(
    cell_view : Pointer[GtkCellView]) Pointer[GtkTreeModel];

external gtk_cell_view_set_displayed_row(
    cell_view : Pointer[GtkCellView],
    path : Pointer[GtkTreePath]);

external gtk_cell_view_get_displayed_row(
    cell_view : Pointer[GtkCellView]) Pointer[GtkTreePath];

external gtk_cell_view_get_size_of_row(
    cell_view : Pointer[GtkCellView],
    path : Pointer[GtkTreePath],
    requisition : Pointer[GtkRequisition]) Int;

external gtk_cell_view_set_background_color(
    cell_view : Pointer[GtkCellView],
    color : Pointer[GdkColor]);

external gtk_cell_view_get_cell_renderers(
    cell_view : Pointer[GtkCellView]) Pointer[GList];

alias GtkToggleButton = Struct__GtkToggleButton;

alias GtkToggleButtonClass = Struct__GtkToggleButtonClass;

record Struct__GtkToggleButton (
    button : GtkButton,
    active : UInt,
    draw_indicator : UInt,
    inconsistent : UInt,
);

record Struct__GtkToggleButtonClass (
    parent_class : GtkButtonClass,
    toggled : CCodePointer[(Pointer[Struct__GtkToggleButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_toggle_button_get_type() CULong;

external gtk_toggle_button_new() Pointer[GtkWidget];

external gtk_toggle_button_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_toggle_button_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_toggle_button_set_mode(
    toggle_button : Pointer[GtkToggleButton],
    draw_indicator : Int);

external gtk_toggle_button_get_mode(
    toggle_button : Pointer[GtkToggleButton]) Int;

external gtk_toggle_button_set_active(
    toggle_button : Pointer[GtkToggleButton],
    is_active : Int);

external gtk_toggle_button_get_active(
    toggle_button : Pointer[GtkToggleButton]) Int;

external gtk_toggle_button_toggled(
    toggle_button : Pointer[GtkToggleButton]);

external gtk_toggle_button_set_inconsistent(
    toggle_button : Pointer[GtkToggleButton],
    setting : Int);

external gtk_toggle_button_get_inconsistent(
    toggle_button : Pointer[GtkToggleButton]) Int;

alias GtkCheckButton = Struct__GtkCheckButton;

alias GtkCheckButtonClass = Struct__GtkCheckButtonClass;

record Struct__GtkCheckButton (
    toggle_button : GtkToggleButton,
);

record Struct__GtkCheckButtonClass (
    parent_class : GtkToggleButtonClass,
    draw_indicator : CCodePointer[(Pointer[Struct__GtkCheckButton],Pointer[Struct__GdkRectangle]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_check_button_get_type() CULong;

external gtk_check_button_new() Pointer[GtkWidget];

external gtk_check_button_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_check_button_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external _gtk_check_button_get_props(
    check_button : Pointer[GtkCheckButton],
    indicator_size : Pointer[Int],
    indicator_spacing : Pointer[Int]);

alias GtkItem = Struct__GtkItem;

alias GtkItemClass = Struct__GtkItemClass;

record Struct__GtkItem (
    bin : GtkBin,
);

record Struct__GtkItemClass (
    parent_class : GtkBinClass,
    select : CCodePointer[(Pointer[Struct__GtkItem]),()],
    deselect : CCodePointer[(Pointer[Struct__GtkItem]),()],
    toggle : CCodePointer[(Pointer[Struct__GtkItem]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_item_get_type() CULong;

external gtk_item_select(
    item : Pointer[GtkItem]);

external gtk_item_deselect(
    item : Pointer[GtkItem]);

external gtk_item_toggle(
    item : Pointer[GtkItem]);

alias GtkMenuItem = Struct__GtkMenuItem;

alias GtkMenuItemClass = Struct__GtkMenuItemClass;

record Struct__GtkMenuItem (
    item : GtkItem,
    submenu : Pointer[GtkWidget],
    event_window : Pointer[GdkWindow],
    toggle_size : UShort,
    accelerator_width : UShort,
    accel_path : Pointer[CChar],
    show_submenu_indicator : UInt,
    submenu_placement : UInt,
    submenu_direction : UInt,
    right_justify : UInt,
    timer_from_keypress : UInt,
    from_menubar : UInt,
    timer : UInt,
);

record Struct__GtkMenuItemClass (
    parent_class : GtkItemClass,
    hide_on_activate : UInt,
    activate : CCodePointer[(Pointer[Struct__GtkMenuItem]),()],
    activate_item : CCodePointer[(Pointer[Struct__GtkMenuItem]),()],
    toggle_size_request : CCodePointer[(Pointer[Struct__GtkMenuItem],Pointer[Int]),()],
    toggle_size_allocate : CCodePointer[(Pointer[Struct__GtkMenuItem],Int),()],
    set_label : CCodePointer[(Pointer[Struct__GtkMenuItem],Pointer[CChar]),()],
    get_label : CCodePointer[(Pointer[Struct__GtkMenuItem]),(Pointer[CChar])],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
);

external gtk_menu_item_get_type() CULong;

external gtk_menu_item_new() Pointer[GtkWidget];

external gtk_menu_item_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_menu_item_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_menu_item_set_submenu(
    menu_item : Pointer[GtkMenuItem],
    submenu : Pointer[GtkWidget]);

external gtk_menu_item_get_submenu(
    menu_item : Pointer[GtkMenuItem]) Pointer[GtkWidget];

external gtk_menu_item_select(
    menu_item : Pointer[GtkMenuItem]);

external gtk_menu_item_deselect(
    menu_item : Pointer[GtkMenuItem]);

external gtk_menu_item_activate(
    menu_item : Pointer[GtkMenuItem]);

external gtk_menu_item_toggle_size_request(
    menu_item : Pointer[GtkMenuItem],
    requisition : Pointer[Int]);

external gtk_menu_item_toggle_size_allocate(
    menu_item : Pointer[GtkMenuItem],
    allocation : Int);

external gtk_menu_item_set_right_justified(
    menu_item : Pointer[GtkMenuItem],
    right_justified : Int);

external gtk_menu_item_get_right_justified(
    menu_item : Pointer[GtkMenuItem]) Int;

external gtk_menu_item_set_accel_path(
    menu_item : Pointer[GtkMenuItem],
    accel_path : Pointer[CChar]);

external gtk_menu_item_get_accel_path(
    menu_item : Pointer[GtkMenuItem]) Pointer[CChar];

external gtk_menu_item_set_label(
    menu_item : Pointer[GtkMenuItem],
    label : Pointer[CChar]);

external gtk_menu_item_get_label(
    menu_item : Pointer[GtkMenuItem]) Pointer[CChar];

external gtk_menu_item_set_use_underline(
    menu_item : Pointer[GtkMenuItem],
    setting : Int);

external gtk_menu_item_get_use_underline(
    menu_item : Pointer[GtkMenuItem]) Int;

external _gtk_menu_item_refresh_accel_path(
    menu_item : Pointer[GtkMenuItem],
    prefix : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup],
    group_changed : Int);

external _gtk_menu_item_is_selectable(
    menu_item : Pointer[GtkWidget]) Int;

external _gtk_menu_item_popup_submenu(
    menu_item : Pointer[GtkWidget],
    with_delay : Int);

external _gtk_menu_item_popdown_submenu(
    menu_item : Pointer[GtkWidget]);

external gtk_menu_item_remove_submenu(
    menu_item : Pointer[GtkMenuItem]);

alias GtkCheckMenuItem = Struct__GtkCheckMenuItem;

alias GtkCheckMenuItemClass = Struct__GtkCheckMenuItemClass;

record Struct__GtkCheckMenuItem (
    menu_item : GtkMenuItem,
    active : UInt,
    always_show_toggle : UInt,
    inconsistent : UInt,
    draw_as_radio : UInt,
);

record Struct__GtkCheckMenuItemClass (
    parent_class : GtkMenuItemClass,
    toggled : CCodePointer[(Pointer[Struct__GtkCheckMenuItem]),()],
    draw_indicator : CCodePointer[(Pointer[Struct__GtkCheckMenuItem],Pointer[Struct__GdkRectangle]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_check_menu_item_get_type() CULong;

external gtk_check_menu_item_new() Pointer[GtkWidget];

external gtk_check_menu_item_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_check_menu_item_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_check_menu_item_set_active(
    check_menu_item : Pointer[GtkCheckMenuItem],
    is_active : Int);

external gtk_check_menu_item_get_active(
    check_menu_item : Pointer[GtkCheckMenuItem]) Int;

external gtk_check_menu_item_toggled(
    check_menu_item : Pointer[GtkCheckMenuItem]);

external gtk_check_menu_item_set_inconsistent(
    check_menu_item : Pointer[GtkCheckMenuItem],
    setting : Int);

external gtk_check_menu_item_get_inconsistent(
    check_menu_item : Pointer[GtkCheckMenuItem]) Int;

external gtk_check_menu_item_set_draw_as_radio(
    check_menu_item : Pointer[GtkCheckMenuItem],
    draw_as_radio : Int);

external gtk_check_menu_item_get_draw_as_radio(
    check_menu_item : Pointer[GtkCheckMenuItem]) Int;

external gtk_check_menu_item_set_show_toggle(
    menu_item : Pointer[GtkCheckMenuItem],
    always : Int);

alias GtkTextIter = Struct__GtkTextIter;

alias GtkTextTagTable = Struct__GtkTextTagTable;

alias GtkTextAttributes = Struct__GtkTextAttributes;

alias GtkTextTag = Struct__GtkTextTag;

alias GtkTextTagClass = Struct__GtkTextTagClass;

record Struct__GtkTextTag (
    parent_instance : GObject,
    table : Pointer[GtkTextTagTable],
    name : Pointer[CChar],
    priority : Int,
    values : Pointer[GtkTextAttributes],
    bg_color_set : UInt,
    bg_stipple_set : UInt,
    fg_color_set : UInt,
    scale_set : UInt,
    fg_stipple_set : UInt,
    justification_set : UInt,
    left_margin_set : UInt,
    indent_set : UInt,
    rise_set : UInt,
    strikethrough_set : UInt,
    right_margin_set : UInt,
    pixels_above_lines_set : UInt,
    pixels_below_lines_set : UInt,
    pixels_inside_wrap_set : UInt,
    tabs_set : UInt,
    underline_set : UInt,
    wrap_mode_set : UInt,
    bg_full_height_set : UInt,
    invisible_set : UInt,
    editable_set : UInt,
    language_set : UInt,
    pg_bg_color_set : UInt,
    accumulative_margin : UInt,
    pad1 : UInt,
);

record Struct__GtkTextTagClass (
    parent_class : GObjectClass,
    event : CCodePointer[(Pointer[Struct__GtkTextTag],Pointer[Struct__GObject],OpaquePointer,Pointer[Struct__GtkTextIter]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_text_tag_get_type() CULong;

external gtk_text_tag_new(
    name : Pointer[CChar]) Pointer[GtkTextTag];

external gtk_text_tag_get_priority(
    tag : Pointer[GtkTextTag]) Int;

external gtk_text_tag_set_priority(
    tag : Pointer[GtkTextTag],
    priority : Int);

external gtk_text_tag_event(
    tag : Pointer[GtkTextTag],
    event_object : Pointer[GObject],
    event : Pointer[GdkEvent],
    iter : Pointer[GtkTextIter]) Int;

alias GtkTextAppearance = Struct__GtkTextAppearance;

record Struct__GtkTextAppearance (
    bg_color : GdkColor,
    fg_color : GdkColor,
    bg_stipple : Pointer[GdkBitmap],
    fg_stipple : Pointer[GdkBitmap],
    rise : Int,
    padding1 : gpointer,
    underline : UInt,
    strikethrough : UInt,
    draw_bg : UInt,
    inside_selection : UInt,
    is_text : UInt,
    pad1 : UInt,
    pad2 : UInt,
    pad3 : UInt,
    pad4 : UInt,
);

record Struct__GtkTextAttributes (
    refcount : UInt,
    appearance : GtkTextAppearance,
    justification : GtkJustification,
    direction : GtkTextDirection,
    font : Pointer[PangoFontDescription],
    font_scale : Double,
    left_margin : Int,
    indent : Int,
    right_margin : Int,
    pixels_above_lines : Int,
    pixels_below_lines : Int,
    pixels_inside_wrap : Int,
    tabs : Pointer[PangoTabArray],
    wrap_mode : GtkWrapMode,
    language : Pointer[PangoLanguage],
    pg_bg_color : Pointer[GdkColor],
    invisible : UInt,
    bg_full_height : UInt,
    editable : UInt,
    realized : UInt,
    pad1 : UInt,
    pad2 : UInt,
    pad3 : UInt,
    pad4 : UInt,
);

external gtk_text_attributes_new() Pointer[GtkTextAttributes];

external gtk_text_attributes_copy(
    src : Pointer[GtkTextAttributes]) Pointer[GtkTextAttributes];

external gtk_text_attributes_copy_values(
    src : Pointer[GtkTextAttributes],
    dest : Pointer[GtkTextAttributes]);

external gtk_text_attributes_unref(
    values : Pointer[GtkTextAttributes]);

external gtk_text_attributes_ref(
    values : Pointer[GtkTextAttributes]) Pointer[GtkTextAttributes];

external gtk_text_attributes_get_type() CULong;

alias GtkTextChildAnchor = Struct__GtkTextChildAnchor;

alias GtkTextChildAnchorClass = Struct__GtkTextChildAnchorClass;

record Struct__GtkTextChildAnchor (
    parent_instance : GObject,
    segment : gpointer,
);

record Struct__GtkTextChildAnchorClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_text_child_anchor_get_type() CULong;

external gtk_text_child_anchor_new() Pointer[GtkTextChildAnchor];

external gtk_text_child_anchor_get_widgets(
    anchor : Pointer[GtkTextChildAnchor]) Pointer[GList];

external gtk_text_child_anchor_get_deleted(
    anchor : Pointer[GtkTextChildAnchor]) Int;

alias GTK_TEXT_SEARCH_VISIBLE_ONLY = 1;
alias GTK_TEXT_SEARCH_TEXT_ONLY = 2;

alias GtkTextSearchFlags = Int;

alias GtkTextBuffer = Struct__GtkTextBuffer;

record Struct__GtkTextIter (
    dummy1 : gpointer,
    dummy2 : gpointer,
    dummy3 : Int,
    dummy4 : Int,
    dummy5 : Int,
    dummy6 : Int,
    dummy7 : Int,
    dummy8 : Int,
    dummy9 : gpointer,
    dummy10 : gpointer,
    dummy11 : Int,
    dummy12 : Int,
    dummy13 : Int,
    dummy14 : gpointer,
);

external gtk_text_iter_get_buffer(
    iter : Pointer[GtkTextIter]) Pointer[GtkTextBuffer];

external gtk_text_iter_copy(
    iter : Pointer[GtkTextIter]) Pointer[GtkTextIter];

external gtk_text_iter_free(
    iter : Pointer[GtkTextIter]);

external gtk_text_iter_get_type() CULong;

external gtk_text_iter_get_offset(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_line_offset(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_line_index(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_visible_line_offset(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_visible_line_index(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_char(
    iter : Pointer[GtkTextIter]) UInt;

external gtk_text_iter_get_slice(
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]) Pointer[CChar];

external gtk_text_iter_get_text(
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]) Pointer[CChar];

external gtk_text_iter_get_visible_slice(
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]) Pointer[CChar];

external gtk_text_iter_get_visible_text(
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]) Pointer[CChar];

external gtk_text_iter_get_pixbuf(
    iter : Pointer[GtkTextIter]) Pointer[GdkPixbuf];

external gtk_text_iter_get_marks(
    iter : Pointer[GtkTextIter]) Pointer[GSList];

external gtk_text_iter_get_child_anchor(
    iter : Pointer[GtkTextIter]) Pointer[GtkTextChildAnchor];

external gtk_text_iter_get_toggled_tags(
    iter : Pointer[GtkTextIter],
    toggled_on : Int) Pointer[GSList];

external gtk_text_iter_begins_tag(
    iter : Pointer[GtkTextIter],
    tag : Pointer[GtkTextTag]) Int;

external gtk_text_iter_ends_tag(
    iter : Pointer[GtkTextIter],
    tag : Pointer[GtkTextTag]) Int;

external gtk_text_iter_toggles_tag(
    iter : Pointer[GtkTextIter],
    tag : Pointer[GtkTextTag]) Int;

external gtk_text_iter_has_tag(
    iter : Pointer[GtkTextIter],
    tag : Pointer[GtkTextTag]) Int;

external gtk_text_iter_get_tags(
    iter : Pointer[GtkTextIter]) Pointer[GSList];

external gtk_text_iter_editable(
    iter : Pointer[GtkTextIter],
    default_setting : Int) Int;

external gtk_text_iter_can_insert(
    iter : Pointer[GtkTextIter],
    default_editability : Int) Int;

external gtk_text_iter_starts_word(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_ends_word(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_inside_word(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_starts_sentence(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_ends_sentence(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_inside_sentence(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_starts_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_ends_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_is_cursor_position(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_chars_in_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_bytes_in_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_get_attributes(
    iter : Pointer[GtkTextIter],
    values : Pointer[GtkTextAttributes]) Int;

external gtk_text_iter_get_language(
    iter : Pointer[GtkTextIter]) Pointer[PangoLanguage];

external gtk_text_iter_is_end(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_is_start(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_char(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_char(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_chars(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_chars(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_lines(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_lines(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_word_end(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_word_start(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_word_ends(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_word_starts(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_visible_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_visible_line(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_visible_lines(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_visible_lines(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_visible_word_end(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_visible_word_start(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_visible_word_ends(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_visible_word_starts(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_sentence_end(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_sentence_start(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_sentence_ends(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_sentence_starts(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_cursor_position(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_cursor_position(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_cursor_positions(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_cursor_positions(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_forward_visible_cursor_position(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_visible_cursor_position(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_visible_cursor_positions(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_backward_visible_cursor_positions(
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_iter_set_offset(
    iter : Pointer[GtkTextIter],
    char_offset : Int);

external gtk_text_iter_set_line(
    iter : Pointer[GtkTextIter],
    line_number : Int);

external gtk_text_iter_set_line_offset(
    iter : Pointer[GtkTextIter],
    char_on_line : Int);

external gtk_text_iter_set_line_index(
    iter : Pointer[GtkTextIter],
    byte_on_line : Int);

external gtk_text_iter_forward_to_end(
    iter : Pointer[GtkTextIter]);

external gtk_text_iter_forward_to_line_end(
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_iter_set_visible_line_offset(
    iter : Pointer[GtkTextIter],
    char_on_line : Int);

external gtk_text_iter_set_visible_line_index(
    iter : Pointer[GtkTextIter],
    byte_on_line : Int);

external gtk_text_iter_forward_to_tag_toggle(
    iter : Pointer[GtkTextIter],
    tag : Pointer[GtkTextTag]) Int;

external gtk_text_iter_backward_to_tag_toggle(
    iter : Pointer[GtkTextIter],
    tag : Pointer[GtkTextTag]) Int;

alias GtkTextCharPredicate = CCodePointer[(UInt,RawPointer),(Int)];

external gtk_text_iter_forward_find_char(
    iter : Pointer[GtkTextIter],
    pred : GtkTextCharPredicate,
    user_data : gpointer,
    limit : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_find_char(
    iter : Pointer[GtkTextIter],
    pred : GtkTextCharPredicate,
    user_data : gpointer,
    limit : Pointer[GtkTextIter]) Int;

external gtk_text_iter_forward_search(
    iter : Pointer[GtkTextIter],
    str : Pointer[CChar],
    flags : GtkTextSearchFlags,
    match_start : Pointer[GtkTextIter],
    match_end : Pointer[GtkTextIter],
    limit : Pointer[GtkTextIter]) Int;

external gtk_text_iter_backward_search(
    iter : Pointer[GtkTextIter],
    str : Pointer[CChar],
    flags : GtkTextSearchFlags,
    match_start : Pointer[GtkTextIter],
    match_end : Pointer[GtkTextIter],
    limit : Pointer[GtkTextIter]) Int;

external gtk_text_iter_equal(
    lhs : Pointer[GtkTextIter],
    rhs : Pointer[GtkTextIter]) Int;

external gtk_text_iter_compare(
    lhs : Pointer[GtkTextIter],
    rhs : Pointer[GtkTextIter]) Int;

external gtk_text_iter_in_range(
    iter : Pointer[GtkTextIter],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]) Int;

external gtk_text_iter_order(
    first : Pointer[GtkTextIter],
    second : Pointer[GtkTextIter]);

alias GtkTargetList = Struct__GtkTargetList;

alias GtkTargetEntry = Struct__GtkTargetEntry;

record Struct__GtkSelectionData (
    selection : GdkAtom,
    target : GdkAtom,
    type : GdkAtom,
    format : Int,
    data : Pointer[CUChar],
    length : Int,
    display : Pointer[GdkDisplay],
);

record Struct__GtkTargetEntry (
    target : Pointer[CChar],
    flags : UInt,
    info : UInt,
);

alias GtkTargetPair = Struct__GtkTargetPair;

record Struct__GtkTargetList (
    list : Pointer[GList],
    ref_count : UInt,
);

record Struct__GtkTargetPair (
    target : GdkAtom,
    flags : UInt,
    info : UInt,
);

external gtk_target_list_new(
    targets : Pointer[GtkTargetEntry],
    ntargets : UInt) Pointer[GtkTargetList];

external gtk_target_list_ref(
    list : Pointer[GtkTargetList]) Pointer[GtkTargetList];

external gtk_target_list_unref(
    list : Pointer[GtkTargetList]);

external gtk_target_list_add(
    list : Pointer[GtkTargetList],
    target : GdkAtom,
    flags : UInt,
    info : UInt);

external gtk_target_list_add_text_targets(
    list : Pointer[GtkTargetList],
    info : UInt);

external gtk_target_list_add_rich_text_targets(
    list : Pointer[GtkTargetList],
    info : UInt,
    deserializable : Int,
    buffer : Pointer[GtkTextBuffer]);

external gtk_target_list_add_image_targets(
    list : Pointer[GtkTargetList],
    info : UInt,
    writable : Int);

external gtk_target_list_add_uri_targets(
    list : Pointer[GtkTargetList],
    info : UInt);

external gtk_target_list_add_table(
    list : Pointer[GtkTargetList],
    targets : Pointer[GtkTargetEntry],
    ntargets : UInt);

external gtk_target_list_remove(
    list : Pointer[GtkTargetList],
    target : GdkAtom);

external gtk_target_list_find(
    list : Pointer[GtkTargetList],
    target : GdkAtom,
    info : Pointer[UInt]) Int;

external gtk_target_table_new_from_list(
    list : Pointer[GtkTargetList],
    n_targets : Pointer[Int]) Pointer[GtkTargetEntry];

external gtk_target_table_free(
    targets : Pointer[GtkTargetEntry],
    n_targets : Int);

external gtk_selection_owner_set(
    widget : Pointer[GtkWidget],
    selection : GdkAtom,
    time_ : UInt) Int;

external gtk_selection_owner_set_for_display(
    display : Pointer[GdkDisplay],
    widget : Pointer[GtkWidget],
    selection : GdkAtom,
    time_ : UInt) Int;

external gtk_selection_add_target(
    widget : Pointer[GtkWidget],
    selection : GdkAtom,
    target : GdkAtom,
    info : UInt);

external gtk_selection_add_targets(
    widget : Pointer[GtkWidget],
    selection : GdkAtom,
    targets : Pointer[GtkTargetEntry],
    ntargets : UInt);

external gtk_selection_clear_targets(
    widget : Pointer[GtkWidget],
    selection : GdkAtom);

external gtk_selection_convert(
    widget : Pointer[GtkWidget],
    selection : GdkAtom,
    target : GdkAtom,
    time_ : UInt) Int;

external gtk_selection_data_get_selection(
    selection_data : Pointer[GtkSelectionData]) GdkAtom;

external gtk_selection_data_get_target(
    selection_data : Pointer[GtkSelectionData]) GdkAtom;

external gtk_selection_data_get_data_type(
    selection_data : Pointer[GtkSelectionData]) GdkAtom;

external gtk_selection_data_get_format(
    selection_data : Pointer[GtkSelectionData]) Int;

external gtk_selection_data_get_data(
    selection_data : Pointer[GtkSelectionData]) Pointer[CUChar];

external gtk_selection_data_get_length(
    selection_data : Pointer[GtkSelectionData]) Int;

external gtk_selection_data_get_display(
    selection_data : Pointer[GtkSelectionData]) Pointer[GdkDisplay];

external gtk_selection_data_set(
    selection_data : Pointer[GtkSelectionData],
    type : GdkAtom,
    format : Int,
    data : Pointer[CUChar],
    length : Int);

external gtk_selection_data_set_text(
    selection_data : Pointer[GtkSelectionData],
    str : Pointer[CChar],
    len : Int) Int;

external gtk_selection_data_get_text(
    selection_data : Pointer[GtkSelectionData]) Pointer[CUChar];

external gtk_selection_data_set_pixbuf(
    selection_data : Pointer[GtkSelectionData],
    pixbuf : Pointer[GdkPixbuf]) Int;

external gtk_selection_data_get_pixbuf(
    selection_data : Pointer[GtkSelectionData]) Pointer[GdkPixbuf];

external gtk_selection_data_set_uris(
    selection_data : Pointer[GtkSelectionData],
    uris : Pointer[Pointer[CChar]]) Int;

external gtk_selection_data_get_uris(
    selection_data : Pointer[GtkSelectionData]) Pointer[Pointer[CChar]];

external gtk_selection_data_get_targets(
    selection_data : Pointer[GtkSelectionData],
    targets : Pointer[Pointer[GdkAtom]],
    n_atoms : Pointer[Int]) Int;

external gtk_selection_data_targets_include_text(
    selection_data : Pointer[GtkSelectionData]) Int;

external gtk_selection_data_targets_include_rich_text(
    selection_data : Pointer[GtkSelectionData],
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_selection_data_targets_include_image(
    selection_data : Pointer[GtkSelectionData],
    writable : Int) Int;

external gtk_selection_data_targets_include_uri(
    selection_data : Pointer[GtkSelectionData]) Int;

external gtk_targets_include_text(
    targets : Pointer[GdkAtom],
    n_targets : Int) Int;

external gtk_targets_include_rich_text(
    targets : Pointer[GdkAtom],
    n_targets : Int,
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_targets_include_image(
    targets : Pointer[GdkAtom],
    n_targets : Int,
    writable : Int) Int;

external gtk_targets_include_uri(
    targets : Pointer[GdkAtom],
    n_targets : Int) Int;

external gtk_selection_remove_all(
    widget : Pointer[GtkWidget]);

external gtk_selection_clear(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEventSelection]) Int;

external _gtk_selection_request(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEventSelection]) Int;

external _gtk_selection_incr_event(
    window : Pointer[GdkWindow],
    event : Pointer[GdkEventProperty]) Int;

external _gtk_selection_notify(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEventSelection]) Int;

external _gtk_selection_property_notify(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEventProperty]) Int;

external gtk_selection_data_get_type() CULong;

external gtk_selection_data_copy(
    data : Pointer[GtkSelectionData]) Pointer[GtkSelectionData];

external gtk_selection_data_free(
    data : Pointer[GtkSelectionData]);

external gtk_target_list_get_type() CULong;

alias GtkClipboardReceivedFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkSelectionData],RawPointer),()];

alias GtkClipboardTextReceivedFunc = CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer),()];

alias GtkClipboardRichTextReceivedFunc = CCodePointer[(OpaquePointer,OpaquePointer,Pointer[CUChar],CULong,RawPointer),()];

alias GtkClipboardImageReceivedFunc = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),()];

alias GtkClipboardURIReceivedFunc = CCodePointer[(OpaquePointer,Pointer[Pointer[CChar]],RawPointer),()];

alias GtkClipboardTargetsReceivedFunc = CCodePointer[(OpaquePointer,Pointer[OpaquePointer],Int,RawPointer),()];

alias GtkClipboardGetFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkSelectionData],UInt,RawPointer),()];

alias GtkClipboardClearFunc = CCodePointer[(OpaquePointer,RawPointer),()];

external gtk_clipboard_get_type() CULong;

external gtk_clipboard_get_for_display(
    display : Pointer[GdkDisplay],
    selection : GdkAtom) Pointer[GtkClipboard];

external gtk_clipboard_get(
    selection : GdkAtom) Pointer[GtkClipboard];

external gtk_clipboard_get_display(
    clipboard : Pointer[GtkClipboard]) Pointer[GdkDisplay];

external gtk_clipboard_set_with_data(
    clipboard : Pointer[GtkClipboard],
    targets : Pointer[GtkTargetEntry],
    n_targets : UInt,
    get_func : GtkClipboardGetFunc,
    clear_func : GtkClipboardClearFunc,
    user_data : gpointer) Int;

external gtk_clipboard_set_with_owner(
    clipboard : Pointer[GtkClipboard],
    targets : Pointer[GtkTargetEntry],
    n_targets : UInt,
    get_func : GtkClipboardGetFunc,
    clear_func : GtkClipboardClearFunc,
    owner : Pointer[GObject]) Int;

external gtk_clipboard_get_owner(
    clipboard : Pointer[GtkClipboard]) Pointer[GObject];

external gtk_clipboard_clear(
    clipboard : Pointer[GtkClipboard]);

external gtk_clipboard_set_text(
    clipboard : Pointer[GtkClipboard],
    text : Pointer[CChar],
    len : Int);

external gtk_clipboard_set_image(
    clipboard : Pointer[GtkClipboard],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_clipboard_request_contents(
    clipboard : Pointer[GtkClipboard],
    target : GdkAtom,
    callback : GtkClipboardReceivedFunc,
    user_data : gpointer);

external gtk_clipboard_request_text(
    clipboard : Pointer[GtkClipboard],
    callback : GtkClipboardTextReceivedFunc,
    user_data : gpointer);

external gtk_clipboard_request_rich_text(
    clipboard : Pointer[GtkClipboard],
    buffer : Pointer[GtkTextBuffer],
    callback : GtkClipboardRichTextReceivedFunc,
    user_data : gpointer);

external gtk_clipboard_request_image(
    clipboard : Pointer[GtkClipboard],
    callback : GtkClipboardImageReceivedFunc,
    user_data : gpointer);

external gtk_clipboard_request_uris(
    clipboard : Pointer[GtkClipboard],
    callback : GtkClipboardURIReceivedFunc,
    user_data : gpointer);

external gtk_clipboard_request_targets(
    clipboard : Pointer[GtkClipboard],
    callback : GtkClipboardTargetsReceivedFunc,
    user_data : gpointer);

external gtk_clipboard_wait_for_contents(
    clipboard : Pointer[GtkClipboard],
    target : GdkAtom) Pointer[GtkSelectionData];

external gtk_clipboard_wait_for_text(
    clipboard : Pointer[GtkClipboard]) Pointer[CChar];

external gtk_clipboard_wait_for_rich_text(
    clipboard : Pointer[GtkClipboard],
    buffer : Pointer[GtkTextBuffer],
    format : Pointer[GdkAtom],
    length : Pointer[CULong]) Pointer[CUChar];

external gtk_clipboard_wait_for_image(
    clipboard : Pointer[GtkClipboard]) Pointer[GdkPixbuf];

external gtk_clipboard_wait_for_uris(
    clipboard : Pointer[GtkClipboard]) Pointer[Pointer[CChar]];

external gtk_clipboard_wait_for_targets(
    clipboard : Pointer[GtkClipboard],
    targets : Pointer[Pointer[GdkAtom]],
    n_targets : Pointer[Int]) Int;

external gtk_clipboard_wait_is_text_available(
    clipboard : Pointer[GtkClipboard]) Int;

external gtk_clipboard_wait_is_rich_text_available(
    clipboard : Pointer[GtkClipboard],
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_clipboard_wait_is_image_available(
    clipboard : Pointer[GtkClipboard]) Int;

external gtk_clipboard_wait_is_uris_available(
    clipboard : Pointer[GtkClipboard]) Int;

external gtk_clipboard_wait_is_target_available(
    clipboard : Pointer[GtkClipboard],
    target : GdkAtom) Int;

external gtk_clipboard_set_can_store(
    clipboard : Pointer[GtkClipboard],
    targets : Pointer[GtkTargetEntry],
    n_targets : Int);

external gtk_clipboard_store(
    clipboard : Pointer[GtkClipboard]);

external _gtk_clipboard_handle_event(
    event : Pointer[GdkEventOwnerChange]);

external _gtk_clipboard_store_all();

alias GtkColorButton = Struct__GtkColorButton;

alias GtkColorButtonClass = Struct__GtkColorButtonClass;

alias GtkColorButtonPrivate = Opaque;

record Struct__GtkColorButton (
    button : GtkButton,
    priv : Pointer[GtkColorButtonPrivate],
);

record Struct__GtkColorButtonClass (
    parent_class : GtkButtonClass,
    color_set : CCodePointer[(Pointer[Struct__GtkColorButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_color_button_get_type() CULong;

external gtk_color_button_new() Pointer[GtkWidget];

external gtk_color_button_new_with_color(
    color : Pointer[GdkColor]) Pointer[GtkWidget];

external gtk_color_button_set_color(
    color_button : Pointer[GtkColorButton],
    color : Pointer[GdkColor]);

external gtk_color_button_set_alpha(
    color_button : Pointer[GtkColorButton],
    alpha : UShort);

external gtk_color_button_get_color(
    color_button : Pointer[GtkColorButton],
    color : Pointer[GdkColor]);

external gtk_color_button_get_alpha(
    color_button : Pointer[GtkColorButton]) UShort;

external gtk_color_button_set_use_alpha(
    color_button : Pointer[GtkColorButton],
    use_alpha : Int);

external gtk_color_button_get_use_alpha(
    color_button : Pointer[GtkColorButton]) Int;

external gtk_color_button_set_title(
    color_button : Pointer[GtkColorButton],
    title : Pointer[CChar]);

external gtk_color_button_get_title(
    color_button : Pointer[GtkColorButton]) Pointer[CChar];

alias GtkVBox = Struct__GtkVBox;

alias GtkVBoxClass = Struct__GtkVBoxClass;

record Struct__GtkVBox (
    box : GtkBox,
);

record Struct__GtkVBoxClass (
    parent_class : GtkBoxClass,
);

external gtk_vbox_get_type() CULong;

external gtk_vbox_new(
    homogeneous : Int,
    spacing : Int) Pointer[GtkWidget];

alias GtkColorSelection = Struct__GtkColorSelection;

alias GtkColorSelectionClass = Struct__GtkColorSelectionClass;

alias GtkColorSelectionChangePaletteFunc = CCodePointer[(Pointer[Struct__GdkColor],Int),()];

alias GtkColorSelectionChangePaletteWithScreenFunc = CCodePointer[(Pointer[Struct__GdkScreen],Pointer[Struct__GdkColor],Int),()];

record Struct__GtkColorSelection (
    parent_instance : GtkVBox,
    private_data : gpointer,
);

record Struct__GtkColorSelectionClass (
    parent_class : GtkVBoxClass,
    color_changed : CCodePointer[(Pointer[Struct__GtkColorSelection]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_color_selection_get_type() CULong;

external gtk_color_selection_new() Pointer[GtkWidget];

external gtk_color_selection_get_has_opacity_control(
    colorsel : Pointer[GtkColorSelection]) Int;

external gtk_color_selection_set_has_opacity_control(
    colorsel : Pointer[GtkColorSelection],
    has_opacity : Int);

external gtk_color_selection_get_has_palette(
    colorsel : Pointer[GtkColorSelection]) Int;

external gtk_color_selection_set_has_palette(
    colorsel : Pointer[GtkColorSelection],
    has_palette : Int);

external gtk_color_selection_set_current_color(
    colorsel : Pointer[GtkColorSelection],
    color : Pointer[GdkColor]);

external gtk_color_selection_set_current_alpha(
    colorsel : Pointer[GtkColorSelection],
    alpha : UShort);

external gtk_color_selection_get_current_color(
    colorsel : Pointer[GtkColorSelection],
    color : Pointer[GdkColor]);

external gtk_color_selection_get_current_alpha(
    colorsel : Pointer[GtkColorSelection]) UShort;

external gtk_color_selection_set_previous_color(
    colorsel : Pointer[GtkColorSelection],
    color : Pointer[GdkColor]);

external gtk_color_selection_set_previous_alpha(
    colorsel : Pointer[GtkColorSelection],
    alpha : UShort);

external gtk_color_selection_get_previous_color(
    colorsel : Pointer[GtkColorSelection],
    color : Pointer[GdkColor]);

external gtk_color_selection_get_previous_alpha(
    colorsel : Pointer[GtkColorSelection]) UShort;

external gtk_color_selection_is_adjusting(
    colorsel : Pointer[GtkColorSelection]) Int;

external gtk_color_selection_palette_from_string(
    str : Pointer[CChar],
    colors : Pointer[Pointer[GdkColor]],
    n_colors : Pointer[Int]) Int;

external gtk_color_selection_palette_to_string(
    colors : Pointer[GdkColor],
    n_colors : Int) Pointer[CChar];

external gtk_color_selection_set_change_palette_hook(
    func : GtkColorSelectionChangePaletteFunc) GtkColorSelectionChangePaletteFunc;

external gtk_color_selection_set_change_palette_with_screen_hook(
    func : GtkColorSelectionChangePaletteWithScreenFunc) GtkColorSelectionChangePaletteWithScreenFunc;

external gtk_color_selection_set_color(
    colorsel : Pointer[GtkColorSelection],
    color : Pointer[Double]);

external gtk_color_selection_get_color(
    colorsel : Pointer[GtkColorSelection],
    color : Pointer[Double]);

external gtk_color_selection_set_update_policy(
    colorsel : Pointer[GtkColorSelection],
    policy : GtkUpdateType);

alias GtkColorSelectionDialog = Struct__GtkColorSelectionDialog;

alias GtkColorSelectionDialogClass = Struct__GtkColorSelectionDialogClass;

record Struct__GtkColorSelectionDialog (
    parent_instance : GtkDialog,
    colorsel : Pointer[GtkWidget],
    ok_button : Pointer[GtkWidget],
    cancel_button : Pointer[GtkWidget],
    help_button : Pointer[GtkWidget],
);

record Struct__GtkColorSelectionDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_color_selection_dialog_get_type() CULong;

external gtk_color_selection_dialog_new(
    title : Pointer[CChar]) Pointer[GtkWidget];

external gtk_color_selection_dialog_get_color_selection(
    colorsel : Pointer[GtkColorSelectionDialog]) Pointer[GtkWidget];

alias GTK_DEST_DEFAULT_MOTION = 1;
alias GTK_DEST_DEFAULT_HIGHLIGHT = 2;
alias GTK_DEST_DEFAULT_DROP = 4;
alias GTK_DEST_DEFAULT_ALL = 7;

alias GtkDestDefaults = Int;

alias GTK_TARGET_SAME_APP = 1;
alias GTK_TARGET_SAME_WIDGET = 2;
alias GTK_TARGET_OTHER_APP = 4;
alias GTK_TARGET_OTHER_WIDGET = 8;

alias GtkTargetFlags = Int;

external gtk_drag_get_data(
    widget : Pointer[GtkWidget],
    context : Pointer[GdkDragContext],
    target : GdkAtom,
    time_ : UInt);

external gtk_drag_finish(
    context : Pointer[GdkDragContext],
    success : Int,
    del : Int,
    time_ : UInt);

external gtk_drag_get_source_widget(
    context : Pointer[GdkDragContext]) Pointer[GtkWidget];

external gtk_drag_highlight(
    widget : Pointer[GtkWidget]);

external gtk_drag_unhighlight(
    widget : Pointer[GtkWidget]);

external gtk_drag_dest_set(
    widget : Pointer[GtkWidget],
    flags : GtkDestDefaults,
    targets : Pointer[GtkTargetEntry],
    n_targets : Int,
    actions : GdkDragAction);

external gtk_drag_dest_set_proxy(
    widget : Pointer[GtkWidget],
    proxy_window : Pointer[GdkWindow],
    protocol : GdkDragProtocol,
    use_coordinates : Int);

external gtk_drag_dest_unset(
    widget : Pointer[GtkWidget]);

external gtk_drag_dest_find_target(
    widget : Pointer[GtkWidget],
    context : Pointer[GdkDragContext],
    target_list : Pointer[GtkTargetList]) GdkAtom;

external gtk_drag_dest_get_target_list(
    widget : Pointer[GtkWidget]) Pointer[GtkTargetList];

external gtk_drag_dest_set_target_list(
    widget : Pointer[GtkWidget],
    target_list : Pointer[GtkTargetList]);

external gtk_drag_dest_add_text_targets(
    widget : Pointer[GtkWidget]);

external gtk_drag_dest_add_image_targets(
    widget : Pointer[GtkWidget]);

external gtk_drag_dest_add_uri_targets(
    widget : Pointer[GtkWidget]);

external gtk_drag_dest_set_track_motion(
    widget : Pointer[GtkWidget],
    track_motion : Int);

external gtk_drag_dest_get_track_motion(
    widget : Pointer[GtkWidget]) Int;

external gtk_drag_source_set(
    widget : Pointer[GtkWidget],
    start_button_mask : GdkModifierType,
    targets : Pointer[GtkTargetEntry],
    n_targets : Int,
    actions : GdkDragAction);

external gtk_drag_source_unset(
    widget : Pointer[GtkWidget]);

external gtk_drag_source_get_target_list(
    widget : Pointer[GtkWidget]) Pointer[GtkTargetList];

external gtk_drag_source_set_target_list(
    widget : Pointer[GtkWidget],
    target_list : Pointer[GtkTargetList]);

external gtk_drag_source_add_text_targets(
    widget : Pointer[GtkWidget]);

external gtk_drag_source_add_image_targets(
    widget : Pointer[GtkWidget]);

external gtk_drag_source_add_uri_targets(
    widget : Pointer[GtkWidget]);

external gtk_drag_source_set_icon(
    widget : Pointer[GtkWidget],
    colormap : Pointer[GdkColormap],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_drag_source_set_icon_pixbuf(
    widget : Pointer[GtkWidget],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_drag_source_set_icon_stock(
    widget : Pointer[GtkWidget],
    stock_id : Pointer[CChar]);

external gtk_drag_source_set_icon_name(
    widget : Pointer[GtkWidget],
    icon_name : Pointer[CChar]);

external gtk_drag_begin(
    widget : Pointer[GtkWidget],
    targets : Pointer[GtkTargetList],
    actions : GdkDragAction,
    button : Int,
    event : Pointer[GdkEvent]) Pointer[GdkDragContext];

external gtk_drag_set_icon_widget(
    context : Pointer[GdkDragContext],
    widget : Pointer[GtkWidget],
    hot_x : Int,
    hot_y : Int);

external gtk_drag_set_icon_pixmap(
    context : Pointer[GdkDragContext],
    colormap : Pointer[GdkColormap],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
    hot_x : Int,
    hot_y : Int);

external gtk_drag_set_icon_pixbuf(
    context : Pointer[GdkDragContext],
    pixbuf : Pointer[GdkPixbuf],
    hot_x : Int,
    hot_y : Int);

external gtk_drag_set_icon_stock(
    context : Pointer[GdkDragContext],
    stock_id : Pointer[CChar],
    hot_x : Int,
    hot_y : Int);

external gtk_drag_set_icon_name(
    context : Pointer[GdkDragContext],
    icon_name : Pointer[CChar],
    hot_x : Int,
    hot_y : Int);

external gtk_drag_set_icon_default(
    context : Pointer[GdkDragContext]);

external gtk_drag_check_threshold(
    widget : Pointer[GtkWidget],
    start_x : Int,
    start_y : Int,
    current_x : Int,
    current_y : Int) Int;

external _gtk_drag_source_handle_event(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEvent]);

external _gtk_drag_dest_handle_event(
    toplevel : Pointer[GtkWidget],
    event : Pointer[GdkEvent]);

external gtk_drag_set_default_icon(
    colormap : Pointer[GdkColormap],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
    hot_x : Int,
    hot_y : Int);

alias GtkEditable = Opaque;

alias GtkEditableClass = Struct__GtkEditableClass;

record Struct__GtkEditableClass (
    base_iface : GTypeInterface,
    insert_text : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Pointer[Int]),()],
    delete_text : CCodePointer[(OpaquePointer,Int,Int),()],
    changed : CCodePointer[(OpaquePointer),()],
    do_insert_text : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Pointer[Int]),()],
    do_delete_text : CCodePointer[(OpaquePointer,Int,Int),()],
    get_chars : CCodePointer[(OpaquePointer,Int,Int),(Pointer[CChar])],
    set_selection_bounds : CCodePointer[(OpaquePointer,Int,Int),()],
    get_selection_bounds : CCodePointer[(OpaquePointer,Pointer[Int],Pointer[Int]),(Int)],
    set_position : CCodePointer[(OpaquePointer,Int),()],
    get_position : CCodePointer[(OpaquePointer),(Int)],
);

external gtk_editable_get_type() CULong;

external gtk_editable_select_region(
    editable : Pointer[GtkEditable],
    start_pos : Int,
    end_pos : Int);

external gtk_editable_get_selection_bounds(
    editable : Pointer[GtkEditable],
    start_pos : Pointer[Int],
    end_pos : Pointer[Int]) Int;

external gtk_editable_insert_text(
    editable : Pointer[GtkEditable],
    new_text : Pointer[CChar],
    new_text_length : Int,
    position : Pointer[Int]);

external gtk_editable_delete_text(
    editable : Pointer[GtkEditable],
    start_pos : Int,
    end_pos : Int);

external gtk_editable_get_chars(
    editable : Pointer[GtkEditable],
    start_pos : Int,
    end_pos : Int) Pointer[CChar];

external gtk_editable_cut_clipboard(
    editable : Pointer[GtkEditable]);

external gtk_editable_copy_clipboard(
    editable : Pointer[GtkEditable]);

external gtk_editable_paste_clipboard(
    editable : Pointer[GtkEditable]);

external gtk_editable_delete_selection(
    editable : Pointer[GtkEditable]);

external gtk_editable_set_position(
    editable : Pointer[GtkEditable],
    position : Int);

external gtk_editable_get_position(
    editable : Pointer[GtkEditable]) Int;

external gtk_editable_set_editable(
    editable : Pointer[GtkEditable],
    is_editable : Int);

external gtk_editable_get_editable(
    editable : Pointer[GtkEditable]) Int;

alias GtkIMContext = Struct__GtkIMContext;

alias GtkIMContextClass = Struct__GtkIMContextClass;

record Struct__GtkIMContext (
    parent_instance : GObject,
);

record Struct__GtkIMContextClass (
    parent_class : GtkObjectClass,
    preedit_start : CCodePointer[(Pointer[Struct__GtkIMContext]),()],
    preedit_end : CCodePointer[(Pointer[Struct__GtkIMContext]),()],
    preedit_changed : CCodePointer[(Pointer[Struct__GtkIMContext]),()],
    commit : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[CChar]),()],
    retrieve_surrounding : CCodePointer[(Pointer[Struct__GtkIMContext]),(Int)],
    delete_surrounding : CCodePointer[(Pointer[Struct__GtkIMContext],Int,Int),(Int)],
    set_client_window : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[Struct__GdkDrawable]),()],
    get_preedit_string : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[Pointer[CChar]],Pointer[OpaquePointer],Pointer[Int]),()],
    filter_keypress : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[Struct__GdkEventKey]),(Int)],
    focus_in : CCodePointer[(Pointer[Struct__GtkIMContext]),()],
    focus_out : CCodePointer[(Pointer[Struct__GtkIMContext]),()],
    reset : CCodePointer[(Pointer[Struct__GtkIMContext]),()],
    set_cursor_location : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[Struct__GdkRectangle]),()],
    set_use_preedit : CCodePointer[(Pointer[Struct__GtkIMContext],Int),()],
    set_surrounding : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[CChar],Int,Int),()],
    get_surrounding : CCodePointer[(Pointer[Struct__GtkIMContext],Pointer[Pointer[CChar]],Pointer[Int]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
);

external gtk_im_context_get_type() CULong;

external gtk_im_context_set_client_window(
    context : Pointer[GtkIMContext],
    window : Pointer[GdkWindow]);

external gtk_im_context_get_preedit_string(
    context : Pointer[GtkIMContext],
    str : Pointer[Pointer[CChar]],
    attrs : Pointer[Pointer[PangoAttrList]],
    cursor_pos : Pointer[Int]);

external gtk_im_context_filter_keypress(
    context : Pointer[GtkIMContext],
    event : Pointer[GdkEventKey]) Int;

external gtk_im_context_focus_in(
    context : Pointer[GtkIMContext]);

external gtk_im_context_focus_out(
    context : Pointer[GtkIMContext]);

external gtk_im_context_reset(
    context : Pointer[GtkIMContext]);

external gtk_im_context_set_cursor_location(
    context : Pointer[GtkIMContext],
    area : Pointer[GdkRectangle]);

external gtk_im_context_set_use_preedit(
    context : Pointer[GtkIMContext],
    use_preedit : Int);

external gtk_im_context_set_surrounding(
    context : Pointer[GtkIMContext],
    text : Pointer[CChar],
    len : Int,
    cursor_index : Int);

external gtk_im_context_get_surrounding(
    context : Pointer[GtkIMContext],
    text : Pointer[Pointer[CChar]],
    cursor_index : Pointer[Int]) Int;

external gtk_im_context_delete_surrounding(
    context : Pointer[GtkIMContext],
    offset : Int,
    n_chars : Int) Int;

alias GtkEntryBuffer = Struct__GtkEntryBuffer;

alias GtkEntryBufferClass = Struct__GtkEntryBufferClass;

alias GtkEntryBufferPrivate = Opaque;

record Struct__GtkEntryBuffer (
    parent_instance : GObject,
    priv : Pointer[GtkEntryBufferPrivate],
);

record Struct__GtkEntryBufferClass (
    parent_class : GObjectClass,
    inserted_text : CCodePointer[(Pointer[Struct__GtkEntryBuffer],UInt,Pointer[CChar],UInt),()],
    deleted_text : CCodePointer[(Pointer[Struct__GtkEntryBuffer],UInt,UInt),()],
    get_text : CCodePointer[(Pointer[Struct__GtkEntryBuffer],Pointer[CULong]),(Pointer[CChar])],
    get_length : CCodePointer[(Pointer[Struct__GtkEntryBuffer]),(UInt)],
    insert_text : CCodePointer[(Pointer[Struct__GtkEntryBuffer],UInt,Pointer[CChar],UInt),(UInt)],
    delete_text : CCodePointer[(Pointer[Struct__GtkEntryBuffer],UInt,UInt),(UInt)],
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
);

external gtk_entry_buffer_get_type() CULong;

external gtk_entry_buffer_new(
    initial_chars : Pointer[CChar],
    n_initial_chars : Int) Pointer[GtkEntryBuffer];

external gtk_entry_buffer_get_bytes(
    buffer : Pointer[GtkEntryBuffer]) CULong;

external gtk_entry_buffer_get_length(
    buffer : Pointer[GtkEntryBuffer]) UInt;

external gtk_entry_buffer_get_text(
    buffer : Pointer[GtkEntryBuffer]) Pointer[CChar];

external gtk_entry_buffer_set_text(
    buffer : Pointer[GtkEntryBuffer],
    chars : Pointer[CChar],
    n_chars : Int);

external gtk_entry_buffer_set_max_length(
    buffer : Pointer[GtkEntryBuffer],
    max_length : Int);

external gtk_entry_buffer_get_max_length(
    buffer : Pointer[GtkEntryBuffer]) Int;

external gtk_entry_buffer_insert_text(
    buffer : Pointer[GtkEntryBuffer],
    position : UInt,
    chars : Pointer[CChar],
    n_chars : Int) UInt;

external gtk_entry_buffer_delete_text(
    buffer : Pointer[GtkEntryBuffer],
    position : UInt,
    n_chars : Int) UInt;

external gtk_entry_buffer_emit_inserted_text(
    buffer : Pointer[GtkEntryBuffer],
    position : UInt,
    chars : Pointer[CChar],
    n_chars : UInt);

external gtk_entry_buffer_emit_deleted_text(
    buffer : Pointer[GtkEntryBuffer],
    position : UInt,
    n_chars : UInt);

alias GtkListStore = Struct__GtkListStore;

alias GtkListStoreClass = Struct__GtkListStoreClass;

record Struct__GtkListStore (
    parent : GObject,
    stamp : Int,
    seq : gpointer,
    _gtk_reserved1 : gpointer,
    sort_list : Pointer[GList],
    n_columns : Int,
    sort_column_id : Int,
    order : GtkSortType,
    column_headers : Pointer[CULong],
    length : Int,
    default_sort_func : GtkTreeIterCompareFunc,
    default_sort_data : gpointer,
    default_sort_destroy : GDestroyNotify,
    columns_dirty : UInt,
);

record Struct__GtkListStoreClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_list_store_get_type() CULong;

external gtk_list_store_new(
    n_columns : Int,
    ...) Pointer[GtkListStore];

external gtk_list_store_newv(
    n_columns : Int,
    types : Pointer[CULong]) Pointer[GtkListStore];

external gtk_list_store_set_column_types(
    list_store : Pointer[GtkListStore],
    n_columns : Int,
    types : Pointer[CULong]);

external gtk_list_store_set_value(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    column : Int,
    value : Pointer[GValue]);

external gtk_list_store_set(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    ...);

external gtk_list_store_set_valuesv(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    columns : Pointer[Int],
    values : Pointer[GValue],
    n_values : Int);

external gtk_list_store_set_valist(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    var_args : Pointer[__va_list_tag]);

external gtk_list_store_remove(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_list_store_insert(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    position : Int);

external gtk_list_store_insert_before(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    sibling : Pointer[GtkTreeIter]);

external gtk_list_store_insert_after(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    sibling : Pointer[GtkTreeIter]);

external gtk_list_store_insert_with_values(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    position : Int,
    ...);

external gtk_list_store_insert_with_valuesv(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    position : Int,
    columns : Pointer[Int],
    values : Pointer[GValue],
    n_values : Int);

external gtk_list_store_prepend(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter]);

external gtk_list_store_append(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter]);

external gtk_list_store_clear(
    list_store : Pointer[GtkListStore]);

external gtk_list_store_iter_is_valid(
    list_store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_list_store_reorder(
    store : Pointer[GtkListStore],
    new_order : Pointer[Int]);

external gtk_list_store_swap(
    store : Pointer[GtkListStore],
    a : Pointer[GtkTreeIter],
    b : Pointer[GtkTreeIter]);

external gtk_list_store_move_after(
    store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    position : Pointer[GtkTreeIter]);

external gtk_list_store_move_before(
    store : Pointer[GtkListStore],
    iter : Pointer[GtkTreeIter],
    position : Pointer[GtkTreeIter]);

alias GtkTreeModelFilterVisibleFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),(Int)];

alias GtkTreeModelFilterModifyFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],Pointer[Struct__GValue],Int,RawPointer),()];

alias GtkTreeModelFilter = Struct__GtkTreeModelFilter;

alias GtkTreeModelFilterClass = Struct__GtkTreeModelFilterClass;

alias GtkTreeModelFilterPrivate = Opaque;

record Struct__GtkTreeModelFilter (
    parent : GObject,
    priv : Pointer[GtkTreeModelFilterPrivate],
);

record Struct__GtkTreeModelFilterClass (
    parent_class : GObjectClass,
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_tree_model_filter_get_type() CULong;

external gtk_tree_model_filter_new(
    child_model : Pointer[GtkTreeModel],
    root : Pointer[GtkTreePath]) Pointer[GtkTreeModel];

external gtk_tree_model_filter_set_visible_func(
    filter : Pointer[GtkTreeModelFilter],
    func : GtkTreeModelFilterVisibleFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_model_filter_set_modify_func(
    filter : Pointer[GtkTreeModelFilter],
    n_columns : Int,
    types : Pointer[CULong],
    func : GtkTreeModelFilterModifyFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_model_filter_set_visible_column(
    filter : Pointer[GtkTreeModelFilter],
    column : Int);

external gtk_tree_model_filter_get_model(
    filter : Pointer[GtkTreeModelFilter]) Pointer[GtkTreeModel];

external gtk_tree_model_filter_convert_child_iter_to_iter(
    filter : Pointer[GtkTreeModelFilter],
    filter_iter : Pointer[GtkTreeIter],
    child_iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_filter_convert_iter_to_child_iter(
    filter : Pointer[GtkTreeModelFilter],
    child_iter : Pointer[GtkTreeIter],
    filter_iter : Pointer[GtkTreeIter]);

external gtk_tree_model_filter_convert_child_path_to_path(
    filter : Pointer[GtkTreeModelFilter],
    child_path : Pointer[GtkTreePath]) Pointer[GtkTreePath];

external gtk_tree_model_filter_convert_path_to_child_path(
    filter : Pointer[GtkTreeModelFilter],
    filter_path : Pointer[GtkTreePath]) Pointer[GtkTreePath];

external gtk_tree_model_filter_refilter(
    filter : Pointer[GtkTreeModelFilter]);

external gtk_tree_model_filter_clear_cache(
    filter : Pointer[GtkTreeModelFilter]);

alias GtkEntryCompletion = Struct__GtkEntryCompletion;

alias GtkEntryCompletionClass = Struct__GtkEntryCompletionClass;

alias GtkEntryCompletionPrivate = Opaque;

alias GtkEntryCompletionMatchFunc = CCodePointer[(Pointer[Struct__GtkEntryCompletion],Pointer[CChar],Pointer[Struct__GtkTreeIter],RawPointer),(Int)];

record Struct__GtkEntryCompletion (
    parent_instance : GObject,
    priv : Pointer[GtkEntryCompletionPrivate],
);

record Struct__GtkEntryCompletionClass (
    parent_class : GObjectClass,
    match_selected : CCodePointer[(Pointer[Struct__GtkEntryCompletion],OpaquePointer,Pointer[Struct__GtkTreeIter]),(Int)],
    action_activated : CCodePointer[(Pointer[Struct__GtkEntryCompletion],Int),()],
    insert_prefix : CCodePointer[(Pointer[Struct__GtkEntryCompletion],Pointer[CChar]),(Int)],
    cursor_on_match : CCodePointer[(Pointer[Struct__GtkEntryCompletion],OpaquePointer,Pointer[Struct__GtkTreeIter]),(Int)],
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
);

external gtk_entry_completion_get_type() CULong;

external gtk_entry_completion_new() Pointer[GtkEntryCompletion];

external gtk_entry_completion_get_entry(
    completion : Pointer[GtkEntryCompletion]) Pointer[GtkWidget];

external gtk_entry_completion_set_model(
    completion : Pointer[GtkEntryCompletion],
    model : Pointer[GtkTreeModel]);

external gtk_entry_completion_get_model(
    completion : Pointer[GtkEntryCompletion]) Pointer[GtkTreeModel];

external gtk_entry_completion_set_match_func(
    completion : Pointer[GtkEntryCompletion],
    func : GtkEntryCompletionMatchFunc,
    func_data : gpointer,
    func_notify : GDestroyNotify);

external gtk_entry_completion_set_minimum_key_length(
    completion : Pointer[GtkEntryCompletion],
    length : Int);

external gtk_entry_completion_get_minimum_key_length(
    completion : Pointer[GtkEntryCompletion]) Int;

external gtk_entry_completion_complete(
    completion : Pointer[GtkEntryCompletion]);

external gtk_entry_completion_insert_prefix(
    completion : Pointer[GtkEntryCompletion]);

external gtk_entry_completion_insert_action_text(
    completion : Pointer[GtkEntryCompletion],
    index_ : Int,
    text : Pointer[CChar]);

external gtk_entry_completion_insert_action_markup(
    completion : Pointer[GtkEntryCompletion],
    index_ : Int,
    markup : Pointer[CChar]);

external gtk_entry_completion_delete_action(
    completion : Pointer[GtkEntryCompletion],
    index_ : Int);

external gtk_entry_completion_set_inline_completion(
    completion : Pointer[GtkEntryCompletion],
    inline_completion : Int);

external gtk_entry_completion_get_inline_completion(
    completion : Pointer[GtkEntryCompletion]) Int;

external gtk_entry_completion_set_inline_selection(
    completion : Pointer[GtkEntryCompletion],
    inline_selection : Int);

external gtk_entry_completion_get_inline_selection(
    completion : Pointer[GtkEntryCompletion]) Int;

external gtk_entry_completion_set_popup_completion(
    completion : Pointer[GtkEntryCompletion],
    popup_completion : Int);

external gtk_entry_completion_get_popup_completion(
    completion : Pointer[GtkEntryCompletion]) Int;

external gtk_entry_completion_set_popup_set_width(
    completion : Pointer[GtkEntryCompletion],
    popup_set_width : Int);

external gtk_entry_completion_get_popup_set_width(
    completion : Pointer[GtkEntryCompletion]) Int;

external gtk_entry_completion_set_popup_single_match(
    completion : Pointer[GtkEntryCompletion],
    popup_single_match : Int);

external gtk_entry_completion_get_popup_single_match(
    completion : Pointer[GtkEntryCompletion]) Int;

external gtk_entry_completion_get_completion_prefix(
    completion : Pointer[GtkEntryCompletion]) Pointer[CChar];

external gtk_entry_completion_set_text_column(
    completion : Pointer[GtkEntryCompletion],
    column : Int);

external gtk_entry_completion_get_text_column(
    completion : Pointer[GtkEntryCompletion]) Int;

alias GTK_ENTRY_ICON_PRIMARY = 0;
alias GTK_ENTRY_ICON_SECONDARY = 1;

alias GtkEntryIconPosition = Int;

alias GtkEntry = Struct__GtkEntry;

alias GtkEntryClass = Struct__GtkEntryClass;

record Struct__GtkEntry (
    widget : GtkWidget,
    text : Pointer[CChar],
    editable : UInt,
    visible : UInt,
    overwrite_mode : UInt,
    in_drag : UInt,
    text_length : UShort,
    text_max_length : UShort,
    text_area : Pointer[GdkWindow],
    im_context : Pointer[GtkIMContext],
    popup_menu : Pointer[GtkWidget],
    current_pos : Int,
    selection_bound : Int,
    cached_layout : Pointer[PangoLayout],
    cache_includes_preedit : UInt,
    need_im_reset : UInt,
    has_frame : UInt,
    activates_default : UInt,
    cursor_visible : UInt,
    in_click : UInt,
    is_cell_renderer : UInt,
    editing_canceled : UInt,
    mouse_cursor_obscured : UInt,
    select_words : UInt,
    select_lines : UInt,
    resolved_dir : UInt,
    truncate_multiline : UInt,
    button : UInt,
    blink_timeout : UInt,
    recompute_idle : UInt,
    scroll_offset : Int,
    ascent : Int,
    descent : Int,
    x_text_size : UShort,
    x_n_bytes : UShort,
    preedit_length : UShort,
    preedit_cursor : UShort,
    dnd_position : Int,
    drag_start_x : Int,
    drag_start_y : Int,
    invisible_char : UInt,
    width_chars : Int,
);

record Struct__GtkEntryClass (
    parent_class : GtkWidgetClass,
    populate_popup : CCodePointer[(Pointer[Struct__GtkEntry],Pointer[Struct__GtkMenu]),()],
    activate : CCodePointer[(Pointer[Struct__GtkEntry]),()],
    move_cursor : CCodePointer[(Pointer[Struct__GtkEntry],Int,Int,Int),()],
    insert_at_cursor : CCodePointer[(Pointer[Struct__GtkEntry],Pointer[CChar]),()],
    delete_from_cursor : CCodePointer[(Pointer[Struct__GtkEntry],Int,Int),()],
    backspace : CCodePointer[(Pointer[Struct__GtkEntry]),()],
    cut_clipboard : CCodePointer[(Pointer[Struct__GtkEntry]),()],
    copy_clipboard : CCodePointer[(Pointer[Struct__GtkEntry]),()],
    paste_clipboard : CCodePointer[(Pointer[Struct__GtkEntry]),()],
    toggle_overwrite : CCodePointer[(Pointer[Struct__GtkEntry]),()],
    get_text_area_size : CCodePointer[(Pointer[Struct__GtkEntry],Pointer[Int],Pointer[Int],Pointer[Int],Pointer[Int]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
);

external gtk_entry_get_type() CULong;

external gtk_entry_new() Pointer[GtkWidget];

external gtk_entry_new_with_buffer(
    buffer : Pointer[GtkEntryBuffer]) Pointer[GtkWidget];

external gtk_entry_get_buffer(
    entry : Pointer[GtkEntry]) Pointer[GtkEntryBuffer];

external gtk_entry_set_buffer(
    entry : Pointer[GtkEntry],
    buffer : Pointer[GtkEntryBuffer]);

external gtk_entry_get_text_window(
    entry : Pointer[GtkEntry]) Pointer[GdkWindow];

external gtk_entry_set_visibility(
    entry : Pointer[GtkEntry],
    visible : Int);

external gtk_entry_get_visibility(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_set_invisible_char(
    entry : Pointer[GtkEntry],
    ch : UInt);

external gtk_entry_get_invisible_char(
    entry : Pointer[GtkEntry]) UInt;

external gtk_entry_unset_invisible_char(
    entry : Pointer[GtkEntry]);

external gtk_entry_set_has_frame(
    entry : Pointer[GtkEntry],
    setting : Int);

external gtk_entry_get_has_frame(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_set_inner_border(
    entry : Pointer[GtkEntry],
    border : Pointer[GtkBorder]);

external gtk_entry_get_inner_border(
    entry : Pointer[GtkEntry]) Pointer[GtkBorder];

external gtk_entry_set_overwrite_mode(
    entry : Pointer[GtkEntry],
    overwrite : Int);

external gtk_entry_get_overwrite_mode(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_set_max_length(
    entry : Pointer[GtkEntry],
    max : Int);

external gtk_entry_get_max_length(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_get_text_length(
    entry : Pointer[GtkEntry]) UShort;

external gtk_entry_set_activates_default(
    entry : Pointer[GtkEntry],
    setting : Int);

external gtk_entry_get_activates_default(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_set_width_chars(
    entry : Pointer[GtkEntry],
    n_chars : Int);

external gtk_entry_get_width_chars(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_set_text(
    entry : Pointer[GtkEntry],
    text : Pointer[CChar]);

external gtk_entry_get_text(
    entry : Pointer[GtkEntry]) Pointer[CChar];

external gtk_entry_get_layout(
    entry : Pointer[GtkEntry]) Pointer[PangoLayout];

external gtk_entry_get_layout_offsets(
    entry : Pointer[GtkEntry],
    x : Pointer[Int],
    y : Pointer[Int]);

external gtk_entry_set_alignment(
    entry : Pointer[GtkEntry],
    xalign : Float);

external gtk_entry_get_alignment(
    entry : Pointer[GtkEntry]) Float;

external gtk_entry_set_completion(
    entry : Pointer[GtkEntry],
    completion : Pointer[GtkEntryCompletion]);

external gtk_entry_get_completion(
    entry : Pointer[GtkEntry]) Pointer[GtkEntryCompletion];

external gtk_entry_layout_index_to_text_index(
    entry : Pointer[GtkEntry],
    layout_index : Int) Int;

external gtk_entry_text_index_to_layout_index(
    entry : Pointer[GtkEntry],
    text_index : Int) Int;

external gtk_entry_set_cursor_hadjustment(
    entry : Pointer[GtkEntry],
    adjustment : Pointer[GtkAdjustment]);

external gtk_entry_get_cursor_hadjustment(
    entry : Pointer[GtkEntry]) Pointer[GtkAdjustment];

external gtk_entry_set_progress_fraction(
    entry : Pointer[GtkEntry],
    fraction : Double);

external gtk_entry_get_progress_fraction(
    entry : Pointer[GtkEntry]) Double;

external gtk_entry_set_progress_pulse_step(
    entry : Pointer[GtkEntry],
    fraction : Double);

external gtk_entry_get_progress_pulse_step(
    entry : Pointer[GtkEntry]) Double;

external gtk_entry_progress_pulse(
    entry : Pointer[GtkEntry]);

external gtk_entry_set_icon_from_pixbuf(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    pixbuf : Pointer[GdkPixbuf]);

external gtk_entry_set_icon_from_stock(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    stock_id : Pointer[CChar]);

external gtk_entry_set_icon_from_icon_name(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    icon_name : Pointer[CChar]);

external gtk_entry_set_icon_from_gicon(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    icon : Pointer[GIcon]);

external gtk_entry_get_icon_storage_type(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) GtkImageType;

external gtk_entry_get_icon_pixbuf(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[GdkPixbuf];

external gtk_entry_get_icon_stock(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[CChar];

external gtk_entry_get_icon_name(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[CChar];

external gtk_entry_get_icon_gicon(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[GIcon];

external gtk_entry_set_icon_activatable(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    activatable : Int);

external gtk_entry_get_icon_activatable(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Int;

external gtk_entry_set_icon_sensitive(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    sensitive : Int);

external gtk_entry_get_icon_sensitive(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Int;

external gtk_entry_get_icon_at_pos(
    entry : Pointer[GtkEntry],
    x : Int,
    y : Int) Int;

external gtk_entry_set_icon_tooltip_text(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    tooltip : Pointer[CChar]);

external gtk_entry_get_icon_tooltip_text(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[CChar];

external gtk_entry_set_icon_tooltip_markup(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    tooltip : Pointer[CChar]);

external gtk_entry_get_icon_tooltip_markup(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[CChar];

external gtk_entry_set_icon_drag_source(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition,
    target_list : Pointer[GtkTargetList],
    actions : GdkDragAction);

external gtk_entry_get_current_icon_drag_source(
    entry : Pointer[GtkEntry]) Int;

external gtk_entry_get_icon_window(
    entry : Pointer[GtkEntry],
    icon_pos : GtkEntryIconPosition) Pointer[GdkWindow];

external gtk_entry_im_context_filter_keypress(
    entry : Pointer[GtkEntry],
    event : Pointer[GdkEventKey]) Int;

external gtk_entry_reset_im_context(
    entry : Pointer[GtkEntry]);

external gtk_entry_new_with_max_length(
    max : Int) Pointer[GtkWidget];

external gtk_entry_append_text(
    entry : Pointer[GtkEntry],
    text : Pointer[CChar]);

external gtk_entry_prepend_text(
    entry : Pointer[GtkEntry],
    text : Pointer[CChar]);

external gtk_entry_set_position(
    entry : Pointer[GtkEntry],
    position : Int);

external gtk_entry_select_region(
    entry : Pointer[GtkEntry],
    start : Int,
    end : Int);

external gtk_entry_set_editable(
    entry : Pointer[GtkEntry],
    editable : Int);

alias GTK_TREE_VIEW_DROP_BEFORE = 0;
alias GTK_TREE_VIEW_DROP_AFTER = 1;
alias GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = 2;
alias GTK_TREE_VIEW_DROP_INTO_OR_AFTER = 3;

alias GtkTreeViewDropPosition = Int;

alias GtkTreeView = Struct__GtkTreeView;

alias GtkTreeViewClass = Struct__GtkTreeViewClass;

alias GtkTreeViewPrivate = Opaque;

alias GtkTreeSelection = Struct__GtkTreeSelection;

alias GtkTreeSelectionClass = Struct__GtkTreeSelectionClass;

record Struct__GtkTreeView (
    parent : GtkContainer,
    priv : Pointer[GtkTreeViewPrivate],
);

record Struct__GtkTreeViewClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
    row_activated : CCodePointer[(Pointer[Struct__GtkTreeView],OpaquePointer,Pointer[Struct__GtkTreeViewColumn]),()],
    test_expand_row : CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkTreeIter],OpaquePointer),(Int)],
    test_collapse_row : CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkTreeIter],OpaquePointer),(Int)],
    row_expanded : CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkTreeIter],OpaquePointer),()],
    row_collapsed : CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkTreeIter],OpaquePointer),()],
    columns_changed : CCodePointer[(Pointer[Struct__GtkTreeView]),()],
    cursor_changed : CCodePointer[(Pointer[Struct__GtkTreeView]),()],
    move_cursor : CCodePointer[(Pointer[Struct__GtkTreeView],Int,Int),(Int)],
    select_all : CCodePointer[(Pointer[Struct__GtkTreeView]),(Int)],
    unselect_all : CCodePointer[(Pointer[Struct__GtkTreeView]),(Int)],
    select_cursor_row : CCodePointer[(Pointer[Struct__GtkTreeView],Int),(Int)],
    toggle_cursor_row : CCodePointer[(Pointer[Struct__GtkTreeView]),(Int)],
    expand_collapse_cursor_row : CCodePointer[(Pointer[Struct__GtkTreeView],Int,Int,Int),(Int)],
    select_cursor_parent : CCodePointer[(Pointer[Struct__GtkTreeView]),(Int)],
    start_interactive_search : CCodePointer[(Pointer[Struct__GtkTreeView]),(Int)],
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

alias GtkTreeViewColumnDropFunc = CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkTreeViewColumn],Pointer[Struct__GtkTreeViewColumn],Pointer[Struct__GtkTreeViewColumn],RawPointer),(Int)];

alias GtkTreeViewMappingFunc = CCodePointer[(Pointer[Struct__GtkTreeView],OpaquePointer,RawPointer),()];

alias GtkTreeViewSearchEqualFunc = CCodePointer[(OpaquePointer,Int,Pointer[CChar],Pointer[Struct__GtkTreeIter],RawPointer),(Int)];

alias GtkTreeViewRowSeparatorFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),(Int)];

alias GtkTreeViewSearchPositionFunc = CCodePointer[(Pointer[Struct__GtkTreeView],Pointer[Struct__GtkWidget],RawPointer),()];

external gtk_tree_view_get_type() CULong;

external gtk_tree_view_new() Pointer[GtkWidget];

external gtk_tree_view_new_with_model(
    model : Pointer[GtkTreeModel]) Pointer[GtkWidget];

external gtk_tree_view_get_model(
    tree_view : Pointer[GtkTreeView]) Pointer[GtkTreeModel];

external gtk_tree_view_set_model(
    tree_view : Pointer[GtkTreeView],
    model : Pointer[GtkTreeModel]);

external gtk_tree_view_get_selection(
    tree_view : Pointer[GtkTreeView]) Pointer[GtkTreeSelection];

external gtk_tree_view_get_hadjustment(
    tree_view : Pointer[GtkTreeView]) Pointer[GtkAdjustment];

external gtk_tree_view_set_hadjustment(
    tree_view : Pointer[GtkTreeView],
    adjustment : Pointer[GtkAdjustment]);

external gtk_tree_view_get_vadjustment(
    tree_view : Pointer[GtkTreeView]) Pointer[GtkAdjustment];

external gtk_tree_view_set_vadjustment(
    tree_view : Pointer[GtkTreeView],
    adjustment : Pointer[GtkAdjustment]);

external gtk_tree_view_get_headers_visible(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_headers_visible(
    tree_view : Pointer[GtkTreeView],
    headers_visible : Int);

external gtk_tree_view_columns_autosize(
    tree_view : Pointer[GtkTreeView]);

external gtk_tree_view_get_headers_clickable(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_headers_clickable(
    tree_view : Pointer[GtkTreeView],
    setting : Int);

external gtk_tree_view_set_rules_hint(
    tree_view : Pointer[GtkTreeView],
    setting : Int);

external gtk_tree_view_get_rules_hint(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_append_column(
    tree_view : Pointer[GtkTreeView],
    column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_remove_column(
    tree_view : Pointer[GtkTreeView],
    column : Pointer[GtkTreeViewColumn]) Int;

external gtk_tree_view_insert_column(
    tree_view : Pointer[GtkTreeView],
    column : Pointer[GtkTreeViewColumn],
    position : Int) Int;

external gtk_tree_view_insert_column_with_attributes(
    tree_view : Pointer[GtkTreeView],
    position : Int,
    title : Pointer[CChar],
    cell : Pointer[GtkCellRenderer],
    ...) Int;

external gtk_tree_view_insert_column_with_data_func(
    tree_view : Pointer[GtkTreeView],
    position : Int,
    title : Pointer[CChar],
    cell : Pointer[GtkCellRenderer],
    func : GtkTreeCellDataFunc,
    data : gpointer,
    dnotify : GDestroyNotify) Int;

external gtk_tree_view_get_column(
    tree_view : Pointer[GtkTreeView],
    n : Int) Pointer[GtkTreeViewColumn];

external gtk_tree_view_get_columns(
    tree_view : Pointer[GtkTreeView]) Pointer[GList];

external gtk_tree_view_move_column_after(
    tree_view : Pointer[GtkTreeView],
    column : Pointer[GtkTreeViewColumn],
    base_column : Pointer[GtkTreeViewColumn]);

external gtk_tree_view_set_expander_column(
    tree_view : Pointer[GtkTreeView],
    column : Pointer[GtkTreeViewColumn]);

external gtk_tree_view_get_expander_column(
    tree_view : Pointer[GtkTreeView]) Pointer[GtkTreeViewColumn];

external gtk_tree_view_set_column_drag_function(
    tree_view : Pointer[GtkTreeView],
    func : GtkTreeViewColumnDropFunc,
    user_data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_view_scroll_to_point(
    tree_view : Pointer[GtkTreeView],
    tree_x : Int,
    tree_y : Int);

external gtk_tree_view_scroll_to_cell(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    column : Pointer[GtkTreeViewColumn],
    use_align : Int,
    row_align : Float,
    col_align : Float);

external gtk_tree_view_row_activated(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    column : Pointer[GtkTreeViewColumn]);

external gtk_tree_view_expand_all(
    tree_view : Pointer[GtkTreeView]);

external gtk_tree_view_collapse_all(
    tree_view : Pointer[GtkTreeView]);

external gtk_tree_view_expand_to_path(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath]);

external gtk_tree_view_expand_row(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    open_all : Int) Int;

external gtk_tree_view_collapse_row(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_view_map_expanded_rows(
    tree_view : Pointer[GtkTreeView],
    func : GtkTreeViewMappingFunc,
    data : gpointer);

external gtk_tree_view_row_expanded(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_view_set_reorderable(
    tree_view : Pointer[GtkTreeView],
    reorderable : Int);

external gtk_tree_view_get_reorderable(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_cursor(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    focus_column : Pointer[GtkTreeViewColumn],
    start_editing : Int);

external gtk_tree_view_set_cursor_on_cell(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    focus_column : Pointer[GtkTreeViewColumn],
    focus_cell : Pointer[GtkCellRenderer],
    start_editing : Int);

external gtk_tree_view_get_cursor(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[Pointer[GtkTreePath]],
    focus_column : Pointer[Pointer[GtkTreeViewColumn]]);

external gtk_tree_view_get_bin_window(
    tree_view : Pointer[GtkTreeView]) Pointer[GdkWindow];

external gtk_tree_view_get_path_at_pos(
    tree_view : Pointer[GtkTreeView],
    x : Int,
    y : Int,
    path : Pointer[Pointer[GtkTreePath]],
    column : Pointer[Pointer[GtkTreeViewColumn]],
    cell_x : Pointer[Int],
    cell_y : Pointer[Int]) Int;

external gtk_tree_view_get_cell_area(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    column : Pointer[GtkTreeViewColumn],
    rect : Pointer[GdkRectangle]);

external gtk_tree_view_get_background_area(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    column : Pointer[GtkTreeViewColumn],
    rect : Pointer[GdkRectangle]);

external gtk_tree_view_get_visible_rect(
    tree_view : Pointer[GtkTreeView],
    visible_rect : Pointer[GdkRectangle]);

external gtk_tree_view_widget_to_tree_coords(
    tree_view : Pointer[GtkTreeView],
    wx : Int,
    wy : Int,
    tx : Pointer[Int],
    ty : Pointer[Int]);

external gtk_tree_view_tree_to_widget_coords(
    tree_view : Pointer[GtkTreeView],
    tx : Int,
    ty : Int,
    wx : Pointer[Int],
    wy : Pointer[Int]);

external gtk_tree_view_get_visible_range(
    tree_view : Pointer[GtkTreeView],
    start_path : Pointer[Pointer[GtkTreePath]],
    end_path : Pointer[Pointer[GtkTreePath]]) Int;

external gtk_tree_view_enable_model_drag_source(
    tree_view : Pointer[GtkTreeView],
    start_button_mask : GdkModifierType,
    targets : Pointer[GtkTargetEntry],
    n_targets : Int,
    actions : GdkDragAction);

external gtk_tree_view_enable_model_drag_dest(
    tree_view : Pointer[GtkTreeView],
    targets : Pointer[GtkTargetEntry],
    n_targets : Int,
    actions : GdkDragAction);

external gtk_tree_view_unset_rows_drag_source(
    tree_view : Pointer[GtkTreeView]);

external gtk_tree_view_unset_rows_drag_dest(
    tree_view : Pointer[GtkTreeView]);

external gtk_tree_view_set_drag_dest_row(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath],
    pos : GtkTreeViewDropPosition);

external gtk_tree_view_get_drag_dest_row(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[Pointer[GtkTreePath]],
    pos : Pointer[GtkTreeViewDropPosition]);

external gtk_tree_view_get_dest_row_at_pos(
    tree_view : Pointer[GtkTreeView],
    drag_x : Int,
    drag_y : Int,
    path : Pointer[Pointer[GtkTreePath]],
    pos : Pointer[GtkTreeViewDropPosition]) Int;

external gtk_tree_view_create_row_drag_icon(
    tree_view : Pointer[GtkTreeView],
    path : Pointer[GtkTreePath]) Pointer[GdkPixmap];

external gtk_tree_view_set_enable_search(
    tree_view : Pointer[GtkTreeView],
    enable_search : Int);

external gtk_tree_view_get_enable_search(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_get_search_column(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_search_column(
    tree_view : Pointer[GtkTreeView],
    column : Int);

external gtk_tree_view_get_search_equal_func(
    tree_view : Pointer[GtkTreeView]) GtkTreeViewSearchEqualFunc;

external gtk_tree_view_set_search_equal_func(
    tree_view : Pointer[GtkTreeView],
    search_equal_func : GtkTreeViewSearchEqualFunc,
    search_user_data : gpointer,
    search_destroy : GDestroyNotify);

external gtk_tree_view_get_search_entry(
    tree_view : Pointer[GtkTreeView]) Pointer[GtkEntry];

external gtk_tree_view_set_search_entry(
    tree_view : Pointer[GtkTreeView],
    entry : Pointer[GtkEntry]);

external gtk_tree_view_get_search_position_func(
    tree_view : Pointer[GtkTreeView]) GtkTreeViewSearchPositionFunc;

external gtk_tree_view_set_search_position_func(
    tree_view : Pointer[GtkTreeView],
    func : GtkTreeViewSearchPositionFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_view_convert_widget_to_tree_coords(
    tree_view : Pointer[GtkTreeView],
    wx : Int,
    wy : Int,
    tx : Pointer[Int],
    ty : Pointer[Int]);

external gtk_tree_view_convert_tree_to_widget_coords(
    tree_view : Pointer[GtkTreeView],
    tx : Int,
    ty : Int,
    wx : Pointer[Int],
    wy : Pointer[Int]);

external gtk_tree_view_convert_widget_to_bin_window_coords(
    tree_view : Pointer[GtkTreeView],
    wx : Int,
    wy : Int,
    bx : Pointer[Int],
    by : Pointer[Int]);

external gtk_tree_view_convert_bin_window_to_widget_coords(
    tree_view : Pointer[GtkTreeView],
    bx : Int,
    by : Int,
    wx : Pointer[Int],
    wy : Pointer[Int]);

external gtk_tree_view_convert_tree_to_bin_window_coords(
    tree_view : Pointer[GtkTreeView],
    tx : Int,
    ty : Int,
    bx : Pointer[Int],
    by : Pointer[Int]);

external gtk_tree_view_convert_bin_window_to_tree_coords(
    tree_view : Pointer[GtkTreeView],
    bx : Int,
    by : Int,
    tx : Pointer[Int],
    ty : Pointer[Int]);

alias GtkTreeDestroyCountFunc = CCodePointer[(Pointer[Struct__GtkTreeView],OpaquePointer,Int,RawPointer),()];

external gtk_tree_view_set_destroy_count_func(
    tree_view : Pointer[GtkTreeView],
    func : GtkTreeDestroyCountFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_view_set_fixed_height_mode(
    tree_view : Pointer[GtkTreeView],
    enable : Int);

external gtk_tree_view_get_fixed_height_mode(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_hover_selection(
    tree_view : Pointer[GtkTreeView],
    hover : Int);

external gtk_tree_view_get_hover_selection(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_hover_expand(
    tree_view : Pointer[GtkTreeView],
    expand : Int);

external gtk_tree_view_get_hover_expand(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_rubber_banding(
    tree_view : Pointer[GtkTreeView],
    enable : Int);

external gtk_tree_view_get_rubber_banding(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_is_rubber_banding_active(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_get_row_separator_func(
    tree_view : Pointer[GtkTreeView]) GtkTreeViewRowSeparatorFunc;

external gtk_tree_view_set_row_separator_func(
    tree_view : Pointer[GtkTreeView],
    func : GtkTreeViewRowSeparatorFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_view_get_grid_lines(
    tree_view : Pointer[GtkTreeView]) GtkTreeViewGridLines;

external gtk_tree_view_set_grid_lines(
    tree_view : Pointer[GtkTreeView],
    grid_lines : GtkTreeViewGridLines);

external gtk_tree_view_get_enable_tree_lines(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_enable_tree_lines(
    tree_view : Pointer[GtkTreeView],
    enabled : Int);

external gtk_tree_view_set_show_expanders(
    tree_view : Pointer[GtkTreeView],
    enabled : Int);

external gtk_tree_view_get_show_expanders(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_level_indentation(
    tree_view : Pointer[GtkTreeView],
    indentation : Int);

external gtk_tree_view_get_level_indentation(
    tree_view : Pointer[GtkTreeView]) Int;

external gtk_tree_view_set_tooltip_row(
    tree_view : Pointer[GtkTreeView],
    tooltip : Pointer[GtkTooltip],
    path : Pointer[GtkTreePath]);

external gtk_tree_view_set_tooltip_cell(
    tree_view : Pointer[GtkTreeView],
    tooltip : Pointer[GtkTooltip],
    path : Pointer[GtkTreePath],
    column : Pointer[GtkTreeViewColumn],
    cell : Pointer[GtkCellRenderer]);

external gtk_tree_view_get_tooltip_context(
    tree_view : Pointer[GtkTreeView],
    x : Pointer[Int],
    y : Pointer[Int],
    keyboard_tip : Int,
    model : Pointer[Pointer[GtkTreeModel]],
    path : Pointer[Pointer[GtkTreePath]],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_view_set_tooltip_column(
    tree_view : Pointer[GtkTreeView],
    column : Int);

external gtk_tree_view_get_tooltip_column(
    tree_view : Pointer[GtkTreeView]) Int;

alias GtkComboBox = Struct__GtkComboBox;

alias GtkComboBoxClass = Struct__GtkComboBoxClass;

alias GtkComboBoxPrivate = Opaque;

record Struct__GtkComboBox (
    parent_instance : GtkBin,
    priv : Pointer[GtkComboBoxPrivate],
);

record Struct__GtkComboBoxClass (
    parent_class : GtkBinClass,
    changed : CCodePointer[(Pointer[Struct__GtkComboBox]),()],
    get_active_text : CCodePointer[(Pointer[Struct__GtkComboBox]),(Pointer[CChar])],
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
);

external gtk_combo_box_get_type() CULong;

external gtk_combo_box_new() Pointer[GtkWidget];

external gtk_combo_box_new_with_model(
    model : Pointer[GtkTreeModel]) Pointer[GtkWidget];

external gtk_combo_box_get_wrap_width(
    combo_box : Pointer[GtkComboBox]) Int;

external gtk_combo_box_set_wrap_width(
    combo_box : Pointer[GtkComboBox],
    width : Int);

external gtk_combo_box_get_row_span_column(
    combo_box : Pointer[GtkComboBox]) Int;

external gtk_combo_box_set_row_span_column(
    combo_box : Pointer[GtkComboBox],
    row_span : Int);

external gtk_combo_box_get_column_span_column(
    combo_box : Pointer[GtkComboBox]) Int;

external gtk_combo_box_set_column_span_column(
    combo_box : Pointer[GtkComboBox],
    column_span : Int);

external gtk_combo_box_get_add_tearoffs(
    combo_box : Pointer[GtkComboBox]) Int;

external gtk_combo_box_set_add_tearoffs(
    combo_box : Pointer[GtkComboBox],
    add_tearoffs : Int);

external gtk_combo_box_get_title(
    combo_box : Pointer[GtkComboBox]) Pointer[CChar];

external gtk_combo_box_set_title(
    combo_box : Pointer[GtkComboBox],
    title : Pointer[CChar]);

external gtk_combo_box_get_focus_on_click(
    combo : Pointer[GtkComboBox]) Int;

external gtk_combo_box_set_focus_on_click(
    combo : Pointer[GtkComboBox],
    focus_on_click : Int);

external gtk_combo_box_get_active(
    combo_box : Pointer[GtkComboBox]) Int;

external gtk_combo_box_set_active(
    combo_box : Pointer[GtkComboBox],
    index_ : Int);

external gtk_combo_box_get_active_iter(
    combo_box : Pointer[GtkComboBox],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_combo_box_set_active_iter(
    combo_box : Pointer[GtkComboBox],
    iter : Pointer[GtkTreeIter]);

external gtk_combo_box_set_model(
    combo_box : Pointer[GtkComboBox],
    model : Pointer[GtkTreeModel]);

external gtk_combo_box_get_model(
    combo_box : Pointer[GtkComboBox]) Pointer[GtkTreeModel];

external gtk_combo_box_get_row_separator_func(
    combo_box : Pointer[GtkComboBox]) GtkTreeViewRowSeparatorFunc;

external gtk_combo_box_set_row_separator_func(
    combo_box : Pointer[GtkComboBox],
    func : GtkTreeViewRowSeparatorFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_combo_box_set_button_sensitivity(
    combo_box : Pointer[GtkComboBox],
    sensitivity : GtkSensitivityType);

external gtk_combo_box_get_button_sensitivity(
    combo_box : Pointer[GtkComboBox]) GtkSensitivityType;

external gtk_combo_box_new_text() Pointer[GtkWidget];

external gtk_combo_box_append_text(
    combo_box : Pointer[GtkComboBox],
    text : Pointer[CChar]);

external gtk_combo_box_insert_text(
    combo_box : Pointer[GtkComboBox],
    position : Int,
    text : Pointer[CChar]);

external gtk_combo_box_prepend_text(
    combo_box : Pointer[GtkComboBox],
    text : Pointer[CChar]);

external gtk_combo_box_remove_text(
    combo_box : Pointer[GtkComboBox],
    position : Int);

external gtk_combo_box_get_active_text(
    combo_box : Pointer[GtkComboBox]) Pointer[CChar];

external gtk_combo_box_popup(
    combo_box : Pointer[GtkComboBox]);

external gtk_combo_box_popdown(
    combo_box : Pointer[GtkComboBox]);

external gtk_combo_box_get_popup_accessible(
    combo_box : Pointer[GtkComboBox]) Pointer[AtkObject];

alias GtkComboBoxEntry = Struct__GtkComboBoxEntry;

alias GtkComboBoxEntryClass = Struct__GtkComboBoxEntryClass;

alias GtkComboBoxEntryPrivate = Opaque;

record Struct__GtkComboBoxEntry (
    parent_instance : GtkComboBox,
    priv : Pointer[GtkComboBoxEntryPrivate],
);

record Struct__GtkComboBoxEntryClass (
    parent_class : GtkComboBoxClass,
    _gtk_reserved0 : CCodePointer[(),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_combo_box_entry_get_type() CULong;

external gtk_combo_box_entry_new() Pointer[GtkWidget];

external gtk_combo_box_entry_new_with_model(
    model : Pointer[GtkTreeModel],
    text_column : Int) Pointer[GtkWidget];

external gtk_combo_box_entry_set_text_column(
    entry_box : Pointer[GtkComboBoxEntry],
    text_column : Int);

external gtk_combo_box_entry_get_text_column(
    entry_box : Pointer[GtkComboBoxEntry]) Int;

external gtk_combo_box_entry_new_text() Pointer[GtkWidget];

alias GtkDrawingArea = Struct__GtkDrawingArea;

alias GtkDrawingAreaClass = Struct__GtkDrawingAreaClass;

record Struct__GtkDrawingArea (
    widget : GtkWidget,
    draw_data : gpointer,
);

record Struct__GtkDrawingAreaClass (
    parent_class : GtkWidgetClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_drawing_area_get_type() CULong;

external gtk_drawing_area_new() Pointer[GtkWidget];

external gtk_drawing_area_size(
    darea : Pointer[GtkDrawingArea],
    width : Int,
    height : Int);

alias GtkEventBox = Struct__GtkEventBox;

alias GtkEventBoxClass = Struct__GtkEventBoxClass;

record Struct__GtkEventBox (
    bin : GtkBin,
);

record Struct__GtkEventBoxClass (
    parent_class : GtkBinClass,
);

external gtk_event_box_get_type() CULong;

external gtk_event_box_new() Pointer[GtkWidget];

external gtk_event_box_get_visible_window(
    event_box : Pointer[GtkEventBox]) Int;

external gtk_event_box_set_visible_window(
    event_box : Pointer[GtkEventBox],
    visible_window : Int);

external gtk_event_box_get_above_child(
    event_box : Pointer[GtkEventBox]) Int;

external gtk_event_box_set_above_child(
    event_box : Pointer[GtkEventBox],
    above_child : Int);

alias GtkExpander = Struct__GtkExpander;

alias GtkExpanderClass = Struct__GtkExpanderClass;

alias GtkExpanderPrivate = Opaque;

record Struct__GtkExpander (
    bin : GtkBin,
    priv : Pointer[GtkExpanderPrivate],
);

record Struct__GtkExpanderClass (
    parent_class : GtkBinClass,
    activate : CCodePointer[(Pointer[Struct__GtkExpander]),()],
);

external gtk_expander_get_type() CULong;

external gtk_expander_new(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_expander_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_expander_set_expanded(
    expander : Pointer[GtkExpander],
    expanded : Int);

external gtk_expander_get_expanded(
    expander : Pointer[GtkExpander]) Int;

external gtk_expander_set_spacing(
    expander : Pointer[GtkExpander],
    spacing : Int);

external gtk_expander_get_spacing(
    expander : Pointer[GtkExpander]) Int;

external gtk_expander_set_label(
    expander : Pointer[GtkExpander],
    label : Pointer[CChar]);

external gtk_expander_get_label(
    expander : Pointer[GtkExpander]) Pointer[CChar];

external gtk_expander_set_use_underline(
    expander : Pointer[GtkExpander],
    use_underline : Int);

external gtk_expander_get_use_underline(
    expander : Pointer[GtkExpander]) Int;

external gtk_expander_set_use_markup(
    expander : Pointer[GtkExpander],
    use_markup : Int);

external gtk_expander_get_use_markup(
    expander : Pointer[GtkExpander]) Int;

external gtk_expander_set_label_widget(
    expander : Pointer[GtkExpander],
    label_widget : Pointer[GtkWidget]);

external gtk_expander_get_label_widget(
    expander : Pointer[GtkExpander]) Pointer[GtkWidget];

external gtk_expander_set_label_fill(
    expander : Pointer[GtkExpander],
    label_fill : Int);

external gtk_expander_get_label_fill(
    expander : Pointer[GtkExpander]) Int;

alias GtkFixed = Struct__GtkFixed;

alias GtkFixedClass = Struct__GtkFixedClass;

alias GtkFixedChild = Struct__GtkFixedChild;

record Struct__GtkFixed (
    container : GtkContainer,
    children : Pointer[GList],
);

record Struct__GtkFixedClass (
    parent_class : GtkContainerClass,
);

record Struct__GtkFixedChild (
    widget : Pointer[GtkWidget],
    x : Int,
    y : Int,
);

external gtk_fixed_get_type() CULong;

external gtk_fixed_new() Pointer[GtkWidget];

external gtk_fixed_put(
    fixed : Pointer[GtkFixed],
    widget : Pointer[GtkWidget],
    x : Int,
    y : Int);

external gtk_fixed_move(
    fixed : Pointer[GtkFixed],
    widget : Pointer[GtkWidget],
    x : Int,
    y : Int);

external gtk_fixed_set_has_window(
    fixed : Pointer[GtkFixed],
    has_window : Int);

external gtk_fixed_get_has_window(
    fixed : Pointer[GtkFixed]) Int;

alias GtkFileFilter = Opaque;

alias GtkFileFilterInfo = Struct__GtkFileFilterInfo;

alias GTK_FILE_FILTER_FILENAME = 1;
alias GTK_FILE_FILTER_URI = 2;
alias GTK_FILE_FILTER_DISPLAY_NAME = 4;
alias GTK_FILE_FILTER_MIME_TYPE = 8;

alias GtkFileFilterFlags = Int;

alias GtkFileFilterFunc = CCodePointer[(Pointer[Struct__GtkFileFilterInfo],RawPointer),(Int)];

record Struct__GtkFileFilterInfo (
    contains : GtkFileFilterFlags,
    filename : Pointer[CChar],
    uri : Pointer[CChar],
    display_name : Pointer[CChar],
    mime_type : Pointer[CChar],
);

external gtk_file_filter_get_type() CULong;

external gtk_file_filter_new() Pointer[GtkFileFilter];

external gtk_file_filter_set_name(
    filter : Pointer[GtkFileFilter],
    name : Pointer[CChar]);

external gtk_file_filter_get_name(
    filter : Pointer[GtkFileFilter]) Pointer[CChar];

external gtk_file_filter_add_mime_type(
    filter : Pointer[GtkFileFilter],
    mime_type : Pointer[CChar]);

external gtk_file_filter_add_pattern(
    filter : Pointer[GtkFileFilter],
    pattern : Pointer[CChar]);

external gtk_file_filter_add_pixbuf_formats(
    filter : Pointer[GtkFileFilter]);

external gtk_file_filter_add_custom(
    filter : Pointer[GtkFileFilter],
    needed : GtkFileFilterFlags,
    func : GtkFileFilterFunc,
    data : gpointer,
    notify : GDestroyNotify);

external gtk_file_filter_get_needed(
    filter : Pointer[GtkFileFilter]) GtkFileFilterFlags;

external gtk_file_filter_filter(
    filter : Pointer[GtkFileFilter],
    filter_info : Pointer[GtkFileFilterInfo]) Int;

alias GtkFileChooser = Opaque;

alias GTK_FILE_CHOOSER_ACTION_OPEN = 0;
alias GTK_FILE_CHOOSER_ACTION_SAVE = 1;
alias GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = 2;
alias GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = 3;

alias GtkFileChooserAction = Int;

alias GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = 0;
alias GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = 1;
alias GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = 2;

alias GtkFileChooserConfirmation = Int;

external gtk_file_chooser_get_type() CULong;

alias GTK_FILE_CHOOSER_ERROR_NONEXISTENT = 0;
alias GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = 1;
alias GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2;
alias GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3;

alias GtkFileChooserError = Int;

external gtk_file_chooser_error_quark() UInt;

external gtk_file_chooser_set_action(
    chooser : Pointer[GtkFileChooser],
    action : GtkFileChooserAction);

external gtk_file_chooser_get_action(
    chooser : Pointer[GtkFileChooser]) GtkFileChooserAction;

external gtk_file_chooser_set_local_only(
    chooser : Pointer[GtkFileChooser],
    local_only : Int);

external gtk_file_chooser_get_local_only(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_set_select_multiple(
    chooser : Pointer[GtkFileChooser],
    select_multiple : Int);

external gtk_file_chooser_get_select_multiple(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_set_show_hidden(
    chooser : Pointer[GtkFileChooser],
    show_hidden : Int);

external gtk_file_chooser_get_show_hidden(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_set_do_overwrite_confirmation(
    chooser : Pointer[GtkFileChooser],
    do_overwrite_confirmation : Int);

external gtk_file_chooser_get_do_overwrite_confirmation(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_set_create_folders(
    chooser : Pointer[GtkFileChooser],
    create_folders : Int);

external gtk_file_chooser_get_create_folders(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_set_current_name(
    chooser : Pointer[GtkFileChooser],
    name : Pointer[CChar]);

external gtk_file_chooser_get_filename(
    chooser : Pointer[GtkFileChooser]) Pointer[CChar];

external gtk_file_chooser_set_filename(
    chooser : Pointer[GtkFileChooser],
    filename : Pointer[CChar]) Int;

external gtk_file_chooser_select_filename(
    chooser : Pointer[GtkFileChooser],
    filename : Pointer[CChar]) Int;

external gtk_file_chooser_unselect_filename(
    chooser : Pointer[GtkFileChooser],
    filename : Pointer[CChar]);

external gtk_file_chooser_select_all(
    chooser : Pointer[GtkFileChooser]);

external gtk_file_chooser_unselect_all(
    chooser : Pointer[GtkFileChooser]);

external gtk_file_chooser_get_filenames(
    chooser : Pointer[GtkFileChooser]) Pointer[GSList];

external gtk_file_chooser_set_current_folder(
    chooser : Pointer[GtkFileChooser],
    filename : Pointer[CChar]) Int;

external gtk_file_chooser_get_current_folder(
    chooser : Pointer[GtkFileChooser]) Pointer[CChar];

external gtk_file_chooser_get_uri(
    chooser : Pointer[GtkFileChooser]) Pointer[CChar];

external gtk_file_chooser_set_uri(
    chooser : Pointer[GtkFileChooser],
    uri : Pointer[CChar]) Int;

external gtk_file_chooser_select_uri(
    chooser : Pointer[GtkFileChooser],
    uri : Pointer[CChar]) Int;

external gtk_file_chooser_unselect_uri(
    chooser : Pointer[GtkFileChooser],
    uri : Pointer[CChar]);

external gtk_file_chooser_get_uris(
    chooser : Pointer[GtkFileChooser]) Pointer[GSList];

external gtk_file_chooser_set_current_folder_uri(
    chooser : Pointer[GtkFileChooser],
    uri : Pointer[CChar]) Int;

external gtk_file_chooser_get_current_folder_uri(
    chooser : Pointer[GtkFileChooser]) Pointer[CChar];

external gtk_file_chooser_get_file(
    chooser : Pointer[GtkFileChooser]) Pointer[GFile];

external gtk_file_chooser_set_file(
    chooser : Pointer[GtkFileChooser],
    file : Pointer[GFile],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_select_file(
    chooser : Pointer[GtkFileChooser],
    file : Pointer[GFile],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_unselect_file(
    chooser : Pointer[GtkFileChooser],
    file : Pointer[GFile]);

external gtk_file_chooser_get_files(
    chooser : Pointer[GtkFileChooser]) Pointer[GSList];

external gtk_file_chooser_set_current_folder_file(
    chooser : Pointer[GtkFileChooser],
    file : Pointer[GFile],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_get_current_folder_file(
    chooser : Pointer[GtkFileChooser]) Pointer[GFile];

external gtk_file_chooser_set_preview_widget(
    chooser : Pointer[GtkFileChooser],
    preview_widget : Pointer[GtkWidget]);

external gtk_file_chooser_get_preview_widget(
    chooser : Pointer[GtkFileChooser]) Pointer[GtkWidget];

external gtk_file_chooser_set_preview_widget_active(
    chooser : Pointer[GtkFileChooser],
    active : Int);

external gtk_file_chooser_get_preview_widget_active(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_set_use_preview_label(
    chooser : Pointer[GtkFileChooser],
    use_label : Int);

external gtk_file_chooser_get_use_preview_label(
    chooser : Pointer[GtkFileChooser]) Int;

external gtk_file_chooser_get_preview_filename(
    chooser : Pointer[GtkFileChooser]) Pointer[CChar];

external gtk_file_chooser_get_preview_uri(
    chooser : Pointer[GtkFileChooser]) Pointer[CChar];

external gtk_file_chooser_get_preview_file(
    chooser : Pointer[GtkFileChooser]) Pointer[GFile];

external gtk_file_chooser_set_extra_widget(
    chooser : Pointer[GtkFileChooser],
    extra_widget : Pointer[GtkWidget]);

external gtk_file_chooser_get_extra_widget(
    chooser : Pointer[GtkFileChooser]) Pointer[GtkWidget];

external gtk_file_chooser_add_filter(
    chooser : Pointer[GtkFileChooser],
    filter : Pointer[GtkFileFilter]);

external gtk_file_chooser_remove_filter(
    chooser : Pointer[GtkFileChooser],
    filter : Pointer[GtkFileFilter]);

external gtk_file_chooser_list_filters(
    chooser : Pointer[GtkFileChooser]) Pointer[GSList];

external gtk_file_chooser_set_filter(
    chooser : Pointer[GtkFileChooser],
    filter : Pointer[GtkFileFilter]);

external gtk_file_chooser_get_filter(
    chooser : Pointer[GtkFileChooser]) Pointer[GtkFileFilter];

external gtk_file_chooser_add_shortcut_folder(
    chooser : Pointer[GtkFileChooser],
    folder : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_remove_shortcut_folder(
    chooser : Pointer[GtkFileChooser],
    folder : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_list_shortcut_folders(
    chooser : Pointer[GtkFileChooser]) Pointer[GSList];

external gtk_file_chooser_add_shortcut_folder_uri(
    chooser : Pointer[GtkFileChooser],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_remove_shortcut_folder_uri(
    chooser : Pointer[GtkFileChooser],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_file_chooser_list_shortcut_folder_uris(
    chooser : Pointer[GtkFileChooser]) Pointer[GSList];

alias GtkHBox = Struct__GtkHBox;

alias GtkHBoxClass = Struct__GtkHBoxClass;

record Struct__GtkHBox (
    box : GtkBox,
);

record Struct__GtkHBoxClass (
    parent_class : GtkBoxClass,
);

external gtk_hbox_get_type() CULong;

external gtk_hbox_new(
    homogeneous : Int,
    spacing : Int) Pointer[GtkWidget];

alias GtkFileChooserButton = Struct__GtkFileChooserButton;

alias GtkFileChooserButtonPrivate = Opaque;

alias GtkFileChooserButtonClass = Struct__GtkFileChooserButtonClass;

record Struct__GtkFileChooserButton (
    parent : GtkHBox,
    priv : Pointer[GtkFileChooserButtonPrivate],
);

record Struct__GtkFileChooserButtonClass (
    parent_class : GtkHBoxClass,
    file_set : CCodePointer[(Pointer[Struct__GtkFileChooserButton]),()],
    __gtk_reserved1 : RawPointer,
    __gtk_reserved2 : RawPointer,
    __gtk_reserved3 : RawPointer,
    __gtk_reserved4 : RawPointer,
    __gtk_reserved5 : RawPointer,
    __gtk_reserved6 : RawPointer,
    __gtk_reserved7 : RawPointer,
);

external gtk_file_chooser_button_get_type() CULong;

external gtk_file_chooser_button_new(
    title : Pointer[CChar],
    action : GtkFileChooserAction) Pointer[GtkWidget];

external gtk_file_chooser_button_new_with_backend(
    title : Pointer[CChar],
    action : GtkFileChooserAction,
    backend : Pointer[CChar]) Pointer[GtkWidget];

external gtk_file_chooser_button_new_with_dialog(
    dialog : Pointer[GtkWidget]) Pointer[GtkWidget];

external gtk_file_chooser_button_get_title(
    button : Pointer[GtkFileChooserButton]) Pointer[CChar];

external gtk_file_chooser_button_set_title(
    button : Pointer[GtkFileChooserButton],
    title : Pointer[CChar]);

external gtk_file_chooser_button_get_width_chars(
    button : Pointer[GtkFileChooserButton]) Int;

external gtk_file_chooser_button_set_width_chars(
    button : Pointer[GtkFileChooserButton],
    n_chars : Int);

external gtk_file_chooser_button_get_focus_on_click(
    button : Pointer[GtkFileChooserButton]) Int;

external gtk_file_chooser_button_set_focus_on_click(
    button : Pointer[GtkFileChooserButton],
    focus_on_click : Int);

alias GtkFileChooserDialog = Struct__GtkFileChooserDialog;

alias GtkFileChooserDialogPrivate = Opaque;

alias GtkFileChooserDialogClass = Struct__GtkFileChooserDialogClass;

record Struct__GtkFileChooserDialog (
    parent_instance : GtkDialog,
    priv : Pointer[GtkFileChooserDialogPrivate],
);

record Struct__GtkFileChooserDialogClass (
    parent_class : GtkDialogClass,
);

external gtk_file_chooser_dialog_get_type() CULong;

external gtk_file_chooser_dialog_new(
    title : Pointer[CChar],
    parent : Pointer[GtkWindow],
    action : GtkFileChooserAction,
    first_button_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_file_chooser_dialog_new_with_backend(
    title : Pointer[CChar],
    parent : Pointer[GtkWindow],
    action : GtkFileChooserAction,
    backend : Pointer[CChar],
    first_button_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

alias GtkFileChooserWidget = Struct__GtkFileChooserWidget;

alias GtkFileChooserWidgetPrivate = Opaque;

alias GtkFileChooserWidgetClass = Struct__GtkFileChooserWidgetClass;

record Struct__GtkFileChooserWidget (
    parent_instance : GtkVBox,
    priv : Pointer[GtkFileChooserWidgetPrivate],
);

record Struct__GtkFileChooserWidgetClass (
    parent_class : GtkVBoxClass,
);

external gtk_file_chooser_widget_get_type() CULong;

external gtk_file_chooser_widget_new(
    action : GtkFileChooserAction) Pointer[GtkWidget];

external gtk_file_chooser_widget_new_with_backend(
    action : GtkFileChooserAction,
    backend : Pointer[CChar]) Pointer[GtkWidget];

alias GtkFontButton = Struct__GtkFontButton;

alias GtkFontButtonClass = Struct__GtkFontButtonClass;

alias GtkFontButtonPrivate = Opaque;

record Struct__GtkFontButton (
    button : GtkButton,
    priv : Pointer[GtkFontButtonPrivate],
);

record Struct__GtkFontButtonClass (
    parent_class : GtkButtonClass,
    font_set : CCodePointer[(Pointer[Struct__GtkFontButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_font_button_get_type() CULong;

external gtk_font_button_new() Pointer[GtkWidget];

external gtk_font_button_new_with_font(
    fontname : Pointer[CChar]) Pointer[GtkWidget];

external gtk_font_button_get_title(
    font_button : Pointer[GtkFontButton]) Pointer[CChar];

external gtk_font_button_set_title(
    font_button : Pointer[GtkFontButton],
    title : Pointer[CChar]);

external gtk_font_button_get_use_font(
    font_button : Pointer[GtkFontButton]) Int;

external gtk_font_button_set_use_font(
    font_button : Pointer[GtkFontButton],
    use_font : Int);

external gtk_font_button_get_use_size(
    font_button : Pointer[GtkFontButton]) Int;

external gtk_font_button_set_use_size(
    font_button : Pointer[GtkFontButton],
    use_size : Int);

external gtk_font_button_get_font_name(
    font_button : Pointer[GtkFontButton]) Pointer[CChar];

external gtk_font_button_set_font_name(
    font_button : Pointer[GtkFontButton],
    fontname : Pointer[CChar]) Int;

external gtk_font_button_get_show_style(
    font_button : Pointer[GtkFontButton]) Int;

external gtk_font_button_set_show_style(
    font_button : Pointer[GtkFontButton],
    show_style : Int);

external gtk_font_button_get_show_size(
    font_button : Pointer[GtkFontButton]) Int;

external gtk_font_button_set_show_size(
    font_button : Pointer[GtkFontButton],
    show_size : Int);

alias GtkFontSelection = Struct__GtkFontSelection;

alias GtkFontSelectionClass = Struct__GtkFontSelectionClass;

alias GtkFontSelectionDialog = Struct__GtkFontSelectionDialog;

alias GtkFontSelectionDialogClass = Struct__GtkFontSelectionDialogClass;

record Struct__GtkFontSelection (
    parent_instance : GtkVBox,
    font_entry : Pointer[GtkWidget],
    family_list : Pointer[GtkWidget],
    font_style_entry : Pointer[GtkWidget],
    face_list : Pointer[GtkWidget],
    size_entry : Pointer[GtkWidget],
    size_list : Pointer[GtkWidget],
    pixels_button : Pointer[GtkWidget],
    points_button : Pointer[GtkWidget],
    filter_button : Pointer[GtkWidget],
    preview_entry : Pointer[GtkWidget],
    family : Pointer[PangoFontFamily],
    face : Pointer[PangoFontFace],
    size : Int,
    font : Pointer[GdkFont],
);

record Struct__GtkFontSelectionClass (
    parent_class : GtkVBoxClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkFontSelectionDialog (
    parent_instance : GtkDialog,
    fontsel : Pointer[GtkWidget],
    main_vbox : Pointer[GtkWidget],
    action_area : Pointer[GtkWidget],
    ok_button : Pointer[GtkWidget],
    apply_button : Pointer[GtkWidget],
    cancel_button : Pointer[GtkWidget],
    dialog_width : Int,
    auto_resize : Int,
);

record Struct__GtkFontSelectionDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_font_selection_get_type() CULong;

external gtk_font_selection_new() Pointer[GtkWidget];

external gtk_font_selection_get_family_list(
    fontsel : Pointer[GtkFontSelection]) Pointer[GtkWidget];

external gtk_font_selection_get_face_list(
    fontsel : Pointer[GtkFontSelection]) Pointer[GtkWidget];

external gtk_font_selection_get_size_entry(
    fontsel : Pointer[GtkFontSelection]) Pointer[GtkWidget];

external gtk_font_selection_get_size_list(
    fontsel : Pointer[GtkFontSelection]) Pointer[GtkWidget];

external gtk_font_selection_get_preview_entry(
    fontsel : Pointer[GtkFontSelection]) Pointer[GtkWidget];

external gtk_font_selection_get_family(
    fontsel : Pointer[GtkFontSelection]) Pointer[PangoFontFamily];

external gtk_font_selection_get_face(
    fontsel : Pointer[GtkFontSelection]) Pointer[PangoFontFace];

external gtk_font_selection_get_size(
    fontsel : Pointer[GtkFontSelection]) Int;

external gtk_font_selection_get_font_name(
    fontsel : Pointer[GtkFontSelection]) Pointer[CChar];

external gtk_font_selection_get_font(
    fontsel : Pointer[GtkFontSelection]) Pointer[GdkFont];

external gtk_font_selection_set_font_name(
    fontsel : Pointer[GtkFontSelection],
    fontname : Pointer[CChar]) Int;

external gtk_font_selection_get_preview_text(
    fontsel : Pointer[GtkFontSelection]) Pointer[CChar];

external gtk_font_selection_set_preview_text(
    fontsel : Pointer[GtkFontSelection],
    text : Pointer[CChar]);

external gtk_font_selection_dialog_get_type() CULong;

external gtk_font_selection_dialog_new(
    title : Pointer[CChar]) Pointer[GtkWidget];

external gtk_font_selection_dialog_get_ok_button(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[GtkWidget];

external gtk_font_selection_dialog_get_apply_button(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[GtkWidget];

external gtk_font_selection_dialog_get_cancel_button(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[GtkWidget];

external gtk_font_selection_dialog_get_font_selection(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[GtkWidget];

external gtk_font_selection_dialog_get_font_name(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[CChar];

external gtk_font_selection_dialog_get_font(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[GdkFont];

external gtk_font_selection_dialog_set_font_name(
    fsd : Pointer[GtkFontSelectionDialog],
    fontname : Pointer[CChar]) Int;

external gtk_font_selection_dialog_get_preview_text(
    fsd : Pointer[GtkFontSelectionDialog]) Pointer[CChar];

external gtk_font_selection_dialog_set_preview_text(
    fsd : Pointer[GtkFontSelectionDialog],
    text : Pointer[CChar]);

external gtk_gc_get(
    depth : Int,
    colormap : Pointer[GdkColormap],
    values : Pointer[GdkGCValues],
    values_mask : GdkGCValuesMask) Pointer[GdkGC];

external gtk_gc_release(
    gc : Pointer[GdkGC]);

alias GtkHandleBox = Struct__GtkHandleBox;

alias GtkHandleBoxClass = Struct__GtkHandleBoxClass;

record Struct__GtkHandleBox (
    bin : GtkBin,
    bin_window : Pointer[GdkWindow],
    float_window : Pointer[GdkWindow],
    shadow_type : GtkShadowType,
    handle_position : UInt,
    float_window_mapped : UInt,
    child_detached : UInt,
    in_drag : UInt,
    shrink_on_detach : UInt,
    snap_edge : Int,
    deskoff_x : Int,
    deskoff_y : Int,
    attach_allocation : GtkAllocation,
    float_allocation : GtkAllocation,
);

record Struct__GtkHandleBoxClass (
    parent_class : GtkBinClass,
    child_attached : CCodePointer[(Pointer[Struct__GtkHandleBox],Pointer[Struct__GtkWidget]),()],
    child_detached : CCodePointer[(Pointer[Struct__GtkHandleBox],Pointer[Struct__GtkWidget]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_handle_box_get_type() CULong;

external gtk_handle_box_new() Pointer[GtkWidget];

external gtk_handle_box_set_shadow_type(
    handle_box : Pointer[GtkHandleBox],
    type : GtkShadowType);

external gtk_handle_box_get_shadow_type(
    handle_box : Pointer[GtkHandleBox]) GtkShadowType;

external gtk_handle_box_set_handle_position(
    handle_box : Pointer[GtkHandleBox],
    position : GtkPositionType);

external gtk_handle_box_get_handle_position(
    handle_box : Pointer[GtkHandleBox]) GtkPositionType;

external gtk_handle_box_set_snap_edge(
    handle_box : Pointer[GtkHandleBox],
    edge : GtkPositionType);

external gtk_handle_box_get_snap_edge(
    handle_box : Pointer[GtkHandleBox]) GtkPositionType;

external gtk_handle_box_get_child_detached(
    handle_box : Pointer[GtkHandleBox]) Int;

alias GtkHButtonBox = Struct__GtkHButtonBox;

alias GtkHButtonBoxClass = Struct__GtkHButtonBoxClass;

record Struct__GtkHButtonBox (
    button_box : GtkButtonBox,
);

record Struct__GtkHButtonBoxClass (
    parent_class : GtkButtonBoxClass,
);

external gtk_hbutton_box_get_type() CULong;

external gtk_hbutton_box_new() Pointer[GtkWidget];

external gtk_hbutton_box_get_spacing_default() Int;

external gtk_hbutton_box_get_layout_default() GtkButtonBoxStyle;

external gtk_hbutton_box_set_spacing_default(
    spacing : Int);

external gtk_hbutton_box_set_layout_default(
    layout : GtkButtonBoxStyle);

external _gtk_hbutton_box_get_layout_default() GtkButtonBoxStyle;

alias GtkPaned = Struct__GtkPaned;

alias GtkPanedClass = Struct__GtkPanedClass;

alias GtkPanedPrivate = Opaque;

record Struct__GtkPaned (
    container : GtkContainer,
    child1 : Pointer[GtkWidget],
    child2 : Pointer[GtkWidget],
    handle : Pointer[GdkWindow],
    xor_gc : Pointer[GdkGC],
    cursor_type : GdkCursorType,
    handle_pos : GdkRectangle,
    child1_size : Int,
    last_allocation : Int,
    min_position : Int,
    max_position : Int,
    position_set : UInt,
    in_drag : UInt,
    child1_shrink : UInt,
    child1_resize : UInt,
    child2_shrink : UInt,
    child2_resize : UInt,
    orientation : UInt,
    in_recursion : UInt,
    handle_prelit : UInt,
    last_child1_focus : Pointer[GtkWidget],
    last_child2_focus : Pointer[GtkWidget],
    priv : Pointer[GtkPanedPrivate],
    drag_pos : Int,
    original_position : Int,
);

record Struct__GtkPanedClass (
    parent_class : GtkContainerClass,
    cycle_child_focus : CCodePointer[(Pointer[Struct__GtkPaned],Int),(Int)],
    toggle_handle_focus : CCodePointer[(Pointer[Struct__GtkPaned]),(Int)],
    move_handle : CCodePointer[(Pointer[Struct__GtkPaned],Int),(Int)],
    cycle_handle_focus : CCodePointer[(Pointer[Struct__GtkPaned],Int),(Int)],
    accept_position : CCodePointer[(Pointer[Struct__GtkPaned]),(Int)],
    cancel_position : CCodePointer[(Pointer[Struct__GtkPaned]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_paned_get_type() CULong;

external gtk_paned_add1(
    paned : Pointer[GtkPaned],
    child : Pointer[GtkWidget]);

external gtk_paned_add2(
    paned : Pointer[GtkPaned],
    child : Pointer[GtkWidget]);

external gtk_paned_pack1(
    paned : Pointer[GtkPaned],
    child : Pointer[GtkWidget],
    resize : Int,
    shrink : Int);

external gtk_paned_pack2(
    paned : Pointer[GtkPaned],
    child : Pointer[GtkWidget],
    resize : Int,
    shrink : Int);

external gtk_paned_get_position(
    paned : Pointer[GtkPaned]) Int;

external gtk_paned_set_position(
    paned : Pointer[GtkPaned],
    position : Int);

external gtk_paned_get_child1(
    paned : Pointer[GtkPaned]) Pointer[GtkWidget];

external gtk_paned_get_child2(
    paned : Pointer[GtkPaned]) Pointer[GtkWidget];

external gtk_paned_get_handle_window(
    paned : Pointer[GtkPaned]) Pointer[GdkWindow];

external gtk_paned_compute_position(
    paned : Pointer[GtkPaned],
    allocation : Int,
    child1_req : Int,
    child2_req : Int);

alias GtkHPaned = Struct__GtkHPaned;

alias GtkHPanedClass = Struct__GtkHPanedClass;

record Struct__GtkHPaned (
    paned : GtkPaned,
);

record Struct__GtkHPanedClass (
    parent_class : GtkPanedClass,
);

external gtk_hpaned_get_type() CULong;

external gtk_hpaned_new() Pointer[GtkWidget];

alias GtkRuler = Struct__GtkRuler;

alias GtkRulerClass = Struct__GtkRulerClass;

alias GtkRulerMetric = Struct__GtkRulerMetric;

record Struct__GtkRuler (
    widget : GtkWidget,
    backing_store : Pointer[GdkPixmap],
    non_gr_exp_gc : Pointer[GdkGC],
    metric : Pointer[GtkRulerMetric],
    xsrc : Int,
    ysrc : Int,
    slider_size : Int,
    lower : Double,
    upper : Double,
    position : Double,
    max_size : Double,
);

record Struct__GtkRulerClass (
    parent_class : GtkWidgetClass,
    draw_ticks : CCodePointer[(Pointer[Struct__GtkRuler]),()],
    draw_pos : CCodePointer[(Pointer[Struct__GtkRuler]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkRulerMetric (
    metric_name : Pointer[CChar],
    abbrev : Pointer[CChar],
    pixels_per_unit : Double,
    ruler_scale : Array[Double,10],
    subdivide : Array[Int,5],
);

external gtk_ruler_get_type() CULong;

external gtk_ruler_set_metric(
    ruler : Pointer[GtkRuler],
    metric : GtkMetricType);

external gtk_ruler_get_metric(
    ruler : Pointer[GtkRuler]) GtkMetricType;

external gtk_ruler_set_range(
    ruler : Pointer[GtkRuler],
    lower : Double,
    upper : Double,
    position : Double,
    max_size : Double);

external gtk_ruler_get_range(
    ruler : Pointer[GtkRuler],
    lower : Pointer[Double],
    upper : Pointer[Double],
    position : Pointer[Double],
    max_size : Pointer[Double]);

external gtk_ruler_draw_ticks(
    ruler : Pointer[GtkRuler]);

external gtk_ruler_draw_pos(
    ruler : Pointer[GtkRuler]);

alias GtkHRuler = Struct__GtkHRuler;

alias GtkHRulerClass = Struct__GtkHRulerClass;

record Struct__GtkHRuler (
    ruler : GtkRuler,
);

record Struct__GtkHRulerClass (
    parent_class : GtkRulerClass,
);

external gtk_hruler_get_type() CULong;

external gtk_hruler_new() Pointer[GtkWidget];

alias GtkRangeLayout = Opaque;

alias GtkRangeStepTimer = Opaque;

alias GtkRange = Struct__GtkRange;

alias GtkRangeClass = Struct__GtkRangeClass;

record Struct__GtkRange (
    widget : GtkWidget,
    adjustment : Pointer[GtkAdjustment],
    update_policy : GtkUpdateType,
    inverted : UInt,
    flippable : UInt,
    has_stepper_a : UInt,
    has_stepper_b : UInt,
    has_stepper_c : UInt,
    has_stepper_d : UInt,
    need_recalc : UInt,
    slider_size_fixed : UInt,
    min_slider_size : Int,
    orientation : GtkOrientation,
    range_rect : GdkRectangle,
    slider_start : Int,
    slider_end : Int,
    round_digits : Int,
    trough_click_forward : UInt,
    update_pending : UInt,
    layout : Pointer[GtkRangeLayout],
    timer : Pointer[GtkRangeStepTimer],
    slide_initial_slider_position : Int,
    slide_initial_coordinate : Int,
    update_timeout_id : UInt,
    event_window : Pointer[GdkWindow],
);

record Struct__GtkRangeClass (
    parent_class : GtkWidgetClass,
    slider_detail : Pointer[CChar],
    stepper_detail : Pointer[CChar],
    value_changed : CCodePointer[(Pointer[Struct__GtkRange]),()],
    adjust_bounds : CCodePointer[(Pointer[Struct__GtkRange],Double),()],
    move_slider : CCodePointer[(Pointer[Struct__GtkRange],Int),()],
    get_range_border : CCodePointer[(Pointer[Struct__GtkRange],Pointer[Struct__GtkBorder]),()],
    change_value : CCodePointer[(Pointer[Struct__GtkRange],Int,Double),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_range_get_type() CULong;

external gtk_range_set_update_policy(
    range : Pointer[GtkRange],
    policy : GtkUpdateType);

external gtk_range_get_update_policy(
    range : Pointer[GtkRange]) GtkUpdateType;

external gtk_range_set_adjustment(
    range : Pointer[GtkRange],
    adjustment : Pointer[GtkAdjustment]);

external gtk_range_get_adjustment(
    range : Pointer[GtkRange]) Pointer[GtkAdjustment];

external gtk_range_set_inverted(
    range : Pointer[GtkRange],
    setting : Int);

external gtk_range_get_inverted(
    range : Pointer[GtkRange]) Int;

external gtk_range_set_flippable(
    range : Pointer[GtkRange],
    flippable : Int);

external gtk_range_get_flippable(
    range : Pointer[GtkRange]) Int;

external gtk_range_set_slider_size_fixed(
    range : Pointer[GtkRange],
    size_fixed : Int);

external gtk_range_get_slider_size_fixed(
    range : Pointer[GtkRange]) Int;

external gtk_range_set_min_slider_size(
    range : Pointer[GtkRange],
    min_size : Int);

external gtk_range_get_min_slider_size(
    range : Pointer[GtkRange]) Int;

external gtk_range_get_range_rect(
    range : Pointer[GtkRange],
    range_rect : Pointer[GdkRectangle]);

external gtk_range_get_slider_range(
    range : Pointer[GtkRange],
    slider_start : Pointer[Int],
    slider_end : Pointer[Int]);

external gtk_range_set_lower_stepper_sensitivity(
    range : Pointer[GtkRange],
    sensitivity : GtkSensitivityType);

external gtk_range_get_lower_stepper_sensitivity(
    range : Pointer[GtkRange]) GtkSensitivityType;

external gtk_range_set_upper_stepper_sensitivity(
    range : Pointer[GtkRange],
    sensitivity : GtkSensitivityType);

external gtk_range_get_upper_stepper_sensitivity(
    range : Pointer[GtkRange]) GtkSensitivityType;

external gtk_range_set_increments(
    range : Pointer[GtkRange],
    step : Double,
    page : Double);

external gtk_range_set_range(
    range : Pointer[GtkRange],
    min : Double,
    max : Double);

external gtk_range_set_value(
    range : Pointer[GtkRange],
    value : Double);

external gtk_range_get_value(
    range : Pointer[GtkRange]) Double;

external gtk_range_set_show_fill_level(
    range : Pointer[GtkRange],
    show_fill_level : Int);

external gtk_range_get_show_fill_level(
    range : Pointer[GtkRange]) Int;

external gtk_range_set_restrict_to_fill_level(
    range : Pointer[GtkRange],
    restrict_to_fill_level : Int);

external gtk_range_get_restrict_to_fill_level(
    range : Pointer[GtkRange]) Int;

external gtk_range_set_fill_level(
    range : Pointer[GtkRange],
    fill_level : Double);

external gtk_range_get_fill_level(
    range : Pointer[GtkRange]) Double;

external _gtk_range_get_wheel_delta(
    range : Pointer[GtkRange],
    direction : GdkScrollDirection) Double;

external _gtk_range_set_stop_values(
    range : Pointer[GtkRange],
    values : Pointer[Double],
    n_values : Int);

external _gtk_range_get_stop_positions(
    range : Pointer[GtkRange],
    values : Pointer[Pointer[Int]]) Int;

alias GtkScale = Struct__GtkScale;

alias GtkScaleClass = Struct__GtkScaleClass;

record Struct__GtkScale (
    range : GtkRange,
    digits : Int,
    draw_value : UInt,
    value_pos : UInt,
);

record Struct__GtkScaleClass (
    parent_class : GtkRangeClass,
    format_value : CCodePointer[(Pointer[Struct__GtkScale],Double),(Pointer[CChar])],
    draw_value : CCodePointer[(Pointer[Struct__GtkScale]),()],
    get_layout_offsets : CCodePointer[(Pointer[Struct__GtkScale],Pointer[Int],Pointer[Int]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_scale_get_type() CULong;

external gtk_scale_set_digits(
    scale : Pointer[GtkScale],
    digits : Int);

external gtk_scale_get_digits(
    scale : Pointer[GtkScale]) Int;

external gtk_scale_set_draw_value(
    scale : Pointer[GtkScale],
    draw_value : Int);

external gtk_scale_get_draw_value(
    scale : Pointer[GtkScale]) Int;

external gtk_scale_set_value_pos(
    scale : Pointer[GtkScale],
    pos : GtkPositionType);

external gtk_scale_get_value_pos(
    scale : Pointer[GtkScale]) GtkPositionType;

external gtk_scale_get_layout(
    scale : Pointer[GtkScale]) Pointer[PangoLayout];

external gtk_scale_get_layout_offsets(
    scale : Pointer[GtkScale],
    x : Pointer[Int],
    y : Pointer[Int]);

external gtk_scale_add_mark(
    scale : Pointer[GtkScale],
    value : Double,
    position : GtkPositionType,
    markup : Pointer[CChar]);

external gtk_scale_clear_marks(
    scale : Pointer[GtkScale]);

external _gtk_scale_clear_layout(
    scale : Pointer[GtkScale]);

external _gtk_scale_get_value_size(
    scale : Pointer[GtkScale],
    width : Pointer[Int],
    height : Pointer[Int]);

external _gtk_scale_format_value(
    scale : Pointer[GtkScale],
    value : Double) Pointer[CChar];

alias GtkHScale = Struct__GtkHScale;

alias GtkHScaleClass = Struct__GtkHScaleClass;

record Struct__GtkHScale (
    scale : GtkScale,
);

record Struct__GtkHScaleClass (
    parent_class : GtkScaleClass,
);

external gtk_hscale_get_type() CULong;

external gtk_hscale_new(
    adjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

external gtk_hscale_new_with_range(
    min : Double,
    max : Double,
    step : Double) Pointer[GtkWidget];

alias GtkScrollbar = Struct__GtkScrollbar;

alias GtkScrollbarClass = Struct__GtkScrollbarClass;

record Struct__GtkScrollbar (
    range : GtkRange,
);

record Struct__GtkScrollbarClass (
    parent_class : GtkRangeClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_scrollbar_get_type() CULong;

alias GtkHScrollbar = Struct__GtkHScrollbar;

alias GtkHScrollbarClass = Struct__GtkHScrollbarClass;

record Struct__GtkHScrollbar (
    scrollbar : GtkScrollbar,
);

record Struct__GtkHScrollbarClass (
    parent_class : GtkScrollbarClass,
);

external gtk_hscrollbar_get_type() CULong;

external gtk_hscrollbar_new(
    adjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

alias GtkSeparator = Struct__GtkSeparator;

alias GtkSeparatorClass = Struct__GtkSeparatorClass;

record Struct__GtkSeparator (
    widget : GtkWidget,
);

record Struct__GtkSeparatorClass (
    parent_class : GtkWidgetClass,
);

external gtk_separator_get_type() CULong;

alias GtkHSeparator = Struct__GtkHSeparator;

alias GtkHSeparatorClass = Struct__GtkHSeparatorClass;

record Struct__GtkHSeparator (
    separator : GtkSeparator,
);

record Struct__GtkHSeparatorClass (
    parent_class : GtkSeparatorClass,
);

external gtk_hseparator_get_type() CULong;

external gtk_hseparator_new() Pointer[GtkWidget];

alias GtkHSV = Struct__GtkHSV;

alias GtkHSVClass = Struct__GtkHSVClass;

record Struct__GtkHSV (
    parent_instance : GtkWidget,
    priv : gpointer,
);

record Struct__GtkHSVClass (
    parent_class : GtkWidgetClass,
    changed : CCodePointer[(Pointer[Struct__GtkHSV]),()],
    move : CCodePointer[(Pointer[Struct__GtkHSV],Int),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_hsv_get_type() CULong;

external gtk_hsv_new() Pointer[GtkWidget];

external gtk_hsv_set_color(
    hsv : Pointer[GtkHSV],
    h : Double,
    s : Double,
    v : Double);

external gtk_hsv_get_color(
    hsv : Pointer[GtkHSV],
    h : Pointer[Double],
    s : Pointer[Double],
    v : Pointer[Double]);

external gtk_hsv_set_metrics(
    hsv : Pointer[GtkHSV],
    size : Int,
    ring_width : Int);

external gtk_hsv_get_metrics(
    hsv : Pointer[GtkHSV],
    size : Pointer[Int],
    ring_width : Pointer[Int]);

external gtk_hsv_is_adjusting(
    hsv : Pointer[GtkHSV]) Int;

external gtk_hsv_to_rgb(
    h : Double,
    s : Double,
    v : Double,
    r : Pointer[Double],
    g : Pointer[Double],
    b : Pointer[Double]);

external gtk_rgb_to_hsv(
    r : Double,
    g : Double,
    b : Double,
    h : Pointer[Double],
    s : Pointer[Double],
    v : Pointer[Double]);

alias GtkIconFactoryClass = Struct__GtkIconFactoryClass;

record Struct__GtkIconFactory (
    parent_instance : GObject,
    icons : Pointer[GHashTable],
);

record Struct__GtkIconFactoryClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_icon_factory_get_type() CULong;

external gtk_icon_factory_new() Pointer[GtkIconFactory];

external gtk_icon_factory_add(
    factory : Pointer[GtkIconFactory],
    stock_id : Pointer[CChar],
    icon_set : Pointer[GtkIconSet]);

external gtk_icon_factory_lookup(
    factory : Pointer[GtkIconFactory],
    stock_id : Pointer[CChar]) Pointer[GtkIconSet];

external gtk_icon_factory_add_default(
    factory : Pointer[GtkIconFactory]);

external gtk_icon_factory_remove_default(
    factory : Pointer[GtkIconFactory]);

external gtk_icon_factory_lookup_default(
    stock_id : Pointer[CChar]) Pointer[GtkIconSet];

external gtk_icon_size_lookup(
    size : GtkIconSize,
    width : Pointer[Int],
    height : Pointer[Int]) Int;

external gtk_icon_size_lookup_for_settings(
    settings : Pointer[GtkSettings],
    size : GtkIconSize,
    width : Pointer[Int],
    height : Pointer[Int]) Int;

external gtk_icon_size_register(
    name : Pointer[CChar],
    width : Int,
    height : Int) GtkIconSize;

external gtk_icon_size_register_alias(
    alias_ : Pointer[CChar],
    target : GtkIconSize);

external gtk_icon_size_from_name(
    name : Pointer[CChar]) GtkIconSize;

external gtk_icon_size_get_name(
    size : GtkIconSize) Pointer[CChar];

external gtk_icon_set_get_type() CULong;

external gtk_icon_set_new() Pointer[GtkIconSet];

external gtk_icon_set_new_from_pixbuf(
    pixbuf : Pointer[GdkPixbuf]) Pointer[GtkIconSet];

external gtk_icon_set_ref(
    icon_set : Pointer[GtkIconSet]) Pointer[GtkIconSet];

external gtk_icon_set_unref(
    icon_set : Pointer[GtkIconSet]);

external gtk_icon_set_copy(
    icon_set : Pointer[GtkIconSet]) Pointer[GtkIconSet];

external gtk_icon_set_render_icon(
    icon_set : Pointer[GtkIconSet],
    style : Pointer[GtkStyle],
    direction : GtkTextDirection,
    state : GtkStateType,
    size : GtkIconSize,
    widget : Pointer[GtkWidget],
    detail : Pointer[CChar]) Pointer[GdkPixbuf];

external gtk_icon_set_add_source(
    icon_set : Pointer[GtkIconSet],
    source : Pointer[GtkIconSource]);

external gtk_icon_set_get_sizes(
    icon_set : Pointer[GtkIconSet],
    sizes : Pointer[Pointer[GtkIconSize]],
    n_sizes : Pointer[Int]);

external gtk_icon_source_get_type() CULong;

external gtk_icon_source_new() Pointer[GtkIconSource];

external gtk_icon_source_copy(
    source : Pointer[GtkIconSource]) Pointer[GtkIconSource];

external gtk_icon_source_free(
    source : Pointer[GtkIconSource]);

external gtk_icon_source_set_filename(
    source : Pointer[GtkIconSource],
    filename : Pointer[CChar]);

external gtk_icon_source_set_icon_name(
    source : Pointer[GtkIconSource],
    icon_name : Pointer[CChar]);

external gtk_icon_source_set_pixbuf(
    source : Pointer[GtkIconSource],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_icon_source_get_filename(
    source : Pointer[GtkIconSource]) Pointer[CChar];

external gtk_icon_source_get_icon_name(
    source : Pointer[GtkIconSource]) Pointer[CChar];

external gtk_icon_source_get_pixbuf(
    source : Pointer[GtkIconSource]) Pointer[GdkPixbuf];

external gtk_icon_source_set_direction_wildcarded(
    source : Pointer[GtkIconSource],
    setting : Int);

external gtk_icon_source_set_state_wildcarded(
    source : Pointer[GtkIconSource],
    setting : Int);

external gtk_icon_source_set_size_wildcarded(
    source : Pointer[GtkIconSource],
    setting : Int);

external gtk_icon_source_get_size_wildcarded(
    source : Pointer[GtkIconSource]) Int;

external gtk_icon_source_get_state_wildcarded(
    source : Pointer[GtkIconSource]) Int;

external gtk_icon_source_get_direction_wildcarded(
    source : Pointer[GtkIconSource]) Int;

external gtk_icon_source_set_direction(
    source : Pointer[GtkIconSource],
    direction : GtkTextDirection);

external gtk_icon_source_set_state(
    source : Pointer[GtkIconSource],
    state : GtkStateType);

external gtk_icon_source_set_size(
    source : Pointer[GtkIconSource],
    size : GtkIconSize);

external gtk_icon_source_get_direction(
    source : Pointer[GtkIconSource]) GtkTextDirection;

external gtk_icon_source_get_state(
    source : Pointer[GtkIconSource]) GtkStateType;

external gtk_icon_source_get_size(
    source : Pointer[GtkIconSource]) GtkIconSize;

external _gtk_icon_set_invalidate_caches();

external _gtk_icon_factory_list_ids() Pointer[GList];

external _gtk_icon_factory_ensure_default_icons();

alias GtkIconInfo = Opaque;

alias GtkIconTheme = Struct__GtkIconTheme;

alias GtkIconThemeClass = Struct__GtkIconThemeClass;

alias GtkIconThemePrivate = Opaque;

record Struct__GtkIconTheme (
    parent_instance : GObject,
    priv : Pointer[GtkIconThemePrivate],
);

record Struct__GtkIconThemeClass (
    parent_class : GObjectClass,
    changed : CCodePointer[(Pointer[Struct__GtkIconTheme]),()],
);

alias GTK_ICON_LOOKUP_NO_SVG = 1;
alias GTK_ICON_LOOKUP_FORCE_SVG = 2;
alias GTK_ICON_LOOKUP_USE_BUILTIN = 4;
alias GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8;
alias GTK_ICON_LOOKUP_FORCE_SIZE = 16;

alias GtkIconLookupFlags = Int;

alias GTK_ICON_THEME_NOT_FOUND = 0;
alias GTK_ICON_THEME_FAILED = 1;

alias GtkIconThemeError = Int;

external gtk_icon_theme_error_quark() UInt;

external gtk_icon_theme_get_type() CULong;

external gtk_icon_theme_new() Pointer[GtkIconTheme];

external gtk_icon_theme_get_default() Pointer[GtkIconTheme];

external gtk_icon_theme_get_for_screen(
    screen : Pointer[GdkScreen]) Pointer[GtkIconTheme];

external gtk_icon_theme_set_screen(
    icon_theme : Pointer[GtkIconTheme],
    screen : Pointer[GdkScreen]);

external gtk_icon_theme_set_search_path(
    icon_theme : Pointer[GtkIconTheme],
    path : Pointer[Pointer[CChar]],
    n_elements : Int);

external gtk_icon_theme_get_search_path(
    icon_theme : Pointer[GtkIconTheme],
    path : Pointer[Pointer[Pointer[CChar]]],
    n_elements : Pointer[Int]);

external gtk_icon_theme_append_search_path(
    icon_theme : Pointer[GtkIconTheme],
    path : Pointer[CChar]);

external gtk_icon_theme_prepend_search_path(
    icon_theme : Pointer[GtkIconTheme],
    path : Pointer[CChar]);

external gtk_icon_theme_set_custom_theme(
    icon_theme : Pointer[GtkIconTheme],
    theme_name : Pointer[CChar]);

external gtk_icon_theme_has_icon(
    icon_theme : Pointer[GtkIconTheme],
    icon_name : Pointer[CChar]) Int;

external gtk_icon_theme_get_icon_sizes(
    icon_theme : Pointer[GtkIconTheme],
    icon_name : Pointer[CChar]) Pointer[Int];

external gtk_icon_theme_lookup_icon(
    icon_theme : Pointer[GtkIconTheme],
    icon_name : Pointer[CChar],
    size : Int,
    flags : GtkIconLookupFlags) Pointer[GtkIconInfo];

external gtk_icon_theme_choose_icon(
    icon_theme : Pointer[GtkIconTheme],
    icon_names : Pointer[Pointer[CChar]],
    size : Int,
    flags : GtkIconLookupFlags) Pointer[GtkIconInfo];

external gtk_icon_theme_load_icon(
    icon_theme : Pointer[GtkIconTheme],
    icon_name : Pointer[CChar],
    size : Int,
    flags : GtkIconLookupFlags,
    error : Pointer[Pointer[GError]]) Pointer[GdkPixbuf];

external gtk_icon_theme_lookup_by_gicon(
    icon_theme : Pointer[GtkIconTheme],
    icon : Pointer[GIcon],
    size : Int,
    flags : GtkIconLookupFlags) Pointer[GtkIconInfo];

external gtk_icon_theme_list_icons(
    icon_theme : Pointer[GtkIconTheme],
    context : Pointer[CChar]) Pointer[GList];

external gtk_icon_theme_list_contexts(
    icon_theme : Pointer[GtkIconTheme]) Pointer[GList];

external gtk_icon_theme_get_example_icon_name(
    icon_theme : Pointer[GtkIconTheme]) Pointer[CChar];

external gtk_icon_theme_rescan_if_needed(
    icon_theme : Pointer[GtkIconTheme]) Int;

external gtk_icon_theme_add_builtin_icon(
    icon_name : Pointer[CChar],
    size : Int,
    pixbuf : Pointer[GdkPixbuf]);

external gtk_icon_info_get_type() CULong;

external gtk_icon_info_copy(
    icon_info : Pointer[GtkIconInfo]) Pointer[GtkIconInfo];

external gtk_icon_info_free(
    icon_info : Pointer[GtkIconInfo]);

external gtk_icon_info_new_for_pixbuf(
    icon_theme : Pointer[GtkIconTheme],
    pixbuf : Pointer[GdkPixbuf]) Pointer[GtkIconInfo];

external gtk_icon_info_get_base_size(
    icon_info : Pointer[GtkIconInfo]) Int;

external gtk_icon_info_get_filename(
    icon_info : Pointer[GtkIconInfo]) Pointer[CChar];

external gtk_icon_info_get_builtin_pixbuf(
    icon_info : Pointer[GtkIconInfo]) Pointer[GdkPixbuf];

external gtk_icon_info_load_icon(
    icon_info : Pointer[GtkIconInfo],
    error : Pointer[Pointer[GError]]) Pointer[GdkPixbuf];

external gtk_icon_info_set_raw_coordinates(
    icon_info : Pointer[GtkIconInfo],
    raw_coordinates : Int);

external gtk_icon_info_get_embedded_rect(
    icon_info : Pointer[GtkIconInfo],
    rectangle : Pointer[GdkRectangle]) Int;

external gtk_icon_info_get_attach_points(
    icon_info : Pointer[GtkIconInfo],
    points : Pointer[Pointer[GdkPoint]],
    n_points : Pointer[Int]) Int;

external gtk_icon_info_get_display_name(
    icon_info : Pointer[GtkIconInfo]) Pointer[CChar];

external _gtk_icon_theme_check_reload(
    display : Pointer[GdkDisplay]);

external _gtk_icon_theme_ensure_builtin_cache();

external gtk_tooltip_get_type() CULong;

external gtk_tooltip_set_markup(
    tooltip : Pointer[GtkTooltip],
    markup : Pointer[CChar]);

external gtk_tooltip_set_text(
    tooltip : Pointer[GtkTooltip],
    text : Pointer[CChar]);

external gtk_tooltip_set_icon(
    tooltip : Pointer[GtkTooltip],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_tooltip_set_icon_from_stock(
    tooltip : Pointer[GtkTooltip],
    stock_id : Pointer[CChar],
    size : GtkIconSize);

external gtk_tooltip_set_icon_from_icon_name(
    tooltip : Pointer[GtkTooltip],
    icon_name : Pointer[CChar],
    size : GtkIconSize);

external gtk_tooltip_set_icon_from_gicon(
    tooltip : Pointer[GtkTooltip],
    gicon : Pointer[GIcon],
    size : GtkIconSize);

external gtk_tooltip_set_custom(
    tooltip : Pointer[GtkTooltip],
    custom_widget : Pointer[GtkWidget]);

external gtk_tooltip_set_tip_area(
    tooltip : Pointer[GtkTooltip],
    rect : Pointer[GdkRectangle]);

external gtk_tooltip_trigger_tooltip_query(
    display : Pointer[GdkDisplay]);

external _gtk_tooltip_focus_in(
    widget : Pointer[GtkWidget]);

external _gtk_tooltip_focus_out(
    widget : Pointer[GtkWidget]);

external _gtk_tooltip_toggle_keyboard_mode(
    widget : Pointer[GtkWidget]);

external _gtk_tooltip_handle_event(
    event : Pointer[GdkEvent]);

external _gtk_tooltip_hide(
    widget : Pointer[GtkWidget]);

external _gtk_widget_find_at_coords(
    window : Pointer[GdkWindow],
    window_x : Int,
    window_y : Int,
    widget_x : Pointer[Int],
    widget_y : Pointer[Int]) Pointer[GtkWidget];

alias GtkIconView = Struct__GtkIconView;

alias GtkIconViewClass = Struct__GtkIconViewClass;

alias GtkIconViewPrivate = Opaque;

alias GtkIconViewForeachFunc = CCodePointer[(Pointer[Struct__GtkIconView],OpaquePointer,RawPointer),()];

alias GTK_ICON_VIEW_NO_DROP = 0;
alias GTK_ICON_VIEW_DROP_INTO = 1;
alias GTK_ICON_VIEW_DROP_LEFT = 2;
alias GTK_ICON_VIEW_DROP_RIGHT = 3;
alias GTK_ICON_VIEW_DROP_ABOVE = 4;
alias GTK_ICON_VIEW_DROP_BELOW = 5;

alias GtkIconViewDropPosition = Int;

record Struct__GtkIconView (
    parent : GtkContainer,
    priv : Pointer[GtkIconViewPrivate],
);

record Struct__GtkIconViewClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkIconView],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
    item_activated : CCodePointer[(Pointer[Struct__GtkIconView],OpaquePointer),()],
    selection_changed : CCodePointer[(Pointer[Struct__GtkIconView]),()],
    select_all : CCodePointer[(Pointer[Struct__GtkIconView]),()],
    unselect_all : CCodePointer[(Pointer[Struct__GtkIconView]),()],
    select_cursor_item : CCodePointer[(Pointer[Struct__GtkIconView]),()],
    toggle_cursor_item : CCodePointer[(Pointer[Struct__GtkIconView]),()],
    move_cursor : CCodePointer[(Pointer[Struct__GtkIconView],Int,Int),(Int)],
    activate_cursor_item : CCodePointer[(Pointer[Struct__GtkIconView]),(Int)],
);

external gtk_icon_view_get_type() CULong;

external gtk_icon_view_new() Pointer[GtkWidget];

external gtk_icon_view_new_with_model(
    model : Pointer[GtkTreeModel]) Pointer[GtkWidget];

external gtk_icon_view_set_model(
    icon_view : Pointer[GtkIconView],
    model : Pointer[GtkTreeModel]);

external gtk_icon_view_get_model(
    icon_view : Pointer[GtkIconView]) Pointer[GtkTreeModel];

external gtk_icon_view_set_text_column(
    icon_view : Pointer[GtkIconView],
    column : Int);

external gtk_icon_view_get_text_column(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_markup_column(
    icon_view : Pointer[GtkIconView],
    column : Int);

external gtk_icon_view_get_markup_column(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_pixbuf_column(
    icon_view : Pointer[GtkIconView],
    column : Int);

external gtk_icon_view_get_pixbuf_column(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_orientation(
    icon_view : Pointer[GtkIconView],
    orientation : GtkOrientation);

external gtk_icon_view_get_orientation(
    icon_view : Pointer[GtkIconView]) GtkOrientation;

external gtk_icon_view_set_item_orientation(
    icon_view : Pointer[GtkIconView],
    orientation : GtkOrientation);

external gtk_icon_view_get_item_orientation(
    icon_view : Pointer[GtkIconView]) GtkOrientation;

external gtk_icon_view_set_columns(
    icon_view : Pointer[GtkIconView],
    columns : Int);

external gtk_icon_view_get_columns(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_item_width(
    icon_view : Pointer[GtkIconView],
    item_width : Int);

external gtk_icon_view_get_item_width(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_spacing(
    icon_view : Pointer[GtkIconView],
    spacing : Int);

external gtk_icon_view_get_spacing(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_row_spacing(
    icon_view : Pointer[GtkIconView],
    row_spacing : Int);

external gtk_icon_view_get_row_spacing(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_column_spacing(
    icon_view : Pointer[GtkIconView],
    column_spacing : Int);

external gtk_icon_view_get_column_spacing(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_margin(
    icon_view : Pointer[GtkIconView],
    margin : Int);

external gtk_icon_view_get_margin(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_item_padding(
    icon_view : Pointer[GtkIconView],
    item_padding : Int);

external gtk_icon_view_get_item_padding(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_get_path_at_pos(
    icon_view : Pointer[GtkIconView],
    x : Int,
    y : Int) Pointer[GtkTreePath];

external gtk_icon_view_get_item_at_pos(
    icon_view : Pointer[GtkIconView],
    x : Int,
    y : Int,
    path : Pointer[Pointer[GtkTreePath]],
    cell : Pointer[Pointer[GtkCellRenderer]]) Int;

external gtk_icon_view_get_visible_range(
    icon_view : Pointer[GtkIconView],
    start_path : Pointer[Pointer[GtkTreePath]],
    end_path : Pointer[Pointer[GtkTreePath]]) Int;

external gtk_icon_view_selected_foreach(
    icon_view : Pointer[GtkIconView],
    func : GtkIconViewForeachFunc,
    data : gpointer);

external gtk_icon_view_set_selection_mode(
    icon_view : Pointer[GtkIconView],
    mode : GtkSelectionMode);

external gtk_icon_view_get_selection_mode(
    icon_view : Pointer[GtkIconView]) GtkSelectionMode;

external gtk_icon_view_select_path(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]);

external gtk_icon_view_unselect_path(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]);

external gtk_icon_view_path_is_selected(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]) Int;

external gtk_icon_view_get_item_row(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]) Int;

external gtk_icon_view_get_item_column(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]) Int;

external gtk_icon_view_get_selected_items(
    icon_view : Pointer[GtkIconView]) Pointer[GList];

external gtk_icon_view_select_all(
    icon_view : Pointer[GtkIconView]);

external gtk_icon_view_unselect_all(
    icon_view : Pointer[GtkIconView]);

external gtk_icon_view_item_activated(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]);

external gtk_icon_view_set_cursor(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath],
    cell : Pointer[GtkCellRenderer],
    start_editing : Int);

external gtk_icon_view_get_cursor(
    icon_view : Pointer[GtkIconView],
    path : Pointer[Pointer[GtkTreePath]],
    cell : Pointer[Pointer[GtkCellRenderer]]) Int;

external gtk_icon_view_scroll_to_path(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath],
    use_align : Int,
    row_align : Float,
    col_align : Float);

external gtk_icon_view_enable_model_drag_source(
    icon_view : Pointer[GtkIconView],
    start_button_mask : GdkModifierType,
    targets : Pointer[GtkTargetEntry],
    n_targets : Int,
    actions : GdkDragAction);

external gtk_icon_view_enable_model_drag_dest(
    icon_view : Pointer[GtkIconView],
    targets : Pointer[GtkTargetEntry],
    n_targets : Int,
    actions : GdkDragAction);

external gtk_icon_view_unset_model_drag_source(
    icon_view : Pointer[GtkIconView]);

external gtk_icon_view_unset_model_drag_dest(
    icon_view : Pointer[GtkIconView]);

external gtk_icon_view_set_reorderable(
    icon_view : Pointer[GtkIconView],
    reorderable : Int);

external gtk_icon_view_get_reorderable(
    icon_view : Pointer[GtkIconView]) Int;

external gtk_icon_view_set_drag_dest_item(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath],
    pos : GtkIconViewDropPosition);

external gtk_icon_view_get_drag_dest_item(
    icon_view : Pointer[GtkIconView],
    path : Pointer[Pointer[GtkTreePath]],
    pos : Pointer[GtkIconViewDropPosition]);

external gtk_icon_view_get_dest_item_at_pos(
    icon_view : Pointer[GtkIconView],
    drag_x : Int,
    drag_y : Int,
    path : Pointer[Pointer[GtkTreePath]],
    pos : Pointer[GtkIconViewDropPosition]) Int;

external gtk_icon_view_create_drag_icon(
    icon_view : Pointer[GtkIconView],
    path : Pointer[GtkTreePath]) Pointer[GdkPixmap];

external gtk_icon_view_convert_widget_to_bin_window_coords(
    icon_view : Pointer[GtkIconView],
    wx : Int,
    wy : Int,
    bx : Pointer[Int],
    by : Pointer[Int]);

external gtk_icon_view_set_tooltip_item(
    icon_view : Pointer[GtkIconView],
    tooltip : Pointer[GtkTooltip],
    path : Pointer[GtkTreePath]);

external gtk_icon_view_set_tooltip_cell(
    icon_view : Pointer[GtkIconView],
    tooltip : Pointer[GtkTooltip],
    path : Pointer[GtkTreePath],
    cell : Pointer[GtkCellRenderer]);

external gtk_icon_view_get_tooltip_context(
    icon_view : Pointer[GtkIconView],
    x : Pointer[Int],
    y : Pointer[Int],
    keyboard_tip : Int,
    model : Pointer[Pointer[GtkTreeModel]],
    path : Pointer[Pointer[GtkTreePath]],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_icon_view_set_tooltip_column(
    icon_view : Pointer[GtkIconView],
    column : Int);

external gtk_icon_view_get_tooltip_column(
    icon_view : Pointer[GtkIconView]) Int;

alias GtkImageMenuItem = Struct__GtkImageMenuItem;

alias GtkImageMenuItemClass = Struct__GtkImageMenuItemClass;

record Struct__GtkImageMenuItem (
    menu_item : GtkMenuItem,
    image : Pointer[GtkWidget],
);

record Struct__GtkImageMenuItemClass (
    parent_class : GtkMenuItemClass,
);

external gtk_image_menu_item_get_type() CULong;

external gtk_image_menu_item_new() Pointer[GtkWidget];

external gtk_image_menu_item_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_image_menu_item_new_with_mnemonic(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_image_menu_item_new_from_stock(
    stock_id : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup]) Pointer[GtkWidget];

external gtk_image_menu_item_set_always_show_image(
    image_menu_item : Pointer[GtkImageMenuItem],
    always_show : Int);

external gtk_image_menu_item_get_always_show_image(
    image_menu_item : Pointer[GtkImageMenuItem]) Int;

external gtk_image_menu_item_set_image(
    image_menu_item : Pointer[GtkImageMenuItem],
    image : Pointer[GtkWidget]);

external gtk_image_menu_item_get_image(
    image_menu_item : Pointer[GtkImageMenuItem]) Pointer[GtkWidget];

external gtk_image_menu_item_set_use_stock(
    image_menu_item : Pointer[GtkImageMenuItem],
    use_stock : Int);

external gtk_image_menu_item_get_use_stock(
    image_menu_item : Pointer[GtkImageMenuItem]) Int;

external gtk_image_menu_item_set_accel_group(
    image_menu_item : Pointer[GtkImageMenuItem],
    accel_group : Pointer[GtkAccelGroup]);

alias GtkIMContextSimple = Struct__GtkIMContextSimple;

alias GtkIMContextSimpleClass = Struct__GtkIMContextSimpleClass;

record Struct__GtkIMContextSimple (
    object : GtkIMContext,
    tables : Pointer[GSList],
    compose_buffer : Array[UInt,8],
    tentative_match : UInt,
    tentative_match_len : Int,
    in_hex_sequence : UInt,
    modifiers_dropped : UInt,
);

record Struct__GtkIMContextSimpleClass (
    parent_class : GtkIMContextClass,
);

external gtk_im_context_simple_get_type() CULong;

external gtk_im_context_simple_new() Pointer[GtkIMContext];

external gtk_im_context_simple_add_table(
    context_simple : Pointer[GtkIMContextSimple],
    data : Pointer[UShort],
    max_seq_len : Int,
    n_seqs : Int);

alias GtkIMMulticontext = Struct__GtkIMMulticontext;

alias GtkIMMulticontextClass = Struct__GtkIMMulticontextClass;

alias GtkIMMulticontextPrivate = Opaque;

record Struct__GtkIMMulticontext (
    object : GtkIMContext,
    slave : Pointer[GtkIMContext],
    priv : Pointer[GtkIMMulticontextPrivate],
    context_id : Pointer[CChar],
);

record Struct__GtkIMMulticontextClass (
    parent_class : GtkIMContextClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_im_multicontext_get_type() CULong;

external gtk_im_multicontext_new() Pointer[GtkIMContext];

external gtk_im_multicontext_append_menuitems(
    context : Pointer[GtkIMMulticontext],
    menushell : Pointer[GtkMenuShell]);

external gtk_im_multicontext_get_context_id(
    context : Pointer[GtkIMMulticontext]) Pointer[CChar];

external gtk_im_multicontext_set_context_id(
    context : Pointer[GtkIMMulticontext],
    context_id : Pointer[CChar]);

alias GtkInfoBarPrivate = Opaque;

alias GtkInfoBarClass = Struct__GtkInfoBarClass;

alias GtkInfoBar = Struct__GtkInfoBar;

record Struct__GtkInfoBar (
    parent : GtkHBox,
    priv : Pointer[GtkInfoBarPrivate],
);

record Struct__GtkInfoBarClass (
    parent_class : GtkHBoxClass,
    response : CCodePointer[(Pointer[Struct__GtkInfoBar],Int),()],
    close : CCodePointer[(Pointer[Struct__GtkInfoBar]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
);

external gtk_info_bar_get_type() CULong;

external gtk_info_bar_new() Pointer[GtkWidget];

external gtk_info_bar_new_with_buttons(
    first_button_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_info_bar_get_action_area(
    info_bar : Pointer[GtkInfoBar]) Pointer[GtkWidget];

external gtk_info_bar_get_content_area(
    info_bar : Pointer[GtkInfoBar]) Pointer[GtkWidget];

external gtk_info_bar_add_action_widget(
    info_bar : Pointer[GtkInfoBar],
    child : Pointer[GtkWidget],
    response_id : Int);

external gtk_info_bar_add_button(
    info_bar : Pointer[GtkInfoBar],
    button_text : Pointer[CChar],
    response_id : Int) Pointer[GtkWidget];

external gtk_info_bar_add_buttons(
    info_bar : Pointer[GtkInfoBar],
    first_button_text : Pointer[CChar],
    ...);

external gtk_info_bar_set_response_sensitive(
    info_bar : Pointer[GtkInfoBar],
    response_id : Int,
    setting : Int);

external gtk_info_bar_set_default_response(
    info_bar : Pointer[GtkInfoBar],
    response_id : Int);

external gtk_info_bar_response(
    info_bar : Pointer[GtkInfoBar],
    response_id : Int);

external gtk_info_bar_set_message_type(
    info_bar : Pointer[GtkInfoBar],
    message_type : GtkMessageType);

external gtk_info_bar_get_message_type(
    info_bar : Pointer[GtkInfoBar]) GtkMessageType;

alias GtkInvisible = Struct__GtkInvisible;

alias GtkInvisibleClass = Struct__GtkInvisibleClass;

record Struct__GtkInvisible (
    widget : GtkWidget,
    has_user_ref_count : Int,
    screen : Pointer[GdkScreen],
);

record Struct__GtkInvisibleClass (
    parent_class : GtkWidgetClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_invisible_get_type() CULong;

external gtk_invisible_new() Pointer[GtkWidget];

external gtk_invisible_new_for_screen(
    screen : Pointer[GdkScreen]) Pointer[GtkWidget];

external gtk_invisible_set_screen(
    invisible : Pointer[GtkInvisible],
    screen : Pointer[GdkScreen]);

external gtk_invisible_get_screen(
    invisible : Pointer[GtkInvisible]) Pointer[GdkScreen];

alias GtkLayout = Struct__GtkLayout;

alias GtkLayoutClass = Struct__GtkLayoutClass;

record Struct__GtkLayout (
    container : GtkContainer,
    children : Pointer[GList],
    width : UInt,
    height : UInt,
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
    bin_window : Pointer[GdkWindow],
    visibility : GdkVisibilityState,
    scroll_x : Int,
    scroll_y : Int,
    freeze_count : UInt,
);

record Struct__GtkLayoutClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkLayout],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_layout_get_type() CULong;

external gtk_layout_new(
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

external gtk_layout_get_bin_window(
    layout : Pointer[GtkLayout]) Pointer[GdkWindow];

external gtk_layout_put(
    layout : Pointer[GtkLayout],
    child_widget : Pointer[GtkWidget],
    x : Int,
    y : Int);

external gtk_layout_move(
    layout : Pointer[GtkLayout],
    child_widget : Pointer[GtkWidget],
    x : Int,
    y : Int);

external gtk_layout_set_size(
    layout : Pointer[GtkLayout],
    width : UInt,
    height : UInt);

external gtk_layout_get_size(
    layout : Pointer[GtkLayout],
    width : Pointer[UInt],
    height : Pointer[UInt]);

external gtk_layout_get_hadjustment(
    layout : Pointer[GtkLayout]) Pointer[GtkAdjustment];

external gtk_layout_get_vadjustment(
    layout : Pointer[GtkLayout]) Pointer[GtkAdjustment];

external gtk_layout_set_hadjustment(
    layout : Pointer[GtkLayout],
    adjustment : Pointer[GtkAdjustment]);

external gtk_layout_set_vadjustment(
    layout : Pointer[GtkLayout],
    adjustment : Pointer[GtkAdjustment]);

external gtk_layout_freeze(
    layout : Pointer[GtkLayout]);

external gtk_layout_thaw(
    layout : Pointer[GtkLayout]);

alias GtkLinkButton = Struct__GtkLinkButton;

alias GtkLinkButtonClass = Struct__GtkLinkButtonClass;

alias GtkLinkButtonPrivate = Opaque;

alias GtkLinkButtonUriFunc = CCodePointer[(Pointer[Struct__GtkLinkButton],Pointer[CChar],RawPointer),()];

record Struct__GtkLinkButton (
    parent_instance : GtkButton,
    priv : Pointer[GtkLinkButtonPrivate],
);

record Struct__GtkLinkButtonClass (
    parent_class : GtkButtonClass,
    _gtk_padding1 : CCodePointer[(),()],
    _gtk_padding2 : CCodePointer[(),()],
    _gtk_padding3 : CCodePointer[(),()],
    _gtk_padding4 : CCodePointer[(),()],
);

external gtk_link_button_get_type() CULong;

external gtk_link_button_new(
    uri : Pointer[CChar]) Pointer[GtkWidget];

external gtk_link_button_new_with_label(
    uri : Pointer[CChar],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_link_button_get_uri(
    link_button : Pointer[GtkLinkButton]) Pointer[CChar];

external gtk_link_button_set_uri(
    link_button : Pointer[GtkLinkButton],
    uri : Pointer[CChar]);

external gtk_link_button_set_uri_hook(
    func : GtkLinkButtonUriFunc,
    data : gpointer,
    destroy : GDestroyNotify) GtkLinkButtonUriFunc;

external gtk_link_button_get_visited(
    link_button : Pointer[GtkLinkButton]) Int;

external gtk_link_button_set_visited(
    link_button : Pointer[GtkLinkButton],
    visited : Int);

alias GtkKeySnoopFunc = CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GdkEventKey],RawPointer),(Int)];

external gtk_major_version : UInt;

external gtk_minor_version : UInt;

external gtk_micro_version : UInt;

external gtk_binary_age : UInt;

external gtk_interface_age : UInt;

external gtk_check_version(
    required_major : UInt,
    required_minor : UInt,
    required_micro : UInt) Pointer[CChar];

external gtk_parse_args(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]) Int;

external gtk_init(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]);

external gtk_init_check(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]]) Int;

external gtk_init_with_args(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]],
    parameter_string : Pointer[CChar],
    entries : Pointer[GOptionEntry],
    translation_domain : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_get_option_group(
    open_default_display : Int) Pointer[GOptionGroup];

external gtk_exit(
    error_code : Int);

external gtk_disable_setlocale();

external gtk_set_locale() Pointer[CChar];

external gtk_get_default_language() Pointer[PangoLanguage];

external gtk_events_pending() Int;

external gtk_main_do_event(
    event : Pointer[GdkEvent]);

external gtk_main();

external gtk_main_level() UInt;

external gtk_main_quit();

external gtk_main_iteration() Int;

external gtk_main_iteration_do(
    blocking : Int) Int;

external gtk_true() Int;

external gtk_false() Int;

external gtk_grab_add(
    widget : Pointer[GtkWidget]);

external gtk_grab_get_current() Pointer[GtkWidget];

external gtk_grab_remove(
    widget : Pointer[GtkWidget]);

external gtk_init_add(
    function : GtkFunction,
    data : gpointer);

external gtk_quit_add_destroy(
    main_level : UInt,
    object : Pointer[GtkObject]);

external gtk_quit_add(
    main_level : UInt,
    function : GtkFunction,
    data : gpointer) UInt;

external gtk_quit_add_full(
    main_level : UInt,
    function : GtkFunction,
    marshal : GtkCallbackMarshal,
    data : gpointer,
    destroy : GDestroyNotify) UInt;

external gtk_quit_remove(
    quit_handler_id : UInt);

external gtk_quit_remove_by_data(
    data : gpointer);

external gtk_timeout_add(
    interval : UInt,
    function : GtkFunction,
    data : gpointer) UInt;

external gtk_timeout_add_full(
    interval : UInt,
    function : GtkFunction,
    marshal : GtkCallbackMarshal,
    data : gpointer,
    destroy : GDestroyNotify) UInt;

external gtk_timeout_remove(
    timeout_handler_id : UInt);

external gtk_idle_add(
    function : GtkFunction,
    data : gpointer) UInt;

external gtk_idle_add_priority(
    priority : Int,
    function : GtkFunction,
    data : gpointer) UInt;

external gtk_idle_add_full(
    priority : Int,
    function : GtkFunction,
    marshal : GtkCallbackMarshal,
    data : gpointer,
    destroy : GDestroyNotify) UInt;

external gtk_idle_remove(
    idle_handler_id : UInt);

external gtk_idle_remove_by_data(
    data : gpointer);

external gtk_input_add_full(
    source : Int,
    condition : GdkInputCondition,
    function : GdkInputFunction,
    marshal : GtkCallbackMarshal,
    data : gpointer,
    destroy : GDestroyNotify) UInt;

external gtk_input_remove(
    input_handler_id : UInt);

external gtk_key_snooper_install(
    snooper : GtkKeySnoopFunc,
    func_data : gpointer) UInt;

external gtk_key_snooper_remove(
    snooper_handler_id : UInt);

external gtk_get_current_event() Pointer[GdkEvent];

external gtk_get_current_event_time() UInt;

external gtk_get_current_event_state(
    state : Pointer[GdkModifierType]) Int;

external gtk_get_event_widget(
    event : Pointer[GdkEvent]) Pointer[GtkWidget];

external gtk_propagate_event(
    widget : Pointer[GtkWidget],
    event : Pointer[GdkEvent]);

external _gtk_boolean_handled_accumulator(
    ihint : Pointer[GSignalInvocationHint],
    return_accu : Pointer[GValue],
    handler_return : Pointer[GValue],
    dummy : gpointer) Int;

external _gtk_get_lc_ctype() Pointer[CChar];

alias GtkMenuBar = Struct__GtkMenuBar;

alias GtkMenuBarClass = Struct__GtkMenuBarClass;

record Struct__GtkMenuBar (
    menu_shell : GtkMenuShell,
);

record Struct__GtkMenuBarClass (
    parent_class : GtkMenuShellClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_menu_bar_get_type() CULong;

external gtk_menu_bar_new() Pointer[GtkWidget];

external gtk_menu_bar_get_pack_direction(
    menubar : Pointer[GtkMenuBar]) GtkPackDirection;

external gtk_menu_bar_set_pack_direction(
    menubar : Pointer[GtkMenuBar],
    pack_dir : GtkPackDirection);

external gtk_menu_bar_get_child_pack_direction(
    menubar : Pointer[GtkMenuBar]) GtkPackDirection;

external gtk_menu_bar_set_child_pack_direction(
    menubar : Pointer[GtkMenuBar],
    child_pack_dir : GtkPackDirection);

external _gtk_menu_bar_cycle_focus(
    menubar : Pointer[GtkMenuBar],
    dir : GtkDirectionType);

alias GtkTooltips = Struct__GtkTooltips;

alias GtkTooltipsClass = Struct__GtkTooltipsClass;

alias GtkTooltipsData = Struct__GtkTooltipsData;

record Struct__GtkTooltipsData (
    tooltips : Pointer[GtkTooltips],
    widget : Pointer[GtkWidget],
    tip_text : Pointer[CChar],
    tip_private : Pointer[CChar],
);

record Struct__GtkTooltips (
    parent_instance : GtkObject,
    tip_window : Pointer[GtkWidget],
    tip_label : Pointer[GtkWidget],
    active_tips_data : Pointer[GtkTooltipsData],
    tips_data_list : Pointer[GList],
    delay : UInt,
    enabled : UInt,
    have_grab : UInt,
    use_sticky_delay : UInt,
    timer_tag : Int,
    last_popdown : GTimeVal,
);

record Struct__GtkTooltipsClass (
    parent_class : GtkObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tooltips_get_type() CULong;

external gtk_tooltips_new() Pointer[GtkTooltips];

external gtk_tooltips_enable(
    tooltips : Pointer[GtkTooltips]);

external gtk_tooltips_disable(
    tooltips : Pointer[GtkTooltips]);

external gtk_tooltips_set_delay(
    tooltips : Pointer[GtkTooltips],
    delay : UInt);

external gtk_tooltips_set_tip(
    tooltips : Pointer[GtkTooltips],
    widget : Pointer[GtkWidget],
    tip_text : Pointer[CChar],
    tip_private : Pointer[CChar]);

external gtk_tooltips_data_get(
    widget : Pointer[GtkWidget]) Pointer[GtkTooltipsData];

external gtk_tooltips_force_window(
    tooltips : Pointer[GtkTooltips]);

external gtk_tooltips_get_info_from_tip_window(
    tip_window : Pointer[GtkWindow],
    tooltips : Pointer[Pointer[GtkTooltips]],
    current_widget : Pointer[Pointer[GtkWidget]]) Int;

alias GtkSizeGroup = Struct__GtkSizeGroup;

alias GtkSizeGroupClass = Struct__GtkSizeGroupClass;

record Struct__GtkSizeGroup (
    parent_instance : GObject,
    widgets : Pointer[GSList],
    mode : CUChar,
    have_width : UInt,
    have_height : UInt,
    ignore_hidden : UInt,
    requisition : GtkRequisition,
);

record Struct__GtkSizeGroupClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

alias GTK_SIZE_GROUP_NONE = 0;
alias GTK_SIZE_GROUP_HORIZONTAL = 1;
alias GTK_SIZE_GROUP_VERTICAL = 2;
alias GTK_SIZE_GROUP_BOTH = 3;

alias GtkSizeGroupMode = Int;

external gtk_size_group_get_type() CULong;

external gtk_size_group_new(
    mode : GtkSizeGroupMode) Pointer[GtkSizeGroup];

external gtk_size_group_set_mode(
    size_group : Pointer[GtkSizeGroup],
    mode : GtkSizeGroupMode);

external gtk_size_group_get_mode(
    size_group : Pointer[GtkSizeGroup]) GtkSizeGroupMode;

external gtk_size_group_set_ignore_hidden(
    size_group : Pointer[GtkSizeGroup],
    ignore_hidden : Int);

external gtk_size_group_get_ignore_hidden(
    size_group : Pointer[GtkSizeGroup]) Int;

external gtk_size_group_add_widget(
    size_group : Pointer[GtkSizeGroup],
    widget : Pointer[GtkWidget]);

external gtk_size_group_remove_widget(
    size_group : Pointer[GtkSizeGroup],
    widget : Pointer[GtkWidget]);

external gtk_size_group_get_widgets(
    size_group : Pointer[GtkSizeGroup]) Pointer[GSList];

external _gtk_size_group_get_child_requisition(
    widget : Pointer[GtkWidget],
    requisition : Pointer[GtkRequisition]);

external _gtk_size_group_compute_requisition(
    widget : Pointer[GtkWidget],
    requisition : Pointer[GtkRequisition]);

external _gtk_size_group_queue_resize(
    widget : Pointer[GtkWidget]);

alias GtkToolItem = Struct__GtkToolItem;

alias GtkToolItemClass = Struct__GtkToolItemClass;

alias GtkToolItemPrivate = Opaque;

record Struct__GtkToolItem (
    parent : GtkBin,
    priv : Pointer[GtkToolItemPrivate],
);

record Struct__GtkToolItemClass (
    parent_class : GtkBinClass,
    create_menu_proxy : CCodePointer[(Pointer[Struct__GtkToolItem]),(Int)],
    toolbar_reconfigured : CCodePointer[(Pointer[Struct__GtkToolItem]),()],
    set_tooltip : CCodePointer[(Pointer[Struct__GtkToolItem],Pointer[Struct__GtkTooltips],Pointer[CChar],Pointer[CChar]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tool_item_get_type() CULong;

external gtk_tool_item_new() Pointer[GtkToolItem];

external gtk_tool_item_set_homogeneous(
    tool_item : Pointer[GtkToolItem],
    homogeneous : Int);

external gtk_tool_item_get_homogeneous(
    tool_item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_set_expand(
    tool_item : Pointer[GtkToolItem],
    expand : Int);

external gtk_tool_item_get_expand(
    tool_item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_set_tooltip(
    tool_item : Pointer[GtkToolItem],
    tooltips : Pointer[GtkTooltips],
    tip_text : Pointer[CChar],
    tip_private : Pointer[CChar]);

external gtk_tool_item_set_tooltip_text(
    tool_item : Pointer[GtkToolItem],
    text : Pointer[CChar]);

external gtk_tool_item_set_tooltip_markup(
    tool_item : Pointer[GtkToolItem],
    markup : Pointer[CChar]);

external gtk_tool_item_set_use_drag_window(
    tool_item : Pointer[GtkToolItem],
    use_drag_window : Int);

external gtk_tool_item_get_use_drag_window(
    tool_item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_set_visible_horizontal(
    tool_item : Pointer[GtkToolItem],
    visible_horizontal : Int);

external gtk_tool_item_get_visible_horizontal(
    tool_item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_set_visible_vertical(
    tool_item : Pointer[GtkToolItem],
    visible_vertical : Int);

external gtk_tool_item_get_visible_vertical(
    tool_item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_get_is_important(
    tool_item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_set_is_important(
    tool_item : Pointer[GtkToolItem],
    is_important : Int);

external gtk_tool_item_get_ellipsize_mode(
    tool_item : Pointer[GtkToolItem]) PangoEllipsizeMode;

external gtk_tool_item_get_icon_size(
    tool_item : Pointer[GtkToolItem]) GtkIconSize;

external gtk_tool_item_get_orientation(
    tool_item : Pointer[GtkToolItem]) GtkOrientation;

external gtk_tool_item_get_toolbar_style(
    tool_item : Pointer[GtkToolItem]) GtkToolbarStyle;

external gtk_tool_item_get_relief_style(
    tool_item : Pointer[GtkToolItem]) GtkReliefStyle;

external gtk_tool_item_get_text_alignment(
    tool_item : Pointer[GtkToolItem]) Float;

external gtk_tool_item_get_text_orientation(
    tool_item : Pointer[GtkToolItem]) GtkOrientation;

external gtk_tool_item_get_text_size_group(
    tool_item : Pointer[GtkToolItem]) Pointer[GtkSizeGroup];

external gtk_tool_item_retrieve_proxy_menu_item(
    tool_item : Pointer[GtkToolItem]) Pointer[GtkWidget];

external gtk_tool_item_get_proxy_menu_item(
    tool_item : Pointer[GtkToolItem],
    menu_item_id : Pointer[CChar]) Pointer[GtkWidget];

external gtk_tool_item_set_proxy_menu_item(
    tool_item : Pointer[GtkToolItem],
    menu_item_id : Pointer[CChar],
    menu_item : Pointer[GtkWidget]);

external gtk_tool_item_rebuild_menu(
    tool_item : Pointer[GtkToolItem]);

external gtk_tool_item_toolbar_reconfigured(
    tool_item : Pointer[GtkToolItem]);

external _gtk_tool_item_create_menu_proxy(
    tool_item : Pointer[GtkToolItem]) Int;

alias GtkToolButton = Struct__GtkToolButton;

alias GtkToolButtonClass = Struct__GtkToolButtonClass;

alias GtkToolButtonPrivate = Opaque;

record Struct__GtkToolButton (
    parent : GtkToolItem,
    priv : Pointer[GtkToolButtonPrivate],
);

record Struct__GtkToolButtonClass (
    parent_class : GtkToolItemClass,
    button_type : CULong,
    clicked : CCodePointer[(Pointer[Struct__GtkToolButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tool_button_get_type() CULong;

external gtk_tool_button_new(
    icon_widget : Pointer[GtkWidget],
    label : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_tool_button_new_from_stock(
    stock_id : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_tool_button_set_label(
    button : Pointer[GtkToolButton],
    label : Pointer[CChar]);

external gtk_tool_button_get_label(
    button : Pointer[GtkToolButton]) Pointer[CChar];

external gtk_tool_button_set_use_underline(
    button : Pointer[GtkToolButton],
    use_underline : Int);

external gtk_tool_button_get_use_underline(
    button : Pointer[GtkToolButton]) Int;

external gtk_tool_button_set_stock_id(
    button : Pointer[GtkToolButton],
    stock_id : Pointer[CChar]);

external gtk_tool_button_get_stock_id(
    button : Pointer[GtkToolButton]) Pointer[CChar];

external gtk_tool_button_set_icon_name(
    button : Pointer[GtkToolButton],
    icon_name : Pointer[CChar]);

external gtk_tool_button_get_icon_name(
    button : Pointer[GtkToolButton]) Pointer[CChar];

external gtk_tool_button_set_icon_widget(
    button : Pointer[GtkToolButton],
    icon_widget : Pointer[GtkWidget]);

external gtk_tool_button_get_icon_widget(
    button : Pointer[GtkToolButton]) Pointer[GtkWidget];

external gtk_tool_button_set_label_widget(
    button : Pointer[GtkToolButton],
    label_widget : Pointer[GtkWidget]);

external gtk_tool_button_get_label_widget(
    button : Pointer[GtkToolButton]) Pointer[GtkWidget];

external _gtk_tool_button_get_button(
    button : Pointer[GtkToolButton]) Pointer[GtkWidget];

alias GtkMenuToolButtonClass = Struct__GtkMenuToolButtonClass;

alias GtkMenuToolButton = Struct__GtkMenuToolButton;

alias GtkMenuToolButtonPrivate = Opaque;

record Struct__GtkMenuToolButton (
    parent : GtkToolButton,
    priv : Pointer[GtkMenuToolButtonPrivate],
);

record Struct__GtkMenuToolButtonClass (
    parent_class : GtkToolButtonClass,
    show_menu : CCodePointer[(Pointer[Struct__GtkMenuToolButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_menu_tool_button_get_type() CULong;

external gtk_menu_tool_button_new(
    icon_widget : Pointer[GtkWidget],
    label : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_menu_tool_button_new_from_stock(
    stock_id : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_menu_tool_button_set_menu(
    button : Pointer[GtkMenuToolButton],
    menu : Pointer[GtkWidget]);

external gtk_menu_tool_button_get_menu(
    button : Pointer[GtkMenuToolButton]) Pointer[GtkWidget];

external gtk_menu_tool_button_set_arrow_tooltip(
    button : Pointer[GtkMenuToolButton],
    tooltips : Pointer[GtkTooltips],
    tip_text : Pointer[CChar],
    tip_private : Pointer[CChar]);

external gtk_menu_tool_button_set_arrow_tooltip_text(
    button : Pointer[GtkMenuToolButton],
    text : Pointer[CChar]);

external gtk_menu_tool_button_set_arrow_tooltip_markup(
    button : Pointer[GtkMenuToolButton],
    markup : Pointer[CChar]);

alias GtkMessageDialog = Struct__GtkMessageDialog;

alias GtkMessageDialogClass = Struct__GtkMessageDialogClass;

record Struct__GtkMessageDialog (
    parent_instance : GtkDialog,
    image : Pointer[GtkWidget],
    label : Pointer[GtkWidget],
);

record Struct__GtkMessageDialogClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

alias GTK_BUTTONS_NONE = 0;
alias GTK_BUTTONS_OK = 1;
alias GTK_BUTTONS_CLOSE = 2;
alias GTK_BUTTONS_CANCEL = 3;
alias GTK_BUTTONS_YES_NO = 4;
alias GTK_BUTTONS_OK_CANCEL = 5;

alias GtkButtonsType = Int;

external gtk_message_dialog_get_type() CULong;

external gtk_message_dialog_new(
    parent : Pointer[GtkWindow],
    flags : GtkDialogFlags,
    type : GtkMessageType,
    buttons : GtkButtonsType,
    message_format : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_message_dialog_new_with_markup(
    parent : Pointer[GtkWindow],
    flags : GtkDialogFlags,
    type : GtkMessageType,
    buttons : GtkButtonsType,
    message_format : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_message_dialog_set_image(
    dialog : Pointer[GtkMessageDialog],
    image : Pointer[GtkWidget]);

external gtk_message_dialog_get_image(
    dialog : Pointer[GtkMessageDialog]) Pointer[GtkWidget];

external gtk_message_dialog_set_markup(
    message_dialog : Pointer[GtkMessageDialog],
    str : Pointer[CChar]);

external gtk_message_dialog_format_secondary_text(
    message_dialog : Pointer[GtkMessageDialog],
    message_format : Pointer[CChar],
    ...);

external gtk_message_dialog_format_secondary_markup(
    message_dialog : Pointer[GtkMessageDialog],
    message_format : Pointer[CChar],
    ...);

external gtk_message_dialog_get_message_area(
    message_dialog : Pointer[GtkMessageDialog]) Pointer[GtkWidget];

external _gtk_find_module(
    name : Pointer[CChar],
    type : Pointer[CChar]) Pointer[CChar];

external _gtk_get_module_path(
    type : Pointer[CChar]) Pointer[Pointer[CChar]];

external _gtk_modules_init(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]],
    gtk_modules_args : Pointer[CChar]);

external _gtk_modules_settings_changed(
    settings : Pointer[GtkSettings],
    modules : Pointer[CChar]);

alias GtkModuleInitFunc = CCodePointer[(Pointer[Int],Pointer[Pointer[Pointer[CChar]]]),()];

alias GtkModuleDisplayInitFunc = CCodePointer[(Pointer[Struct__GdkDisplay]),()];

alias GtkMountOperation = Struct__GtkMountOperation;

alias GtkMountOperationClass = Struct__GtkMountOperationClass;

alias GtkMountOperationPrivate = Opaque;

record Struct__GtkMountOperation (
    parent_instance : GMountOperation,
    priv : Pointer[GtkMountOperationPrivate],
);

record Struct__GtkMountOperationClass (
    parent_class : GMountOperationClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_mount_operation_get_type() CULong;

external gtk_mount_operation_new(
    parent : Pointer[GtkWindow]) Pointer[GMountOperation];

external gtk_mount_operation_is_showing(
    op : Pointer[GtkMountOperation]) Int;

external gtk_mount_operation_set_parent(
    op : Pointer[GtkMountOperation],
    parent : Pointer[GtkWindow]);

external gtk_mount_operation_get_parent(
    op : Pointer[GtkMountOperation]) Pointer[GtkWindow];

external gtk_mount_operation_set_screen(
    op : Pointer[GtkMountOperation],
    screen : Pointer[GdkScreen]);

external gtk_mount_operation_get_screen(
    op : Pointer[GtkMountOperation]) Pointer[GdkScreen];

alias GTK_NOTEBOOK_TAB_FIRST = 0;
alias GTK_NOTEBOOK_TAB_LAST = 1;

alias GtkNotebookTab = Int;

alias GtkNotebook = Struct__GtkNotebook;

alias GtkNotebookClass = Struct__GtkNotebookClass;

alias GtkNotebookPage = Opaque;

record Struct__GtkNotebook (
    container : GtkContainer,
    cur_page : Pointer[GtkNotebookPage],
    children : Pointer[GList],
    first_tab : Pointer[GList],
    focus_tab : Pointer[GList],
    menu : Pointer[GtkWidget],
    event_window : Pointer[GdkWindow],
    timer : UInt,
    tab_hborder : UShort,
    tab_vborder : UShort,
    show_tabs : UInt,
    homogeneous : UInt,
    show_border : UInt,
    tab_pos : UInt,
    scrollable : UInt,
    in_child : UInt,
    click_child : UInt,
    button : UInt,
    need_timer : UInt,
    child_has_focus : UInt,
    have_visible_child : UInt,
    focus_out : UInt,
    has_before_previous : UInt,
    has_before_next : UInt,
    has_after_previous : UInt,
    has_after_next : UInt,
);

record Struct__GtkNotebookClass (
    parent_class : GtkContainerClass,
    switch_page : CCodePointer[(Pointer[Struct__GtkNotebook],OpaquePointer,UInt),()],
    select_page : CCodePointer[(Pointer[Struct__GtkNotebook],Int),(Int)],
    focus_tab : CCodePointer[(Pointer[Struct__GtkNotebook],Int),(Int)],
    change_current_page : CCodePointer[(Pointer[Struct__GtkNotebook],Int),(Int)],
    move_focus_out : CCodePointer[(Pointer[Struct__GtkNotebook],Int),()],
    reorder_tab : CCodePointer[(Pointer[Struct__GtkNotebook],Int,Int),(Int)],
    insert_page : CCodePointer[(Pointer[Struct__GtkNotebook],Pointer[Struct__GtkWidget],Pointer[Struct__GtkWidget],Pointer[Struct__GtkWidget],Int),(Int)],
    create_window : CCodePointer[(Pointer[Struct__GtkNotebook],Pointer[Struct__GtkWidget],Int,Int),(Pointer[Struct__GtkNotebook])],
    _gtk_reserved1 : CCodePointer[(),()],
);

alias GtkNotebookWindowCreationFunc = CCodePointer[(Pointer[Struct__GtkNotebook],Pointer[Struct__GtkWidget],Int,Int,RawPointer),(Pointer[Struct__GtkNotebook])];

external gtk_notebook_get_type() CULong;

external gtk_notebook_new() Pointer[GtkWidget];

external gtk_notebook_append_page(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget]) Int;

external gtk_notebook_append_page_menu(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget],
    menu_label : Pointer[GtkWidget]) Int;

external gtk_notebook_prepend_page(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget]) Int;

external gtk_notebook_prepend_page_menu(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget],
    menu_label : Pointer[GtkWidget]) Int;

external gtk_notebook_insert_page(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget],
    position : Int) Int;

external gtk_notebook_insert_page_menu(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget],
    menu_label : Pointer[GtkWidget],
    position : Int) Int;

external gtk_notebook_remove_page(
    notebook : Pointer[GtkNotebook],
    page_num : Int);

external gtk_notebook_set_window_creation_hook(
    func : GtkNotebookWindowCreationFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_notebook_set_group_id(
    notebook : Pointer[GtkNotebook],
    group_id : Int);

external gtk_notebook_get_group_id(
    notebook : Pointer[GtkNotebook]) Int;

external gtk_notebook_set_group(
    notebook : Pointer[GtkNotebook],
    group : gpointer);

external gtk_notebook_get_group(
    notebook : Pointer[GtkNotebook]) gpointer;

external gtk_notebook_get_current_page(
    notebook : Pointer[GtkNotebook]) Int;

external gtk_notebook_get_nth_page(
    notebook : Pointer[GtkNotebook],
    page_num : Int) Pointer[GtkWidget];

external gtk_notebook_get_n_pages(
    notebook : Pointer[GtkNotebook]) Int;

external gtk_notebook_page_num(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Int;

external gtk_notebook_set_current_page(
    notebook : Pointer[GtkNotebook],
    page_num : Int);

external gtk_notebook_next_page(
    notebook : Pointer[GtkNotebook]);

external gtk_notebook_prev_page(
    notebook : Pointer[GtkNotebook]);

external gtk_notebook_set_show_border(
    notebook : Pointer[GtkNotebook],
    show_border : Int);

external gtk_notebook_get_show_border(
    notebook : Pointer[GtkNotebook]) Int;

external gtk_notebook_set_show_tabs(
    notebook : Pointer[GtkNotebook],
    show_tabs : Int);

external gtk_notebook_get_show_tabs(
    notebook : Pointer[GtkNotebook]) Int;

external gtk_notebook_set_tab_pos(
    notebook : Pointer[GtkNotebook],
    pos : GtkPositionType);

external gtk_notebook_get_tab_pos(
    notebook : Pointer[GtkNotebook]) GtkPositionType;

external gtk_notebook_set_homogeneous_tabs(
    notebook : Pointer[GtkNotebook],
    homogeneous : Int);

external gtk_notebook_set_tab_border(
    notebook : Pointer[GtkNotebook],
    border_width : UInt);

external gtk_notebook_set_tab_hborder(
    notebook : Pointer[GtkNotebook],
    tab_hborder : UInt);

external gtk_notebook_set_tab_vborder(
    notebook : Pointer[GtkNotebook],
    tab_vborder : UInt);

external gtk_notebook_set_scrollable(
    notebook : Pointer[GtkNotebook],
    scrollable : Int);

external gtk_notebook_get_scrollable(
    notebook : Pointer[GtkNotebook]) Int;

external gtk_notebook_get_tab_hborder(
    notebook : Pointer[GtkNotebook]) UShort;

external gtk_notebook_get_tab_vborder(
    notebook : Pointer[GtkNotebook]) UShort;

external gtk_notebook_popup_enable(
    notebook : Pointer[GtkNotebook]);

external gtk_notebook_popup_disable(
    notebook : Pointer[GtkNotebook]);

external gtk_notebook_get_tab_label(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Pointer[GtkWidget];

external gtk_notebook_set_tab_label(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_label : Pointer[GtkWidget]);

external gtk_notebook_set_tab_label_text(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    tab_text : Pointer[CChar]);

external gtk_notebook_get_tab_label_text(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Pointer[CChar];

external gtk_notebook_get_menu_label(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Pointer[GtkWidget];

external gtk_notebook_set_menu_label(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    menu_label : Pointer[GtkWidget]);

external gtk_notebook_set_menu_label_text(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    menu_text : Pointer[CChar]);

external gtk_notebook_get_menu_label_text(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Pointer[CChar];

external gtk_notebook_query_tab_label_packing(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    expand : Pointer[Int],
    fill : Pointer[Int],
    pack_type : Pointer[GtkPackType]);

external gtk_notebook_set_tab_label_packing(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    expand : Int,
    fill : Int,
    pack_type : GtkPackType);

external gtk_notebook_reorder_child(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    position : Int);

external gtk_notebook_get_tab_reorderable(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Int;

external gtk_notebook_set_tab_reorderable(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    reorderable : Int);

external gtk_notebook_get_tab_detachable(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget]) Int;

external gtk_notebook_set_tab_detachable(
    notebook : Pointer[GtkNotebook],
    child : Pointer[GtkWidget],
    detachable : Int);

external gtk_notebook_get_action_widget(
    notebook : Pointer[GtkNotebook],
    pack_type : GtkPackType) Pointer[GtkWidget];

external gtk_notebook_set_action_widget(
    notebook : Pointer[GtkNotebook],
    widget : Pointer[GtkWidget],
    pack_type : GtkPackType);

alias GtkOffscreenWindow = Struct__GtkOffscreenWindow;

alias GtkOffscreenWindowClass = Struct__GtkOffscreenWindowClass;

record Struct__GtkOffscreenWindow (
    parent_object : GtkWindow,
);

record Struct__GtkOffscreenWindowClass (
    parent_class : GtkWindowClass,
);

external gtk_offscreen_window_get_type() CULong;

external gtk_offscreen_window_new() Pointer[GtkWidget];

external gtk_offscreen_window_get_pixmap(
    offscreen : Pointer[GtkOffscreenWindow]) Pointer[GdkPixmap];

external gtk_offscreen_window_get_pixbuf(
    offscreen : Pointer[GtkOffscreenWindow]) Pointer[GdkPixbuf];

alias GtkOrientable = Opaque;

alias GtkOrientableIface = Struct__GtkOrientableIface;

record Struct__GtkOrientableIface (
    base_iface : GTypeInterface,
);

external gtk_orientable_get_type() CULong;

external gtk_orientable_set_orientation(
    orientable : Pointer[GtkOrientable],
    orientation : GtkOrientation);

external gtk_orientable_get_orientation(
    orientable : Pointer[GtkOrientable]) GtkOrientation;

alias GtkPaperSize = Opaque;

external gtk_paper_size_get_type() CULong;

external gtk_paper_size_new(
    name : Pointer[CChar]) Pointer[GtkPaperSize];

external gtk_paper_size_new_from_ppd(
    ppd_name : Pointer[CChar],
    ppd_display_name : Pointer[CChar],
    width : Double,
    height : Double) Pointer[GtkPaperSize];

external gtk_paper_size_new_custom(
    name : Pointer[CChar],
    display_name : Pointer[CChar],
    width : Double,
    height : Double,
    unit : GtkUnit) Pointer[GtkPaperSize];

external gtk_paper_size_copy(
    other : Pointer[GtkPaperSize]) Pointer[GtkPaperSize];

external gtk_paper_size_free(
    size : Pointer[GtkPaperSize]);

external gtk_paper_size_is_equal(
    size1 : Pointer[GtkPaperSize],
    size2 : Pointer[GtkPaperSize]) Int;

external gtk_paper_size_get_paper_sizes(
    include_custom : Int) Pointer[GList];

external gtk_paper_size_get_name(
    size : Pointer[GtkPaperSize]) Pointer[CChar];

external gtk_paper_size_get_display_name(
    size : Pointer[GtkPaperSize]) Pointer[CChar];

external gtk_paper_size_get_ppd_name(
    size : Pointer[GtkPaperSize]) Pointer[CChar];

external gtk_paper_size_get_width(
    size : Pointer[GtkPaperSize],
    unit : GtkUnit) Double;

external gtk_paper_size_get_height(
    size : Pointer[GtkPaperSize],
    unit : GtkUnit) Double;

external gtk_paper_size_is_custom(
    size : Pointer[GtkPaperSize]) Int;

external gtk_paper_size_set_size(
    size : Pointer[GtkPaperSize],
    width : Double,
    height : Double,
    unit : GtkUnit);

external gtk_paper_size_get_default_top_margin(
    size : Pointer[GtkPaperSize],
    unit : GtkUnit) Double;

external gtk_paper_size_get_default_bottom_margin(
    size : Pointer[GtkPaperSize],
    unit : GtkUnit) Double;

external gtk_paper_size_get_default_left_margin(
    size : Pointer[GtkPaperSize],
    unit : GtkUnit) Double;

external gtk_paper_size_get_default_right_margin(
    size : Pointer[GtkPaperSize],
    unit : GtkUnit) Double;

external gtk_paper_size_get_default() Pointer[CChar];

external gtk_paper_size_new_from_key_file(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GtkPaperSize];

external gtk_paper_size_to_key_file(
    size : Pointer[GtkPaperSize],
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar]);

alias GtkPageSetup = Opaque;

external gtk_page_setup_get_type() CULong;

external gtk_page_setup_new() Pointer[GtkPageSetup];

external gtk_page_setup_copy(
    other : Pointer[GtkPageSetup]) Pointer[GtkPageSetup];

external gtk_page_setup_get_orientation(
    setup : Pointer[GtkPageSetup]) GtkPageOrientation;

external gtk_page_setup_set_orientation(
    setup : Pointer[GtkPageSetup],
    orientation : GtkPageOrientation);

external gtk_page_setup_get_paper_size(
    setup : Pointer[GtkPageSetup]) Pointer[GtkPaperSize];

external gtk_page_setup_set_paper_size(
    setup : Pointer[GtkPageSetup],
    size : Pointer[GtkPaperSize]);

external gtk_page_setup_get_top_margin(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_set_top_margin(
    setup : Pointer[GtkPageSetup],
    margin : Double,
    unit : GtkUnit);

external gtk_page_setup_get_bottom_margin(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_set_bottom_margin(
    setup : Pointer[GtkPageSetup],
    margin : Double,
    unit : GtkUnit);

external gtk_page_setup_get_left_margin(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_set_left_margin(
    setup : Pointer[GtkPageSetup],
    margin : Double,
    unit : GtkUnit);

external gtk_page_setup_get_right_margin(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_set_right_margin(
    setup : Pointer[GtkPageSetup],
    margin : Double,
    unit : GtkUnit);

external gtk_page_setup_set_paper_size_and_default_margins(
    setup : Pointer[GtkPageSetup],
    size : Pointer[GtkPaperSize]);

external gtk_page_setup_get_paper_width(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_get_paper_height(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_get_page_width(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_get_page_height(
    setup : Pointer[GtkPageSetup],
    unit : GtkUnit) Double;

external gtk_page_setup_new_from_file(
    file_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GtkPageSetup];

external gtk_page_setup_load_file(
    setup : Pointer[GtkPageSetup],
    file_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_page_setup_to_file(
    setup : Pointer[GtkPageSetup],
    file_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_page_setup_new_from_key_file(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GtkPageSetup];

external gtk_page_setup_load_key_file(
    setup : Pointer[GtkPageSetup],
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_page_setup_to_key_file(
    setup : Pointer[GtkPageSetup],
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar]);

alias GtkSocket = Struct__GtkSocket;

alias GtkSocketClass = Struct__GtkSocketClass;

record Struct__GtkSocket (
    container : GtkContainer,
    request_width : UShort,
    request_height : UShort,
    current_width : UShort,
    current_height : UShort,
    plug_window : Pointer[GdkWindow],
    plug_widget : Pointer[GtkWidget],
    xembed_version : Short,
    same_app : UInt,
    focus_in : UInt,
    have_size : UInt,
    need_map : UInt,
    is_mapped : UInt,
    active : UInt,
    accel_group : Pointer[GtkAccelGroup],
    toplevel : Pointer[GtkWidget],
);

record Struct__GtkSocketClass (
    parent_class : GtkContainerClass,
    plug_added : CCodePointer[(Pointer[Struct__GtkSocket]),()],
    plug_removed : CCodePointer[(Pointer[Struct__GtkSocket]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_socket_get_type() CULong;

external gtk_socket_new() Pointer[GtkWidget];

external gtk_socket_add_id(
    socket_ : Pointer[GtkSocket],
    window_id : UInt);

external gtk_socket_get_id(
    socket_ : Pointer[GtkSocket]) UInt;

external gtk_socket_get_plug_window(
    socket_ : Pointer[GtkSocket]) Pointer[GdkWindow];

external gtk_socket_steal(
    socket_ : Pointer[GtkSocket],
    wid : UInt);

alias GtkPlug = Struct__GtkPlug;

alias GtkPlugClass = Struct__GtkPlugClass;

record Struct__GtkPlug (
    window : GtkWindow,
    socket_window : Pointer[GdkWindow],
    modality_window : Pointer[GtkWidget],
    modality_group : Pointer[GtkWindowGroup],
    grabbed_keys : Pointer[GHashTable],
    same_app : UInt,
);

record Struct__GtkPlugClass (
    parent_class : GtkWindowClass,
    embedded : CCodePointer[(Pointer[Struct__GtkPlug]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_plug_get_type() CULong;

external gtk_plug_construct(
    plug : Pointer[GtkPlug],
    socket_id : UInt);

external gtk_plug_new(
    socket_id : UInt) Pointer[GtkWidget];

external gtk_plug_construct_for_display(
    plug : Pointer[GtkPlug],
    display : Pointer[GdkDisplay],
    socket_id : UInt);

external gtk_plug_new_for_display(
    display : Pointer[GdkDisplay],
    socket_id : UInt) Pointer[GtkWidget];

external gtk_plug_get_id(
    plug : Pointer[GtkPlug]) UInt;

external gtk_plug_get_embedded(
    plug : Pointer[GtkPlug]) Int;

external gtk_plug_get_socket_window(
    plug : Pointer[GtkPlug]) Pointer[GdkWindow];

external _gtk_plug_add_to_socket(
    plug : Pointer[GtkPlug],
    socket_ : Pointer[GtkSocket]);

external _gtk_plug_remove_from_socket(
    plug : Pointer[GtkPlug],
    socket_ : Pointer[GtkSocket]);

alias GtkPrintContext = Opaque;

external gtk_print_context_get_type() CULong;

external gtk_print_context_get_cairo_context(
    context : Pointer[GtkPrintContext]) Pointer[cairo_t];

external gtk_print_context_get_page_setup(
    context : Pointer[GtkPrintContext]) Pointer[GtkPageSetup];

external gtk_print_context_get_width(
    context : Pointer[GtkPrintContext]) Double;

external gtk_print_context_get_height(
    context : Pointer[GtkPrintContext]) Double;

external gtk_print_context_get_dpi_x(
    context : Pointer[GtkPrintContext]) Double;

external gtk_print_context_get_dpi_y(
    context : Pointer[GtkPrintContext]) Double;

external gtk_print_context_get_hard_margins(
    context : Pointer[GtkPrintContext],
    top : Pointer[Double],
    bottom : Pointer[Double],
    left : Pointer[Double],
    right : Pointer[Double]) Int;

external gtk_print_context_get_pango_fontmap(
    context : Pointer[GtkPrintContext]) Pointer[PangoFontMap];

external gtk_print_context_create_pango_context(
    context : Pointer[GtkPrintContext]) Pointer[PangoContext];

external gtk_print_context_create_pango_layout(
    context : Pointer[GtkPrintContext]) Pointer[PangoLayout];

external gtk_print_context_set_cairo_context(
    context : Pointer[GtkPrintContext],
    cr : Pointer[cairo_t],
    dpi_x : Double,
    dpi_y : Double);

alias GtkPrintSettings = Opaque;

alias GtkPrintSettingsFunc = CCodePointer[(Pointer[CChar],Pointer[CChar],RawPointer),()];

alias GtkPageRange = Struct__GtkPageRange;

record Struct__GtkPageRange (
    start : Int,
    end : Int,
);

external gtk_print_settings_get_type() CULong;

external gtk_print_settings_new() Pointer[GtkPrintSettings];

external gtk_print_settings_copy(
    other : Pointer[GtkPrintSettings]) Pointer[GtkPrintSettings];

external gtk_print_settings_new_from_file(
    file_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GtkPrintSettings];

external gtk_print_settings_load_file(
    settings : Pointer[GtkPrintSettings],
    file_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_print_settings_to_file(
    settings : Pointer[GtkPrintSettings],
    file_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_print_settings_new_from_key_file(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GtkPrintSettings];

external gtk_print_settings_load_key_file(
    settings : Pointer[GtkPrintSettings],
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_print_settings_to_key_file(
    settings : Pointer[GtkPrintSettings],
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar]);

external gtk_print_settings_has_key(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar]) Int;

external gtk_print_settings_get(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar]) Pointer[CChar];

external gtk_print_settings_set(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    value : Pointer[CChar]);

external gtk_print_settings_unset(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar]);

external gtk_print_settings_foreach(
    settings : Pointer[GtkPrintSettings],
    func : GtkPrintSettingsFunc,
    user_data : gpointer);

external gtk_print_settings_get_bool(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar]) Int;

external gtk_print_settings_set_bool(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    value : Int);

external gtk_print_settings_get_double(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar]) Double;

external gtk_print_settings_get_double_with_default(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    def : Double) Double;

external gtk_print_settings_set_double(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    value : Double);

external gtk_print_settings_get_length(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    unit : GtkUnit) Double;

external gtk_print_settings_set_length(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    value : Double,
    unit : GtkUnit);

external gtk_print_settings_get_int(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar]) Int;

external gtk_print_settings_get_int_with_default(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    def : Int) Int;

external gtk_print_settings_set_int(
    settings : Pointer[GtkPrintSettings],
    key : Pointer[CChar],
    value : Int);

external gtk_print_settings_get_printer(
    settings : Pointer[GtkPrintSettings]) Pointer[CChar];

external gtk_print_settings_set_printer(
    settings : Pointer[GtkPrintSettings],
    printer : Pointer[CChar]);

external gtk_print_settings_get_orientation(
    settings : Pointer[GtkPrintSettings]) GtkPageOrientation;

external gtk_print_settings_set_orientation(
    settings : Pointer[GtkPrintSettings],
    orientation : GtkPageOrientation);

external gtk_print_settings_get_paper_size(
    settings : Pointer[GtkPrintSettings]) Pointer[GtkPaperSize];

external gtk_print_settings_set_paper_size(
    settings : Pointer[GtkPrintSettings],
    paper_size : Pointer[GtkPaperSize]);

external gtk_print_settings_get_paper_width(
    settings : Pointer[GtkPrintSettings],
    unit : GtkUnit) Double;

external gtk_print_settings_set_paper_width(
    settings : Pointer[GtkPrintSettings],
    width : Double,
    unit : GtkUnit);

external gtk_print_settings_get_paper_height(
    settings : Pointer[GtkPrintSettings],
    unit : GtkUnit) Double;

external gtk_print_settings_set_paper_height(
    settings : Pointer[GtkPrintSettings],
    height : Double,
    unit : GtkUnit);

external gtk_print_settings_get_use_color(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_use_color(
    settings : Pointer[GtkPrintSettings],
    use_color : Int);

external gtk_print_settings_get_collate(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_collate(
    settings : Pointer[GtkPrintSettings],
    collate : Int);

external gtk_print_settings_get_reverse(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_reverse(
    settings : Pointer[GtkPrintSettings],
    reverse : Int);

external gtk_print_settings_get_duplex(
    settings : Pointer[GtkPrintSettings]) GtkPrintDuplex;

external gtk_print_settings_set_duplex(
    settings : Pointer[GtkPrintSettings],
    duplex : GtkPrintDuplex);

external gtk_print_settings_get_quality(
    settings : Pointer[GtkPrintSettings]) GtkPrintQuality;

external gtk_print_settings_set_quality(
    settings : Pointer[GtkPrintSettings],
    quality : GtkPrintQuality);

external gtk_print_settings_get_n_copies(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_n_copies(
    settings : Pointer[GtkPrintSettings],
    num_copies : Int);

external gtk_print_settings_get_number_up(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_number_up(
    settings : Pointer[GtkPrintSettings],
    number_up : Int);

external gtk_print_settings_get_number_up_layout(
    settings : Pointer[GtkPrintSettings]) GtkNumberUpLayout;

external gtk_print_settings_set_number_up_layout(
    settings : Pointer[GtkPrintSettings],
    number_up_layout : GtkNumberUpLayout);

external gtk_print_settings_get_resolution(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_resolution(
    settings : Pointer[GtkPrintSettings],
    resolution : Int);

external gtk_print_settings_get_resolution_x(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_get_resolution_y(
    settings : Pointer[GtkPrintSettings]) Int;

external gtk_print_settings_set_resolution_xy(
    settings : Pointer[GtkPrintSettings],
    resolution_x : Int,
    resolution_y : Int);

external gtk_print_settings_get_printer_lpi(
    settings : Pointer[GtkPrintSettings]) Double;

external gtk_print_settings_set_printer_lpi(
    settings : Pointer[GtkPrintSettings],
    lpi : Double);

external gtk_print_settings_get_scale(
    settings : Pointer[GtkPrintSettings]) Double;

external gtk_print_settings_set_scale(
    settings : Pointer[GtkPrintSettings],
    scale : Double);

external gtk_print_settings_get_print_pages(
    settings : Pointer[GtkPrintSettings]) GtkPrintPages;

external gtk_print_settings_set_print_pages(
    settings : Pointer[GtkPrintSettings],
    pages : GtkPrintPages);

external gtk_print_settings_get_page_ranges(
    settings : Pointer[GtkPrintSettings],
    num_ranges : Pointer[Int]) Pointer[GtkPageRange];

external gtk_print_settings_set_page_ranges(
    settings : Pointer[GtkPrintSettings],
    page_ranges : Pointer[GtkPageRange],
    num_ranges : Int);

external gtk_print_settings_get_page_set(
    settings : Pointer[GtkPrintSettings]) GtkPageSet;

external gtk_print_settings_set_page_set(
    settings : Pointer[GtkPrintSettings],
    page_set : GtkPageSet);

external gtk_print_settings_get_default_source(
    settings : Pointer[GtkPrintSettings]) Pointer[CChar];

external gtk_print_settings_set_default_source(
    settings : Pointer[GtkPrintSettings],
    default_source : Pointer[CChar]);

external gtk_print_settings_get_media_type(
    settings : Pointer[GtkPrintSettings]) Pointer[CChar];

external gtk_print_settings_set_media_type(
    settings : Pointer[GtkPrintSettings],
    media_type : Pointer[CChar]);

external gtk_print_settings_get_dither(
    settings : Pointer[GtkPrintSettings]) Pointer[CChar];

external gtk_print_settings_set_dither(
    settings : Pointer[GtkPrintSettings],
    dither : Pointer[CChar]);

external gtk_print_settings_get_finishings(
    settings : Pointer[GtkPrintSettings]) Pointer[CChar];

external gtk_print_settings_set_finishings(
    settings : Pointer[GtkPrintSettings],
    finishings : Pointer[CChar]);

external gtk_print_settings_get_output_bin(
    settings : Pointer[GtkPrintSettings]) Pointer[CChar];

external gtk_print_settings_set_output_bin(
    settings : Pointer[GtkPrintSettings],
    output_bin : Pointer[CChar]);

alias GtkPrintOperationPreview = Opaque;

alias GtkPrintOperationPreviewIface = Struct__GtkPrintOperationPreviewIface;

record Struct__GtkPrintOperationPreviewIface (
    g_iface : GTypeInterface,
    ready : CCodePointer[(OpaquePointer,OpaquePointer),()],
    got_page_size : CCodePointer[(OpaquePointer,OpaquePointer,OpaquePointer),()],
    render_page : CCodePointer[(OpaquePointer,Int),()],
    is_selected : CCodePointer[(OpaquePointer,Int),(Int)],
    end_preview : CCodePointer[(OpaquePointer),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
    _gtk_reserved7 : CCodePointer[(),()],
);

external gtk_print_operation_preview_get_type() CULong;

external gtk_print_operation_preview_render_page(
    preview : Pointer[GtkPrintOperationPreview],
    page_nr : Int);

external gtk_print_operation_preview_end_preview(
    preview : Pointer[GtkPrintOperationPreview]);

external gtk_print_operation_preview_is_selected(
    preview : Pointer[GtkPrintOperationPreview],
    page_nr : Int) Int;

alias GtkPrintOperationClass = Struct__GtkPrintOperationClass;

alias GtkPrintOperationPrivate = Opaque;

alias GtkPrintOperation = Struct__GtkPrintOperation;

alias GTK_PRINT_STATUS_INITIAL = 0;
alias GTK_PRINT_STATUS_PREPARING = 1;
alias GTK_PRINT_STATUS_GENERATING_DATA = 2;
alias GTK_PRINT_STATUS_SENDING_DATA = 3;
alias GTK_PRINT_STATUS_PENDING = 4;
alias GTK_PRINT_STATUS_PENDING_ISSUE = 5;
alias GTK_PRINT_STATUS_PRINTING = 6;
alias GTK_PRINT_STATUS_FINISHED = 7;
alias GTK_PRINT_STATUS_FINISHED_ABORTED = 8;

alias GtkPrintStatus = Int;

alias GTK_PRINT_OPERATION_RESULT_ERROR = 0;
alias GTK_PRINT_OPERATION_RESULT_APPLY = 1;
alias GTK_PRINT_OPERATION_RESULT_CANCEL = 2;
alias GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = 3;

alias GtkPrintOperationResult = Int;

alias GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = 0;
alias GTK_PRINT_OPERATION_ACTION_PRINT = 1;
alias GTK_PRINT_OPERATION_ACTION_PREVIEW = 2;
alias GTK_PRINT_OPERATION_ACTION_EXPORT = 3;

alias GtkPrintOperationAction = Int;

record Struct__GtkPrintOperation (
    parent_instance : GObject,
    priv : Pointer[GtkPrintOperationPrivate],
);

record Struct__GtkPrintOperationClass (
    parent_class : GObjectClass,
    done : CCodePointer[(Pointer[Struct__GtkPrintOperation],Int),()],
    begin_print : CCodePointer[(Pointer[Struct__GtkPrintOperation],OpaquePointer),()],
    paginate : CCodePointer[(Pointer[Struct__GtkPrintOperation],OpaquePointer),(Int)],
    request_page_setup : CCodePointer[(Pointer[Struct__GtkPrintOperation],OpaquePointer,Int,OpaquePointer),()],
    draw_page : CCodePointer[(Pointer[Struct__GtkPrintOperation],OpaquePointer,Int),()],
    end_print : CCodePointer[(Pointer[Struct__GtkPrintOperation],OpaquePointer),()],
    status_changed : CCodePointer[(Pointer[Struct__GtkPrintOperation]),()],
    create_custom_widget : CCodePointer[(Pointer[Struct__GtkPrintOperation]),(Pointer[Struct__GtkWidget])],
    custom_widget_apply : CCodePointer[(Pointer[Struct__GtkPrintOperation],Pointer[Struct__GtkWidget]),()],
    preview : CCodePointer[(Pointer[Struct__GtkPrintOperation],OpaquePointer,OpaquePointer,Pointer[Struct__GtkWindow]),(Int)],
    update_custom_widget : CCodePointer[(Pointer[Struct__GtkPrintOperation],Pointer[Struct__GtkWidget],OpaquePointer,OpaquePointer),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
);

alias GTK_PRINT_ERROR_GENERAL = 0;
alias GTK_PRINT_ERROR_INTERNAL_ERROR = 1;
alias GTK_PRINT_ERROR_NOMEM = 2;
alias GTK_PRINT_ERROR_INVALID_FILE = 3;

alias GtkPrintError = Int;

external gtk_print_error_quark() UInt;

external gtk_print_operation_get_type() CULong;

external gtk_print_operation_new() Pointer[GtkPrintOperation];

external gtk_print_operation_set_default_page_setup(
    op : Pointer[GtkPrintOperation],
    default_page_setup : Pointer[GtkPageSetup]);

external gtk_print_operation_get_default_page_setup(
    op : Pointer[GtkPrintOperation]) Pointer[GtkPageSetup];

external gtk_print_operation_set_print_settings(
    op : Pointer[GtkPrintOperation],
    print_settings : Pointer[GtkPrintSettings]);

external gtk_print_operation_get_print_settings(
    op : Pointer[GtkPrintOperation]) Pointer[GtkPrintSettings];

external gtk_print_operation_set_job_name(
    op : Pointer[GtkPrintOperation],
    job_name : Pointer[CChar]);

external gtk_print_operation_set_n_pages(
    op : Pointer[GtkPrintOperation],
    n_pages : Int);

external gtk_print_operation_set_current_page(
    op : Pointer[GtkPrintOperation],
    current_page : Int);

external gtk_print_operation_set_use_full_page(
    op : Pointer[GtkPrintOperation],
    full_page : Int);

external gtk_print_operation_set_unit(
    op : Pointer[GtkPrintOperation],
    unit : GtkUnit);

external gtk_print_operation_set_export_filename(
    op : Pointer[GtkPrintOperation],
    filename : Pointer[CChar]);

external gtk_print_operation_set_track_print_status(
    op : Pointer[GtkPrintOperation],
    track_status : Int);

external gtk_print_operation_set_show_progress(
    op : Pointer[GtkPrintOperation],
    show_progress : Int);

external gtk_print_operation_set_allow_async(
    op : Pointer[GtkPrintOperation],
    allow_async : Int);

external gtk_print_operation_set_custom_tab_label(
    op : Pointer[GtkPrintOperation],
    label : Pointer[CChar]);

external gtk_print_operation_run(
    op : Pointer[GtkPrintOperation],
    action : GtkPrintOperationAction,
    parent : Pointer[GtkWindow],
    error : Pointer[Pointer[GError]]) GtkPrintOperationResult;

external gtk_print_operation_get_error(
    op : Pointer[GtkPrintOperation],
    error : Pointer[Pointer[GError]]);

external gtk_print_operation_get_status(
    op : Pointer[GtkPrintOperation]) GtkPrintStatus;

external gtk_print_operation_get_status_string(
    op : Pointer[GtkPrintOperation]) Pointer[CChar];

external gtk_print_operation_is_finished(
    op : Pointer[GtkPrintOperation]) Int;

external gtk_print_operation_cancel(
    op : Pointer[GtkPrintOperation]);

external gtk_print_operation_draw_page_finish(
    op : Pointer[GtkPrintOperation]);

external gtk_print_operation_set_defer_drawing(
    op : Pointer[GtkPrintOperation]);

external gtk_print_operation_set_support_selection(
    op : Pointer[GtkPrintOperation],
    support_selection : Int);

external gtk_print_operation_get_support_selection(
    op : Pointer[GtkPrintOperation]) Int;

external gtk_print_operation_set_has_selection(
    op : Pointer[GtkPrintOperation],
    has_selection : Int);

external gtk_print_operation_get_has_selection(
    op : Pointer[GtkPrintOperation]) Int;

external gtk_print_operation_set_embed_page_setup(
    op : Pointer[GtkPrintOperation],
    embed : Int);

external gtk_print_operation_get_embed_page_setup(
    op : Pointer[GtkPrintOperation]) Int;

external gtk_print_operation_get_n_pages_to_print(
    op : Pointer[GtkPrintOperation]) Int;

external gtk_print_run_page_setup_dialog(
    parent : Pointer[GtkWindow],
    page_setup : Pointer[GtkPageSetup],
    settings : Pointer[GtkPrintSettings]) Pointer[GtkPageSetup];

alias GtkPageSetupDoneFunc = CCodePointer[(OpaquePointer,RawPointer),()];

external gtk_print_run_page_setup_dialog_async(
    parent : Pointer[GtkWindow],
    page_setup : Pointer[GtkPageSetup],
    settings : Pointer[GtkPrintSettings],
    done_cb : GtkPageSetupDoneFunc,
    data : gpointer);

alias GtkProgress = Struct__GtkProgress;

alias GtkProgressClass = Struct__GtkProgressClass;

record Struct__GtkProgress (
    widget : GtkWidget,
    adjustment : Pointer[GtkAdjustment],
    offscreen_pixmap : Pointer[GdkPixmap],
    format : Pointer[CChar],
    x_align : Float,
    y_align : Float,
    show_text : UInt,
    activity_mode : UInt,
    use_text_format : UInt,
);

record Struct__GtkProgressClass (
    parent_class : GtkWidgetClass,
    paint : CCodePointer[(Pointer[Struct__GtkProgress]),()],
    update : CCodePointer[(Pointer[Struct__GtkProgress]),()],
    act_mode_enter : CCodePointer[(Pointer[Struct__GtkProgress]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_progress_get_type() CULong;

external gtk_progress_set_show_text(
    progress : Pointer[GtkProgress],
    show_text : Int);

external gtk_progress_set_text_alignment(
    progress : Pointer[GtkProgress],
    x_align : Float,
    y_align : Float);

external gtk_progress_set_format_string(
    progress : Pointer[GtkProgress],
    format : Pointer[CChar]);

external gtk_progress_set_adjustment(
    progress : Pointer[GtkProgress],
    adjustment : Pointer[GtkAdjustment]);

external gtk_progress_configure(
    progress : Pointer[GtkProgress],
    value : Double,
    min : Double,
    max : Double);

external gtk_progress_set_percentage(
    progress : Pointer[GtkProgress],
    percentage : Double);

external gtk_progress_set_value(
    progress : Pointer[GtkProgress],
    value : Double);

external gtk_progress_get_value(
    progress : Pointer[GtkProgress]) Double;

external gtk_progress_set_activity_mode(
    progress : Pointer[GtkProgress],
    activity_mode : Int);

external gtk_progress_get_current_text(
    progress : Pointer[GtkProgress]) Pointer[CChar];

external gtk_progress_get_text_from_value(
    progress : Pointer[GtkProgress],
    value : Double) Pointer[CChar];

external gtk_progress_get_current_percentage(
    progress : Pointer[GtkProgress]) Double;

external gtk_progress_get_percentage_from_value(
    progress : Pointer[GtkProgress],
    value : Double) Double;

alias GtkProgressBar = Struct__GtkProgressBar;

alias GtkProgressBarClass = Struct__GtkProgressBarClass;

alias GTK_PROGRESS_CONTINUOUS = 0;
alias GTK_PROGRESS_DISCRETE = 1;

alias GtkProgressBarStyle = Int;

alias GTK_PROGRESS_LEFT_TO_RIGHT = 0;
alias GTK_PROGRESS_RIGHT_TO_LEFT = 1;
alias GTK_PROGRESS_BOTTOM_TO_TOP = 2;
alias GTK_PROGRESS_TOP_TO_BOTTOM = 3;

alias GtkProgressBarOrientation = Int;

record Struct__GtkProgressBar (
    progress : GtkProgress,
    bar_style : GtkProgressBarStyle,
    orientation : GtkProgressBarOrientation,
    blocks : UInt,
    in_block : Int,
    activity_pos : Int,
    activity_step : UInt,
    activity_blocks : UInt,
    pulse_fraction : Double,
    activity_dir : UInt,
    ellipsize : UInt,
    dirty : UInt,
);

record Struct__GtkProgressBarClass (
    parent_class : GtkProgressClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_progress_bar_get_type() CULong;

external gtk_progress_bar_new() Pointer[GtkWidget];

external gtk_progress_bar_pulse(
    pbar : Pointer[GtkProgressBar]);

external gtk_progress_bar_set_text(
    pbar : Pointer[GtkProgressBar],
    text : Pointer[CChar]);

external gtk_progress_bar_set_fraction(
    pbar : Pointer[GtkProgressBar],
    fraction : Double);

external gtk_progress_bar_set_pulse_step(
    pbar : Pointer[GtkProgressBar],
    fraction : Double);

external gtk_progress_bar_set_orientation(
    pbar : Pointer[GtkProgressBar],
    orientation : GtkProgressBarOrientation);

external gtk_progress_bar_get_text(
    pbar : Pointer[GtkProgressBar]) Pointer[CChar];

external gtk_progress_bar_get_fraction(
    pbar : Pointer[GtkProgressBar]) Double;

external gtk_progress_bar_get_pulse_step(
    pbar : Pointer[GtkProgressBar]) Double;

external gtk_progress_bar_get_orientation(
    pbar : Pointer[GtkProgressBar]) GtkProgressBarOrientation;

external gtk_progress_bar_set_ellipsize(
    pbar : Pointer[GtkProgressBar],
    mode : PangoEllipsizeMode);

external gtk_progress_bar_get_ellipsize(
    pbar : Pointer[GtkProgressBar]) PangoEllipsizeMode;

external gtk_progress_bar_new_with_adjustment(
    adjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

external gtk_progress_bar_set_bar_style(
    pbar : Pointer[GtkProgressBar],
    style : GtkProgressBarStyle);

external gtk_progress_bar_set_discrete_blocks(
    pbar : Pointer[GtkProgressBar],
    blocks : UInt);

external gtk_progress_bar_set_activity_step(
    pbar : Pointer[GtkProgressBar],
    step : UInt);

external gtk_progress_bar_set_activity_blocks(
    pbar : Pointer[GtkProgressBar],
    blocks : UInt);

external gtk_progress_bar_update(
    pbar : Pointer[GtkProgressBar],
    percentage : Double);

alias GtkToggleAction = Struct__GtkToggleAction;

alias GtkToggleActionPrivate = Opaque;

alias GtkToggleActionClass = Struct__GtkToggleActionClass;

record Struct__GtkToggleAction (
    parent : GtkAction,
    private_data : Pointer[GtkToggleActionPrivate],
);

record Struct__GtkToggleActionClass (
    parent_class : GtkActionClass,
    toggled : CCodePointer[(Pointer[Struct__GtkToggleAction]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_toggle_action_get_type() CULong;

external gtk_toggle_action_new(
    name : Pointer[CChar],
    label : Pointer[CChar],
    tooltip : Pointer[CChar],
    stock_id : Pointer[CChar]) Pointer[GtkToggleAction];

external gtk_toggle_action_toggled(
    action : Pointer[GtkToggleAction]);

external gtk_toggle_action_set_active(
    action : Pointer[GtkToggleAction],
    is_active : Int);

external gtk_toggle_action_get_active(
    action : Pointer[GtkToggleAction]) Int;

external gtk_toggle_action_set_draw_as_radio(
    action : Pointer[GtkToggleAction],
    draw_as_radio : Int);

external gtk_toggle_action_get_draw_as_radio(
    action : Pointer[GtkToggleAction]) Int;

alias GtkRadioAction = Struct__GtkRadioAction;

alias GtkRadioActionPrivate = Opaque;

alias GtkRadioActionClass = Struct__GtkRadioActionClass;

record Struct__GtkRadioAction (
    parent : GtkToggleAction,
    private_data : Pointer[GtkRadioActionPrivate],
);

record Struct__GtkRadioActionClass (
    parent_class : GtkToggleActionClass,
    changed : CCodePointer[(Pointer[Struct__GtkRadioAction],Pointer[Struct__GtkRadioAction]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_radio_action_get_type() CULong;

external gtk_radio_action_new(
    name : Pointer[CChar],
    label : Pointer[CChar],
    tooltip : Pointer[CChar],
    stock_id : Pointer[CChar],
    value : Int) Pointer[GtkRadioAction];

external gtk_radio_action_get_group(
    action : Pointer[GtkRadioAction]) Pointer[GSList];

external gtk_radio_action_set_group(
    action : Pointer[GtkRadioAction],
    group : Pointer[GSList]);

external gtk_radio_action_get_current_value(
    action : Pointer[GtkRadioAction]) Int;

external gtk_radio_action_set_current_value(
    action : Pointer[GtkRadioAction],
    current_value : Int);

alias GtkRadioButton = Struct__GtkRadioButton;

alias GtkRadioButtonClass = Struct__GtkRadioButtonClass;

record Struct__GtkRadioButton (
    check_button : GtkCheckButton,
    group : Pointer[GSList],
);

record Struct__GtkRadioButtonClass (
    parent_class : GtkCheckButtonClass,
    group_changed : CCodePointer[(Pointer[Struct__GtkRadioButton]),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_radio_button_get_type() CULong;

external gtk_radio_button_new(
    group : Pointer[GSList]) Pointer[GtkWidget];

external gtk_radio_button_new_from_widget(
    radio_group_member : Pointer[GtkRadioButton]) Pointer[GtkWidget];

external gtk_radio_button_new_with_label(
    group : Pointer[GSList],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_button_new_with_label_from_widget(
    radio_group_member : Pointer[GtkRadioButton],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_button_new_with_mnemonic(
    group : Pointer[GSList],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_button_new_with_mnemonic_from_widget(
    radio_group_member : Pointer[GtkRadioButton],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_button_get_group(
    radio_button : Pointer[GtkRadioButton]) Pointer[GSList];

external gtk_radio_button_set_group(
    radio_button : Pointer[GtkRadioButton],
    group : Pointer[GSList]);

alias GtkRadioMenuItem = Struct__GtkRadioMenuItem;

alias GtkRadioMenuItemClass = Struct__GtkRadioMenuItemClass;

record Struct__GtkRadioMenuItem (
    check_menu_item : GtkCheckMenuItem,
    group : Pointer[GSList],
);

record Struct__GtkRadioMenuItemClass (
    parent_class : GtkCheckMenuItemClass,
    group_changed : CCodePointer[(Pointer[Struct__GtkRadioMenuItem]),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_radio_menu_item_get_type() CULong;

external gtk_radio_menu_item_new(
    group : Pointer[GSList]) Pointer[GtkWidget];

external gtk_radio_menu_item_new_with_label(
    group : Pointer[GSList],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_menu_item_new_with_mnemonic(
    group : Pointer[GSList],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_menu_item_new_from_widget(
    group : Pointer[GtkRadioMenuItem]) Pointer[GtkWidget];

external gtk_radio_menu_item_new_with_mnemonic_from_widget(
    group : Pointer[GtkRadioMenuItem],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_menu_item_new_with_label_from_widget(
    group : Pointer[GtkRadioMenuItem],
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_radio_menu_item_get_group(
    radio_menu_item : Pointer[GtkRadioMenuItem]) Pointer[GSList];

external gtk_radio_menu_item_set_group(
    radio_menu_item : Pointer[GtkRadioMenuItem],
    group : Pointer[GSList]);

alias GtkToggleToolButton = Struct__GtkToggleToolButton;

alias GtkToggleToolButtonClass = Struct__GtkToggleToolButtonClass;

alias GtkToggleToolButtonPrivate = Opaque;

record Struct__GtkToggleToolButton (
    parent : GtkToolButton,
    priv : Pointer[GtkToggleToolButtonPrivate],
);

record Struct__GtkToggleToolButtonClass (
    parent_class : GtkToolButtonClass,
    toggled : CCodePointer[(Pointer[Struct__GtkToggleToolButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_toggle_tool_button_get_type() CULong;

external gtk_toggle_tool_button_new() Pointer[GtkToolItem];

external gtk_toggle_tool_button_new_from_stock(
    stock_id : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_toggle_tool_button_set_active(
    button : Pointer[GtkToggleToolButton],
    is_active : Int);

external gtk_toggle_tool_button_get_active(
    button : Pointer[GtkToggleToolButton]) Int;

alias GtkRadioToolButton = Struct__GtkRadioToolButton;

alias GtkRadioToolButtonClass = Struct__GtkRadioToolButtonClass;

record Struct__GtkRadioToolButton (
    parent : GtkToggleToolButton,
);

record Struct__GtkRadioToolButtonClass (
    parent_class : GtkToggleToolButtonClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_radio_tool_button_get_type() CULong;

external gtk_radio_tool_button_new(
    group : Pointer[GSList]) Pointer[GtkToolItem];

external gtk_radio_tool_button_new_from_stock(
    group : Pointer[GSList],
    stock_id : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_radio_tool_button_new_from_widget(
    group : Pointer[GtkRadioToolButton]) Pointer[GtkToolItem];

external gtk_radio_tool_button_new_with_stock_from_widget(
    group : Pointer[GtkRadioToolButton],
    stock_id : Pointer[CChar]) Pointer[GtkToolItem];

external gtk_radio_tool_button_get_group(
    button : Pointer[GtkRadioToolButton]) Pointer[GSList];

external gtk_radio_tool_button_set_group(
    button : Pointer[GtkRadioToolButton],
    group : Pointer[GSList]);

alias GtkRecentInfo = Opaque;

alias GtkRecentData = Struct__GtkRecentData;

alias GtkRecentManager = Struct__GtkRecentManager;

alias GtkRecentManagerClass = Struct__GtkRecentManagerClass;

alias GtkRecentManagerPrivate = Opaque;

record Struct__GtkRecentData (
    display_name : Pointer[CChar],
    description : Pointer[CChar],
    mime_type : Pointer[CChar],
    app_name : Pointer[CChar],
    app_exec : Pointer[CChar],
    groups : Pointer[Pointer[CChar]],
    is_private : Int,
);

record Struct__GtkRecentManager (
    parent_instance : GObject,
    priv : Pointer[GtkRecentManagerPrivate],
);

record Struct__GtkRecentManagerClass (
    parent_class : GObjectClass,
    changed : CCodePointer[(Pointer[Struct__GtkRecentManager]),()],
    _gtk_recent1 : CCodePointer[(),()],
    _gtk_recent2 : CCodePointer[(),()],
    _gtk_recent3 : CCodePointer[(),()],
    _gtk_recent4 : CCodePointer[(),()],
);

alias GTK_RECENT_MANAGER_ERROR_NOT_FOUND = 0;
alias GTK_RECENT_MANAGER_ERROR_INVALID_URI = 1;
alias GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = 2;
alias GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = 3;
alias GTK_RECENT_MANAGER_ERROR_READ = 4;
alias GTK_RECENT_MANAGER_ERROR_WRITE = 5;
alias GTK_RECENT_MANAGER_ERROR_UNKNOWN = 6;

alias GtkRecentManagerError = Int;

external gtk_recent_manager_error_quark() UInt;

external gtk_recent_manager_get_type() CULong;

external gtk_recent_manager_new() Pointer[GtkRecentManager];

external gtk_recent_manager_get_default() Pointer[GtkRecentManager];

external gtk_recent_manager_get_for_screen(
    screen : Pointer[GdkScreen]) Pointer[GtkRecentManager];

external gtk_recent_manager_set_screen(
    manager : Pointer[GtkRecentManager],
    screen : Pointer[GdkScreen]);

external gtk_recent_manager_add_item(
    manager : Pointer[GtkRecentManager],
    uri : Pointer[CChar]) Int;

external gtk_recent_manager_add_full(
    manager : Pointer[GtkRecentManager],
    uri : Pointer[CChar],
    recent_data : Pointer[GtkRecentData]) Int;

external gtk_recent_manager_remove_item(
    manager : Pointer[GtkRecentManager],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_recent_manager_lookup_item(
    manager : Pointer[GtkRecentManager],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GtkRecentInfo];

external gtk_recent_manager_has_item(
    manager : Pointer[GtkRecentManager],
    uri : Pointer[CChar]) Int;

external gtk_recent_manager_move_item(
    manager : Pointer[GtkRecentManager],
    uri : Pointer[CChar],
    new_uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_recent_manager_set_limit(
    manager : Pointer[GtkRecentManager],
    limit : Int);

external gtk_recent_manager_get_limit(
    manager : Pointer[GtkRecentManager]) Int;

external gtk_recent_manager_get_items(
    manager : Pointer[GtkRecentManager]) Pointer[GList];

external gtk_recent_manager_purge_items(
    manager : Pointer[GtkRecentManager],
    error : Pointer[Pointer[GError]]) Int;

external gtk_recent_info_get_type() CULong;

external gtk_recent_info_ref(
    info : Pointer[GtkRecentInfo]) Pointer[GtkRecentInfo];

external gtk_recent_info_unref(
    info : Pointer[GtkRecentInfo]);

external gtk_recent_info_get_uri(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_get_display_name(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_get_description(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_get_mime_type(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_get_added(
    info : Pointer[GtkRecentInfo]) CLong;

external gtk_recent_info_get_modified(
    info : Pointer[GtkRecentInfo]) CLong;

external gtk_recent_info_get_visited(
    info : Pointer[GtkRecentInfo]) CLong;

external gtk_recent_info_get_private_hint(
    info : Pointer[GtkRecentInfo]) Int;

external gtk_recent_info_get_application_info(
    info : Pointer[GtkRecentInfo],
    app_name : Pointer[CChar],
    app_exec : Pointer[Pointer[CChar]],
    count : Pointer[UInt],
    time_ : Pointer[CLong]) Int;

external gtk_recent_info_get_applications(
    info : Pointer[GtkRecentInfo],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external gtk_recent_info_last_application(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_has_application(
    info : Pointer[GtkRecentInfo],
    app_name : Pointer[CChar]) Int;

external gtk_recent_info_get_groups(
    info : Pointer[GtkRecentInfo],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external gtk_recent_info_has_group(
    info : Pointer[GtkRecentInfo],
    group_name : Pointer[CChar]) Int;

external gtk_recent_info_get_icon(
    info : Pointer[GtkRecentInfo],
    size : Int) Pointer[GdkPixbuf];

external gtk_recent_info_get_short_name(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_get_uri_display(
    info : Pointer[GtkRecentInfo]) Pointer[CChar];

external gtk_recent_info_get_age(
    info : Pointer[GtkRecentInfo]) Int;

external gtk_recent_info_is_local(
    info : Pointer[GtkRecentInfo]) Int;

external gtk_recent_info_exists(
    info : Pointer[GtkRecentInfo]) Int;

external gtk_recent_info_match(
    info_a : Pointer[GtkRecentInfo],
    info_b : Pointer[GtkRecentInfo]) Int;

external _gtk_recent_manager_sync();

alias GtkRecentAction = Struct__GtkRecentAction;

alias GtkRecentActionPrivate = Opaque;

alias GtkRecentActionClass = Struct__GtkRecentActionClass;

record Struct__GtkRecentAction (
    parent_instance : GtkAction,
    priv : Pointer[GtkRecentActionPrivate],
);

record Struct__GtkRecentActionClass (
    parent_class : GtkActionClass,
);

external gtk_recent_action_get_type() CULong;

external gtk_recent_action_new(
    name : Pointer[CChar],
    label : Pointer[CChar],
    tooltip : Pointer[CChar],
    stock_id : Pointer[CChar]) Pointer[GtkAction];

external gtk_recent_action_new_for_manager(
    name : Pointer[CChar],
    label : Pointer[CChar],
    tooltip : Pointer[CChar],
    stock_id : Pointer[CChar],
    manager : Pointer[GtkRecentManager]) Pointer[GtkAction];

external gtk_recent_action_get_show_numbers(
    action : Pointer[GtkRecentAction]) Int;

external gtk_recent_action_set_show_numbers(
    action : Pointer[GtkRecentAction],
    show_numbers : Int);

alias GtkRecentFilter = Opaque;

alias GtkRecentFilterInfo = Struct__GtkRecentFilterInfo;

alias GTK_RECENT_FILTER_URI = 1;
alias GTK_RECENT_FILTER_DISPLAY_NAME = 2;
alias GTK_RECENT_FILTER_MIME_TYPE = 4;
alias GTK_RECENT_FILTER_APPLICATION = 8;
alias GTK_RECENT_FILTER_GROUP = 16;
alias GTK_RECENT_FILTER_AGE = 32;

alias GtkRecentFilterFlags = Int;

alias GtkRecentFilterFunc = CCodePointer[(Pointer[Struct__GtkRecentFilterInfo],RawPointer),(Int)];

record Struct__GtkRecentFilterInfo (
    contains : GtkRecentFilterFlags,
    uri : Pointer[CChar],
    display_name : Pointer[CChar],
    mime_type : Pointer[CChar],
    applications : Pointer[Pointer[CChar]],
    groups : Pointer[Pointer[CChar]],
    age : Int,
);

external gtk_recent_filter_get_type() CULong;

external gtk_recent_filter_new() Pointer[GtkRecentFilter];

external gtk_recent_filter_set_name(
    filter : Pointer[GtkRecentFilter],
    name : Pointer[CChar]);

external gtk_recent_filter_get_name(
    filter : Pointer[GtkRecentFilter]) Pointer[CChar];

external gtk_recent_filter_add_mime_type(
    filter : Pointer[GtkRecentFilter],
    mime_type : Pointer[CChar]);

external gtk_recent_filter_add_pattern(
    filter : Pointer[GtkRecentFilter],
    pattern : Pointer[CChar]);

external gtk_recent_filter_add_pixbuf_formats(
    filter : Pointer[GtkRecentFilter]);

external gtk_recent_filter_add_application(
    filter : Pointer[GtkRecentFilter],
    application : Pointer[CChar]);

external gtk_recent_filter_add_group(
    filter : Pointer[GtkRecentFilter],
    group : Pointer[CChar]);

external gtk_recent_filter_add_age(
    filter : Pointer[GtkRecentFilter],
    days : Int);

external gtk_recent_filter_add_custom(
    filter : Pointer[GtkRecentFilter],
    needed : GtkRecentFilterFlags,
    func : GtkRecentFilterFunc,
    data : gpointer,
    data_destroy : GDestroyNotify);

external gtk_recent_filter_get_needed(
    filter : Pointer[GtkRecentFilter]) GtkRecentFilterFlags;

external gtk_recent_filter_filter(
    filter : Pointer[GtkRecentFilter],
    filter_info : Pointer[GtkRecentFilterInfo]) Int;

alias GTK_RECENT_SORT_NONE = 0;
alias GTK_RECENT_SORT_MRU = 1;
alias GTK_RECENT_SORT_LRU = 2;
alias GTK_RECENT_SORT_CUSTOM = 3;

alias GtkRecentSortType = Int;

alias GtkRecentSortFunc = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),(Int)];

alias GtkRecentChooser = Opaque;

alias GtkRecentChooserIface = Struct__GtkRecentChooserIface;

alias GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = 0;
alias GTK_RECENT_CHOOSER_ERROR_INVALID_URI = 1;

alias GtkRecentChooserError = Int;

external gtk_recent_chooser_error_quark() UInt;

record Struct__GtkRecentChooserIface (
    base_iface : GTypeInterface,
    set_current_uri : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(Int)],
    get_current_uri : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    select_uri : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(Int)],
    unselect_uri : CCodePointer[(OpaquePointer,Pointer[CChar]),()],
    select_all : CCodePointer[(OpaquePointer),()],
    unselect_all : CCodePointer[(OpaquePointer),()],
    get_items : CCodePointer[(OpaquePointer),(Pointer[Struct__GList])],
    get_recent_manager : CCodePointer[(OpaquePointer),(Pointer[Struct__GtkRecentManager])],
    add_filter : CCodePointer[(OpaquePointer,OpaquePointer),()],
    remove_filter : CCodePointer[(OpaquePointer,OpaquePointer),()],
    list_filters : CCodePointer[(OpaquePointer),(Pointer[Struct__GSList])],
    set_sort_func : CCodePointer[(OpaquePointer,CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),(Int)],RawPointer,CCodePointer[(RawPointer),()]),()],
    item_activated : CCodePointer[(OpaquePointer),()],
    selection_changed : CCodePointer[(OpaquePointer),()],
);

external gtk_recent_chooser_get_type() CULong;

external gtk_recent_chooser_set_show_private(
    chooser : Pointer[GtkRecentChooser],
    show_private : Int);

external gtk_recent_chooser_get_show_private(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_show_not_found(
    chooser : Pointer[GtkRecentChooser],
    show_not_found : Int);

external gtk_recent_chooser_get_show_not_found(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_select_multiple(
    chooser : Pointer[GtkRecentChooser],
    select_multiple : Int);

external gtk_recent_chooser_get_select_multiple(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_limit(
    chooser : Pointer[GtkRecentChooser],
    limit : Int);

external gtk_recent_chooser_get_limit(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_local_only(
    chooser : Pointer[GtkRecentChooser],
    local_only : Int);

external gtk_recent_chooser_get_local_only(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_show_tips(
    chooser : Pointer[GtkRecentChooser],
    show_tips : Int);

external gtk_recent_chooser_get_show_tips(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_show_numbers(
    chooser : Pointer[GtkRecentChooser],
    show_numbers : Int);

external gtk_recent_chooser_get_show_numbers(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_show_icons(
    chooser : Pointer[GtkRecentChooser],
    show_icons : Int);

external gtk_recent_chooser_get_show_icons(
    chooser : Pointer[GtkRecentChooser]) Int;

external gtk_recent_chooser_set_sort_type(
    chooser : Pointer[GtkRecentChooser],
    sort_type : GtkRecentSortType);

external gtk_recent_chooser_get_sort_type(
    chooser : Pointer[GtkRecentChooser]) GtkRecentSortType;

external gtk_recent_chooser_set_sort_func(
    chooser : Pointer[GtkRecentChooser],
    sort_func : GtkRecentSortFunc,
    sort_data : gpointer,
    data_destroy : GDestroyNotify);

external gtk_recent_chooser_set_current_uri(
    chooser : Pointer[GtkRecentChooser],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_recent_chooser_get_current_uri(
    chooser : Pointer[GtkRecentChooser]) Pointer[CChar];

external gtk_recent_chooser_get_current_item(
    chooser : Pointer[GtkRecentChooser]) Pointer[GtkRecentInfo];

external gtk_recent_chooser_select_uri(
    chooser : Pointer[GtkRecentChooser],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external gtk_recent_chooser_unselect_uri(
    chooser : Pointer[GtkRecentChooser],
    uri : Pointer[CChar]);

external gtk_recent_chooser_select_all(
    chooser : Pointer[GtkRecentChooser]);

external gtk_recent_chooser_unselect_all(
    chooser : Pointer[GtkRecentChooser]);

external gtk_recent_chooser_get_items(
    chooser : Pointer[GtkRecentChooser]) Pointer[GList];

external gtk_recent_chooser_get_uris(
    chooser : Pointer[GtkRecentChooser],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external gtk_recent_chooser_add_filter(
    chooser : Pointer[GtkRecentChooser],
    filter : Pointer[GtkRecentFilter]);

external gtk_recent_chooser_remove_filter(
    chooser : Pointer[GtkRecentChooser],
    filter : Pointer[GtkRecentFilter]);

external gtk_recent_chooser_list_filters(
    chooser : Pointer[GtkRecentChooser]) Pointer[GSList];

external gtk_recent_chooser_set_filter(
    chooser : Pointer[GtkRecentChooser],
    filter : Pointer[GtkRecentFilter]);

external gtk_recent_chooser_get_filter(
    chooser : Pointer[GtkRecentChooser]) Pointer[GtkRecentFilter];

alias GtkRecentChooserDialog = Struct__GtkRecentChooserDialog;

alias GtkRecentChooserDialogClass = Struct__GtkRecentChooserDialogClass;

alias GtkRecentChooserDialogPrivate = Opaque;

record Struct__GtkRecentChooserDialog (
    parent_instance : GtkDialog,
    priv : Pointer[GtkRecentChooserDialogPrivate],
);

record Struct__GtkRecentChooserDialogClass (
    parent_class : GtkDialogClass,
);

external gtk_recent_chooser_dialog_get_type() CULong;

external gtk_recent_chooser_dialog_new(
    title : Pointer[CChar],
    parent : Pointer[GtkWindow],
    first_button_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_recent_chooser_dialog_new_for_manager(
    title : Pointer[CChar],
    parent : Pointer[GtkWindow],
    manager : Pointer[GtkRecentManager],
    first_button_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

alias GtkRecentChooserMenu = Struct__GtkRecentChooserMenu;

alias GtkRecentChooserMenuClass = Struct__GtkRecentChooserMenuClass;

alias GtkRecentChooserMenuPrivate = Opaque;

record Struct__GtkRecentChooserMenu (
    parent_instance : GtkMenu,
    priv : Pointer[GtkRecentChooserMenuPrivate],
);

record Struct__GtkRecentChooserMenuClass (
    parent_class : GtkMenuClass,
    gtk_recent1 : CCodePointer[(),()],
    gtk_recent2 : CCodePointer[(),()],
    gtk_recent3 : CCodePointer[(),()],
    gtk_recent4 : CCodePointer[(),()],
);

external gtk_recent_chooser_menu_get_type() CULong;

external gtk_recent_chooser_menu_new() Pointer[GtkWidget];

external gtk_recent_chooser_menu_new_for_manager(
    manager : Pointer[GtkRecentManager]) Pointer[GtkWidget];

external gtk_recent_chooser_menu_get_show_numbers(
    menu : Pointer[GtkRecentChooserMenu]) Int;

external gtk_recent_chooser_menu_set_show_numbers(
    menu : Pointer[GtkRecentChooserMenu],
    show_numbers : Int);

alias GtkRecentChooserWidget = Struct__GtkRecentChooserWidget;

alias GtkRecentChooserWidgetClass = Struct__GtkRecentChooserWidgetClass;

alias GtkRecentChooserWidgetPrivate = Opaque;

record Struct__GtkRecentChooserWidget (
    parent_instance : GtkVBox,
    priv : Pointer[GtkRecentChooserWidgetPrivate],
);

record Struct__GtkRecentChooserWidgetClass (
    parent_class : GtkVBoxClass,
);

external gtk_recent_chooser_widget_get_type() CULong;

external gtk_recent_chooser_widget_new() Pointer[GtkWidget];

external gtk_recent_chooser_widget_new_for_manager(
    manager : Pointer[GtkRecentManager]) Pointer[GtkWidget];

alias GtkScaleButton = Struct__GtkScaleButton;

alias GtkScaleButtonClass = Struct__GtkScaleButtonClass;

alias GtkScaleButtonPrivate = Opaque;

record Struct__GtkScaleButton (
    parent : GtkButton,
    plus_button : Pointer[GtkWidget],
    minus_button : Pointer[GtkWidget],
    priv : Pointer[GtkScaleButtonPrivate],
);

record Struct__GtkScaleButtonClass (
    parent_class : GtkButtonClass,
    value_changed : CCodePointer[(Pointer[Struct__GtkScaleButton],Double),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_scale_button_get_type() CULong;

external gtk_scale_button_new(
    size : GtkIconSize,
    min : Double,
    max : Double,
    step : Double,
    icons : Pointer[Pointer[CChar]]) Pointer[GtkWidget];

external gtk_scale_button_set_icons(
    button : Pointer[GtkScaleButton],
    icons : Pointer[Pointer[CChar]]);

external gtk_scale_button_get_value(
    button : Pointer[GtkScaleButton]) Double;

external gtk_scale_button_set_value(
    button : Pointer[GtkScaleButton],
    value : Double);

external gtk_scale_button_get_adjustment(
    button : Pointer[GtkScaleButton]) Pointer[GtkAdjustment];

external gtk_scale_button_set_adjustment(
    button : Pointer[GtkScaleButton],
    adjustment : Pointer[GtkAdjustment]);

external gtk_scale_button_get_plus_button(
    button : Pointer[GtkScaleButton]) Pointer[GtkWidget];

external gtk_scale_button_get_minus_button(
    button : Pointer[GtkScaleButton]) Pointer[GtkWidget];

external gtk_scale_button_get_popup(
    button : Pointer[GtkScaleButton]) Pointer[GtkWidget];

external gtk_scale_button_get_orientation(
    button : Pointer[GtkScaleButton]) GtkOrientation;

external gtk_scale_button_set_orientation(
    button : Pointer[GtkScaleButton],
    orientation : GtkOrientation);

alias GtkVScrollbar = Struct__GtkVScrollbar;

alias GtkVScrollbarClass = Struct__GtkVScrollbarClass;

record Struct__GtkVScrollbar (
    scrollbar : GtkScrollbar,
);

record Struct__GtkVScrollbarClass (
    parent_class : GtkScrollbarClass,
);

external gtk_vscrollbar_get_type() CULong;

external gtk_vscrollbar_new(
    adjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

alias GtkViewport = Struct__GtkViewport;

alias GtkViewportClass = Struct__GtkViewportClass;

record Struct__GtkViewport (
    bin : GtkBin,
    shadow_type : GtkShadowType,
    view_window : Pointer[GdkWindow],
    bin_window : Pointer[GdkWindow],
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
);

record Struct__GtkViewportClass (
    parent_class : GtkBinClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkViewport],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
);

external gtk_viewport_get_type() CULong;

external gtk_viewport_new(
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

external gtk_viewport_get_hadjustment(
    viewport : Pointer[GtkViewport]) Pointer[GtkAdjustment];

external gtk_viewport_get_vadjustment(
    viewport : Pointer[GtkViewport]) Pointer[GtkAdjustment];

external gtk_viewport_set_hadjustment(
    viewport : Pointer[GtkViewport],
    adjustment : Pointer[GtkAdjustment]);

external gtk_viewport_set_vadjustment(
    viewport : Pointer[GtkViewport],
    adjustment : Pointer[GtkAdjustment]);

external gtk_viewport_set_shadow_type(
    viewport : Pointer[GtkViewport],
    type : GtkShadowType);

external gtk_viewport_get_shadow_type(
    viewport : Pointer[GtkViewport]) GtkShadowType;

external gtk_viewport_get_bin_window(
    viewport : Pointer[GtkViewport]) Pointer[GdkWindow];

external gtk_viewport_get_view_window(
    viewport : Pointer[GtkViewport]) Pointer[GdkWindow];

alias GtkScrolledWindow = Struct__GtkScrolledWindow;

alias GtkScrolledWindowClass = Struct__GtkScrolledWindowClass;

record Struct__GtkScrolledWindow (
    container : GtkBin,
    hscrollbar : Pointer[GtkWidget],
    vscrollbar : Pointer[GtkWidget],
    hscrollbar_policy : UInt,
    vscrollbar_policy : UInt,
    hscrollbar_visible : UInt,
    vscrollbar_visible : UInt,
    window_placement : UInt,
    focus_out : UInt,
    shadow_type : UShort,
);

record Struct__GtkScrolledWindowClass (
    parent_class : GtkBinClass,
    scrollbar_spacing : Int,
    scroll_child : CCodePointer[(Pointer[Struct__GtkScrolledWindow],Int,Int),(Int)],
    move_focus_out : CCodePointer[(Pointer[Struct__GtkScrolledWindow],Int),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_scrolled_window_get_type() CULong;

external gtk_scrolled_window_new(
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

external gtk_scrolled_window_set_hadjustment(
    scrolled_window : Pointer[GtkScrolledWindow],
    hadjustment : Pointer[GtkAdjustment]);

external gtk_scrolled_window_set_vadjustment(
    scrolled_window : Pointer[GtkScrolledWindow],
    vadjustment : Pointer[GtkAdjustment]);

external gtk_scrolled_window_get_hadjustment(
    scrolled_window : Pointer[GtkScrolledWindow]) Pointer[GtkAdjustment];

external gtk_scrolled_window_get_vadjustment(
    scrolled_window : Pointer[GtkScrolledWindow]) Pointer[GtkAdjustment];

external gtk_scrolled_window_get_hscrollbar(
    scrolled_window : Pointer[GtkScrolledWindow]) Pointer[GtkWidget];

external gtk_scrolled_window_get_vscrollbar(
    scrolled_window : Pointer[GtkScrolledWindow]) Pointer[GtkWidget];

external gtk_scrolled_window_set_policy(
    scrolled_window : Pointer[GtkScrolledWindow],
    hscrollbar_policy : GtkPolicyType,
    vscrollbar_policy : GtkPolicyType);

external gtk_scrolled_window_get_policy(
    scrolled_window : Pointer[GtkScrolledWindow],
    hscrollbar_policy : Pointer[GtkPolicyType],
    vscrollbar_policy : Pointer[GtkPolicyType]);

external gtk_scrolled_window_set_placement(
    scrolled_window : Pointer[GtkScrolledWindow],
    window_placement : GtkCornerType);

external gtk_scrolled_window_unset_placement(
    scrolled_window : Pointer[GtkScrolledWindow]);

external gtk_scrolled_window_get_placement(
    scrolled_window : Pointer[GtkScrolledWindow]) GtkCornerType;

external gtk_scrolled_window_set_shadow_type(
    scrolled_window : Pointer[GtkScrolledWindow],
    type : GtkShadowType);

external gtk_scrolled_window_get_shadow_type(
    scrolled_window : Pointer[GtkScrolledWindow]) GtkShadowType;

external gtk_scrolled_window_add_with_viewport(
    scrolled_window : Pointer[GtkScrolledWindow],
    child : Pointer[GtkWidget]);

external _gtk_scrolled_window_get_scrollbar_spacing(
    scrolled_window : Pointer[GtkScrolledWindow]) Int;

alias GtkSeparatorMenuItem = Struct__GtkSeparatorMenuItem;

alias GtkSeparatorMenuItemClass = Struct__GtkSeparatorMenuItemClass;

record Struct__GtkSeparatorMenuItem (
    menu_item : GtkMenuItem,
);

record Struct__GtkSeparatorMenuItemClass (
    parent_class : GtkMenuItemClass,
);

external gtk_separator_menu_item_get_type() CULong;

external gtk_separator_menu_item_new() Pointer[GtkWidget];

alias GtkSeparatorToolItem = Struct__GtkSeparatorToolItem;

alias GtkSeparatorToolItemClass = Struct__GtkSeparatorToolItemClass;

alias GtkSeparatorToolItemPrivate = Opaque;

record Struct__GtkSeparatorToolItem (
    parent : GtkToolItem,
    priv : Pointer[GtkSeparatorToolItemPrivate],
);

record Struct__GtkSeparatorToolItemClass (
    parent_class : GtkToolItemClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_separator_tool_item_get_type() CULong;

external gtk_separator_tool_item_new() Pointer[GtkToolItem];

external gtk_separator_tool_item_get_draw(
    item : Pointer[GtkSeparatorToolItem]) Int;

external gtk_separator_tool_item_set_draw(
    item : Pointer[GtkSeparatorToolItem],
    draw : Int);

external gtk_show_uri(
    screen : Pointer[GdkScreen],
    uri : Pointer[CChar],
    timestamp : UInt,
    error : Pointer[Pointer[GError]]) Int;

alias GTK_UPDATE_ALWAYS = 0;
alias GTK_UPDATE_IF_VALID = 1;

alias GtkSpinButtonUpdatePolicy = Int;

alias GTK_SPIN_STEP_FORWARD = 0;
alias GTK_SPIN_STEP_BACKWARD = 1;
alias GTK_SPIN_PAGE_FORWARD = 2;
alias GTK_SPIN_PAGE_BACKWARD = 3;
alias GTK_SPIN_HOME = 4;
alias GTK_SPIN_END = 5;
alias GTK_SPIN_USER_DEFINED = 6;

alias GtkSpinType = Int;

alias GtkSpinButton = Struct__GtkSpinButton;

alias GtkSpinButtonClass = Struct__GtkSpinButtonClass;

record Struct__GtkSpinButton (
    entry : GtkEntry,
    adjustment : Pointer[GtkAdjustment],
    panel : Pointer[GdkWindow],
    timer : UInt,
    climb_rate : Double,
    timer_step : Double,
    update_policy : GtkSpinButtonUpdatePolicy,
    in_child : UInt,
    click_child : UInt,
    button : UInt,
    need_timer : UInt,
    timer_calls : UInt,
    digits : UInt,
    numeric : UInt,
    wrap : UInt,
    snap_to_ticks : UInt,
);

record Struct__GtkSpinButtonClass (
    parent_class : GtkEntryClass,
    input : CCodePointer[(Pointer[Struct__GtkSpinButton],Pointer[Double]),(Int)],
    output : CCodePointer[(Pointer[Struct__GtkSpinButton]),(Int)],
    value_changed : CCodePointer[(Pointer[Struct__GtkSpinButton]),()],
    change_value : CCodePointer[(Pointer[Struct__GtkSpinButton],Int),()],
    wrapped : CCodePointer[(Pointer[Struct__GtkSpinButton]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_spin_button_get_type() CULong;

external gtk_spin_button_configure(
    spin_button : Pointer[GtkSpinButton],
    adjustment : Pointer[GtkAdjustment],
    climb_rate : Double,
    digits : UInt);

external gtk_spin_button_new(
    adjustment : Pointer[GtkAdjustment],
    climb_rate : Double,
    digits : UInt) Pointer[GtkWidget];

external gtk_spin_button_new_with_range(
    min : Double,
    max : Double,
    step : Double) Pointer[GtkWidget];

external gtk_spin_button_set_adjustment(
    spin_button : Pointer[GtkSpinButton],
    adjustment : Pointer[GtkAdjustment]);

external gtk_spin_button_get_adjustment(
    spin_button : Pointer[GtkSpinButton]) Pointer[GtkAdjustment];

external gtk_spin_button_set_digits(
    spin_button : Pointer[GtkSpinButton],
    digits : UInt);

external gtk_spin_button_get_digits(
    spin_button : Pointer[GtkSpinButton]) UInt;

external gtk_spin_button_set_increments(
    spin_button : Pointer[GtkSpinButton],
    step : Double,
    page : Double);

external gtk_spin_button_get_increments(
    spin_button : Pointer[GtkSpinButton],
    step : Pointer[Double],
    page : Pointer[Double]);

external gtk_spin_button_set_range(
    spin_button : Pointer[GtkSpinButton],
    min : Double,
    max : Double);

external gtk_spin_button_get_range(
    spin_button : Pointer[GtkSpinButton],
    min : Pointer[Double],
    max : Pointer[Double]);

external gtk_spin_button_get_value(
    spin_button : Pointer[GtkSpinButton]) Double;

external gtk_spin_button_get_value_as_int(
    spin_button : Pointer[GtkSpinButton]) Int;

external gtk_spin_button_set_value(
    spin_button : Pointer[GtkSpinButton],
    value : Double);

external gtk_spin_button_set_update_policy(
    spin_button : Pointer[GtkSpinButton],
    policy : GtkSpinButtonUpdatePolicy);

external gtk_spin_button_get_update_policy(
    spin_button : Pointer[GtkSpinButton]) GtkSpinButtonUpdatePolicy;

external gtk_spin_button_set_numeric(
    spin_button : Pointer[GtkSpinButton],
    numeric : Int);

external gtk_spin_button_get_numeric(
    spin_button : Pointer[GtkSpinButton]) Int;

external gtk_spin_button_spin(
    spin_button : Pointer[GtkSpinButton],
    direction : GtkSpinType,
    increment : Double);

external gtk_spin_button_set_wrap(
    spin_button : Pointer[GtkSpinButton],
    wrap : Int);

external gtk_spin_button_get_wrap(
    spin_button : Pointer[GtkSpinButton]) Int;

external gtk_spin_button_set_snap_to_ticks(
    spin_button : Pointer[GtkSpinButton],
    snap_to_ticks : Int);

external gtk_spin_button_get_snap_to_ticks(
    spin_button : Pointer[GtkSpinButton]) Int;

external gtk_spin_button_update(
    spin_button : Pointer[GtkSpinButton]);

alias GtkSpinner = Struct__GtkSpinner;

alias GtkSpinnerClass = Struct__GtkSpinnerClass;

alias GtkSpinnerPrivate = Opaque;

record Struct__GtkSpinner (
    parent : GtkDrawingArea,
    priv : Pointer[GtkSpinnerPrivate],
);

record Struct__GtkSpinnerClass (
    parent_class : GtkDrawingAreaClass,
);

external gtk_spinner_get_type() CULong;

external gtk_spinner_new() Pointer[GtkWidget];

external gtk_spinner_start(
    spinner : Pointer[GtkSpinner]);

external gtk_spinner_stop(
    spinner : Pointer[GtkSpinner]);

alias GtkStatusbar = Struct__GtkStatusbar;

alias GtkStatusbarClass = Struct__GtkStatusbarClass;

record Struct__GtkStatusbar (
    parent_widget : GtkHBox,
    frame : Pointer[GtkWidget],
    label : Pointer[GtkWidget],
    messages : Pointer[GSList],
    keys : Pointer[GSList],
    seq_context_id : UInt,
    seq_message_id : UInt,
    grip_window : Pointer[GdkWindow],
    has_resize_grip : UInt,
);

record Struct__GtkStatusbarClass (
    parent_class : GtkHBoxClass,
    reserved : gpointer,
    text_pushed : CCodePointer[(Pointer[Struct__GtkStatusbar],UInt,Pointer[CChar]),()],
    text_popped : CCodePointer[(Pointer[Struct__GtkStatusbar],UInt,Pointer[CChar]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_statusbar_get_type() CULong;

external gtk_statusbar_new() Pointer[GtkWidget];

external gtk_statusbar_get_context_id(
    statusbar : Pointer[GtkStatusbar],
    context_description : Pointer[CChar]) UInt;

external gtk_statusbar_push(
    statusbar : Pointer[GtkStatusbar],
    context_id : UInt,
    text : Pointer[CChar]) UInt;

external gtk_statusbar_pop(
    statusbar : Pointer[GtkStatusbar],
    context_id : UInt);

external gtk_statusbar_remove(
    statusbar : Pointer[GtkStatusbar],
    context_id : UInt,
    message_id : UInt);

external gtk_statusbar_remove_all(
    statusbar : Pointer[GtkStatusbar],
    context_id : UInt);

external gtk_statusbar_set_has_resize_grip(
    statusbar : Pointer[GtkStatusbar],
    setting : Int);

external gtk_statusbar_get_has_resize_grip(
    statusbar : Pointer[GtkStatusbar]) Int;

external gtk_statusbar_get_message_area(
    statusbar : Pointer[GtkStatusbar]) Pointer[GtkWidget];

alias GtkStatusIcon = Struct__GtkStatusIcon;

alias GtkStatusIconClass = Struct__GtkStatusIconClass;

alias GtkStatusIconPrivate = Opaque;

record Struct__GtkStatusIcon (
    parent_instance : GObject,
    priv : Pointer[GtkStatusIconPrivate],
);

record Struct__GtkStatusIconClass (
    parent_class : GObjectClass,
    activate : CCodePointer[(Pointer[Struct__GtkStatusIcon]),()],
    popup_menu : CCodePointer[(Pointer[Struct__GtkStatusIcon],UInt,UInt),()],
    size_changed : CCodePointer[(Pointer[Struct__GtkStatusIcon],Int),(Int)],
    button_press_event : CCodePointer[(Pointer[Struct__GtkStatusIcon],Pointer[Struct__GdkEventButton]),(Int)],
    button_release_event : CCodePointer[(Pointer[Struct__GtkStatusIcon],Pointer[Struct__GdkEventButton]),(Int)],
    scroll_event : CCodePointer[(Pointer[Struct__GtkStatusIcon],Pointer[Struct__GdkEventScroll]),(Int)],
    query_tooltip : CCodePointer[(Pointer[Struct__GtkStatusIcon],Int,Int,Int,OpaquePointer),(Int)],
    __gtk_reserved1 : RawPointer,
    __gtk_reserved2 : RawPointer,
);

external gtk_status_icon_get_type() CULong;

external gtk_status_icon_new() Pointer[GtkStatusIcon];

external gtk_status_icon_new_from_pixbuf(
    pixbuf : Pointer[GdkPixbuf]) Pointer[GtkStatusIcon];

external gtk_status_icon_new_from_file(
    filename : Pointer[CChar]) Pointer[GtkStatusIcon];

external gtk_status_icon_new_from_stock(
    stock_id : Pointer[CChar]) Pointer[GtkStatusIcon];

external gtk_status_icon_new_from_icon_name(
    icon_name : Pointer[CChar]) Pointer[GtkStatusIcon];

external gtk_status_icon_new_from_gicon(
    icon : Pointer[GIcon]) Pointer[GtkStatusIcon];

external gtk_status_icon_set_from_pixbuf(
    status_icon : Pointer[GtkStatusIcon],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_status_icon_set_from_file(
    status_icon : Pointer[GtkStatusIcon],
    filename : Pointer[CChar]);

external gtk_status_icon_set_from_stock(
    status_icon : Pointer[GtkStatusIcon],
    stock_id : Pointer[CChar]);

external gtk_status_icon_set_from_icon_name(
    status_icon : Pointer[GtkStatusIcon],
    icon_name : Pointer[CChar]);

external gtk_status_icon_set_from_gicon(
    status_icon : Pointer[GtkStatusIcon],
    icon : Pointer[GIcon]);

external gtk_status_icon_get_storage_type(
    status_icon : Pointer[GtkStatusIcon]) GtkImageType;

external gtk_status_icon_get_pixbuf(
    status_icon : Pointer[GtkStatusIcon]) Pointer[GdkPixbuf];

external gtk_status_icon_get_stock(
    status_icon : Pointer[GtkStatusIcon]) Pointer[CChar];

external gtk_status_icon_get_icon_name(
    status_icon : Pointer[GtkStatusIcon]) Pointer[CChar];

external gtk_status_icon_get_gicon(
    status_icon : Pointer[GtkStatusIcon]) Pointer[GIcon];

external gtk_status_icon_get_size(
    status_icon : Pointer[GtkStatusIcon]) Int;

external gtk_status_icon_set_screen(
    status_icon : Pointer[GtkStatusIcon],
    screen : Pointer[GdkScreen]);

external gtk_status_icon_get_screen(
    status_icon : Pointer[GtkStatusIcon]) Pointer[GdkScreen];

external gtk_status_icon_set_tooltip(
    status_icon : Pointer[GtkStatusIcon],
    tooltip_text : Pointer[CChar]);

external gtk_status_icon_set_has_tooltip(
    status_icon : Pointer[GtkStatusIcon],
    has_tooltip : Int);

external gtk_status_icon_set_tooltip_text(
    status_icon : Pointer[GtkStatusIcon],
    text : Pointer[CChar]);

external gtk_status_icon_set_tooltip_markup(
    status_icon : Pointer[GtkStatusIcon],
    markup : Pointer[CChar]);

external gtk_status_icon_set_title(
    status_icon : Pointer[GtkStatusIcon],
    title : Pointer[CChar]);

external gtk_status_icon_get_title(
    status_icon : Pointer[GtkStatusIcon]) Pointer[CChar];

external gtk_status_icon_set_name(
    status_icon : Pointer[GtkStatusIcon],
    name : Pointer[CChar]);

external gtk_status_icon_set_visible(
    status_icon : Pointer[GtkStatusIcon],
    visible : Int);

external gtk_status_icon_get_visible(
    status_icon : Pointer[GtkStatusIcon]) Int;

external gtk_status_icon_set_blinking(
    status_icon : Pointer[GtkStatusIcon],
    blinking : Int);

external gtk_status_icon_get_blinking(
    status_icon : Pointer[GtkStatusIcon]) Int;

external gtk_status_icon_is_embedded(
    status_icon : Pointer[GtkStatusIcon]) Int;

external gtk_status_icon_position_menu(
    menu : Pointer[GtkMenu],
    x : Pointer[Int],
    y : Pointer[Int],
    push_in : Pointer[Int],
    user_data : gpointer);

external gtk_status_icon_get_geometry(
    status_icon : Pointer[GtkStatusIcon],
    screen : Pointer[Pointer[GdkScreen]],
    area : Pointer[GdkRectangle],
    orientation : Pointer[GtkOrientation]) Int;

external gtk_status_icon_get_has_tooltip(
    status_icon : Pointer[GtkStatusIcon]) Int;

external gtk_status_icon_get_tooltip_text(
    status_icon : Pointer[GtkStatusIcon]) Pointer[CChar];

external gtk_status_icon_get_tooltip_markup(
    status_icon : Pointer[GtkStatusIcon]) Pointer[CChar];

external gtk_status_icon_get_x11_window_id(
    status_icon : Pointer[GtkStatusIcon]) UInt;

alias GtkStockItem = Struct__GtkStockItem;

record Struct__GtkStockItem (
    stock_id : Pointer[CChar],
    label : Pointer[CChar],
    modifier : GdkModifierType,
    keyval : UInt,
    translation_domain : Pointer[CChar],
);

external gtk_stock_add(
    items : Pointer[GtkStockItem],
    n_items : UInt);

external gtk_stock_add_static(
    items : Pointer[GtkStockItem],
    n_items : UInt);

external gtk_stock_lookup(
    stock_id : Pointer[CChar],
    item : Pointer[GtkStockItem]) Int;

external gtk_stock_list_ids() Pointer[GSList];

external gtk_stock_item_copy(
    item : Pointer[GtkStockItem]) Pointer[GtkStockItem];

external gtk_stock_item_free(
    item : Pointer[GtkStockItem]);

external gtk_stock_set_translate_func(
    domain : Pointer[CChar],
    func : GtkTranslateFunc,
    data : gpointer,
    notify : GDestroyNotify);

alias GtkTable = Struct__GtkTable;

alias GtkTableClass = Struct__GtkTableClass;

alias GtkTableChild = Struct__GtkTableChild;

alias GtkTableRowCol = Struct__GtkTableRowCol;

record Struct__GtkTable (
    container : GtkContainer,
    children : Pointer[GList],
    rows : Pointer[GtkTableRowCol],
    cols : Pointer[GtkTableRowCol],
    nrows : UShort,
    ncols : UShort,
    column_spacing : UShort,
    row_spacing : UShort,
    homogeneous : UInt,
);

record Struct__GtkTableClass (
    parent_class : GtkContainerClass,
);

record Struct__GtkTableChild (
    widget : Pointer[GtkWidget],
    left_attach : UShort,
    right_attach : UShort,
    top_attach : UShort,
    bottom_attach : UShort,
    xpadding : UShort,
    ypadding : UShort,
    xexpand : UInt,
    yexpand : UInt,
    xshrink : UInt,
    yshrink : UInt,
    xfill : UInt,
    yfill : UInt,
);

record Struct__GtkTableRowCol (
    requisition : UShort,
    allocation : UShort,
    spacing : UShort,
    need_expand : UInt,
    need_shrink : UInt,
    expand : UInt,
    shrink : UInt,
    empty : UInt,
);

external gtk_table_get_type() CULong;

external gtk_table_new(
    rows : UInt,
    columns : UInt,
    homogeneous : Int) Pointer[GtkWidget];

external gtk_table_resize(
    table : Pointer[GtkTable],
    rows : UInt,
    columns : UInt);

external gtk_table_attach(
    table : Pointer[GtkTable],
    child : Pointer[GtkWidget],
    left_attach : UInt,
    right_attach : UInt,
    top_attach : UInt,
    bottom_attach : UInt,
    xoptions : GtkAttachOptions,
    yoptions : GtkAttachOptions,
    xpadding : UInt,
    ypadding : UInt);

external gtk_table_attach_defaults(
    table : Pointer[GtkTable],
    widget : Pointer[GtkWidget],
    left_attach : UInt,
    right_attach : UInt,
    top_attach : UInt,
    bottom_attach : UInt);

external gtk_table_set_row_spacing(
    table : Pointer[GtkTable],
    row : UInt,
    spacing : UInt);

external gtk_table_get_row_spacing(
    table : Pointer[GtkTable],
    row : UInt) UInt;

external gtk_table_set_col_spacing(
    table : Pointer[GtkTable],
    column : UInt,
    spacing : UInt);

external gtk_table_get_col_spacing(
    table : Pointer[GtkTable],
    column : UInt) UInt;

external gtk_table_set_row_spacings(
    table : Pointer[GtkTable],
    spacing : UInt);

external gtk_table_get_default_row_spacing(
    table : Pointer[GtkTable]) UInt;

external gtk_table_set_col_spacings(
    table : Pointer[GtkTable],
    spacing : UInt);

external gtk_table_get_default_col_spacing(
    table : Pointer[GtkTable]) UInt;

external gtk_table_set_homogeneous(
    table : Pointer[GtkTable],
    homogeneous : Int);

external gtk_table_get_homogeneous(
    table : Pointer[GtkTable]) Int;

external gtk_table_get_size(
    table : Pointer[GtkTable],
    rows : Pointer[UInt],
    columns : Pointer[UInt]);

alias GtkTearoffMenuItem = Struct__GtkTearoffMenuItem;

alias GtkTearoffMenuItemClass = Struct__GtkTearoffMenuItemClass;

record Struct__GtkTearoffMenuItem (
    menu_item : GtkMenuItem,
    torn_off : UInt,
);

record Struct__GtkTearoffMenuItemClass (
    parent_class : GtkMenuItemClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tearoff_menu_item_get_type() CULong;

external gtk_tearoff_menu_item_new() Pointer[GtkWidget];

alias GtkTextTagTableForeach = CCodePointer[(Pointer[Struct__GtkTextTag],RawPointer),()];

alias GtkTextTagTableClass = Struct__GtkTextTagTableClass;

record Struct__GtkTextTagTable (
    parent_instance : GObject,
    hash : Pointer[GHashTable],
    anonymous : Pointer[GSList],
    anon_count : Int,
    buffers : Pointer[GSList],
);

record Struct__GtkTextTagTableClass (
    parent_class : GObjectClass,
    tag_changed : CCodePointer[(Pointer[Struct__GtkTextTagTable],Pointer[Struct__GtkTextTag],Int),()],
    tag_added : CCodePointer[(Pointer[Struct__GtkTextTagTable],Pointer[Struct__GtkTextTag]),()],
    tag_removed : CCodePointer[(Pointer[Struct__GtkTextTagTable],Pointer[Struct__GtkTextTag]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_text_tag_table_get_type() CULong;

external gtk_text_tag_table_new() Pointer[GtkTextTagTable];

external gtk_text_tag_table_add(
    table : Pointer[GtkTextTagTable],
    tag : Pointer[GtkTextTag]);

external gtk_text_tag_table_remove(
    table : Pointer[GtkTextTagTable],
    tag : Pointer[GtkTextTag]);

external gtk_text_tag_table_lookup(
    table : Pointer[GtkTextTagTable],
    name : Pointer[CChar]) Pointer[GtkTextTag];

external gtk_text_tag_table_foreach(
    table : Pointer[GtkTextTagTable],
    func : GtkTextTagTableForeach,
    data : gpointer);

external gtk_text_tag_table_get_size(
    table : Pointer[GtkTextTagTable]) Int;

external _gtk_text_tag_table_add_buffer(
    table : Pointer[GtkTextTagTable],
    buffer : gpointer);

external _gtk_text_tag_table_remove_buffer(
    table : Pointer[GtkTextTagTable],
    buffer : gpointer);

alias GtkTextMark = Struct__GtkTextMark;

alias GtkTextMarkClass = Struct__GtkTextMarkClass;

record Struct__GtkTextMark (
    parent_instance : GObject,
    segment : gpointer,
);

record Struct__GtkTextMarkClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_text_mark_get_type() CULong;

external gtk_text_mark_set_visible(
    mark : Pointer[GtkTextMark],
    setting : Int);

external gtk_text_mark_get_visible(
    mark : Pointer[GtkTextMark]) Int;

external gtk_text_mark_new(
    name : Pointer[CChar],
    left_gravity : Int) Pointer[GtkTextMark];

external gtk_text_mark_get_name(
    mark : Pointer[GtkTextMark]) Pointer[CChar];

external gtk_text_mark_get_deleted(
    mark : Pointer[GtkTextMark]) Int;

external gtk_text_mark_get_buffer(
    mark : Pointer[GtkTextMark]) Pointer[GtkTextBuffer];

external gtk_text_mark_get_left_gravity(
    mark : Pointer[GtkTextMark]) Int;

alias GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = 4294967295;
alias GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = 4294967294;
alias GTK_TEXT_BUFFER_TARGET_INFO_TEXT = 4294967293;

alias GtkTextBufferTargetInfo = Int;

alias GtkTextBTree = Opaque;

alias GtkTextLogAttrCache = Opaque;

alias GtkTextBufferClass = Struct__GtkTextBufferClass;

record Struct__GtkTextBuffer (
    parent_instance : GObject,
    tag_table : Pointer[GtkTextTagTable],
    btree : Pointer[GtkTextBTree],
    clipboard_contents_buffers : Pointer[GSList],
    selection_clipboards : Pointer[GSList],
    log_attr_cache : Pointer[GtkTextLogAttrCache],
    user_action_count : UInt,
    modified : UInt,
    has_selection : UInt,
);

record Struct__GtkTextBufferClass (
    parent_class : GObjectClass,
    insert_text : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],Pointer[CChar],Int),()],
    insert_pixbuf : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],OpaquePointer),()],
    insert_child_anchor : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],Pointer[Struct__GtkTextChildAnchor]),()],
    delete_range : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],Pointer[Struct__GtkTextIter]),()],
    changed : CCodePointer[(Pointer[Struct__GtkTextBuffer]),()],
    modified_changed : CCodePointer[(Pointer[Struct__GtkTextBuffer]),()],
    mark_set : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],Pointer[Struct__GtkTextMark]),()],
    mark_deleted : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextMark]),()],
    apply_tag : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextTag],Pointer[Struct__GtkTextIter],Pointer[Struct__GtkTextIter]),()],
    remove_tag : CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextTag],Pointer[Struct__GtkTextIter],Pointer[Struct__GtkTextIter]),()],
    begin_user_action : CCodePointer[(Pointer[Struct__GtkTextBuffer]),()],
    end_user_action : CCodePointer[(Pointer[Struct__GtkTextBuffer]),()],
    paste_done : CCodePointer[(Pointer[Struct__GtkTextBuffer],OpaquePointer),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
);

external gtk_text_buffer_get_type() CULong;

external gtk_text_buffer_new(
    table : Pointer[GtkTextTagTable]) Pointer[GtkTextBuffer];

external gtk_text_buffer_get_line_count(
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_text_buffer_get_char_count(
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_text_buffer_get_tag_table(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkTextTagTable];

external gtk_text_buffer_set_text(
    buffer : Pointer[GtkTextBuffer],
    text : Pointer[CChar],
    len : Int);

external gtk_text_buffer_insert(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    text : Pointer[CChar],
    len : Int);

external gtk_text_buffer_insert_at_cursor(
    buffer : Pointer[GtkTextBuffer],
    text : Pointer[CChar],
    len : Int);

external gtk_text_buffer_insert_interactive(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    text : Pointer[CChar],
    len : Int,
    default_editable : Int) Int;

external gtk_text_buffer_insert_interactive_at_cursor(
    buffer : Pointer[GtkTextBuffer],
    text : Pointer[CChar],
    len : Int,
    default_editable : Int) Int;

external gtk_text_buffer_insert_range(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_insert_range_interactive(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter],
    default_editable : Int) Int;

external gtk_text_buffer_insert_with_tags(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    text : Pointer[CChar],
    len : Int,
    first_tag : Pointer[GtkTextTag],
    ...);

external gtk_text_buffer_insert_with_tags_by_name(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    text : Pointer[CChar],
    len : Int,
    first_tag_name : Pointer[CChar],
    ...);

external gtk_text_buffer_delete(
    buffer : Pointer[GtkTextBuffer],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_delete_interactive(
    buffer : Pointer[GtkTextBuffer],
    start_iter : Pointer[GtkTextIter],
    end_iter : Pointer[GtkTextIter],
    default_editable : Int) Int;

external gtk_text_buffer_backspace(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    interactive : Int,
    default_editable : Int) Int;

external gtk_text_buffer_get_text(
    buffer : Pointer[GtkTextBuffer],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter],
    include_hidden_chars : Int) Pointer[CChar];

external gtk_text_buffer_get_slice(
    buffer : Pointer[GtkTextBuffer],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter],
    include_hidden_chars : Int) Pointer[CChar];

external gtk_text_buffer_insert_pixbuf(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    pixbuf : Pointer[GdkPixbuf]);

external gtk_text_buffer_insert_child_anchor(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    anchor : Pointer[GtkTextChildAnchor]);

external gtk_text_buffer_create_child_anchor(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter]) Pointer[GtkTextChildAnchor];

external gtk_text_buffer_add_mark(
    buffer : Pointer[GtkTextBuffer],
    mark : Pointer[GtkTextMark],
    where : Pointer[GtkTextIter]);

external gtk_text_buffer_create_mark(
    buffer : Pointer[GtkTextBuffer],
    mark_name : Pointer[CChar],
    where : Pointer[GtkTextIter],
    left_gravity : Int) Pointer[GtkTextMark];

external gtk_text_buffer_move_mark(
    buffer : Pointer[GtkTextBuffer],
    mark : Pointer[GtkTextMark],
    where : Pointer[GtkTextIter]);

external gtk_text_buffer_delete_mark(
    buffer : Pointer[GtkTextBuffer],
    mark : Pointer[GtkTextMark]);

external gtk_text_buffer_get_mark(
    buffer : Pointer[GtkTextBuffer],
    name : Pointer[CChar]) Pointer[GtkTextMark];

external gtk_text_buffer_move_mark_by_name(
    buffer : Pointer[GtkTextBuffer],
    name : Pointer[CChar],
    where : Pointer[GtkTextIter]);

external gtk_text_buffer_delete_mark_by_name(
    buffer : Pointer[GtkTextBuffer],
    name : Pointer[CChar]);

external gtk_text_buffer_get_insert(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkTextMark];

external gtk_text_buffer_get_selection_bound(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkTextMark];

external gtk_text_buffer_place_cursor(
    buffer : Pointer[GtkTextBuffer],
    where : Pointer[GtkTextIter]);

external gtk_text_buffer_select_range(
    buffer : Pointer[GtkTextBuffer],
    ins : Pointer[GtkTextIter],
    bound : Pointer[GtkTextIter]);

external gtk_text_buffer_apply_tag(
    buffer : Pointer[GtkTextBuffer],
    tag : Pointer[GtkTextTag],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_remove_tag(
    buffer : Pointer[GtkTextBuffer],
    tag : Pointer[GtkTextTag],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_apply_tag_by_name(
    buffer : Pointer[GtkTextBuffer],
    name : Pointer[CChar],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_remove_tag_by_name(
    buffer : Pointer[GtkTextBuffer],
    name : Pointer[CChar],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_remove_all_tags(
    buffer : Pointer[GtkTextBuffer],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_create_tag(
    buffer : Pointer[GtkTextBuffer],
    tag_name : Pointer[CChar],
    first_property_name : Pointer[CChar],
    ...) Pointer[GtkTextTag];

external gtk_text_buffer_get_iter_at_line_offset(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    line_number : Int,
    char_offset : Int);

external gtk_text_buffer_get_iter_at_line_index(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    line_number : Int,
    byte_index : Int);

external gtk_text_buffer_get_iter_at_offset(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    char_offset : Int);

external gtk_text_buffer_get_iter_at_line(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    line_number : Int);

external gtk_text_buffer_get_start_iter(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter]);

external gtk_text_buffer_get_end_iter(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter]);

external gtk_text_buffer_get_bounds(
    buffer : Pointer[GtkTextBuffer],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]);

external gtk_text_buffer_get_iter_at_mark(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    mark : Pointer[GtkTextMark]);

external gtk_text_buffer_get_iter_at_child_anchor(
    buffer : Pointer[GtkTextBuffer],
    iter : Pointer[GtkTextIter],
    anchor : Pointer[GtkTextChildAnchor]);

external gtk_text_buffer_get_modified(
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_text_buffer_set_modified(
    buffer : Pointer[GtkTextBuffer],
    setting : Int);

external gtk_text_buffer_get_has_selection(
    buffer : Pointer[GtkTextBuffer]) Int;

external gtk_text_buffer_add_selection_clipboard(
    buffer : Pointer[GtkTextBuffer],
    clipboard : Pointer[GtkClipboard]);

external gtk_text_buffer_remove_selection_clipboard(
    buffer : Pointer[GtkTextBuffer],
    clipboard : Pointer[GtkClipboard]);

external gtk_text_buffer_cut_clipboard(
    buffer : Pointer[GtkTextBuffer],
    clipboard : Pointer[GtkClipboard],
    default_editable : Int);

external gtk_text_buffer_copy_clipboard(
    buffer : Pointer[GtkTextBuffer],
    clipboard : Pointer[GtkClipboard]);

external gtk_text_buffer_paste_clipboard(
    buffer : Pointer[GtkTextBuffer],
    clipboard : Pointer[GtkClipboard],
    override_location : Pointer[GtkTextIter],
    default_editable : Int);

external gtk_text_buffer_get_selection_bounds(
    buffer : Pointer[GtkTextBuffer],
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter]) Int;

external gtk_text_buffer_delete_selection(
    buffer : Pointer[GtkTextBuffer],
    interactive : Int,
    default_editable : Int) Int;

external gtk_text_buffer_begin_user_action(
    buffer : Pointer[GtkTextBuffer]);

external gtk_text_buffer_end_user_action(
    buffer : Pointer[GtkTextBuffer]);

external gtk_text_buffer_get_copy_target_list(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkTargetList];

external gtk_text_buffer_get_paste_target_list(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkTargetList];

external _gtk_text_buffer_spew(
    buffer : Pointer[GtkTextBuffer]);

external _gtk_text_buffer_get_btree(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkTextBTree];

external _gtk_text_buffer_get_line_log_attrs(
    buffer : Pointer[GtkTextBuffer],
    anywhere_in_line : Pointer[GtkTextIter],
    char_len : Pointer[Int]) Pointer[PangoLogAttr];

external _gtk_text_buffer_notify_will_remove_tag(
    buffer : Pointer[GtkTextBuffer],
    tag : Pointer[GtkTextTag]);

alias GtkTextBufferSerializeFunc = CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],Pointer[Struct__GtkTextIter],Pointer[CULong],RawPointer),(Pointer[CUChar])];

alias GtkTextBufferDeserializeFunc = CCodePointer[(Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextBuffer],Pointer[Struct__GtkTextIter],Pointer[CUChar],CULong,Int,RawPointer,Pointer[Pointer[Struct__GError]]),(Int)];

external gtk_text_buffer_register_serialize_format(
    buffer : Pointer[GtkTextBuffer],
    mime_type : Pointer[CChar],
    function : GtkTextBufferSerializeFunc,
    user_data : gpointer,
    user_data_destroy : GDestroyNotify) GdkAtom;

external gtk_text_buffer_register_serialize_tagset(
    buffer : Pointer[GtkTextBuffer],
    tagset_name : Pointer[CChar]) GdkAtom;

external gtk_text_buffer_register_deserialize_format(
    buffer : Pointer[GtkTextBuffer],
    mime_type : Pointer[CChar],
    function : GtkTextBufferDeserializeFunc,
    user_data : gpointer,
    user_data_destroy : GDestroyNotify) GdkAtom;

external gtk_text_buffer_register_deserialize_tagset(
    buffer : Pointer[GtkTextBuffer],
    tagset_name : Pointer[CChar]) GdkAtom;

external gtk_text_buffer_unregister_serialize_format(
    buffer : Pointer[GtkTextBuffer],
    format : GdkAtom);

external gtk_text_buffer_unregister_deserialize_format(
    buffer : Pointer[GtkTextBuffer],
    format : GdkAtom);

external gtk_text_buffer_deserialize_set_can_create_tags(
    buffer : Pointer[GtkTextBuffer],
    format : GdkAtom,
    can_create_tags : Int);

external gtk_text_buffer_deserialize_get_can_create_tags(
    buffer : Pointer[GtkTextBuffer],
    format : GdkAtom) Int;

external gtk_text_buffer_get_serialize_formats(
    buffer : Pointer[GtkTextBuffer],
    n_formats : Pointer[Int]) Pointer[GdkAtom];

external gtk_text_buffer_get_deserialize_formats(
    buffer : Pointer[GtkTextBuffer],
    n_formats : Pointer[Int]) Pointer[GdkAtom];

external gtk_text_buffer_serialize(
    register_buffer : Pointer[GtkTextBuffer],
    content_buffer : Pointer[GtkTextBuffer],
    format : GdkAtom,
    start : Pointer[GtkTextIter],
    end : Pointer[GtkTextIter],
    length : Pointer[CULong]) Pointer[CUChar];

external gtk_text_buffer_deserialize(
    register_buffer : Pointer[GtkTextBuffer],
    content_buffer : Pointer[GtkTextBuffer],
    format : GdkAtom,
    iter : Pointer[GtkTextIter],
    data : Pointer[CUChar],
    length : CULong,
    error : Pointer[Pointer[GError]]) Int;

alias GTK_TEXT_WINDOW_PRIVATE = 0;
alias GTK_TEXT_WINDOW_WIDGET = 1;
alias GTK_TEXT_WINDOW_TEXT = 2;
alias GTK_TEXT_WINDOW_LEFT = 3;
alias GTK_TEXT_WINDOW_RIGHT = 4;
alias GTK_TEXT_WINDOW_TOP = 5;
alias GTK_TEXT_WINDOW_BOTTOM = 6;

alias GtkTextWindowType = Int;

alias GtkTextView = Struct__GtkTextView;

alias GtkTextViewClass = Struct__GtkTextViewClass;

alias GtkTextWindow = Opaque;

alias GtkTextPendingScroll = Opaque;

record Struct__GtkTextView (
    parent_instance : GtkContainer,
    layout : OpaquePointer,
    buffer : Pointer[GtkTextBuffer],
    selection_drag_handler : UInt,
    scroll_timeout : UInt,
    pixels_above_lines : Int,
    pixels_below_lines : Int,
    pixels_inside_wrap : Int,
    wrap_mode : GtkWrapMode,
    justify : GtkJustification,
    left_margin : Int,
    right_margin : Int,
    indent : Int,
    tabs : Pointer[PangoTabArray],
    editable : UInt,
    overwrite_mode : UInt,
    cursor_visible : UInt,
    need_im_reset : UInt,
    accepts_tab : UInt,
    width_changed : UInt,
    onscreen_validated : UInt,
    mouse_cursor_obscured : UInt,
    text_window : Pointer[GtkTextWindow],
    left_window : Pointer[GtkTextWindow],
    right_window : Pointer[GtkTextWindow],
    top_window : Pointer[GtkTextWindow],
    bottom_window : Pointer[GtkTextWindow],
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
    xoffset : Int,
    yoffset : Int,
    width : Int,
    height : Int,
    virtual_cursor_x : Int,
    virtual_cursor_y : Int,
    first_para_mark : Pointer[GtkTextMark],
    first_para_pixels : Int,
    dnd_mark : Pointer[GtkTextMark],
    blink_timeout : UInt,
    first_validate_idle : UInt,
    incremental_validate_idle : UInt,
    im_context : Pointer[GtkIMContext],
    popup_menu : Pointer[GtkWidget],
    drag_start_x : Int,
    drag_start_y : Int,
    children : Pointer[GSList],
    pending_scroll : Pointer[GtkTextPendingScroll],
    pending_place_cursor_button : Int,
);

record Struct__GtkTextViewClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkTextView],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
    populate_popup : CCodePointer[(Pointer[Struct__GtkTextView],Pointer[Struct__GtkMenu]),()],
    move_cursor : CCodePointer[(Pointer[Struct__GtkTextView],Int,Int,Int),()],
    page_horizontally : CCodePointer[(Pointer[Struct__GtkTextView],Int,Int),()],
    set_anchor : CCodePointer[(Pointer[Struct__GtkTextView]),()],
    insert_at_cursor : CCodePointer[(Pointer[Struct__GtkTextView],Pointer[CChar]),()],
    delete_from_cursor : CCodePointer[(Pointer[Struct__GtkTextView],Int,Int),()],
    backspace : CCodePointer[(Pointer[Struct__GtkTextView]),()],
    cut_clipboard : CCodePointer[(Pointer[Struct__GtkTextView]),()],
    copy_clipboard : CCodePointer[(Pointer[Struct__GtkTextView]),()],
    paste_clipboard : CCodePointer[(Pointer[Struct__GtkTextView]),()],
    toggle_overwrite : CCodePointer[(Pointer[Struct__GtkTextView]),()],
    move_focus : CCodePointer[(Pointer[Struct__GtkTextView],Int),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
    _gtk_reserved7 : CCodePointer[(),()],
);

external gtk_text_view_get_type() CULong;

external gtk_text_view_new() Pointer[GtkWidget];

external gtk_text_view_new_with_buffer(
    buffer : Pointer[GtkTextBuffer]) Pointer[GtkWidget];

external gtk_text_view_set_buffer(
    text_view : Pointer[GtkTextView],
    buffer : Pointer[GtkTextBuffer]);

external gtk_text_view_get_buffer(
    text_view : Pointer[GtkTextView]) Pointer[GtkTextBuffer];

external gtk_text_view_scroll_to_iter(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter],
    within_margin : Double,
    use_align : Int,
    xalign : Double,
    yalign : Double) Int;

external gtk_text_view_scroll_to_mark(
    text_view : Pointer[GtkTextView],
    mark : Pointer[GtkTextMark],
    within_margin : Double,
    use_align : Int,
    xalign : Double,
    yalign : Double);

external gtk_text_view_scroll_mark_onscreen(
    text_view : Pointer[GtkTextView],
    mark : Pointer[GtkTextMark]);

external gtk_text_view_move_mark_onscreen(
    text_view : Pointer[GtkTextView],
    mark : Pointer[GtkTextMark]) Int;

external gtk_text_view_place_cursor_onscreen(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_get_visible_rect(
    text_view : Pointer[GtkTextView],
    visible_rect : Pointer[GdkRectangle]);

external gtk_text_view_set_cursor_visible(
    text_view : Pointer[GtkTextView],
    setting : Int);

external gtk_text_view_get_cursor_visible(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_get_iter_location(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter],
    location : Pointer[GdkRectangle]);

external gtk_text_view_get_iter_at_location(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter],
    x : Int,
    y : Int);

external gtk_text_view_get_iter_at_position(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter],
    trailing : Pointer[Int],
    x : Int,
    y : Int);

external gtk_text_view_get_line_yrange(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter],
    y : Pointer[Int],
    height : Pointer[Int]);

external gtk_text_view_get_line_at_y(
    text_view : Pointer[GtkTextView],
    target_iter : Pointer[GtkTextIter],
    y : Int,
    line_top : Pointer[Int]);

external gtk_text_view_buffer_to_window_coords(
    text_view : Pointer[GtkTextView],
    win : GtkTextWindowType,
    buffer_x : Int,
    buffer_y : Int,
    window_x : Pointer[Int],
    window_y : Pointer[Int]);

external gtk_text_view_window_to_buffer_coords(
    text_view : Pointer[GtkTextView],
    win : GtkTextWindowType,
    window_x : Int,
    window_y : Int,
    buffer_x : Pointer[Int],
    buffer_y : Pointer[Int]);

external gtk_text_view_get_hadjustment(
    text_view : Pointer[GtkTextView]) Pointer[GtkAdjustment];

external gtk_text_view_get_vadjustment(
    text_view : Pointer[GtkTextView]) Pointer[GtkAdjustment];

external gtk_text_view_get_window(
    text_view : Pointer[GtkTextView],
    win : GtkTextWindowType) Pointer[GdkWindow];

external gtk_text_view_get_window_type(
    text_view : Pointer[GtkTextView],
    window : Pointer[GdkWindow]) GtkTextWindowType;

external gtk_text_view_set_border_window_size(
    text_view : Pointer[GtkTextView],
    type : GtkTextWindowType,
    size : Int);

external gtk_text_view_get_border_window_size(
    text_view : Pointer[GtkTextView],
    type : GtkTextWindowType) Int;

external gtk_text_view_forward_display_line(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_view_backward_display_line(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_view_forward_display_line_end(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_view_backward_display_line_start(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_view_starts_display_line(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter]) Int;

external gtk_text_view_move_visually(
    text_view : Pointer[GtkTextView],
    iter : Pointer[GtkTextIter],
    count : Int) Int;

external gtk_text_view_im_context_filter_keypress(
    text_view : Pointer[GtkTextView],
    event : Pointer[GdkEventKey]) Int;

external gtk_text_view_reset_im_context(
    text_view : Pointer[GtkTextView]);

external gtk_text_view_add_child_at_anchor(
    text_view : Pointer[GtkTextView],
    child : Pointer[GtkWidget],
    anchor : Pointer[GtkTextChildAnchor]);

external gtk_text_view_add_child_in_window(
    text_view : Pointer[GtkTextView],
    child : Pointer[GtkWidget],
    which_window : GtkTextWindowType,
    xpos : Int,
    ypos : Int);

external gtk_text_view_move_child(
    text_view : Pointer[GtkTextView],
    child : Pointer[GtkWidget],
    xpos : Int,
    ypos : Int);

external gtk_text_view_set_wrap_mode(
    text_view : Pointer[GtkTextView],
    wrap_mode : GtkWrapMode);

external gtk_text_view_get_wrap_mode(
    text_view : Pointer[GtkTextView]) GtkWrapMode;

external gtk_text_view_set_editable(
    text_view : Pointer[GtkTextView],
    setting : Int);

external gtk_text_view_get_editable(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_overwrite(
    text_view : Pointer[GtkTextView],
    overwrite : Int);

external gtk_text_view_get_overwrite(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_accepts_tab(
    text_view : Pointer[GtkTextView],
    accepts_tab : Int);

external gtk_text_view_get_accepts_tab(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_pixels_above_lines(
    text_view : Pointer[GtkTextView],
    pixels_above_lines : Int);

external gtk_text_view_get_pixels_above_lines(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_pixels_below_lines(
    text_view : Pointer[GtkTextView],
    pixels_below_lines : Int);

external gtk_text_view_get_pixels_below_lines(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_pixels_inside_wrap(
    text_view : Pointer[GtkTextView],
    pixels_inside_wrap : Int);

external gtk_text_view_get_pixels_inside_wrap(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_justification(
    text_view : Pointer[GtkTextView],
    justification : GtkJustification);

external gtk_text_view_get_justification(
    text_view : Pointer[GtkTextView]) GtkJustification;

external gtk_text_view_set_left_margin(
    text_view : Pointer[GtkTextView],
    left_margin : Int);

external gtk_text_view_get_left_margin(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_right_margin(
    text_view : Pointer[GtkTextView],
    right_margin : Int);

external gtk_text_view_get_right_margin(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_indent(
    text_view : Pointer[GtkTextView],
    indent : Int);

external gtk_text_view_get_indent(
    text_view : Pointer[GtkTextView]) Int;

external gtk_text_view_set_tabs(
    text_view : Pointer[GtkTextView],
    tabs : Pointer[PangoTabArray]);

external gtk_text_view_get_tabs(
    text_view : Pointer[GtkTextView]) Pointer[PangoTabArray];

external gtk_text_view_get_default_attributes(
    text_view : Pointer[GtkTextView]) Pointer[GtkTextAttributes];

alias GtkPixmap = Struct__GtkPixmap;

alias GtkPixmapClass = Struct__GtkPixmapClass;

record Struct__GtkPixmap (
    misc : GtkMisc,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
    pixmap_insensitive : Pointer[GdkPixmap],
    build_insensitive : UInt,
);

record Struct__GtkPixmapClass (
    parent_class : GtkMiscClass,
);

external gtk_pixmap_get_type() CULong;

external gtk_pixmap_new(
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]) Pointer[GtkWidget];

external gtk_pixmap_set(
    pixmap : Pointer[GtkPixmap],
    val : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_pixmap_get(
    pixmap : Pointer[GtkPixmap],
    val : Pointer[Pointer[GdkPixmap]],
    mask : Pointer[Pointer[GdkBitmap]]);

external gtk_pixmap_set_build_insensitive(
    pixmap : Pointer[GtkPixmap],
    build : Int);

alias GTK_TOOLBAR_CHILD_SPACE = 0;
alias GTK_TOOLBAR_CHILD_BUTTON = 1;
alias GTK_TOOLBAR_CHILD_TOGGLEBUTTON = 2;
alias GTK_TOOLBAR_CHILD_RADIOBUTTON = 3;
alias GTK_TOOLBAR_CHILD_WIDGET = 4;

alias GtkToolbarChildType = Int;

alias GtkToolbarChild = Struct__GtkToolbarChild;

record Struct__GtkToolbarChild (
    type : GtkToolbarChildType,
    widget : Pointer[GtkWidget],
    icon : Pointer[GtkWidget],
    label : Pointer[GtkWidget],
);

alias GTK_TOOLBAR_SPACE_EMPTY = 0;
alias GTK_TOOLBAR_SPACE_LINE = 1;

alias GtkToolbarSpaceStyle = Int;

alias GtkToolbar = Struct__GtkToolbar;

alias GtkToolbarClass = Struct__GtkToolbarClass;

alias GtkToolbarPrivate = Opaque;

record Struct__GtkToolbar (
    container : GtkContainer,
    num_children : Int,
    children : Pointer[GList],
    orientation : GtkOrientation,
    style : GtkToolbarStyle,
    icon_size : GtkIconSize,
    tooltips : Pointer[GtkTooltips],
    button_maxw : Int,
    button_maxh : Int,
    _gtk_reserved1 : UInt,
    _gtk_reserved2 : UInt,
    style_set : UInt,
    icon_size_set : UInt,
);

record Struct__GtkToolbarClass (
    parent_class : GtkContainerClass,
    orientation_changed : CCodePointer[(Pointer[Struct__GtkToolbar],Int),()],
    style_changed : CCodePointer[(Pointer[Struct__GtkToolbar],Int),()],
    popup_context_menu : CCodePointer[(Pointer[Struct__GtkToolbar],Int,Int,Int),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
);

external gtk_toolbar_get_type() CULong;

external gtk_toolbar_new() Pointer[GtkWidget];

external gtk_toolbar_insert(
    toolbar : Pointer[GtkToolbar],
    item : Pointer[GtkToolItem],
    pos : Int);

external gtk_toolbar_get_item_index(
    toolbar : Pointer[GtkToolbar],
    item : Pointer[GtkToolItem]) Int;

external gtk_toolbar_get_n_items(
    toolbar : Pointer[GtkToolbar]) Int;

external gtk_toolbar_get_nth_item(
    toolbar : Pointer[GtkToolbar],
    n : Int) Pointer[GtkToolItem];

external gtk_toolbar_get_show_arrow(
    toolbar : Pointer[GtkToolbar]) Int;

external gtk_toolbar_set_show_arrow(
    toolbar : Pointer[GtkToolbar],
    show_arrow : Int);

external gtk_toolbar_get_style(
    toolbar : Pointer[GtkToolbar]) GtkToolbarStyle;

external gtk_toolbar_set_style(
    toolbar : Pointer[GtkToolbar],
    style : GtkToolbarStyle);

external gtk_toolbar_unset_style(
    toolbar : Pointer[GtkToolbar]);

external gtk_toolbar_get_icon_size(
    toolbar : Pointer[GtkToolbar]) GtkIconSize;

external gtk_toolbar_set_icon_size(
    toolbar : Pointer[GtkToolbar],
    icon_size : GtkIconSize);

external gtk_toolbar_unset_icon_size(
    toolbar : Pointer[GtkToolbar]);

external gtk_toolbar_get_relief_style(
    toolbar : Pointer[GtkToolbar]) GtkReliefStyle;

external gtk_toolbar_get_drop_index(
    toolbar : Pointer[GtkToolbar],
    x : Int,
    y : Int) Int;

external gtk_toolbar_set_drop_highlight_item(
    toolbar : Pointer[GtkToolbar],
    tool_item : Pointer[GtkToolItem],
    index_ : Int);

external _gtk_toolbar_elide_underscores(
    original : Pointer[CChar]) Pointer[CChar];

external _gtk_toolbar_paint_space_line(
    widget : Pointer[GtkWidget],
    toolbar : Pointer[GtkToolbar],
    area : Pointer[GdkRectangle],
    allocation : Pointer[GtkAllocation]);

external _gtk_toolbar_get_default_space_size() Int;

external gtk_toolbar_get_orientation(
    toolbar : Pointer[GtkToolbar]) GtkOrientation;

external gtk_toolbar_set_orientation(
    toolbar : Pointer[GtkToolbar],
    orientation : GtkOrientation);

external gtk_toolbar_get_tooltips(
    toolbar : Pointer[GtkToolbar]) Int;

external gtk_toolbar_set_tooltips(
    toolbar : Pointer[GtkToolbar],
    enable : Int);

external gtk_toolbar_append_item(
    toolbar : Pointer[GtkToolbar],
    text : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    icon : Pointer[GtkWidget],
    callback : GCallback,
    user_data : gpointer) Pointer[GtkWidget];

external gtk_toolbar_prepend_item(
    toolbar : Pointer[GtkToolbar],
    text : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    icon : Pointer[GtkWidget],
    callback : GCallback,
    user_data : gpointer) Pointer[GtkWidget];

external gtk_toolbar_insert_item(
    toolbar : Pointer[GtkToolbar],
    text : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    icon : Pointer[GtkWidget],
    callback : GCallback,
    user_data : gpointer,
    position : Int) Pointer[GtkWidget];

external gtk_toolbar_insert_stock(
    toolbar : Pointer[GtkToolbar],
    stock_id : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    callback : GCallback,
    user_data : gpointer,
    position : Int) Pointer[GtkWidget];

external gtk_toolbar_append_space(
    toolbar : Pointer[GtkToolbar]);

external gtk_toolbar_prepend_space(
    toolbar : Pointer[GtkToolbar]);

external gtk_toolbar_insert_space(
    toolbar : Pointer[GtkToolbar],
    position : Int);

external gtk_toolbar_remove_space(
    toolbar : Pointer[GtkToolbar],
    position : Int);

external gtk_toolbar_append_element(
    toolbar : Pointer[GtkToolbar],
    type : GtkToolbarChildType,
    widget : Pointer[GtkWidget],
    text : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    icon : Pointer[GtkWidget],
    callback : GCallback,
    user_data : gpointer) Pointer[GtkWidget];

external gtk_toolbar_prepend_element(
    toolbar : Pointer[GtkToolbar],
    type : GtkToolbarChildType,
    widget : Pointer[GtkWidget],
    text : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    icon : Pointer[GtkWidget],
    callback : GCallback,
    user_data : gpointer) Pointer[GtkWidget];

external gtk_toolbar_insert_element(
    toolbar : Pointer[GtkToolbar],
    type : GtkToolbarChildType,
    widget : Pointer[GtkWidget],
    text : Pointer[CChar],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    icon : Pointer[GtkWidget],
    callback : GCallback,
    user_data : gpointer,
    position : Int) Pointer[GtkWidget];

external gtk_toolbar_append_widget(
    toolbar : Pointer[GtkToolbar],
    widget : Pointer[GtkWidget],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar]);

external gtk_toolbar_prepend_widget(
    toolbar : Pointer[GtkToolbar],
    widget : Pointer[GtkWidget],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar]);

external gtk_toolbar_insert_widget(
    toolbar : Pointer[GtkToolbar],
    widget : Pointer[GtkWidget],
    tooltip_text : Pointer[CChar],
    tooltip_private_text : Pointer[CChar],
    position : Int);

alias GtkToolItemGroup = Struct__GtkToolItemGroup;

alias GtkToolItemGroupClass = Struct__GtkToolItemGroupClass;

alias GtkToolItemGroupPrivate = Opaque;

record Struct__GtkToolItemGroup (
    parent_instance : GtkContainer,
    priv : Pointer[GtkToolItemGroupPrivate],
);

record Struct__GtkToolItemGroupClass (
    parent_class : GtkContainerClass,
);

external gtk_tool_item_group_get_type() CULong;

external gtk_tool_item_group_new(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_tool_item_group_set_label(
    group : Pointer[GtkToolItemGroup],
    label : Pointer[CChar]);

external gtk_tool_item_group_set_label_widget(
    group : Pointer[GtkToolItemGroup],
    label_widget : Pointer[GtkWidget]);

external gtk_tool_item_group_set_collapsed(
    group : Pointer[GtkToolItemGroup],
    collapsed : Int);

external gtk_tool_item_group_set_ellipsize(
    group : Pointer[GtkToolItemGroup],
    ellipsize : PangoEllipsizeMode);

external gtk_tool_item_group_set_header_relief(
    group : Pointer[GtkToolItemGroup],
    style : GtkReliefStyle);

external gtk_tool_item_group_get_label(
    group : Pointer[GtkToolItemGroup]) Pointer[CChar];

external gtk_tool_item_group_get_label_widget(
    group : Pointer[GtkToolItemGroup]) Pointer[GtkWidget];

external gtk_tool_item_group_get_collapsed(
    group : Pointer[GtkToolItemGroup]) Int;

external gtk_tool_item_group_get_ellipsize(
    group : Pointer[GtkToolItemGroup]) PangoEllipsizeMode;

external gtk_tool_item_group_get_header_relief(
    group : Pointer[GtkToolItemGroup]) GtkReliefStyle;

external gtk_tool_item_group_insert(
    group : Pointer[GtkToolItemGroup],
    item : Pointer[GtkToolItem],
    position : Int);

external gtk_tool_item_group_set_item_position(
    group : Pointer[GtkToolItemGroup],
    item : Pointer[GtkToolItem],
    position : Int);

external gtk_tool_item_group_get_item_position(
    group : Pointer[GtkToolItemGroup],
    item : Pointer[GtkToolItem]) Int;

external gtk_tool_item_group_get_n_items(
    group : Pointer[GtkToolItemGroup]) UInt;

external gtk_tool_item_group_get_nth_item(
    group : Pointer[GtkToolItemGroup],
    index : UInt) Pointer[GtkToolItem];

external gtk_tool_item_group_get_drop_item(
    group : Pointer[GtkToolItemGroup],
    x : Int,
    y : Int) Pointer[GtkToolItem];

alias GtkToolPalette = Struct__GtkToolPalette;

alias GtkToolPaletteClass = Struct__GtkToolPaletteClass;

alias GtkToolPalettePrivate = Opaque;

alias GTK_TOOL_PALETTE_DRAG_ITEMS = 1;
alias GTK_TOOL_PALETTE_DRAG_GROUPS = 2;

alias GtkToolPaletteDragTargets = Int;

record Struct__GtkToolPalette (
    parent_instance : GtkContainer,
    priv : Pointer[GtkToolPalettePrivate],
);

record Struct__GtkToolPaletteClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkWidget],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
    _gtk_reserved5 : CCodePointer[(),()],
    _gtk_reserved6 : CCodePointer[(),()],
);

external gtk_tool_palette_get_type() CULong;

external gtk_tool_palette_new() Pointer[GtkWidget];

external gtk_tool_palette_set_group_position(
    palette : Pointer[GtkToolPalette],
    group : Pointer[GtkToolItemGroup],
    position : Int);

external gtk_tool_palette_set_exclusive(
    palette : Pointer[GtkToolPalette],
    group : Pointer[GtkToolItemGroup],
    exclusive : Int);

external gtk_tool_palette_set_expand(
    palette : Pointer[GtkToolPalette],
    group : Pointer[GtkToolItemGroup],
    expand : Int);

external gtk_tool_palette_get_group_position(
    palette : Pointer[GtkToolPalette],
    group : Pointer[GtkToolItemGroup]) Int;

external gtk_tool_palette_get_exclusive(
    palette : Pointer[GtkToolPalette],
    group : Pointer[GtkToolItemGroup]) Int;

external gtk_tool_palette_get_expand(
    palette : Pointer[GtkToolPalette],
    group : Pointer[GtkToolItemGroup]) Int;

external gtk_tool_palette_set_icon_size(
    palette : Pointer[GtkToolPalette],
    icon_size : GtkIconSize);

external gtk_tool_palette_unset_icon_size(
    palette : Pointer[GtkToolPalette]);

external gtk_tool_palette_set_style(
    palette : Pointer[GtkToolPalette],
    style : GtkToolbarStyle);

external gtk_tool_palette_unset_style(
    palette : Pointer[GtkToolPalette]);

external gtk_tool_palette_get_icon_size(
    palette : Pointer[GtkToolPalette]) GtkIconSize;

external gtk_tool_palette_get_style(
    palette : Pointer[GtkToolPalette]) GtkToolbarStyle;

external gtk_tool_palette_get_drop_item(
    palette : Pointer[GtkToolPalette],
    x : Int,
    y : Int) Pointer[GtkToolItem];

external gtk_tool_palette_get_drop_group(
    palette : Pointer[GtkToolPalette],
    x : Int,
    y : Int) Pointer[GtkToolItemGroup];

external gtk_tool_palette_get_drag_item(
    palette : Pointer[GtkToolPalette],
    selection : Pointer[GtkSelectionData]) Pointer[GtkWidget];

external gtk_tool_palette_set_drag_source(
    palette : Pointer[GtkToolPalette],
    targets : GtkToolPaletteDragTargets);

external gtk_tool_palette_add_drag_dest(
    palette : Pointer[GtkToolPalette],
    widget : Pointer[GtkWidget],
    flags : GtkDestDefaults,
    targets : GtkToolPaletteDragTargets,
    actions : GdkDragAction);

external gtk_tool_palette_get_hadjustment(
    palette : Pointer[GtkToolPalette]) Pointer[GtkAdjustment];

external gtk_tool_palette_get_vadjustment(
    palette : Pointer[GtkToolPalette]) Pointer[GtkAdjustment];

external gtk_tool_palette_get_drag_target_item() Pointer[GtkTargetEntry];

external gtk_tool_palette_get_drag_target_group() Pointer[GtkTargetEntry];

alias GtkToolShell = Opaque;

alias GtkToolShellIface = Struct__GtkToolShellIface;

record Struct__GtkToolShellIface (
    g_iface : GTypeInterface,
    get_icon_size : CCodePointer[(OpaquePointer),(Int)],
    get_orientation : CCodePointer[(OpaquePointer),(Int)],
    get_style : CCodePointer[(OpaquePointer),(Int)],
    get_relief_style : CCodePointer[(OpaquePointer),(Int)],
    rebuild_menu : CCodePointer[(OpaquePointer),()],
    get_text_orientation : CCodePointer[(OpaquePointer),(Int)],
    get_text_alignment : CCodePointer[(OpaquePointer),(Float)],
    get_ellipsize_mode : CCodePointer[(OpaquePointer),(Int)],
    get_text_size_group : CCodePointer[(OpaquePointer),(Pointer[Struct__GtkSizeGroup])],
);

external gtk_tool_shell_get_type() CULong;

external gtk_tool_shell_get_icon_size(
    shell : Pointer[GtkToolShell]) GtkIconSize;

external gtk_tool_shell_get_orientation(
    shell : Pointer[GtkToolShell]) GtkOrientation;

external gtk_tool_shell_get_style(
    shell : Pointer[GtkToolShell]) GtkToolbarStyle;

external gtk_tool_shell_get_relief_style(
    shell : Pointer[GtkToolShell]) GtkReliefStyle;

external gtk_tool_shell_rebuild_menu(
    shell : Pointer[GtkToolShell]);

external gtk_tool_shell_get_text_orientation(
    shell : Pointer[GtkToolShell]) GtkOrientation;

external gtk_tool_shell_get_text_alignment(
    shell : Pointer[GtkToolShell]) Float;

external gtk_tool_shell_get_ellipsize_mode(
    shell : Pointer[GtkToolShell]) PangoEllipsizeMode;

external gtk_tool_shell_get_text_size_group(
    shell : Pointer[GtkToolShell]) Pointer[GtkSizeGroup];

external gtk_test_init(
    argcp : Pointer[Int],
    argvp : Pointer[Pointer[Pointer[CChar]]],
    ...);

external gtk_test_register_all_types();

external gtk_test_list_all_types(
    n_types : Pointer[UInt]) Pointer[CULong];

external gtk_test_find_widget(
    widget : Pointer[GtkWidget],
    label_pattern : Pointer[CChar],
    widget_type : CULong) Pointer[GtkWidget];

external gtk_test_create_widget(
    widget_type : CULong,
    first_property_name : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_test_create_simple_window(
    window_title : Pointer[CChar],
    dialog_text : Pointer[CChar]) Pointer[GtkWidget];

external gtk_test_display_button_window(
    window_title : Pointer[CChar],
    dialog_text : Pointer[CChar],
    ...) Pointer[GtkWidget];

external gtk_test_slider_set_perc(
    widget : Pointer[GtkWidget],
    percentage : Double);

external gtk_test_slider_get_value(
    widget : Pointer[GtkWidget]) Double;

external gtk_test_spin_button_click(
    spinner : Pointer[GtkSpinButton],
    button : UInt,
    upwards : Int) Int;

external gtk_test_widget_click(
    widget : Pointer[GtkWidget],
    button : UInt,
    modifiers : GdkModifierType) Int;

external gtk_test_widget_send_key(
    widget : Pointer[GtkWidget],
    keyval : UInt,
    modifiers : GdkModifierType) Int;

external gtk_test_text_set(
    widget : Pointer[GtkWidget],
    string : Pointer[CChar]);

external gtk_test_text_get(
    widget : Pointer[GtkWidget]) Pointer[CChar];

external gtk_test_find_sibling(
    base_widget : Pointer[GtkWidget],
    widget_type : CULong) Pointer[GtkWidget];

external gtk_test_find_label(
    widget : Pointer[GtkWidget],
    label_pattern : Pointer[CChar]) Pointer[GtkWidget];

alias GtkTreeDragSource = Opaque;

alias GtkTreeDragSourceIface = Struct__GtkTreeDragSourceIface;

record Struct__GtkTreeDragSourceIface (
    g_iface : GTypeInterface,
    row_draggable : CCodePointer[(OpaquePointer,OpaquePointer),(Int)],
    drag_data_get : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkSelectionData]),(Int)],
    drag_data_delete : CCodePointer[(OpaquePointer,OpaquePointer),(Int)],
);

external gtk_tree_drag_source_get_type() CULong;

external gtk_tree_drag_source_row_draggable(
    drag_source : Pointer[GtkTreeDragSource],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_drag_source_drag_data_delete(
    drag_source : Pointer[GtkTreeDragSource],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_drag_source_drag_data_get(
    drag_source : Pointer[GtkTreeDragSource],
    path : Pointer[GtkTreePath],
    selection_data : Pointer[GtkSelectionData]) Int;

alias GtkTreeDragDest = Opaque;

alias GtkTreeDragDestIface = Struct__GtkTreeDragDestIface;

record Struct__GtkTreeDragDestIface (
    g_iface : GTypeInterface,
    drag_data_received : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkSelectionData]),(Int)],
    row_drop_possible : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkSelectionData]),(Int)],
);

external gtk_tree_drag_dest_get_type() CULong;

external gtk_tree_drag_dest_drag_data_received(
    drag_dest : Pointer[GtkTreeDragDest],
    dest : Pointer[GtkTreePath],
    selection_data : Pointer[GtkSelectionData]) Int;

external gtk_tree_drag_dest_row_drop_possible(
    drag_dest : Pointer[GtkTreeDragDest],
    dest_path : Pointer[GtkTreePath],
    selection_data : Pointer[GtkSelectionData]) Int;

external gtk_tree_set_row_drag_data(
    selection_data : Pointer[GtkSelectionData],
    tree_model : Pointer[GtkTreeModel],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_get_row_drag_data(
    selection_data : Pointer[GtkSelectionData],
    tree_model : Pointer[Pointer[GtkTreeModel]],
    path : Pointer[Pointer[GtkTreePath]]) Int;

alias GtkTreeModelSort = Struct__GtkTreeModelSort;

alias GtkTreeModelSortClass = Struct__GtkTreeModelSortClass;

record Struct__GtkTreeModelSort (
    parent : GObject,
    root : gpointer,
    stamp : Int,
    child_flags : UInt,
    child_model : Pointer[GtkTreeModel],
    zero_ref_count : Int,
    sort_list : Pointer[GList],
    sort_column_id : Int,
    order : GtkSortType,
    default_sort_func : GtkTreeIterCompareFunc,
    default_sort_data : gpointer,
    default_sort_destroy : GDestroyNotify,
    changed_id : UInt,
    inserted_id : UInt,
    has_child_toggled_id : UInt,
    deleted_id : UInt,
    reordered_id : UInt,
);

record Struct__GtkTreeModelSortClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tree_model_sort_get_type() CULong;

external gtk_tree_model_sort_new_with_model(
    child_model : Pointer[GtkTreeModel]) Pointer[GtkTreeModel];

external gtk_tree_model_sort_get_model(
    tree_model : Pointer[GtkTreeModelSort]) Pointer[GtkTreeModel];

external gtk_tree_model_sort_convert_child_path_to_path(
    tree_model_sort : Pointer[GtkTreeModelSort],
    child_path : Pointer[GtkTreePath]) Pointer[GtkTreePath];

external gtk_tree_model_sort_convert_child_iter_to_iter(
    tree_model_sort : Pointer[GtkTreeModelSort],
    sort_iter : Pointer[GtkTreeIter],
    child_iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_model_sort_convert_path_to_child_path(
    tree_model_sort : Pointer[GtkTreeModelSort],
    sorted_path : Pointer[GtkTreePath]) Pointer[GtkTreePath];

external gtk_tree_model_sort_convert_iter_to_child_iter(
    tree_model_sort : Pointer[GtkTreeModelSort],
    child_iter : Pointer[GtkTreeIter],
    sorted_iter : Pointer[GtkTreeIter]);

external gtk_tree_model_sort_reset_default_sort_func(
    tree_model_sort : Pointer[GtkTreeModelSort]);

external gtk_tree_model_sort_clear_cache(
    tree_model_sort : Pointer[GtkTreeModelSort]);

external gtk_tree_model_sort_iter_is_valid(
    tree_model_sort : Pointer[GtkTreeModelSort],
    iter : Pointer[GtkTreeIter]) Int;

alias GtkTreeSelectionFunc = CCodePointer[(Pointer[Struct__GtkTreeSelection],OpaquePointer,OpaquePointer,Int,RawPointer),(Int)];

alias GtkTreeSelectionForeachFunc = CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GtkTreeIter],RawPointer),()];

record Struct__GtkTreeSelection (
    parent : GObject,
    tree_view : Pointer[GtkTreeView],
    type : GtkSelectionMode,
    user_func : GtkTreeSelectionFunc,
    user_data : gpointer,
    destroy : GDestroyNotify,
);

record Struct__GtkTreeSelectionClass (
    parent_class : GObjectClass,
    changed : CCodePointer[(Pointer[Struct__GtkTreeSelection]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tree_selection_get_type() CULong;

external gtk_tree_selection_set_mode(
    selection : Pointer[GtkTreeSelection],
    type : GtkSelectionMode);

external gtk_tree_selection_get_mode(
    selection : Pointer[GtkTreeSelection]) GtkSelectionMode;

external gtk_tree_selection_set_select_function(
    selection : Pointer[GtkTreeSelection],
    func : GtkTreeSelectionFunc,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_tree_selection_get_user_data(
    selection : Pointer[GtkTreeSelection]) gpointer;

external gtk_tree_selection_get_tree_view(
    selection : Pointer[GtkTreeSelection]) Pointer[GtkTreeView];

external gtk_tree_selection_get_select_function(
    selection : Pointer[GtkTreeSelection]) GtkTreeSelectionFunc;

external gtk_tree_selection_get_selected(
    selection : Pointer[GtkTreeSelection],
    model : Pointer[Pointer[GtkTreeModel]],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_selection_get_selected_rows(
    selection : Pointer[GtkTreeSelection],
    model : Pointer[Pointer[GtkTreeModel]]) Pointer[GList];

external gtk_tree_selection_count_selected_rows(
    selection : Pointer[GtkTreeSelection]) Int;

external gtk_tree_selection_selected_foreach(
    selection : Pointer[GtkTreeSelection],
    func : GtkTreeSelectionForeachFunc,
    data : gpointer);

external gtk_tree_selection_select_path(
    selection : Pointer[GtkTreeSelection],
    path : Pointer[GtkTreePath]);

external gtk_tree_selection_unselect_path(
    selection : Pointer[GtkTreeSelection],
    path : Pointer[GtkTreePath]);

external gtk_tree_selection_select_iter(
    selection : Pointer[GtkTreeSelection],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_selection_unselect_iter(
    selection : Pointer[GtkTreeSelection],
    iter : Pointer[GtkTreeIter]);

external gtk_tree_selection_path_is_selected(
    selection : Pointer[GtkTreeSelection],
    path : Pointer[GtkTreePath]) Int;

external gtk_tree_selection_iter_is_selected(
    selection : Pointer[GtkTreeSelection],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_selection_select_all(
    selection : Pointer[GtkTreeSelection]);

external gtk_tree_selection_unselect_all(
    selection : Pointer[GtkTreeSelection]);

external gtk_tree_selection_select_range(
    selection : Pointer[GtkTreeSelection],
    start_path : Pointer[GtkTreePath],
    end_path : Pointer[GtkTreePath]);

external gtk_tree_selection_unselect_range(
    selection : Pointer[GtkTreeSelection],
    start_path : Pointer[GtkTreePath],
    end_path : Pointer[GtkTreePath]);

alias GtkTreeStore = Struct__GtkTreeStore;

alias GtkTreeStoreClass = Struct__GtkTreeStoreClass;

record Struct__GtkTreeStore (
    parent : GObject,
    stamp : Int,
    root : gpointer,
    last : gpointer,
    n_columns : Int,
    sort_column_id : Int,
    sort_list : Pointer[GList],
    order : GtkSortType,
    column_headers : Pointer[CULong],
    default_sort_func : GtkTreeIterCompareFunc,
    default_sort_data : gpointer,
    default_sort_destroy : GDestroyNotify,
    columns_dirty : UInt,
);

record Struct__GtkTreeStoreClass (
    parent_class : GObjectClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tree_store_get_type() CULong;

external gtk_tree_store_new(
    n_columns : Int,
    ...) Pointer[GtkTreeStore];

external gtk_tree_store_newv(
    n_columns : Int,
    types : Pointer[CULong]) Pointer[GtkTreeStore];

external gtk_tree_store_set_column_types(
    tree_store : Pointer[GtkTreeStore],
    n_columns : Int,
    types : Pointer[CULong]);

external gtk_tree_store_set_value(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    column : Int,
    value : Pointer[GValue]);

external gtk_tree_store_set(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    ...);

external gtk_tree_store_set_valuesv(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    columns : Pointer[Int],
    values : Pointer[GValue],
    n_values : Int);

external gtk_tree_store_set_valist(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    var_args : Pointer[__va_list_tag]);

external gtk_tree_store_remove(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_store_insert(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter],
    position : Int);

external gtk_tree_store_insert_before(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter],
    sibling : Pointer[GtkTreeIter]);

external gtk_tree_store_insert_after(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter],
    sibling : Pointer[GtkTreeIter]);

external gtk_tree_store_insert_with_values(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter],
    position : Int,
    ...);

external gtk_tree_store_insert_with_valuesv(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter],
    position : Int,
    columns : Pointer[Int],
    values : Pointer[GValue],
    n_values : Int);

external gtk_tree_store_prepend(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter]);

external gtk_tree_store_append(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    parent : Pointer[GtkTreeIter]);

external gtk_tree_store_is_ancestor(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    descendant : Pointer[GtkTreeIter]) Int;

external gtk_tree_store_iter_depth(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_store_clear(
    tree_store : Pointer[GtkTreeStore]);

external gtk_tree_store_iter_is_valid(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter]) Int;

external gtk_tree_store_reorder(
    tree_store : Pointer[GtkTreeStore],
    parent : Pointer[GtkTreeIter],
    new_order : Pointer[Int]);

external gtk_tree_store_swap(
    tree_store : Pointer[GtkTreeStore],
    a : Pointer[GtkTreeIter],
    b : Pointer[GtkTreeIter]);

external gtk_tree_store_move_before(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    position : Pointer[GtkTreeIter]);

external gtk_tree_store_move_after(
    tree_store : Pointer[GtkTreeStore],
    iter : Pointer[GtkTreeIter],
    position : Pointer[GtkTreeIter]);

alias GtkUIManager = Struct__GtkUIManager;

alias GtkUIManagerClass = Struct__GtkUIManagerClass;

alias GtkUIManagerPrivate = Opaque;

record Struct__GtkUIManager (
    parent : GObject,
    private_data : Pointer[GtkUIManagerPrivate],
);

record Struct__GtkUIManagerClass (
    parent_class : GObjectClass,
    add_widget : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[Struct__GtkWidget]),()],
    actions_changed : CCodePointer[(Pointer[Struct__GtkUIManager]),()],
    connect_proxy : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[Struct__GtkAction],Pointer[Struct__GtkWidget]),()],
    disconnect_proxy : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[Struct__GtkAction],Pointer[Struct__GtkWidget]),()],
    pre_activate : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[Struct__GtkAction]),()],
    post_activate : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[Struct__GtkAction]),()],
    get_widget : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[CChar]),(Pointer[Struct__GtkWidget])],
    get_action : CCodePointer[(Pointer[Struct__GtkUIManager],Pointer[CChar]),(Pointer[Struct__GtkAction])],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
);

alias GTK_UI_MANAGER_AUTO = 0;
alias GTK_UI_MANAGER_MENUBAR = 1;
alias GTK_UI_MANAGER_MENU = 2;
alias GTK_UI_MANAGER_TOOLBAR = 4;
alias GTK_UI_MANAGER_PLACEHOLDER = 8;
alias GTK_UI_MANAGER_POPUP = 16;
alias GTK_UI_MANAGER_MENUITEM = 32;
alias GTK_UI_MANAGER_TOOLITEM = 64;
alias GTK_UI_MANAGER_SEPARATOR = 128;
alias GTK_UI_MANAGER_ACCELERATOR = 256;
alias GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512;

alias GtkUIManagerItemType = Int;

external gtk_ui_manager_get_type() CULong;

external gtk_ui_manager_new() Pointer[GtkUIManager];

external gtk_ui_manager_set_add_tearoffs(
    self : Pointer[GtkUIManager],
    add_tearoffs : Int);

external gtk_ui_manager_get_add_tearoffs(
    self : Pointer[GtkUIManager]) Int;

external gtk_ui_manager_insert_action_group(
    self : Pointer[GtkUIManager],
    action_group : Pointer[GtkActionGroup],
    pos : Int);

external gtk_ui_manager_remove_action_group(
    self : Pointer[GtkUIManager],
    action_group : Pointer[GtkActionGroup]);

external gtk_ui_manager_get_action_groups(
    self : Pointer[GtkUIManager]) Pointer[GList];

external gtk_ui_manager_get_accel_group(
    self : Pointer[GtkUIManager]) Pointer[GtkAccelGroup];

external gtk_ui_manager_get_widget(
    self : Pointer[GtkUIManager],
    path : Pointer[CChar]) Pointer[GtkWidget];

external gtk_ui_manager_get_toplevels(
    self : Pointer[GtkUIManager],
    types : GtkUIManagerItemType) Pointer[GSList];

external gtk_ui_manager_get_action(
    self : Pointer[GtkUIManager],
    path : Pointer[CChar]) Pointer[GtkAction];

external gtk_ui_manager_add_ui_from_string(
    self : Pointer[GtkUIManager],
    buffer : Pointer[CChar],
    length : CLong,
    error : Pointer[Pointer[GError]]) UInt;

external gtk_ui_manager_add_ui_from_file(
    self : Pointer[GtkUIManager],
    filename : Pointer[CChar],
    error : Pointer[Pointer[GError]]) UInt;

external gtk_ui_manager_add_ui(
    self : Pointer[GtkUIManager],
    merge_id : UInt,
    path : Pointer[CChar],
    name : Pointer[CChar],
    action : Pointer[CChar],
    type : GtkUIManagerItemType,
    top : Int);

external gtk_ui_manager_remove_ui(
    self : Pointer[GtkUIManager],
    merge_id : UInt);

external gtk_ui_manager_get_ui(
    self : Pointer[GtkUIManager]) Pointer[CChar];

external gtk_ui_manager_ensure_update(
    self : Pointer[GtkUIManager]);

external gtk_ui_manager_new_merge_id(
    self : Pointer[GtkUIManager]) UInt;

alias GtkVButtonBox = Struct__GtkVButtonBox;

alias GtkVButtonBoxClass = Struct__GtkVButtonBoxClass;

record Struct__GtkVButtonBox (
    button_box : GtkButtonBox,
);

record Struct__GtkVButtonBoxClass (
    parent_class : GtkButtonBoxClass,
);

external gtk_vbutton_box_get_type() CULong;

external gtk_vbutton_box_new() Pointer[GtkWidget];

external gtk_vbutton_box_get_spacing_default() Int;

external gtk_vbutton_box_set_spacing_default(
    spacing : Int);

external gtk_vbutton_box_get_layout_default() GtkButtonBoxStyle;

external gtk_vbutton_box_set_layout_default(
    layout : GtkButtonBoxStyle);

external _gtk_vbutton_box_get_layout_default() GtkButtonBoxStyle;

alias GtkVolumeButton = Struct__GtkVolumeButton;

alias GtkVolumeButtonClass = Struct__GtkVolumeButtonClass;

record Struct__GtkVolumeButton (
    parent : GtkScaleButton,
);

record Struct__GtkVolumeButtonClass (
    parent_class : GtkScaleButtonClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_volume_button_get_type() CULong;

external gtk_volume_button_new() Pointer[GtkWidget];

alias GtkVPaned = Struct__GtkVPaned;

alias GtkVPanedClass = Struct__GtkVPanedClass;

record Struct__GtkVPaned (
    paned : GtkPaned,
);

record Struct__GtkVPanedClass (
    parent_class : GtkPanedClass,
);

external gtk_vpaned_get_type() CULong;

external gtk_vpaned_new() Pointer[GtkWidget];

alias GtkVRuler = Struct__GtkVRuler;

alias GtkVRulerClass = Struct__GtkVRulerClass;

record Struct__GtkVRuler (
    ruler : GtkRuler,
);

record Struct__GtkVRulerClass (
    parent_class : GtkRulerClass,
);

external gtk_vruler_get_type() CULong;

external gtk_vruler_new() Pointer[GtkWidget];

alias GtkVScale = Struct__GtkVScale;

alias GtkVScaleClass = Struct__GtkVScaleClass;

record Struct__GtkVScale (
    scale : GtkScale,
);

record Struct__GtkVScaleClass (
    parent_class : GtkScaleClass,
);

external gtk_vscale_get_type() CULong;

external gtk_vscale_new(
    adjustment : Pointer[GtkAdjustment]) Pointer[GtkWidget];

external gtk_vscale_new_with_range(
    min : Double,
    max : Double,
    step : Double) Pointer[GtkWidget];

alias GtkVSeparator = Struct__GtkVSeparator;

alias GtkVSeparatorClass = Struct__GtkVSeparatorClass;

record Struct__GtkVSeparator (
    separator : GtkSeparator,
);

record Struct__GtkVSeparatorClass (
    parent_class : GtkSeparatorClass,
);

external gtk_vseparator_get_type() CULong;

external gtk_vseparator_new() Pointer[GtkWidget];

alias GTK_CLIST_IN_DRAG = 1;
alias GTK_CLIST_ROW_HEIGHT_SET = 2;
alias GTK_CLIST_SHOW_TITLES = 4;
alias GTK_CLIST_ADD_MODE = 16;
alias GTK_CLIST_AUTO_SORT = 32;
alias GTK_CLIST_AUTO_RESIZE_BLOCKED = 64;
alias GTK_CLIST_REORDERABLE = 128;
alias GTK_CLIST_USE_DRAG_ICONS = 256;
alias GTK_CLIST_DRAW_DRAG_LINE = 512;
alias GTK_CLIST_DRAW_DRAG_RECT = 1024;

alias GTK_CELL_EMPTY = 0;
alias GTK_CELL_TEXT = 1;
alias GTK_CELL_PIXMAP = 2;
alias GTK_CELL_PIXTEXT = 3;
alias GTK_CELL_WIDGET = 4;

alias GtkCellType = Int;

alias GTK_CLIST_DRAG_NONE = 0;
alias GTK_CLIST_DRAG_BEFORE = 1;
alias GTK_CLIST_DRAG_INTO = 2;
alias GTK_CLIST_DRAG_AFTER = 3;

alias GtkCListDragPos = Int;

alias GTK_BUTTON_IGNORED = 0;
alias GTK_BUTTON_SELECTS = 1;
alias GTK_BUTTON_DRAGS = 2;
alias GTK_BUTTON_EXPANDS = 4;

alias GtkButtonAction = Int;

alias GtkCList = Struct__GtkCList;

alias GtkCListClass = Struct__GtkCListClass;

alias GtkCListColumn = Struct__GtkCListColumn;

alias GtkCListRow = Struct__GtkCListRow;

alias GtkCell = Struct__GtkCell;

alias GtkCellText = Struct__GtkCellText;

alias GtkCellPixmap = Struct__GtkCellPixmap;

alias GtkCellPixText = Struct__GtkCellPixText;

alias GtkCellWidget = Struct__GtkCellWidget;

alias GtkCListCompareFunc = CCodePointer[(Pointer[Struct__GtkCList],RawPointer,RawPointer),(Int)];

alias GtkCListCellInfo = Struct__GtkCListCellInfo;

alias GtkCListDestInfo = Struct__GtkCListDestInfo;

record Struct__GtkCListCellInfo (
    row : Int,
    column : Int,
);

record Struct__GtkCListDestInfo (
    cell : GtkCListCellInfo,
    insert_pos : GtkCListDragPos,
);

record Struct__GtkCList (
    container : GtkContainer,
    flags : UShort,
    reserved1 : gpointer,
    reserved2 : gpointer,
    freeze_count : UInt,
    internal_allocation : GdkRectangle,
    rows : Int,
    row_height : Int,
    row_list : Pointer[GList],
    row_list_end : Pointer[GList],
    columns : Int,
    column_title_area : GdkRectangle,
    title_window : Pointer[GdkWindow],
    column : Pointer[GtkCListColumn],
    clist_window : Pointer[GdkWindow],
    clist_window_width : Int,
    clist_window_height : Int,
    hoffset : Int,
    voffset : Int,
    shadow_type : GtkShadowType,
    selection_mode : GtkSelectionMode,
    selection : Pointer[GList],
    selection_end : Pointer[GList],
    undo_selection : Pointer[GList],
    undo_unselection : Pointer[GList],
    undo_anchor : Int,
    button_actions : Array[CUChar,5],
    drag_button : CUChar,
    click_cell : GtkCListCellInfo,
    hadjustment : Pointer[GtkAdjustment],
    vadjustment : Pointer[GtkAdjustment],
    xor_gc : Pointer[GdkGC],
    fg_gc : Pointer[GdkGC],
    bg_gc : Pointer[GdkGC],
    cursor_drag : Pointer[GdkCursor],
    x_drag : Int,
    focus_row : Int,
    focus_header_column : Int,
    anchor : Int,
    anchor_state : GtkStateType,
    drag_pos : Int,
    htimer : Int,
    vtimer : Int,
    sort_type : GtkSortType,
    compare : GtkCListCompareFunc,
    sort_column : Int,
    drag_highlight_row : Int,
    drag_highlight_pos : GtkCListDragPos,
);

record Struct__GtkCListClass (
    parent_class : GtkContainerClass,
    set_scroll_adjustments : CCodePointer[(Pointer[Struct__GtkCList],Pointer[Struct__GtkAdjustment],Pointer[Struct__GtkAdjustment]),()],
    refresh : CCodePointer[(Pointer[Struct__GtkCList]),()],
    select_row : CCodePointer[(Pointer[Struct__GtkCList],Int,Int,OpaquePointer),()],
    unselect_row : CCodePointer[(Pointer[Struct__GtkCList],Int,Int,OpaquePointer),()],
    row_move : CCodePointer[(Pointer[Struct__GtkCList],Int,Int),()],
    click_column : CCodePointer[(Pointer[Struct__GtkCList],Int),()],
    resize_column : CCodePointer[(Pointer[Struct__GtkCList],Int,Int),()],
    toggle_focus_row : CCodePointer[(Pointer[Struct__GtkCList]),()],
    select_all : CCodePointer[(Pointer[Struct__GtkCList]),()],
    unselect_all : CCodePointer[(Pointer[Struct__GtkCList]),()],
    undo_selection : CCodePointer[(Pointer[Struct__GtkCList]),()],
    start_selection : CCodePointer[(Pointer[Struct__GtkCList]),()],
    end_selection : CCodePointer[(Pointer[Struct__GtkCList]),()],
    extend_selection : CCodePointer[(Pointer[Struct__GtkCList],Int,Float,Int),()],
    scroll_horizontal : CCodePointer[(Pointer[Struct__GtkCList],Int,Float),()],
    scroll_vertical : CCodePointer[(Pointer[Struct__GtkCList],Int,Float),()],
    toggle_add_mode : CCodePointer[(Pointer[Struct__GtkCList]),()],
    abort_column_resize : CCodePointer[(Pointer[Struct__GtkCList]),()],
    resync_selection : CCodePointer[(Pointer[Struct__GtkCList],OpaquePointer),()],
    selection_find : CCodePointer[(Pointer[Struct__GtkCList],Int,Pointer[Struct__GList]),(Pointer[Struct__GList])],
    draw_row : CCodePointer[(Pointer[Struct__GtkCList],Pointer[Struct__GdkRectangle],Int,Pointer[Struct__GtkCListRow]),()],
    draw_drag_highlight : CCodePointer[(Pointer[Struct__GtkCList],Pointer[Struct__GtkCListRow],Int,Int),()],
    clear : CCodePointer[(Pointer[Struct__GtkCList]),()],
    fake_unselect_all : CCodePointer[(Pointer[Struct__GtkCList],Int),()],
    sort_list : CCodePointer[(Pointer[Struct__GtkCList]),()],
    insert_row : CCodePointer[(Pointer[Struct__GtkCList],Int,Pointer[Pointer[CChar]]),(Int)],
    remove_row : CCodePointer[(Pointer[Struct__GtkCList],Int),()],
    set_cell_contents : CCodePointer[(Pointer[Struct__GtkCList],Pointer[Struct__GtkCListRow],Int,Int,Pointer[CChar],CUChar,Pointer[Struct__GdkDrawable],Pointer[Struct__GdkDrawable]),()],
    cell_size_request : CCodePointer[(Pointer[Struct__GtkCList],Pointer[Struct__GtkCListRow],Int,Pointer[Struct__GtkRequisition]),()],
);

record Struct__GtkCListColumn (
    title : Pointer[CChar],
    area : GdkRectangle,
    button : Pointer[GtkWidget],
    window : Pointer[GdkWindow],
    width : Int,
    min_width : Int,
    max_width : Int,
    justification : GtkJustification,
    visible : UInt,
    width_set : UInt,
    resizeable : UInt,
    auto_resize : UInt,
    button_passive : UInt,
);

record Struct__GtkCListRow (
    cell : Pointer[GtkCell],
    state : GtkStateType,
    foreground : GdkColor,
    background : GdkColor,
    style : Pointer[GtkStyle],
    data : gpointer,
    destroy : GDestroyNotify,
    fg_set : UInt,
    bg_set : UInt,
    selectable : UInt,
);

record Struct__GtkCellText (
    type : GtkCellType,
    vertical : Short,
    horizontal : Short,
    style : Pointer[GtkStyle],
    text : Pointer[CChar],
);

record Struct__GtkCellPixmap (
    type : GtkCellType,
    vertical : Short,
    horizontal : Short,
    style : Pointer[GtkStyle],
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
);

record Struct__GtkCellPixText (
    type : GtkCellType,
    vertical : Short,
    horizontal : Short,
    style : Pointer[GtkStyle],
    text : Pointer[CChar],
    spacing : CUChar,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap],
);

record Struct__GtkCellWidget (
    type : GtkCellType,
    vertical : Short,
    horizontal : Short,
    style : Pointer[GtkStyle],
    widget : Pointer[GtkWidget],
);

record Struct__GtkCell (
    type : GtkCellType,
    vertical : Short,
    horizontal : Short,
    style : Pointer[GtkStyle],
    u : AUnionType,
);

external gtk_clist_get_type() CULong;

external gtk_clist_new(
    columns : Int) Pointer[GtkWidget];

external gtk_clist_new_with_titles(
    columns : Int,
    titles : Pointer[Pointer[CChar]]) Pointer[GtkWidget];

external gtk_clist_set_hadjustment(
    clist : Pointer[GtkCList],
    adjustment : Pointer[GtkAdjustment]);

external gtk_clist_set_vadjustment(
    clist : Pointer[GtkCList],
    adjustment : Pointer[GtkAdjustment]);

external gtk_clist_get_hadjustment(
    clist : Pointer[GtkCList]) Pointer[GtkAdjustment];

external gtk_clist_get_vadjustment(
    clist : Pointer[GtkCList]) Pointer[GtkAdjustment];

external gtk_clist_set_shadow_type(
    clist : Pointer[GtkCList],
    type : GtkShadowType);

external gtk_clist_set_selection_mode(
    clist : Pointer[GtkCList],
    mode : GtkSelectionMode);

external gtk_clist_set_reorderable(
    clist : Pointer[GtkCList],
    reorderable : Int);

external gtk_clist_set_use_drag_icons(
    clist : Pointer[GtkCList],
    use_icons : Int);

external gtk_clist_set_button_actions(
    clist : Pointer[GtkCList],
    button : UInt,
    button_actions : CUChar);

external gtk_clist_freeze(
    clist : Pointer[GtkCList]);

external gtk_clist_thaw(
    clist : Pointer[GtkCList]);

external gtk_clist_column_titles_show(
    clist : Pointer[GtkCList]);

external gtk_clist_column_titles_hide(
    clist : Pointer[GtkCList]);

external gtk_clist_column_title_active(
    clist : Pointer[GtkCList],
    column : Int);

external gtk_clist_column_title_passive(
    clist : Pointer[GtkCList],
    column : Int);

external gtk_clist_column_titles_active(
    clist : Pointer[GtkCList]);

external gtk_clist_column_titles_passive(
    clist : Pointer[GtkCList]);

external gtk_clist_set_column_title(
    clist : Pointer[GtkCList],
    column : Int,
    title : Pointer[CChar]);

external gtk_clist_get_column_title(
    clist : Pointer[GtkCList],
    column : Int) Pointer[CChar];

external gtk_clist_set_column_widget(
    clist : Pointer[GtkCList],
    column : Int,
    widget : Pointer[GtkWidget]);

external gtk_clist_get_column_widget(
    clist : Pointer[GtkCList],
    column : Int) Pointer[GtkWidget];

external gtk_clist_set_column_justification(
    clist : Pointer[GtkCList],
    column : Int,
    justification : GtkJustification);

external gtk_clist_set_column_visibility(
    clist : Pointer[GtkCList],
    column : Int,
    visible : Int);

external gtk_clist_set_column_resizeable(
    clist : Pointer[GtkCList],
    column : Int,
    resizeable : Int);

external gtk_clist_set_column_auto_resize(
    clist : Pointer[GtkCList],
    column : Int,
    auto_resize : Int);

external gtk_clist_columns_autosize(
    clist : Pointer[GtkCList]) Int;

external gtk_clist_optimal_column_width(
    clist : Pointer[GtkCList],
    column : Int) Int;

external gtk_clist_set_column_width(
    clist : Pointer[GtkCList],
    column : Int,
    width : Int);

external gtk_clist_set_column_min_width(
    clist : Pointer[GtkCList],
    column : Int,
    min_width : Int);

external gtk_clist_set_column_max_width(
    clist : Pointer[GtkCList],
    column : Int,
    max_width : Int);

external gtk_clist_set_row_height(
    clist : Pointer[GtkCList],
    height : UInt);

external gtk_clist_moveto(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    row_align : Float,
    col_align : Float);

external gtk_clist_row_is_visible(
    clist : Pointer[GtkCList],
    row : Int) GtkVisibility;

external gtk_clist_get_cell_type(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int) GtkCellType;

external gtk_clist_set_text(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    text : Pointer[CChar]);

external gtk_clist_get_text(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    text : Pointer[Pointer[CChar]]) Int;

external gtk_clist_set_pixmap(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_clist_get_pixmap(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    pixmap : Pointer[Pointer[GdkPixmap]],
    mask : Pointer[Pointer[GdkBitmap]]) Int;

external gtk_clist_set_pixtext(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    text : Pointer[CChar],
    spacing : CUChar,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_clist_get_pixtext(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    text : Pointer[Pointer[CChar]],
    spacing : Pointer[CUChar],
    pixmap : Pointer[Pointer[GdkPixmap]],
    mask : Pointer[Pointer[GdkBitmap]]) Int;

external gtk_clist_set_foreground(
    clist : Pointer[GtkCList],
    row : Int,
    color : Pointer[GdkColor]);

external gtk_clist_set_background(
    clist : Pointer[GtkCList],
    row : Int,
    color : Pointer[GdkColor]);

external gtk_clist_set_cell_style(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    style : Pointer[GtkStyle]);

external gtk_clist_get_cell_style(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int) Pointer[GtkStyle];

external gtk_clist_set_row_style(
    clist : Pointer[GtkCList],
    row : Int,
    style : Pointer[GtkStyle]);

external gtk_clist_get_row_style(
    clist : Pointer[GtkCList],
    row : Int) Pointer[GtkStyle];

external gtk_clist_set_shift(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int,
    vertical : Int,
    horizontal : Int);

external gtk_clist_set_selectable(
    clist : Pointer[GtkCList],
    row : Int,
    selectable : Int);

external gtk_clist_get_selectable(
    clist : Pointer[GtkCList],
    row : Int) Int;

external gtk_clist_prepend(
    clist : Pointer[GtkCList],
    text : Pointer[Pointer[CChar]]) Int;

external gtk_clist_append(
    clist : Pointer[GtkCList],
    text : Pointer[Pointer[CChar]]) Int;

external gtk_clist_insert(
    clist : Pointer[GtkCList],
    row : Int,
    text : Pointer[Pointer[CChar]]) Int;

external gtk_clist_remove(
    clist : Pointer[GtkCList],
    row : Int);

external gtk_clist_set_row_data(
    clist : Pointer[GtkCList],
    row : Int,
    data : gpointer);

external gtk_clist_set_row_data_full(
    clist : Pointer[GtkCList],
    row : Int,
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_clist_get_row_data(
    clist : Pointer[GtkCList],
    row : Int) gpointer;

external gtk_clist_find_row_from_data(
    clist : Pointer[GtkCList],
    data : gpointer) Int;

external gtk_clist_select_row(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int);

external gtk_clist_unselect_row(
    clist : Pointer[GtkCList],
    row : Int,
    column : Int);

external gtk_clist_undo_selection(
    clist : Pointer[GtkCList]);

external gtk_clist_clear(
    clist : Pointer[GtkCList]);

external gtk_clist_get_selection_info(
    clist : Pointer[GtkCList],
    x : Int,
    y : Int,
    row : Pointer[Int],
    column : Pointer[Int]) Int;

external gtk_clist_select_all(
    clist : Pointer[GtkCList]);

external gtk_clist_unselect_all(
    clist : Pointer[GtkCList]);

external gtk_clist_swap_rows(
    clist : Pointer[GtkCList],
    row1 : Int,
    row2 : Int);

external gtk_clist_row_move(
    clist : Pointer[GtkCList],
    source_row : Int,
    dest_row : Int);

external gtk_clist_set_compare_func(
    clist : Pointer[GtkCList],
    cmp_func : GtkCListCompareFunc);

external gtk_clist_set_sort_column(
    clist : Pointer[GtkCList],
    column : Int);

external gtk_clist_set_sort_type(
    clist : Pointer[GtkCList],
    sort_type : GtkSortType);

external gtk_clist_sort(
    clist : Pointer[GtkCList]);

external gtk_clist_set_auto_sort(
    clist : Pointer[GtkCList],
    auto_sort : Int);

external _gtk_clist_create_cell_layout(
    clist : Pointer[GtkCList],
    clist_row : Pointer[GtkCListRow],
    column : Int) Pointer[PangoLayout];

alias GtkCombo = Struct__GtkCombo;

alias GtkComboClass = Struct__GtkComboClass;

record Struct__GtkCombo (
    hbox : GtkHBox,
    entry : Pointer[GtkWidget],
    button : Pointer[GtkWidget],
    popup : Pointer[GtkWidget],
    popwin : Pointer[GtkWidget],
    list : Pointer[GtkWidget],
    entry_change_id : UInt,
    list_change_id : UInt,
    value_in_list : UInt,
    ok_if_empty : UInt,
    case_sensitive : UInt,
    use_arrows : UInt,
    use_arrows_always : UInt,
    current_button : UShort,
    activate_id : UInt,
);

record Struct__GtkComboClass (
    parent_class : GtkHBoxClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_combo_get_type() CULong;

external gtk_combo_new() Pointer[GtkWidget];

external gtk_combo_set_value_in_list(
    combo : Pointer[GtkCombo],
    val : Int,
    ok_if_empty : Int);

external gtk_combo_set_use_arrows(
    combo : Pointer[GtkCombo],
    val : Int);

external gtk_combo_set_use_arrows_always(
    combo : Pointer[GtkCombo],
    val : Int);

external gtk_combo_set_case_sensitive(
    combo : Pointer[GtkCombo],
    val : Int);

external gtk_combo_set_item_string(
    combo : Pointer[GtkCombo],
    item : Pointer[GtkItem],
    item_value : Pointer[CChar]);

external gtk_combo_set_popdown_strings(
    combo : Pointer[GtkCombo],
    strings : Pointer[GList]);

external gtk_combo_disable_activate(
    combo : Pointer[GtkCombo]);

alias GTK_CTREE_POS_BEFORE = 0;
alias GTK_CTREE_POS_AS_CHILD = 1;
alias GTK_CTREE_POS_AFTER = 2;

alias GtkCTreePos = Int;

alias GTK_CTREE_LINES_NONE = 0;
alias GTK_CTREE_LINES_SOLID = 1;
alias GTK_CTREE_LINES_DOTTED = 2;
alias GTK_CTREE_LINES_TABBED = 3;

alias GtkCTreeLineStyle = Int;

alias GTK_CTREE_EXPANDER_NONE = 0;
alias GTK_CTREE_EXPANDER_SQUARE = 1;
alias GTK_CTREE_EXPANDER_TRIANGLE = 2;
alias GTK_CTREE_EXPANDER_CIRCULAR = 3;

alias GtkCTreeExpanderStyle = Int;

alias GTK_CTREE_EXPANSION_EXPAND = 0;
alias GTK_CTREE_EXPANSION_EXPAND_RECURSIVE = 1;
alias GTK_CTREE_EXPANSION_COLLAPSE = 2;
alias GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE = 3;
alias GTK_CTREE_EXPANSION_TOGGLE = 4;
alias GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE = 5;

alias GtkCTreeExpansionType = Int;

alias GtkCTree = Struct__GtkCTree;

alias GtkCTreeClass = Struct__GtkCTreeClass;

alias GtkCTreeRow = Struct__GtkCTreeRow;

alias GtkCTreeNode = Struct__GtkCTreeNode;

alias GtkCTreeFunc = CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode],RawPointer),()];

alias GtkCTreeGNodeFunc = CCodePointer[(Pointer[Struct__GtkCTree],UInt,Pointer[Struct__GNode],Pointer[Struct__GtkCTreeNode],RawPointer),(Int)];

alias GtkCTreeCompareDragFunc = CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode],Pointer[Struct__GtkCTreeNode],Pointer[Struct__GtkCTreeNode]),(Int)];

record Struct__GtkCTree (
    clist : GtkCList,
    lines_gc : Pointer[GdkGC],
    tree_indent : Int,
    tree_spacing : Int,
    tree_column : Int,
    line_style : UInt,
    expander_style : UInt,
    show_stub : UInt,
    drag_compare : GtkCTreeCompareDragFunc,
);

record Struct__GtkCTreeClass (
    parent_class : GtkCListClass,
    tree_select_row : CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode],Int),()],
    tree_unselect_row : CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode],Int),()],
    tree_expand : CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode]),()],
    tree_collapse : CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode]),()],
    tree_move : CCodePointer[(Pointer[Struct__GtkCTree],Pointer[Struct__GtkCTreeNode],Pointer[Struct__GtkCTreeNode],Pointer[Struct__GtkCTreeNode]),()],
    change_focus_row_expansion : CCodePointer[(Pointer[Struct__GtkCTree],Int),()],
);

record Struct__GtkCTreeRow (
    row : GtkCListRow,
    parent : Pointer[GtkCTreeNode],
    sibling : Pointer[GtkCTreeNode],
    children : Pointer[GtkCTreeNode],
    pixmap_closed : Pointer[GdkPixmap],
    mask_closed : Pointer[GdkBitmap],
    pixmap_opened : Pointer[GdkPixmap],
    mask_opened : Pointer[GdkBitmap],
    level : UShort,
    is_leaf : UInt,
    expanded : UInt,
);

record Struct__GtkCTreeNode (
    list : GList,
);

external gtk_ctree_get_type() CULong;

external gtk_ctree_new_with_titles(
    columns : Int,
    tree_column : Int,
    titles : Pointer[Pointer[CChar]]) Pointer[GtkWidget];

external gtk_ctree_new(
    columns : Int,
    tree_column : Int) Pointer[GtkWidget];

external gtk_ctree_insert_node(
    ctree : Pointer[GtkCTree],
    parent : Pointer[GtkCTreeNode],
    sibling : Pointer[GtkCTreeNode],
    text : Pointer[Pointer[CChar]],
    spacing : CUChar,
    pixmap_closed : Pointer[GdkPixmap],
    mask_closed : Pointer[GdkBitmap],
    pixmap_opened : Pointer[GdkPixmap],
    mask_opened : Pointer[GdkBitmap],
    is_leaf : Int,
    expanded : Int) Pointer[GtkCTreeNode];

external gtk_ctree_remove_node(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_insert_gnode(
    ctree : Pointer[GtkCTree],
    parent : Pointer[GtkCTreeNode],
    sibling : Pointer[GtkCTreeNode],
    gnode : Pointer[GNode],
    func : GtkCTreeGNodeFunc,
    data : gpointer) Pointer[GtkCTreeNode];

external gtk_ctree_export_to_gnode(
    ctree : Pointer[GtkCTree],
    parent : Pointer[GNode],
    sibling : Pointer[GNode],
    node : Pointer[GtkCTreeNode],
    func : GtkCTreeGNodeFunc,
    data : gpointer) Pointer[GNode];

external gtk_ctree_post_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    func : GtkCTreeFunc,
    data : gpointer);

external gtk_ctree_post_recursive_to_depth(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    depth : Int,
    func : GtkCTreeFunc,
    data : gpointer);

external gtk_ctree_pre_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    func : GtkCTreeFunc,
    data : gpointer);

external gtk_ctree_pre_recursive_to_depth(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    depth : Int,
    func : GtkCTreeFunc,
    data : gpointer);

external gtk_ctree_is_viewable(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]) Int;

external gtk_ctree_last(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]) Pointer[GtkCTreeNode];

external gtk_ctree_find_node_ptr(
    ctree : Pointer[GtkCTree],
    ctree_row : Pointer[GtkCTreeRow]) Pointer[GtkCTreeNode];

external gtk_ctree_node_nth(
    ctree : Pointer[GtkCTree],
    row : UInt) Pointer[GtkCTreeNode];

external gtk_ctree_find(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    child : Pointer[GtkCTreeNode]) Int;

external gtk_ctree_is_ancestor(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    child : Pointer[GtkCTreeNode]) Int;

external gtk_ctree_find_by_row_data(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    data : gpointer) Pointer[GtkCTreeNode];

external gtk_ctree_find_all_by_row_data(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    data : gpointer) Pointer[GList];

external gtk_ctree_find_by_row_data_custom(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    data : gpointer,
    func : GCompareFunc) Pointer[GtkCTreeNode];

external gtk_ctree_find_all_by_row_data_custom(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    data : gpointer,
    func : GCompareFunc) Pointer[GList];

external gtk_ctree_is_hot_spot(
    ctree : Pointer[GtkCTree],
    x : Int,
    y : Int) Int;

external gtk_ctree_move(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    new_parent : Pointer[GtkCTreeNode],
    new_sibling : Pointer[GtkCTreeNode]);

external gtk_ctree_expand(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_expand_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_expand_to_depth(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    depth : Int);

external gtk_ctree_collapse(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_collapse_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_collapse_to_depth(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    depth : Int);

external gtk_ctree_toggle_expansion(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_toggle_expansion_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_select(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_select_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_unselect(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_unselect_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_real_select_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    state : Int);

external gtk_ctree_node_set_text(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    text : Pointer[CChar]);

external gtk_ctree_node_set_pixmap(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_ctree_node_set_pixtext(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    text : Pointer[CChar],
    spacing : CUChar,
    pixmap : Pointer[GdkPixmap],
    mask : Pointer[GdkBitmap]);

external gtk_ctree_set_node_info(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    text : Pointer[CChar],
    spacing : CUChar,
    pixmap_closed : Pointer[GdkPixmap],
    mask_closed : Pointer[GdkBitmap],
    pixmap_opened : Pointer[GdkPixmap],
    mask_opened : Pointer[GdkBitmap],
    is_leaf : Int,
    expanded : Int);

external gtk_ctree_node_set_shift(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    vertical : Int,
    horizontal : Int);

external gtk_ctree_node_set_selectable(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    selectable : Int);

external gtk_ctree_node_get_selectable(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]) Int;

external gtk_ctree_node_get_cell_type(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int) GtkCellType;

external gtk_ctree_node_get_text(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    text : Pointer[Pointer[CChar]]) Int;

external gtk_ctree_node_get_pixmap(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    pixmap : Pointer[Pointer[GdkPixmap]],
    mask : Pointer[Pointer[GdkBitmap]]) Int;

external gtk_ctree_node_get_pixtext(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    text : Pointer[Pointer[CChar]],
    spacing : Pointer[CUChar],
    pixmap : Pointer[Pointer[GdkPixmap]],
    mask : Pointer[Pointer[GdkBitmap]]) Int;

external gtk_ctree_get_node_info(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    text : Pointer[Pointer[CChar]],
    spacing : Pointer[CUChar],
    pixmap_closed : Pointer[Pointer[GdkPixmap]],
    mask_closed : Pointer[Pointer[GdkBitmap]],
    pixmap_opened : Pointer[Pointer[GdkPixmap]],
    mask_opened : Pointer[Pointer[GdkBitmap]],
    is_leaf : Pointer[Int],
    expanded : Pointer[Int]) Int;

external gtk_ctree_node_set_row_style(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    style : Pointer[GtkStyle]);

external gtk_ctree_node_get_row_style(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]) Pointer[GtkStyle];

external gtk_ctree_node_set_cell_style(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    style : Pointer[GtkStyle]);

external gtk_ctree_node_get_cell_style(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int) Pointer[GtkStyle];

external gtk_ctree_node_set_foreground(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    color : Pointer[GdkColor]);

external gtk_ctree_node_set_background(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    color : Pointer[GdkColor]);

external gtk_ctree_node_set_row_data(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    data : gpointer);

external gtk_ctree_node_set_row_data_full(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    data : gpointer,
    destroy : GDestroyNotify);

external gtk_ctree_node_get_row_data(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]) gpointer;

external gtk_ctree_node_moveto(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode],
    column : Int,
    row_align : Float,
    col_align : Float);

external gtk_ctree_node_is_visible(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]) GtkVisibility;

external gtk_ctree_set_indent(
    ctree : Pointer[GtkCTree],
    indent : Int);

external gtk_ctree_set_spacing(
    ctree : Pointer[GtkCTree],
    spacing : Int);

external gtk_ctree_set_show_stub(
    ctree : Pointer[GtkCTree],
    show_stub : Int);

external gtk_ctree_set_line_style(
    ctree : Pointer[GtkCTree],
    line_style : GtkCTreeLineStyle);

external gtk_ctree_set_expander_style(
    ctree : Pointer[GtkCTree],
    expander_style : GtkCTreeExpanderStyle);

external gtk_ctree_set_drag_compare_func(
    ctree : Pointer[GtkCTree],
    cmp_func : GtkCTreeCompareDragFunc);

external gtk_ctree_sort_node(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_sort_recursive(
    ctree : Pointer[GtkCTree],
    node : Pointer[GtkCTreeNode]);

external gtk_ctree_node_get_type() CULong;

alias GtkCurve = Struct__GtkCurve;

alias GtkCurveClass = Struct__GtkCurveClass;

record Struct__GtkCurve (
    graph : GtkDrawingArea,
    cursor_type : Int,
    min_x : Float,
    max_x : Float,
    min_y : Float,
    max_y : Float,
    pixmap : Pointer[GdkPixmap],
    curve_type : GtkCurveType,
    height : Int,
    grab_point : Int,
    last : Int,
    num_points : Int,
    point : Pointer[GdkPoint],
    num_ctlpoints : Int,
    ctlpoint : Pointer[UnknownType],
);

record Struct__GtkCurveClass (
    parent_class : GtkDrawingAreaClass,
    curve_type_changed : CCodePointer[(Pointer[Struct__GtkCurve]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_curve_get_type() CULong;

external gtk_curve_new() Pointer[GtkWidget];

external gtk_curve_reset(
    curve : Pointer[GtkCurve]);

external gtk_curve_set_gamma(
    curve : Pointer[GtkCurve],
    gamma_ : Float);

external gtk_curve_set_range(
    curve : Pointer[GtkCurve],
    min_x : Float,
    max_x : Float,
    min_y : Float,
    max_y : Float);

external gtk_curve_get_vector(
    curve : Pointer[GtkCurve],
    veclen : Int,
    vector : Pointer[Float]);

external gtk_curve_set_vector(
    curve : Pointer[GtkCurve],
    veclen : Int,
    vector : Pointer[Float]);

external gtk_curve_set_curve_type(
    curve : Pointer[GtkCurve],
    type : GtkCurveType);

alias GtkFileSelection = Struct__GtkFileSelection;

alias GtkFileSelectionClass = Struct__GtkFileSelectionClass;

record Struct__GtkFileSelection (
    parent_instance : GtkDialog,
    dir_list : Pointer[GtkWidget],
    file_list : Pointer[GtkWidget],
    selection_entry : Pointer[GtkWidget],
    selection_text : Pointer[GtkWidget],
    main_vbox : Pointer[GtkWidget],
    ok_button : Pointer[GtkWidget],
    cancel_button : Pointer[GtkWidget],
    help_button : Pointer[GtkWidget],
    history_pulldown : Pointer[GtkWidget],
    history_menu : Pointer[GtkWidget],
    history_list : Pointer[GList],
    fileop_dialog : Pointer[GtkWidget],
    fileop_entry : Pointer[GtkWidget],
    fileop_file : Pointer[CChar],
    cmpl_state : gpointer,
    fileop_c_dir : Pointer[GtkWidget],
    fileop_del_file : Pointer[GtkWidget],
    fileop_ren_file : Pointer[GtkWidget],
    button_area : Pointer[GtkWidget],
    action_area : Pointer[GtkWidget],
    selected_names : Pointer[GPtrArray],
    last_selected : Pointer[CChar],
);

record Struct__GtkFileSelectionClass (
    parent_class : GtkDialogClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_file_selection_get_type() CULong;

external gtk_file_selection_new(
    title : Pointer[CChar]) Pointer[GtkWidget];

external gtk_file_selection_set_filename(
    filesel : Pointer[GtkFileSelection],
    filename : Pointer[CChar]);

external gtk_file_selection_get_filename(
    filesel : Pointer[GtkFileSelection]) Pointer[CChar];

external gtk_file_selection_complete(
    filesel : Pointer[GtkFileSelection],
    pattern : Pointer[CChar]);

external gtk_file_selection_show_fileop_buttons(
    filesel : Pointer[GtkFileSelection]);

external gtk_file_selection_hide_fileop_buttons(
    filesel : Pointer[GtkFileSelection]);

external gtk_file_selection_get_selections(
    filesel : Pointer[GtkFileSelection]) Pointer[Pointer[CChar]];

external gtk_file_selection_set_select_multiple(
    filesel : Pointer[GtkFileSelection],
    select_multiple : Int);

external gtk_file_selection_get_select_multiple(
    filesel : Pointer[GtkFileSelection]) Int;

alias GtkGammaCurve = Struct__GtkGammaCurve;

alias GtkGammaCurveClass = Struct__GtkGammaCurveClass;

record Struct__GtkGammaCurve (
    vbox : GtkVBox,
    table : Pointer[GtkWidget],
    curve : Pointer[GtkWidget],
    button : Array[Pointer[GtkWidget],5],
    gamma : Float,
    gamma_dialog : Pointer[GtkWidget],
    gamma_text : Pointer[GtkWidget],
);

record Struct__GtkGammaCurveClass (
    parent_class : GtkVBoxClass,
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_gamma_curve_get_type() CULong;

external gtk_gamma_curve_new() Pointer[GtkWidget];

alias GtkInputDialog = Struct__GtkInputDialog;

alias GtkInputDialogClass = Struct__GtkInputDialogClass;

record Struct__GtkInputDialog (
    dialog : GtkDialog,
    axis_list : Pointer[GtkWidget],
    axis_listbox : Pointer[GtkWidget],
    mode_optionmenu : Pointer[GtkWidget],
    close_button : Pointer[GtkWidget],
    save_button : Pointer[GtkWidget],
    axis_items : Array[Pointer[GtkWidget],7],
    current_device : Pointer[GdkDevice],
    keys_list : Pointer[GtkWidget],
    keys_listbox : Pointer[GtkWidget],
);

record Struct__GtkInputDialogClass (
    parent_class : GtkDialogClass,
    enable_device : CCodePointer[(Pointer[Struct__GtkInputDialog],Pointer[Struct__GdkDevice]),()],
    disable_device : CCodePointer[(Pointer[Struct__GtkInputDialog],Pointer[Struct__GdkDevice]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_input_dialog_get_type() CULong;

external gtk_input_dialog_new() Pointer[GtkWidget];

alias GtkPrintFunc = CCodePointer[(RawPointer,Pointer[CChar]),()];

alias GtkItemFactoryCallback = CCodePointer[(),()];

alias GtkItemFactoryCallback1 = CCodePointer[(RawPointer,UInt,Pointer[Struct__GtkWidget]),()];

alias GtkItemFactory = Struct__GtkItemFactory;

alias GtkItemFactoryClass = Struct__GtkItemFactoryClass;

alias GtkItemFactoryEntry = Struct__GtkItemFactoryEntry;

alias GtkItemFactoryItem = Struct__GtkItemFactoryItem;

record Struct__GtkItemFactory (
    object : GtkObject,
    path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup],
    widget : Pointer[GtkWidget],
    items : Pointer[GSList],
    translate_func : GtkTranslateFunc,
    translate_data : gpointer,
    translate_notify : GDestroyNotify,
);

record Struct__GtkItemFactoryClass (
    object_class : GtkObjectClass,
    item_ht : Pointer[GHashTable],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

record Struct__GtkItemFactoryEntry (
    path : Pointer[CChar],
    accelerator : Pointer[CChar],
    callback : GtkItemFactoryCallback,
    callback_action : UInt,
    item_type : Pointer[CChar],
    extra_data : gconstpointer,
);

record Struct__GtkItemFactoryItem (
    path : Pointer[CChar],
    widgets : Pointer[GSList],
);

external gtk_item_factory_get_type() CULong;

external gtk_item_factory_new(
    container_type : CULong,
    path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup]) Pointer[GtkItemFactory];

external gtk_item_factory_construct(
    ifactory : Pointer[GtkItemFactory],
    container_type : CULong,
    path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup]);

external gtk_item_factory_add_foreign(
    accel_widget : Pointer[GtkWidget],
    full_path : Pointer[CChar],
    accel_group : Pointer[GtkAccelGroup],
    keyval : UInt,
    modifiers : GdkModifierType);

external gtk_item_factory_from_widget(
    widget : Pointer[GtkWidget]) Pointer[GtkItemFactory];

external gtk_item_factory_path_from_widget(
    widget : Pointer[GtkWidget]) Pointer[CChar];

external gtk_item_factory_get_item(
    ifactory : Pointer[GtkItemFactory],
    path : Pointer[CChar]) Pointer[GtkWidget];

external gtk_item_factory_get_widget(
    ifactory : Pointer[GtkItemFactory],
    path : Pointer[CChar]) Pointer[GtkWidget];

external gtk_item_factory_get_widget_by_action(
    ifactory : Pointer[GtkItemFactory],
    action : UInt) Pointer[GtkWidget];

external gtk_item_factory_get_item_by_action(
    ifactory : Pointer[GtkItemFactory],
    action : UInt) Pointer[GtkWidget];

external gtk_item_factory_create_item(
    ifactory : Pointer[GtkItemFactory],
    entry : Pointer[GtkItemFactoryEntry],
    callback_data : gpointer,
    callback_type : UInt);

external gtk_item_factory_create_items(
    ifactory : Pointer[GtkItemFactory],
    n_entries : UInt,
    entries : Pointer[GtkItemFactoryEntry],
    callback_data : gpointer);

external gtk_item_factory_delete_item(
    ifactory : Pointer[GtkItemFactory],
    path : Pointer[CChar]);

external gtk_item_factory_delete_entry(
    ifactory : Pointer[GtkItemFactory],
    entry : Pointer[GtkItemFactoryEntry]);

external gtk_item_factory_delete_entries(
    ifactory : Pointer[GtkItemFactory],
    n_entries : UInt,
    entries : Pointer[GtkItemFactoryEntry]);

external gtk_item_factory_popup(
    ifactory : Pointer[GtkItemFactory],
    x : UInt,
    y : UInt,
    mouse_button : UInt,
    time_ : UInt);

external gtk_item_factory_popup_with_data(
    ifactory : Pointer[GtkItemFactory],
    popup_data : gpointer,
    destroy : GDestroyNotify,
    x : UInt,
    y : UInt,
    mouse_button : UInt,
    time_ : UInt);

external gtk_item_factory_popup_data(
    ifactory : Pointer[GtkItemFactory]) gpointer;

external gtk_item_factory_popup_data_from_widget(
    widget : Pointer[GtkWidget]) gpointer;

external gtk_item_factory_set_translate_func(
    ifactory : Pointer[GtkItemFactory],
    func : GtkTranslateFunc,
    data : gpointer,
    notify : GDestroyNotify);

alias GtkMenuCallback = CCodePointer[(Pointer[Struct__GtkWidget],RawPointer),()];

record UnnamedStruct15 (
    path : Pointer[CChar],
    accelerator : Pointer[CChar],
    callback : GtkMenuCallback,
    callback_data : gpointer,
    widget : Pointer[GtkWidget],
);

alias GtkMenuEntry = UnnamedStruct15;

alias GtkItemFactoryCallback2 = CCodePointer[(Pointer[Struct__GtkWidget],RawPointer,UInt),()];

external gtk_item_factory_create_items_ac(
    ifactory : Pointer[GtkItemFactory],
    n_entries : UInt,
    entries : Pointer[GtkItemFactoryEntry],
    callback_data : gpointer,
    callback_type : UInt);

external gtk_item_factory_from_path(
    path : Pointer[CChar]) Pointer[GtkItemFactory];

external gtk_item_factory_create_menu_entries(
    n_entries : UInt,
    entries : Pointer[GtkMenuEntry]);

external gtk_item_factories_path_delete(
    ifactory_path : Pointer[CChar],
    path : Pointer[CChar]);

alias GtkList = Struct__GtkList;

alias GtkListClass = Struct__GtkListClass;

record Struct__GtkList (
    container : GtkContainer,
    children : Pointer[GList],
    selection : Pointer[GList],
    undo_selection : Pointer[GList],
    undo_unselection : Pointer[GList],
    last_focus_child : Pointer[GtkWidget],
    undo_focus_child : Pointer[GtkWidget],
    htimer : UInt,
    vtimer : UInt,
    anchor : Int,
    drag_pos : Int,
    anchor_state : GtkStateType,
    selection_mode : UInt,
    drag_selection : UInt,
    add_mode : UInt,
);

record Struct__GtkListClass (
    parent_class : GtkContainerClass,
    selection_changed : CCodePointer[(Pointer[Struct__GtkList]),()],
    select_child : CCodePointer[(Pointer[Struct__GtkList],Pointer[Struct__GtkWidget]),()],
    unselect_child : CCodePointer[(Pointer[Struct__GtkList],Pointer[Struct__GtkWidget]),()],
);

external gtk_list_get_type() CULong;

external gtk_list_new() Pointer[GtkWidget];

external gtk_list_insert_items(
    list : Pointer[GtkList],
    items : Pointer[GList],
    position : Int);

external gtk_list_append_items(
    list : Pointer[GtkList],
    items : Pointer[GList]);

external gtk_list_prepend_items(
    list : Pointer[GtkList],
    items : Pointer[GList]);

external gtk_list_remove_items(
    list : Pointer[GtkList],
    items : Pointer[GList]);

external gtk_list_remove_items_no_unref(
    list : Pointer[GtkList],
    items : Pointer[GList]);

external gtk_list_clear_items(
    list : Pointer[GtkList],
    start : Int,
    end : Int);

external gtk_list_select_item(
    list : Pointer[GtkList],
    item : Int);

external gtk_list_unselect_item(
    list : Pointer[GtkList],
    item : Int);

external gtk_list_select_child(
    list : Pointer[GtkList],
    child : Pointer[GtkWidget]);

external gtk_list_unselect_child(
    list : Pointer[GtkList],
    child : Pointer[GtkWidget]);

external gtk_list_child_position(
    list : Pointer[GtkList],
    child : Pointer[GtkWidget]) Int;

external gtk_list_set_selection_mode(
    list : Pointer[GtkList],
    mode : GtkSelectionMode);

external gtk_list_extend_selection(
    list : Pointer[GtkList],
    scroll_type : GtkScrollType,
    position : Float,
    auto_start_selection : Int);

external gtk_list_start_selection(
    list : Pointer[GtkList]);

external gtk_list_end_selection(
    list : Pointer[GtkList]);

external gtk_list_select_all(
    list : Pointer[GtkList]);

external gtk_list_unselect_all(
    list : Pointer[GtkList]);

external gtk_list_scroll_horizontal(
    list : Pointer[GtkList],
    scroll_type : GtkScrollType,
    position : Float);

external gtk_list_scroll_vertical(
    list : Pointer[GtkList],
    scroll_type : GtkScrollType,
    position : Float);

external gtk_list_toggle_add_mode(
    list : Pointer[GtkList]);

external gtk_list_toggle_focus_row(
    list : Pointer[GtkList]);

external gtk_list_toggle_row(
    list : Pointer[GtkList],
    item : Pointer[GtkWidget]);

external gtk_list_undo_selection(
    list : Pointer[GtkList]);

external gtk_list_end_drag_selection(
    list : Pointer[GtkList]);

alias GtkListItem = Struct__GtkListItem;

alias GtkListItemClass = Struct__GtkListItemClass;

record Struct__GtkListItem (
    item : GtkItem,
);

record Struct__GtkListItemClass (
    parent_class : GtkItemClass,
    toggle_focus_row : CCodePointer[(Pointer[Struct__GtkListItem]),()],
    select_all : CCodePointer[(Pointer[Struct__GtkListItem]),()],
    unselect_all : CCodePointer[(Pointer[Struct__GtkListItem]),()],
    undo_selection : CCodePointer[(Pointer[Struct__GtkListItem]),()],
    start_selection : CCodePointer[(Pointer[Struct__GtkListItem]),()],
    end_selection : CCodePointer[(Pointer[Struct__GtkListItem]),()],
    extend_selection : CCodePointer[(Pointer[Struct__GtkListItem],Int,Float,Int),()],
    scroll_horizontal : CCodePointer[(Pointer[Struct__GtkListItem],Int,Float),()],
    scroll_vertical : CCodePointer[(Pointer[Struct__GtkListItem],Int,Float),()],
    toggle_add_mode : CCodePointer[(Pointer[Struct__GtkListItem]),()],
);

external gtk_list_item_get_type() CULong;

external gtk_list_item_new() Pointer[GtkWidget];

external gtk_list_item_new_with_label(
    label : Pointer[CChar]) Pointer[GtkWidget];

external gtk_list_item_select(
    list_item : Pointer[GtkListItem]);

external gtk_list_item_deselect(
    list_item : Pointer[GtkListItem]);

alias GtkOldEditable = Struct__GtkOldEditable;

alias GtkOldEditableClass = Struct__GtkOldEditableClass;

alias GtkTextFunction = CCodePointer[(Pointer[Struct__GtkOldEditable],UInt),()];

record Struct__GtkOldEditable (
    widget : GtkWidget,
    current_pos : UInt,
    selection_start_pos : UInt,
    selection_end_pos : UInt,
    has_selection : UInt,
    editable : UInt,
    visible : UInt,
    clipboard_text : Pointer[CChar],
);

record Struct__GtkOldEditableClass (
    parent_class : GtkWidgetClass,
    activate : CCodePointer[(Pointer[Struct__GtkOldEditable]),()],
    set_editable : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    move_cursor : CCodePointer[(Pointer[Struct__GtkOldEditable],Int,Int),()],
    move_word : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    move_page : CCodePointer[(Pointer[Struct__GtkOldEditable],Int,Int),()],
    move_to_row : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    move_to_column : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    kill_char : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    kill_word : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    kill_line : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
    cut_clipboard : CCodePointer[(Pointer[Struct__GtkOldEditable]),()],
    copy_clipboard : CCodePointer[(Pointer[Struct__GtkOldEditable]),()],
    paste_clipboard : CCodePointer[(Pointer[Struct__GtkOldEditable]),()],
    update_text : CCodePointer[(Pointer[Struct__GtkOldEditable],Int,Int),()],
    get_chars : CCodePointer[(Pointer[Struct__GtkOldEditable],Int,Int),(Pointer[CChar])],
    set_selection : CCodePointer[(Pointer[Struct__GtkOldEditable],Int,Int),()],
    set_position : CCodePointer[(Pointer[Struct__GtkOldEditable],Int),()],
);

external gtk_old_editable_get_type() CULong;

external gtk_old_editable_claim_selection(
    old_editable : Pointer[GtkOldEditable],
    claim : Int,
    time_ : UInt);

external gtk_old_editable_changed(
    old_editable : Pointer[GtkOldEditable]);

alias GtkOptionMenu = Struct__GtkOptionMenu;

alias GtkOptionMenuClass = Struct__GtkOptionMenuClass;

record Struct__GtkOptionMenu (
    button : GtkButton,
    menu : Pointer[GtkWidget],
    menu_item : Pointer[GtkWidget],
    width : UShort,
    height : UShort,
);

record Struct__GtkOptionMenuClass (
    parent_class : GtkButtonClass,
    changed : CCodePointer[(Pointer[Struct__GtkOptionMenu]),()],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_option_menu_get_type() CULong;

external gtk_option_menu_new() Pointer[GtkWidget];

external gtk_option_menu_get_menu(
    option_menu : Pointer[GtkOptionMenu]) Pointer[GtkWidget];

external gtk_option_menu_set_menu(
    option_menu : Pointer[GtkOptionMenu],
    menu : Pointer[GtkWidget]);

external gtk_option_menu_remove_menu(
    option_menu : Pointer[GtkOptionMenu]);

external gtk_option_menu_get_history(
    option_menu : Pointer[GtkOptionMenu]) Int;

external gtk_option_menu_set_history(
    option_menu : Pointer[GtkOptionMenu],
    index_ : UInt);

alias GtkPreview = Struct__GtkPreview;

alias GtkPreviewInfo = Struct__GtkPreviewInfo;

alias GtkDitherInfo = AUnionType;

alias GtkPreviewClass = Struct__GtkPreviewClass;

record Struct__GtkPreview (
    widget : GtkWidget,
    buffer : Pointer[CUChar],
    buffer_width : UShort,
    buffer_height : UShort,
    bpp : UShort,
    rowstride : UShort,
    dither : GdkRgbDither,
    type : UInt,
    expand : UInt,
);

record Struct__GtkPreviewInfo (
    lookup : Pointer[CUChar],
    gamma : Double,
);

record Struct__GtkPreviewClass (
    parent_class : GtkWidgetClass,
    info : GtkPreviewInfo,
);

external gtk_preview_get_type() CULong;

external gtk_preview_uninit();

external gtk_preview_new(
    type : GtkPreviewType) Pointer[GtkWidget];

external gtk_preview_size(
    preview : Pointer[GtkPreview],
    width : Int,
    height : Int);

external gtk_preview_put(
    preview : Pointer[GtkPreview],
    window : Pointer[GdkWindow],
    gc : Pointer[GdkGC],
    srcx : Int,
    srcy : Int,
    destx : Int,
    desty : Int,
    width : Int,
    height : Int);

external gtk_preview_draw_row(
    preview : Pointer[GtkPreview],
    data : Pointer[CUChar],
    x : Int,
    y : Int,
    w : Int);

external gtk_preview_set_expand(
    preview : Pointer[GtkPreview],
    expand : Int);

external gtk_preview_set_gamma(
    gamma_ : Double);

external gtk_preview_set_color_cube(
    nred_shades : UInt,
    ngreen_shades : UInt,
    nblue_shades : UInt,
    ngray_shades : UInt);

external gtk_preview_set_install_cmap(
    install_cmap : Int);

external gtk_preview_set_reserved(
    nreserved : Int);

external gtk_preview_set_dither(
    preview : Pointer[GtkPreview],
    dither : GdkRgbDither);

external gtk_preview_get_visual() Pointer[GdkVisual];

external gtk_preview_get_cmap() Pointer[GdkColormap];

external gtk_preview_get_info() Pointer[GtkPreviewInfo];

external gtk_preview_reset();

alias GtkTipsQuery = Struct__GtkTipsQuery;

alias GtkTipsQueryClass = Struct__GtkTipsQueryClass;

record Struct__GtkTipsQuery (
    label : GtkLabel,
    emit_always : UInt,
    in_query : UInt,
    label_inactive : Pointer[CChar],
    label_no_tip : Pointer[CChar],
    caller : Pointer[GtkWidget],
    last_crossed : Pointer[GtkWidget],
    query_cursor : Pointer[GdkCursor],
);

record Struct__GtkTipsQueryClass (
    parent_class : GtkLabelClass,
    start_query : CCodePointer[(Pointer[Struct__GtkTipsQuery]),()],
    stop_query : CCodePointer[(Pointer[Struct__GtkTipsQuery]),()],
    widget_entered : CCodePointer[(Pointer[Struct__GtkTipsQuery],Pointer[Struct__GtkWidget],Pointer[CChar],Pointer[CChar]),()],
    widget_selected : CCodePointer[(Pointer[Struct__GtkTipsQuery],Pointer[Struct__GtkWidget],Pointer[CChar],Pointer[CChar],Pointer[Struct__GdkEventButton]),(Int)],
    _gtk_reserved1 : CCodePointer[(),()],
    _gtk_reserved2 : CCodePointer[(),()],
    _gtk_reserved3 : CCodePointer[(),()],
    _gtk_reserved4 : CCodePointer[(),()],
);

external gtk_tips_query_get_type() CULong;

external gtk_tips_query_new() Pointer[GtkWidget];

external gtk_tips_query_start_query(
    tips_query : Pointer[GtkTipsQuery]);

external gtk_tips_query_stop_query(
    tips_query : Pointer[GtkTipsQuery]);

external gtk_tips_query_set_caller(
    tips_query : Pointer[GtkTipsQuery],
    caller : Pointer[GtkWidget]);

external gtk_tips_query_set_labels(
    tips_query : Pointer[GtkTipsQuery],
    label_inactive : Pointer[CChar],
    label_no_tip : Pointer[CChar]);
