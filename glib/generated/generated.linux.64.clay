// automatically generated by clay-bindgen
import unix.*;

alias gint8 = CChar;

alias guint8 = CUChar;

alias gint16 = CShort;

alias guint16 = CUShort;

alias gint32 = CInt;

alias guint32 = CUInt;

alias gint64 = CLong;

alias guint64 = CULong;

alias gssize = CLong;

alias gsize = CULong;

alias goffset = gint64;

alias gintptr = CLong;

alias guintptr = CULong;

alias GPid = CInt;

alias gchar = CChar;

alias gshort = CShort;

alias glong = CLong;

alias gint = CInt;

alias gboolean = gint;

alias guchar = CUChar;

alias gushort = CUShort;

alias gulong = CULong;

alias guint = CUInt;

alias gfloat = CFloat;

alias gdouble = CDouble;

alias gpointer = OpaquePointer;

alias gconstpointer = OpaquePointer;

alias GCompareFunc = CCodePointer[[gconstpointer, gconstpointer],[gint]];

alias GCompareDataFunc = CCodePointer[[gconstpointer, gconstpointer, gpointer],[gint]];

alias GEqualFunc = CCodePointer[[gconstpointer, gconstpointer],[gboolean]];

alias GDestroyNotify = CCodePointer[[gpointer],[]];

alias GFunc = CCodePointer[[gpointer, gpointer],[]];

alias GHashFunc = CCodePointer[[gconstpointer],[guint]];

alias GHFunc = CCodePointer[[gpointer, gpointer, gpointer],[]];

alias GFreeFunc = CCodePointer[[gpointer],[]];

alias GTranslateFunc = CCodePointer[[Pointer[gchar], gpointer],[Pointer[gchar]]];

alias GDoubleIEEE754 = Union__GDoubleIEEE754;

alias GFloatIEEE754 = Union__GFloatIEEE754;

alias Union__GFloatIEEE754 = Union[
    /* v_float */ gfloat,
    /* mpn */ Struct_Unnamed1,
];

alias Union__GDoubleIEEE754 = Union[
    /* v_double */ gdouble,
    /* mpn */ Struct_Unnamed2,
];

alias GTimeVal = Struct__GTimeVal;

record Struct__GTimeVal (
    tv_sec : glong,
    tv_usec : glong,
);

alias Struct__GBytes = Opaque;

alias GBytes = Struct__GBytes;

alias GArray = Struct__GArray;

alias GByteArray = Struct__GByteArray;

alias GPtrArray = Struct__GPtrArray;

record Struct__GArray (
    data : Pointer[gchar],
    len : guint,
);

record Struct__GByteArray (
    data : Pointer[guint8],
    len : guint,
);

record Struct__GPtrArray (
    pdata : Pointer[gpointer],
    len : guint,
);

external (cdecl) g_array_new(arg0:gboolean, arg1:gboolean, arg2:guint) : Pointer[GArray];

external (cdecl) g_array_sized_new(arg0:gboolean, arg1:gboolean, arg2:guint, arg3:guint) : Pointer[GArray];

external (cdecl) g_array_free(arg0:Pointer[GArray], arg1:gboolean) : Pointer[gchar];

external (cdecl) g_array_ref(arg0:Pointer[GArray]) : Pointer[GArray];

external (cdecl) g_array_unref(arg0:Pointer[GArray]) : ;

external (cdecl) g_array_get_element_size(arg0:Pointer[GArray]) : guint;

external (cdecl) g_array_append_vals(arg0:Pointer[GArray], arg1:gconstpointer, arg2:guint) : Pointer[GArray];

external (cdecl) g_array_prepend_vals(arg0:Pointer[GArray], arg1:gconstpointer, arg2:guint) : Pointer[GArray];

external (cdecl) g_array_insert_vals(arg0:Pointer[GArray], arg1:guint, arg2:gconstpointer, arg3:guint) : Pointer[GArray];

external (cdecl) g_array_set_size(arg0:Pointer[GArray], arg1:guint) : Pointer[GArray];

external (cdecl) g_array_remove_index(arg0:Pointer[GArray], arg1:guint) : Pointer[GArray];

external (cdecl) g_array_remove_index_fast(arg0:Pointer[GArray], arg1:guint) : Pointer[GArray];

external (cdecl) g_array_remove_range(arg0:Pointer[GArray], arg1:guint, arg2:guint) : Pointer[GArray];

external (cdecl) g_array_sort(arg0:Pointer[GArray], arg1:GCompareFunc) : ;

external (cdecl) g_array_sort_with_data(arg0:Pointer[GArray], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_array_set_clear_func(arg0:Pointer[GArray], arg1:GDestroyNotify) : ;

external (cdecl) g_ptr_array_new() : Pointer[GPtrArray];

external (cdecl) g_ptr_array_new_with_free_func(arg0:GDestroyNotify) : Pointer[GPtrArray];

external (cdecl) g_ptr_array_sized_new(arg0:guint) : Pointer[GPtrArray];

external (cdecl) g_ptr_array_new_full(arg0:guint, arg1:GDestroyNotify) : Pointer[GPtrArray];

external (cdecl) g_ptr_array_free(arg0:Pointer[GPtrArray], arg1:gboolean) : Pointer[gpointer];

external (cdecl) g_ptr_array_ref(arg0:Pointer[GPtrArray]) : Pointer[GPtrArray];

external (cdecl) g_ptr_array_unref(arg0:Pointer[GPtrArray]) : ;

external (cdecl) g_ptr_array_set_free_func(arg0:Pointer[GPtrArray], arg1:GDestroyNotify) : ;

external (cdecl) g_ptr_array_set_size(arg0:Pointer[GPtrArray], arg1:gint) : ;

external (cdecl) g_ptr_array_remove_index(arg0:Pointer[GPtrArray], arg1:guint) : gpointer;

external (cdecl) g_ptr_array_remove_index_fast(arg0:Pointer[GPtrArray], arg1:guint) : gpointer;

external (cdecl) g_ptr_array_remove(arg0:Pointer[GPtrArray], arg1:gpointer) : gboolean;

external (cdecl) g_ptr_array_remove_fast(arg0:Pointer[GPtrArray], arg1:gpointer) : gboolean;

external (cdecl) g_ptr_array_remove_range(arg0:Pointer[GPtrArray], arg1:guint, arg2:guint) : ;

external (cdecl) g_ptr_array_add(arg0:Pointer[GPtrArray], arg1:gpointer) : ;

external (cdecl) g_ptr_array_sort(arg0:Pointer[GPtrArray], arg1:GCompareFunc) : ;

external (cdecl) g_ptr_array_sort_with_data(arg0:Pointer[GPtrArray], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_ptr_array_foreach(arg0:Pointer[GPtrArray], arg1:GFunc, arg2:gpointer) : ;

external (cdecl) g_byte_array_new() : Pointer[GByteArray];

external (cdecl) g_byte_array_new_take(arg0:Pointer[guint8], arg1:gsize) : Pointer[GByteArray];

external (cdecl) g_byte_array_sized_new(arg0:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_free(arg0:Pointer[GByteArray], arg1:gboolean) : Pointer[guint8];

external (cdecl) g_byte_array_free_to_bytes(arg0:Pointer[GByteArray]) : Pointer[GBytes];

external (cdecl) g_byte_array_ref(arg0:Pointer[GByteArray]) : Pointer[GByteArray];

external (cdecl) g_byte_array_unref(arg0:Pointer[GByteArray]) : ;

external (cdecl) g_byte_array_append(arg0:Pointer[GByteArray], arg1:Pointer[guint8], arg2:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_prepend(arg0:Pointer[GByteArray], arg1:Pointer[guint8], arg2:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_set_size(arg0:Pointer[GByteArray], arg1:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_remove_index(arg0:Pointer[GByteArray], arg1:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_remove_index_fast(arg0:Pointer[GByteArray], arg1:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_remove_range(arg0:Pointer[GByteArray], arg1:guint, arg2:guint) : Pointer[GByteArray];

external (cdecl) g_byte_array_sort(arg0:Pointer[GByteArray], arg1:GCompareFunc) : ;

external (cdecl) g_byte_array_sort_with_data(arg0:Pointer[GByteArray], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_atomic_int_get(arg0:Pointer[gint]) : gint;

external (cdecl) g_atomic_int_set(arg0:Pointer[gint], arg1:gint) : ;

external (cdecl) g_atomic_int_inc(arg0:Pointer[gint]) : ;

external (cdecl) g_atomic_int_dec_and_test(arg0:Pointer[gint]) : gboolean;

external (cdecl) g_atomic_int_compare_and_exchange(arg0:Pointer[gint], arg1:gint, arg2:gint) : gboolean;

external (cdecl) g_atomic_int_add(arg0:Pointer[gint], arg1:gint) : gint;

external (cdecl) g_atomic_int_and(arg0:Pointer[guint], arg1:guint) : guint;

external (cdecl) g_atomic_int_or(arg0:Pointer[guint], arg1:guint) : guint;

external (cdecl) g_atomic_int_xor(arg0:Pointer[guint], arg1:guint) : guint;

external (cdecl) g_atomic_pointer_get(arg0:OpaquePointer) : gpointer;

external (cdecl) g_atomic_pointer_set(arg0:OpaquePointer, arg1:gpointer) : ;

external (cdecl) g_atomic_pointer_compare_and_exchange(arg0:OpaquePointer, arg1:gpointer, arg2:gpointer) : gboolean;

external (cdecl) g_atomic_pointer_add(arg0:OpaquePointer, arg1:gssize) : gssize;

external (cdecl) g_atomic_pointer_and(arg0:OpaquePointer, arg1:gsize) : gsize;

external (cdecl) g_atomic_pointer_or(arg0:OpaquePointer, arg1:gsize) : gsize;

external (cdecl) g_atomic_pointer_xor(arg0:OpaquePointer, arg1:gsize) : gsize;

external (cdecl) g_atomic_int_exchange_and_add(arg0:Pointer[gint], arg1:gint) : gint;

alias GQuark = guint32;

external (cdecl) g_quark_try_string(arg0:Pointer[gchar]) : GQuark;

external (cdecl) g_quark_from_static_string(arg0:Pointer[gchar]) : GQuark;

external (cdecl) g_quark_from_string(arg0:Pointer[gchar]) : GQuark;

external (cdecl) g_quark_to_string(arg0:GQuark) : Pointer[gchar];

external (cdecl) g_intern_string(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_intern_static_string(arg0:Pointer[gchar]) : Pointer[gchar];

alias GError = Struct__GError;

record Struct__GError (
    domain : GQuark,
    code : gint,
    message : Pointer[gchar],
);

external (cdecl) g_error_new(arg0:GQuark, arg1:gint, arg2:Pointer[gchar], ..) : Pointer[GError];

external (cdecl) g_error_new_literal(arg0:GQuark, arg1:gint, arg2:Pointer[gchar]) : Pointer[GError];

external (cdecl) g_error_new_valist(arg0:GQuark, arg1:gint, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : Pointer[GError];

external (cdecl) g_error_free(arg0:Pointer[GError]) : ;

external (cdecl) g_error_copy(arg0:Pointer[GError]) : Pointer[GError];

external (cdecl) g_error_matches(arg0:Pointer[GError], arg1:GQuark, arg2:gint) : gboolean;

external (cdecl) g_set_error(arg0:Pointer[Pointer[GError]], arg1:GQuark, arg2:gint, arg3:Pointer[gchar], ..) : ;

external (cdecl) g_set_error_literal(arg0:Pointer[Pointer[GError]], arg1:GQuark, arg2:gint, arg3:Pointer[gchar]) : ;

external (cdecl) g_propagate_error(arg0:Pointer[Pointer[GError]], arg1:Pointer[GError]) : ;

external (cdecl) g_clear_error(arg0:Pointer[Pointer[GError]]) : ;

external (cdecl) g_prefix_error(arg0:Pointer[Pointer[GError]], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_propagate_prefixed_error(arg0:Pointer[Pointer[GError]], arg1:Pointer[GError], arg2:Pointer[gchar], ..) : ;

external (cdecl) g_thread_error_quark() : GQuark;


alias GThreadError = CUInt;
alias G_THREAD_ERROR_AGAIN = CUInt(0);

alias GThreadFunc = CCodePointer[[gpointer],[gpointer]];

alias GThread = Struct__GThread;

alias GMutex = Union__GMutex;

alias GRecMutex = Struct__GRecMutex;

alias GRWLock = Struct__GRWLock;

alias GCond = Struct__GCond;

alias GPrivate = Struct__GPrivate;

alias GOnce = Struct__GOnce;

alias Union__GMutex = Union[
    /* p */ gpointer,
    /* i */ Array[guint, 2],
];

record Struct__GRWLock (
    p : gpointer,
    i : Array[guint, 2],
);

record Struct__GCond (
    p : gpointer,
    i : Array[guint, 2],
);

record Struct__GRecMutex (
    p : gpointer,
    i : Array[guint, 2],
);

record Struct__GPrivate (
    p : gpointer,
    notify : GDestroyNotify,
    future : Array[gpointer, 2],
);


alias GOnceStatus = CUInt;
alias G_ONCE_STATUS_NOTCALLED = CUInt(0);
alias G_ONCE_STATUS_PROGRESS = CUInt(1);
alias G_ONCE_STATUS_READY = CUInt(2);

record Struct__GOnce (
    status : GOnceStatus,
    retval : gpointer,
);

external (cdecl) g_thread_ref(arg0:Pointer[GThread]) : Pointer[GThread];

external (cdecl) g_thread_unref(arg0:Pointer[GThread]) : ;

external (cdecl) g_thread_new(arg0:Pointer[gchar], arg1:GThreadFunc, arg2:gpointer) : Pointer[GThread];

external (cdecl) g_thread_try_new(arg0:Pointer[gchar], arg1:GThreadFunc, arg2:gpointer, arg3:Pointer[Pointer[GError]]) : Pointer[GThread];

external (cdecl) g_thread_self() : Pointer[GThread];

external (cdecl) g_thread_exit(arg0:gpointer) : ;

external (cdecl) g_thread_join(arg0:Pointer[GThread]) : gpointer;

external (cdecl) g_thread_yield() : ;

external (cdecl) g_mutex_init(arg0:Pointer[GMutex]) : ;

external (cdecl) g_mutex_clear(arg0:Pointer[GMutex]) : ;

external (cdecl) g_mutex_lock(arg0:Pointer[GMutex]) : ;

external (cdecl) g_mutex_trylock(arg0:Pointer[GMutex]) : gboolean;

external (cdecl) g_mutex_unlock(arg0:Pointer[GMutex]) : ;

external (cdecl) g_rw_lock_init(arg0:Pointer[GRWLock]) : ;

external (cdecl) g_rw_lock_clear(arg0:Pointer[GRWLock]) : ;

external (cdecl) g_rw_lock_writer_lock(arg0:Pointer[GRWLock]) : ;

external (cdecl) g_rw_lock_writer_trylock(arg0:Pointer[GRWLock]) : gboolean;

external (cdecl) g_rw_lock_writer_unlock(arg0:Pointer[GRWLock]) : ;

external (cdecl) g_rw_lock_reader_lock(arg0:Pointer[GRWLock]) : ;

external (cdecl) g_rw_lock_reader_trylock(arg0:Pointer[GRWLock]) : gboolean;

external (cdecl) g_rw_lock_reader_unlock(arg0:Pointer[GRWLock]) : ;

external (cdecl) g_rec_mutex_init(arg0:Pointer[GRecMutex]) : ;

external (cdecl) g_rec_mutex_clear(arg0:Pointer[GRecMutex]) : ;

external (cdecl) g_rec_mutex_lock(arg0:Pointer[GRecMutex]) : ;

external (cdecl) g_rec_mutex_trylock(arg0:Pointer[GRecMutex]) : gboolean;

external (cdecl) g_rec_mutex_unlock(arg0:Pointer[GRecMutex]) : ;

external (cdecl) g_cond_init(arg0:Pointer[GCond]) : ;

external (cdecl) g_cond_clear(arg0:Pointer[GCond]) : ;

external (cdecl) g_cond_wait(arg0:Pointer[GCond], arg1:Pointer[GMutex]) : ;

external (cdecl) g_cond_signal(arg0:Pointer[GCond]) : ;

external (cdecl) g_cond_broadcast(arg0:Pointer[GCond]) : ;

external (cdecl) g_cond_wait_until(arg0:Pointer[GCond], arg1:Pointer[GMutex], arg2:gint64) : gboolean;

external (cdecl) g_private_get(arg0:Pointer[GPrivate]) : gpointer;

external (cdecl) g_private_set(arg0:Pointer[GPrivate], arg1:gpointer) : ;

external (cdecl) g_private_replace(arg0:Pointer[GPrivate], arg1:gpointer) : ;

external (cdecl) g_once_impl(arg0:Pointer[GOnce], arg1:GThreadFunc, arg2:gpointer) : gpointer;

external (cdecl) g_once_init_enter(arg0:OpaquePointer) : gboolean;

external (cdecl) g_once_init_leave(arg0:OpaquePointer, arg1:gsize) : ;

alias Struct__GAsyncQueue = Opaque;

alias GAsyncQueue = Struct__GAsyncQueue;

external (cdecl) g_async_queue_new() : Pointer[GAsyncQueue];

external (cdecl) g_async_queue_new_full(arg0:GDestroyNotify) : Pointer[GAsyncQueue];

external (cdecl) g_async_queue_lock(arg0:Pointer[GAsyncQueue]) : ;

external (cdecl) g_async_queue_unlock(arg0:Pointer[GAsyncQueue]) : ;

external (cdecl) g_async_queue_ref(arg0:Pointer[GAsyncQueue]) : Pointer[GAsyncQueue];

external (cdecl) g_async_queue_unref(arg0:Pointer[GAsyncQueue]) : ;

external (cdecl) g_async_queue_ref_unlocked(arg0:Pointer[GAsyncQueue]) : ;

external (cdecl) g_async_queue_unref_and_unlock(arg0:Pointer[GAsyncQueue]) : ;

external (cdecl) g_async_queue_push(arg0:Pointer[GAsyncQueue], arg1:gpointer) : ;

external (cdecl) g_async_queue_push_unlocked(arg0:Pointer[GAsyncQueue], arg1:gpointer) : ;

external (cdecl) g_async_queue_push_sorted(arg0:Pointer[GAsyncQueue], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : ;

external (cdecl) g_async_queue_push_sorted_unlocked(arg0:Pointer[GAsyncQueue], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : ;

external (cdecl) g_async_queue_pop(arg0:Pointer[GAsyncQueue]) : gpointer;

external (cdecl) g_async_queue_pop_unlocked(arg0:Pointer[GAsyncQueue]) : gpointer;

external (cdecl) g_async_queue_try_pop(arg0:Pointer[GAsyncQueue]) : gpointer;

external (cdecl) g_async_queue_try_pop_unlocked(arg0:Pointer[GAsyncQueue]) : gpointer;

external (cdecl) g_async_queue_timeout_pop(arg0:Pointer[GAsyncQueue], arg1:guint64) : gpointer;

external (cdecl) g_async_queue_timeout_pop_unlocked(arg0:Pointer[GAsyncQueue], arg1:guint64) : gpointer;

external (cdecl) g_async_queue_length(arg0:Pointer[GAsyncQueue]) : gint;

external (cdecl) g_async_queue_length_unlocked(arg0:Pointer[GAsyncQueue]) : gint;

external (cdecl) g_async_queue_sort(arg0:Pointer[GAsyncQueue], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_async_queue_sort_unlocked(arg0:Pointer[GAsyncQueue], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_async_queue_timed_pop(arg0:Pointer[GAsyncQueue], arg1:Pointer[GTimeVal]) : gpointer;

external (cdecl) g_async_queue_timed_pop_unlocked(arg0:Pointer[GAsyncQueue], arg1:Pointer[GTimeVal]) : gpointer;

external (cdecl) g_on_error_query(arg0:Pointer[gchar]) : ;

external (cdecl) g_on_error_stack_trace(arg0:Pointer[gchar]) : ;

external (cdecl) g_base64_encode_step(arg0:Pointer[guchar], arg1:gsize, arg2:gboolean, arg3:Pointer[gchar], arg4:Pointer[gint], arg5:Pointer[gint]) : gsize;

external (cdecl) g_base64_encode_close(arg0:gboolean, arg1:Pointer[gchar], arg2:Pointer[gint], arg3:Pointer[gint]) : gsize;

external (cdecl) g_base64_encode(arg0:Pointer[guchar], arg1:gsize) : Pointer[gchar];

external (cdecl) g_base64_decode_step(arg0:Pointer[gchar], arg1:gsize, arg2:Pointer[guchar], arg3:Pointer[gint], arg4:Pointer[guint]) : gsize;

external (cdecl) g_base64_decode(arg0:Pointer[gchar], arg1:Pointer[gsize]) : Pointer[guchar];

external (cdecl) g_base64_decode_inplace(arg0:Pointer[gchar], arg1:Pointer[gsize]) : Pointer[guchar];

external (cdecl) g_bit_lock(arg0:Pointer[gint], arg1:gint) : ;

external (cdecl) g_bit_trylock(arg0:Pointer[gint], arg1:gint) : gboolean;

external (cdecl) g_bit_unlock(arg0:Pointer[gint], arg1:gint) : ;

external (cdecl) g_pointer_bit_lock(arg0:OpaquePointer, arg1:gint) : ;

external (cdecl) g_pointer_bit_trylock(arg0:OpaquePointer, arg1:gint) : gboolean;

external (cdecl) g_pointer_bit_unlock(arg0:OpaquePointer, arg1:gint) : ;


alias GBookmarkFileError = CUInt;
alias G_BOOKMARK_FILE_ERROR_INVALID_URI = CUInt(0);
alias G_BOOKMARK_FILE_ERROR_INVALID_VALUE = CUInt(1);
alias G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = CUInt(2);
alias G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = CUInt(3);
alias G_BOOKMARK_FILE_ERROR_READ = CUInt(4);
alias G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = CUInt(5);
alias G_BOOKMARK_FILE_ERROR_WRITE = CUInt(6);
alias G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = CUInt(7);

external (cdecl) g_bookmark_file_error_quark() : GQuark;

alias Struct__GBookmarkFile = Opaque;

alias GBookmarkFile = Struct__GBookmarkFile;

external (cdecl) g_bookmark_file_new() : Pointer[GBookmarkFile];

external (cdecl) g_bookmark_file_free(arg0:Pointer[GBookmarkFile]) : ;

external (cdecl) g_bookmark_file_load_from_file(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_load_from_data(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_load_from_data_dirs(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_to_data(arg0:Pointer[GBookmarkFile], arg1:Pointer[gsize], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_bookmark_file_to_file(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_set_title(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) g_bookmark_file_get_title(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_bookmark_file_set_description(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) g_bookmark_file_get_description(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_bookmark_file_set_mime_type(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) g_bookmark_file_get_mime_type(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_bookmark_file_set_groups(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:gsize) : ;

external (cdecl) g_bookmark_file_add_group(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

external (cdecl) g_bookmark_file_has_group(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_get_groups(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_bookmark_file_add_application(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) g_bookmark_file_has_application(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_get_applications(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_bookmark_file_set_app_info(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:gint, arg5:time_t, arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_get_app_info(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[gchar]], arg4:Pointer[guint], arg5:Pointer[time_t], arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_set_is_private(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:gboolean) : ;

external (cdecl) g_bookmark_file_get_is_private(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_set_icon(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) g_bookmark_file_get_icon(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_set_added(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:time_t) : ;

external (cdecl) g_bookmark_file_get_added(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : time_t;

external (cdecl) g_bookmark_file_set_modified(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:time_t) : ;

external (cdecl) g_bookmark_file_get_modified(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : time_t;

external (cdecl) g_bookmark_file_set_visited(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:time_t) : ;

external (cdecl) g_bookmark_file_get_visited(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : time_t;

external (cdecl) g_bookmark_file_has_item(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_bookmark_file_get_size(arg0:Pointer[GBookmarkFile]) : gint;

external (cdecl) g_bookmark_file_get_uris(arg0:Pointer[GBookmarkFile], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_bookmark_file_remove_group(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_remove_application(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_remove_item(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bookmark_file_move_item(arg0:Pointer[GBookmarkFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_bytes_new(arg0:gconstpointer, arg1:gsize) : Pointer[GBytes];

external (cdecl) g_bytes_new_take(arg0:gpointer, arg1:gsize) : Pointer[GBytes];

external (cdecl) g_bytes_new_static(arg0:gconstpointer, arg1:gsize) : Pointer[GBytes];

external (cdecl) g_bytes_new_with_free_func(arg0:gconstpointer, arg1:gsize, arg2:GDestroyNotify, arg3:gpointer) : Pointer[GBytes];

external (cdecl) g_bytes_new_from_bytes(arg0:Pointer[GBytes], arg1:gsize, arg2:gsize) : Pointer[GBytes];

external (cdecl) g_bytes_get_data(arg0:Pointer[GBytes], arg1:Pointer[gsize]) : gconstpointer;

external (cdecl) g_bytes_get_size(arg0:Pointer[GBytes]) : gsize;

external (cdecl) g_bytes_ref(arg0:Pointer[GBytes]) : Pointer[GBytes];

external (cdecl) g_bytes_unref(arg0:Pointer[GBytes]) : ;

external (cdecl) g_bytes_unref_to_data(arg0:Pointer[GBytes], arg1:Pointer[gsize]) : gpointer;

external (cdecl) g_bytes_unref_to_array(arg0:Pointer[GBytes]) : Pointer[GByteArray];

external (cdecl) g_bytes_hash(arg0:gconstpointer) : guint;

external (cdecl) g_bytes_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_bytes_compare(arg0:gconstpointer, arg1:gconstpointer) : gint;

external (cdecl) g_get_charset(arg0:Pointer[Pointer[CChar]]) : gboolean;

external (cdecl) g_get_codeset() : Pointer[gchar];

external (cdecl) g_get_language_names() : Pointer[Pointer[gchar]];

external (cdecl) g_get_locale_variants(arg0:Pointer[gchar]) : Pointer[Pointer[gchar]];


alias GChecksumType = CUInt;
alias G_CHECKSUM_MD5 = CUInt(0);
alias G_CHECKSUM_SHA1 = CUInt(1);
alias G_CHECKSUM_SHA256 = CUInt(2);

alias Struct__GChecksum = Opaque;

alias GChecksum = Struct__GChecksum;

external (cdecl) g_checksum_type_get_length(arg0:GChecksumType) : gssize;

external (cdecl) g_checksum_new(arg0:GChecksumType) : Pointer[GChecksum];

external (cdecl) g_checksum_reset(arg0:Pointer[GChecksum]) : ;

external (cdecl) g_checksum_copy(arg0:Pointer[GChecksum]) : Pointer[GChecksum];

external (cdecl) g_checksum_free(arg0:Pointer[GChecksum]) : ;

external (cdecl) g_checksum_update(arg0:Pointer[GChecksum], arg1:Pointer[guchar], arg2:gssize) : ;

external (cdecl) g_checksum_get_string(arg0:Pointer[GChecksum]) : Pointer[gchar];

external (cdecl) g_checksum_get_digest(arg0:Pointer[GChecksum], arg1:Pointer[guint8], arg2:Pointer[gsize]) : ;

external (cdecl) g_compute_checksum_for_data(arg0:GChecksumType, arg1:Pointer[guchar], arg2:gsize) : Pointer[gchar];

external (cdecl) g_compute_checksum_for_string(arg0:GChecksumType, arg1:Pointer[gchar], arg2:gssize) : Pointer[gchar];

external (cdecl) g_compute_checksum_for_bytes(arg0:GChecksumType, arg1:Pointer[GBytes]) : Pointer[gchar];


alias GConvertError = CUInt;
alias G_CONVERT_ERROR_NO_CONVERSION = CUInt(0);
alias G_CONVERT_ERROR_ILLEGAL_SEQUENCE = CUInt(1);
alias G_CONVERT_ERROR_FAILED = CUInt(2);
alias G_CONVERT_ERROR_PARTIAL_INPUT = CUInt(3);
alias G_CONVERT_ERROR_BAD_URI = CUInt(4);
alias G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = CUInt(5);

external (cdecl) g_convert_error_quark() : GQuark;

alias Struct__GIConv = Opaque;

alias GIConv = Pointer[Struct__GIConv];

external (cdecl) g_iconv_open(arg0:Pointer[gchar], arg1:Pointer[gchar]) : GIConv;

external (cdecl) g_iconv(arg0:GIConv, arg1:Pointer[Pointer[gchar]], arg2:Pointer[gsize], arg3:Pointer[Pointer[gchar]], arg4:Pointer[gsize]) : gsize;

external (cdecl) g_iconv_close(arg0:GIConv) : gint;

external (cdecl) g_convert(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gsize], arg5:Pointer[gsize], arg6:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_convert_with_iconv(arg0:Pointer[gchar], arg1:gssize, arg2:GIConv, arg3:Pointer[gsize], arg4:Pointer[gsize], arg5:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_convert_with_fallback(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gsize], arg6:Pointer[gsize], arg7:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_locale_to_utf8(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gsize], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_locale_from_utf8(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gsize], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_filename_to_utf8(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gsize], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_filename_from_utf8(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gsize], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_filename_from_uri(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_filename_to_uri(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_filename_display_name(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_get_filename_charsets(arg0:Pointer[Pointer[Pointer[gchar]]]) : gboolean;

external (cdecl) g_filename_display_basename(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_uri_list_extract_uris(arg0:Pointer[gchar]) : Pointer[Pointer[gchar]];

alias Struct__GData = Opaque;

alias GData = Struct__GData;

alias GDataForeachFunc = CCodePointer[[GQuark, gpointer, gpointer],[]];

external (cdecl) g_datalist_init(arg0:Pointer[Pointer[GData]]) : ;

external (cdecl) g_datalist_clear(arg0:Pointer[Pointer[GData]]) : ;

external (cdecl) g_datalist_id_get_data(arg0:Pointer[Pointer[GData]], arg1:GQuark) : gpointer;

external (cdecl) g_datalist_id_set_data_full(arg0:Pointer[Pointer[GData]], arg1:GQuark, arg2:gpointer, arg3:GDestroyNotify) : ;

alias GDuplicateFunc = CCodePointer[[gpointer, gpointer],[gpointer]];

external (cdecl) g_datalist_id_dup_data(arg0:Pointer[Pointer[GData]], arg1:GQuark, arg2:GDuplicateFunc, arg3:gpointer) : gpointer;

external (cdecl) g_datalist_id_replace_data(arg0:Pointer[Pointer[GData]], arg1:GQuark, arg2:gpointer, arg3:gpointer, arg4:GDestroyNotify, arg5:Pointer[GDestroyNotify]) : gboolean;

external (cdecl) g_datalist_id_remove_no_notify(arg0:Pointer[Pointer[GData]], arg1:GQuark) : gpointer;

external (cdecl) g_datalist_foreach(arg0:Pointer[Pointer[GData]], arg1:GDataForeachFunc, arg2:gpointer) : ;

external (cdecl) g_datalist_set_flags(arg0:Pointer[Pointer[GData]], arg1:guint) : ;

external (cdecl) g_datalist_unset_flags(arg0:Pointer[Pointer[GData]], arg1:guint) : ;

external (cdecl) g_datalist_get_flags(arg0:Pointer[Pointer[GData]]) : guint;

external (cdecl) g_dataset_destroy(arg0:gconstpointer) : ;

external (cdecl) g_dataset_id_get_data(arg0:gconstpointer, arg1:GQuark) : gpointer;

external (cdecl) g_datalist_get_data(arg0:Pointer[Pointer[GData]], arg1:Pointer[gchar]) : gpointer;

external (cdecl) g_dataset_id_set_data_full(arg0:gconstpointer, arg1:GQuark, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_dataset_id_remove_no_notify(arg0:gconstpointer, arg1:GQuark) : gpointer;

external (cdecl) g_dataset_foreach(arg0:gconstpointer, arg1:GDataForeachFunc, arg2:gpointer) : ;

alias GTime = gint32;

alias GDateYear = guint16;

alias GDateDay = guint8;

alias GDate = Struct__GDate;


alias GDateDMY = CUInt;
alias G_DATE_DAY = CUInt(0);
alias G_DATE_MONTH = CUInt(1);
alias G_DATE_YEAR = CUInt(2);


alias GDateWeekday = CUInt;
alias G_DATE_BAD_WEEKDAY = CUInt(0);
alias G_DATE_MONDAY = CUInt(1);
alias G_DATE_TUESDAY = CUInt(2);
alias G_DATE_WEDNESDAY = CUInt(3);
alias G_DATE_THURSDAY = CUInt(4);
alias G_DATE_FRIDAY = CUInt(5);
alias G_DATE_SATURDAY = CUInt(6);
alias G_DATE_SUNDAY = CUInt(7);


alias GDateMonth = CUInt;
alias G_DATE_BAD_MONTH = CUInt(0);
alias G_DATE_JANUARY = CUInt(1);
alias G_DATE_FEBRUARY = CUInt(2);
alias G_DATE_MARCH = CUInt(3);
alias G_DATE_APRIL = CUInt(4);
alias G_DATE_MAY = CUInt(5);
alias G_DATE_JUNE = CUInt(6);
alias G_DATE_JULY = CUInt(7);
alias G_DATE_AUGUST = CUInt(8);
alias G_DATE_SEPTEMBER = CUInt(9);
alias G_DATE_OCTOBER = CUInt(10);
alias G_DATE_NOVEMBER = CUInt(11);
alias G_DATE_DECEMBER = CUInt(12);

record Struct__GDate (
    julian_days : guint,
    julian : guint,
    dmy : guint,
    day : guint,
    month : guint,
    year : guint,
);

external (cdecl) g_date_new() : Pointer[GDate];

external (cdecl) g_date_new_dmy(arg0:GDateDay, arg1:GDateMonth, arg2:GDateYear) : Pointer[GDate];

external (cdecl) g_date_new_julian(arg0:guint32) : Pointer[GDate];

external (cdecl) g_date_free(arg0:Pointer[GDate]) : ;

external (cdecl) g_date_valid(arg0:Pointer[GDate]) : gboolean;

external (cdecl) g_date_valid_day(arg0:GDateDay) : gboolean;

external (cdecl) g_date_valid_month(arg0:GDateMonth) : gboolean;

external (cdecl) g_date_valid_year(arg0:GDateYear) : gboolean;

external (cdecl) g_date_valid_weekday(arg0:GDateWeekday) : gboolean;

external (cdecl) g_date_valid_julian(arg0:guint32) : gboolean;

external (cdecl) g_date_valid_dmy(arg0:GDateDay, arg1:GDateMonth, arg2:GDateYear) : gboolean;

external (cdecl) g_date_get_weekday(arg0:Pointer[GDate]) : GDateWeekday;

external (cdecl) g_date_get_month(arg0:Pointer[GDate]) : GDateMonth;

external (cdecl) g_date_get_year(arg0:Pointer[GDate]) : GDateYear;

external (cdecl) g_date_get_day(arg0:Pointer[GDate]) : GDateDay;

external (cdecl) g_date_get_julian(arg0:Pointer[GDate]) : guint32;

external (cdecl) g_date_get_day_of_year(arg0:Pointer[GDate]) : guint;

external (cdecl) g_date_get_monday_week_of_year(arg0:Pointer[GDate]) : guint;

external (cdecl) g_date_get_sunday_week_of_year(arg0:Pointer[GDate]) : guint;

external (cdecl) g_date_get_iso8601_week_of_year(arg0:Pointer[GDate]) : guint;

external (cdecl) g_date_clear(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_set_parse(arg0:Pointer[GDate], arg1:Pointer[gchar]) : ;

external (cdecl) g_date_set_time_t(arg0:Pointer[GDate], arg1:time_t) : ;

external (cdecl) g_date_set_time_val(arg0:Pointer[GDate], arg1:Pointer[GTimeVal]) : ;

external (cdecl) g_date_set_time(arg0:Pointer[GDate], arg1:GTime) : ;

external (cdecl) g_date_set_month(arg0:Pointer[GDate], arg1:GDateMonth) : ;

external (cdecl) g_date_set_day(arg0:Pointer[GDate], arg1:GDateDay) : ;

external (cdecl) g_date_set_year(arg0:Pointer[GDate], arg1:GDateYear) : ;

external (cdecl) g_date_set_dmy(arg0:Pointer[GDate], arg1:GDateDay, arg2:GDateMonth, arg3:GDateYear) : ;

external (cdecl) g_date_set_julian(arg0:Pointer[GDate], arg1:guint32) : ;

external (cdecl) g_date_is_first_of_month(arg0:Pointer[GDate]) : gboolean;

external (cdecl) g_date_is_last_of_month(arg0:Pointer[GDate]) : gboolean;

external (cdecl) g_date_add_days(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_subtract_days(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_add_months(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_subtract_months(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_add_years(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_subtract_years(arg0:Pointer[GDate], arg1:guint) : ;

external (cdecl) g_date_is_leap_year(arg0:GDateYear) : gboolean;

external (cdecl) g_date_get_days_in_month(arg0:GDateMonth, arg1:GDateYear) : guint8;

external (cdecl) g_date_get_monday_weeks_in_year(arg0:GDateYear) : guint8;

external (cdecl) g_date_get_sunday_weeks_in_year(arg0:GDateYear) : guint8;

external (cdecl) g_date_days_between(arg0:Pointer[GDate], arg1:Pointer[GDate]) : gint;

external (cdecl) g_date_compare(arg0:Pointer[GDate], arg1:Pointer[GDate]) : gint;

external (cdecl) g_date_to_struct_tm(arg0:Pointer[GDate], arg1:Pointer[Struct_tm]) : ;

external (cdecl) g_date_clamp(arg0:Pointer[GDate], arg1:Pointer[GDate], arg2:Pointer[GDate]) : ;

external (cdecl) g_date_order(arg0:Pointer[GDate], arg1:Pointer[GDate]) : ;

external (cdecl) g_date_strftime(arg0:Pointer[gchar], arg1:gsize, arg2:Pointer[gchar], arg3:Pointer[GDate]) : gsize;

alias Struct__GTimeZone = Opaque;

alias GTimeZone = Struct__GTimeZone;


alias GTimeType = CUInt;
alias G_TIME_TYPE_STANDARD = CUInt(0);
alias G_TIME_TYPE_DAYLIGHT = CUInt(1);
alias G_TIME_TYPE_UNIVERSAL = CUInt(2);

external (cdecl) g_time_zone_new(arg0:Pointer[gchar]) : Pointer[GTimeZone];

external (cdecl) g_time_zone_new_utc() : Pointer[GTimeZone];

external (cdecl) g_time_zone_new_local() : Pointer[GTimeZone];

external (cdecl) g_time_zone_ref(arg0:Pointer[GTimeZone]) : Pointer[GTimeZone];

external (cdecl) g_time_zone_unref(arg0:Pointer[GTimeZone]) : ;

external (cdecl) g_time_zone_find_interval(arg0:Pointer[GTimeZone], arg1:GTimeType, arg2:gint64) : gint;

external (cdecl) g_time_zone_adjust_time(arg0:Pointer[GTimeZone], arg1:GTimeType, arg2:Pointer[gint64]) : gint;

external (cdecl) g_time_zone_get_abbreviation(arg0:Pointer[GTimeZone], arg1:gint) : Pointer[gchar];

external (cdecl) g_time_zone_get_offset(arg0:Pointer[GTimeZone], arg1:gint) : gint32;

external (cdecl) g_time_zone_is_dst(arg0:Pointer[GTimeZone], arg1:gint) : gboolean;

alias GTimeSpan = gint64;

alias Struct__GDateTime = Opaque;

alias GDateTime = Struct__GDateTime;

external (cdecl) g_date_time_unref(arg0:Pointer[GDateTime]) : ;

external (cdecl) g_date_time_ref(arg0:Pointer[GDateTime]) : Pointer[GDateTime];

external (cdecl) g_date_time_new_now(arg0:Pointer[GTimeZone]) : Pointer[GDateTime];

external (cdecl) g_date_time_new_now_local() : Pointer[GDateTime];

external (cdecl) g_date_time_new_now_utc() : Pointer[GDateTime];

external (cdecl) g_date_time_new_from_unix_local(arg0:gint64) : Pointer[GDateTime];

external (cdecl) g_date_time_new_from_unix_utc(arg0:gint64) : Pointer[GDateTime];

external (cdecl) g_date_time_new_from_timeval_local(arg0:Pointer[GTimeVal]) : Pointer[GDateTime];

external (cdecl) g_date_time_new_from_timeval_utc(arg0:Pointer[GTimeVal]) : Pointer[GDateTime];

external (cdecl) g_date_time_new(arg0:Pointer[GTimeZone], arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:gdouble) : Pointer[GDateTime];

external (cdecl) g_date_time_new_local(arg0:gint, arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gdouble) : Pointer[GDateTime];

external (cdecl) g_date_time_new_utc(arg0:gint, arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gdouble) : Pointer[GDateTime];

external (cdecl) g_date_time_add(arg0:Pointer[GDateTime], arg1:GTimeSpan) : Pointer[GDateTime];

external (cdecl) g_date_time_add_years(arg0:Pointer[GDateTime], arg1:gint) : Pointer[GDateTime];

external (cdecl) g_date_time_add_months(arg0:Pointer[GDateTime], arg1:gint) : Pointer[GDateTime];

external (cdecl) g_date_time_add_weeks(arg0:Pointer[GDateTime], arg1:gint) : Pointer[GDateTime];

external (cdecl) g_date_time_add_days(arg0:Pointer[GDateTime], arg1:gint) : Pointer[GDateTime];

external (cdecl) g_date_time_add_hours(arg0:Pointer[GDateTime], arg1:gint) : Pointer[GDateTime];

external (cdecl) g_date_time_add_minutes(arg0:Pointer[GDateTime], arg1:gint) : Pointer[GDateTime];

external (cdecl) g_date_time_add_seconds(arg0:Pointer[GDateTime], arg1:gdouble) : Pointer[GDateTime];

external (cdecl) g_date_time_add_full(arg0:Pointer[GDateTime], arg1:gint, arg2:gint, arg3:gint, arg4:gint, arg5:gint, arg6:gdouble) : Pointer[GDateTime];

external (cdecl) g_date_time_compare(arg0:gconstpointer, arg1:gconstpointer) : gint;

external (cdecl) g_date_time_difference(arg0:Pointer[GDateTime], arg1:Pointer[GDateTime]) : GTimeSpan;

external (cdecl) g_date_time_hash(arg0:gconstpointer) : guint;

external (cdecl) g_date_time_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_date_time_get_ymd(arg0:Pointer[GDateTime], arg1:Pointer[gint], arg2:Pointer[gint], arg3:Pointer[gint]) : ;

external (cdecl) g_date_time_get_year(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_month(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_day_of_month(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_week_numbering_year(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_week_of_year(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_day_of_week(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_day_of_year(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_hour(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_minute(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_second(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_microsecond(arg0:Pointer[GDateTime]) : gint;

external (cdecl) g_date_time_get_seconds(arg0:Pointer[GDateTime]) : gdouble;

external (cdecl) g_date_time_to_unix(arg0:Pointer[GDateTime]) : gint64;

external (cdecl) g_date_time_to_timeval(arg0:Pointer[GDateTime], arg1:Pointer[GTimeVal]) : gboolean;

external (cdecl) g_date_time_get_utc_offset(arg0:Pointer[GDateTime]) : GTimeSpan;

external (cdecl) g_date_time_get_timezone_abbreviation(arg0:Pointer[GDateTime]) : Pointer[gchar];

external (cdecl) g_date_time_is_daylight_savings(arg0:Pointer[GDateTime]) : gboolean;

external (cdecl) g_date_time_to_timezone(arg0:Pointer[GDateTime], arg1:Pointer[GTimeZone]) : Pointer[GDateTime];

external (cdecl) g_date_time_to_local(arg0:Pointer[GDateTime]) : Pointer[GDateTime];

external (cdecl) g_date_time_to_utc(arg0:Pointer[GDateTime]) : Pointer[GDateTime];

external (cdecl) g_date_time_format(arg0:Pointer[GDateTime], arg1:Pointer[gchar]) : Pointer[gchar];

alias Struct__GDir = Opaque;

alias GDir = Struct__GDir;

external (cdecl) g_dir_open(arg0:Pointer[gchar], arg1:guint, arg2:Pointer[Pointer[GError]]) : Pointer[GDir];

external (cdecl) g_dir_read_name(arg0:Pointer[GDir]) : Pointer[gchar];

external (cdecl) g_dir_rewind(arg0:Pointer[GDir]) : ;

external (cdecl) g_dir_close(arg0:Pointer[GDir]) : ;

external (cdecl) g_getenv(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_setenv(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gboolean) : gboolean;

external (cdecl) g_unsetenv(arg0:Pointer[gchar]) : ;

external (cdecl) g_listenv() : Pointer[Pointer[gchar]];

external (cdecl) g_get_environ() : Pointer[Pointer[gchar]];

external (cdecl) g_environ_getenv(arg0:Pointer[Pointer[gchar]], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_environ_setenv(arg0:Pointer[Pointer[gchar]], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gboolean) : Pointer[Pointer[gchar]];

external (cdecl) g_environ_unsetenv(arg0:Pointer[Pointer[gchar]], arg1:Pointer[gchar]) : Pointer[Pointer[gchar]];


alias GFileError = CUInt;
alias G_FILE_ERROR_EXIST = CUInt(0);
alias G_FILE_ERROR_ISDIR = CUInt(1);
alias G_FILE_ERROR_ACCES = CUInt(2);
alias G_FILE_ERROR_NAMETOOLONG = CUInt(3);
alias G_FILE_ERROR_NOENT = CUInt(4);
alias G_FILE_ERROR_NOTDIR = CUInt(5);
alias G_FILE_ERROR_NXIO = CUInt(6);
alias G_FILE_ERROR_NODEV = CUInt(7);
alias G_FILE_ERROR_ROFS = CUInt(8);
alias G_FILE_ERROR_TXTBSY = CUInt(9);
alias G_FILE_ERROR_FAULT = CUInt(10);
alias G_FILE_ERROR_LOOP = CUInt(11);
alias G_FILE_ERROR_NOSPC = CUInt(12);
alias G_FILE_ERROR_NOMEM = CUInt(13);
alias G_FILE_ERROR_MFILE = CUInt(14);
alias G_FILE_ERROR_NFILE = CUInt(15);
alias G_FILE_ERROR_BADF = CUInt(16);
alias G_FILE_ERROR_INVAL = CUInt(17);
alias G_FILE_ERROR_PIPE = CUInt(18);
alias G_FILE_ERROR_AGAIN = CUInt(19);
alias G_FILE_ERROR_INTR = CUInt(20);
alias G_FILE_ERROR_IO = CUInt(21);
alias G_FILE_ERROR_PERM = CUInt(22);
alias G_FILE_ERROR_NOSYS = CUInt(23);
alias G_FILE_ERROR_FAILED = CUInt(24);


alias GFileTest = CUInt;
alias G_FILE_TEST_IS_REGULAR = CUInt(1);
alias G_FILE_TEST_IS_SYMLINK = CUInt(2);
alias G_FILE_TEST_IS_DIR = CUInt(4);
alias G_FILE_TEST_IS_EXECUTABLE = CUInt(8);
alias G_FILE_TEST_EXISTS = CUInt(16);

external (cdecl) g_file_error_quark() : GQuark;

external (cdecl) g_file_error_from_errno(arg0:gint) : GFileError;

external (cdecl) g_file_test(arg0:Pointer[gchar], arg1:GFileTest) : gboolean;

external (cdecl) g_file_get_contents(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_contents(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gssize, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_read_link(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_mkdtemp(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_mkdtemp_full(arg0:Pointer[gchar], arg1:gint) : Pointer[gchar];

external (cdecl) g_mkstemp(arg0:Pointer[gchar]) : gint;

external (cdecl) g_mkstemp_full(arg0:Pointer[gchar], arg1:gint, arg2:gint) : gint;

external (cdecl) g_file_open_tmp(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[GError]]) : gint;

external (cdecl) g_dir_make_tmp(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_build_path(arg0:Pointer[gchar], arg1:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_build_pathv(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : Pointer[gchar];

external (cdecl) g_build_filename(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_build_filenamev(arg0:Pointer[Pointer[gchar]]) : Pointer[gchar];

external (cdecl) g_mkdir_with_parents(arg0:Pointer[gchar], arg1:gint) : gint;

external (cdecl) g_path_is_absolute(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_path_skip_root(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_basename(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_get_current_dir() : Pointer[gchar];

external (cdecl) g_path_get_basename(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_path_get_dirname(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strip_context(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_dgettext(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_dcgettext(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gint) : Pointer[gchar];

external (cdecl) g_dngettext(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gulong) : Pointer[gchar];

external (cdecl) g_dpgettext(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : Pointer[gchar];

external (cdecl) g_dpgettext2(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[gchar];

alias GMemVTable = Struct__GMemVTable;

external (cdecl) g_free(arg0:gpointer) : ;

external (cdecl) g_clear_pointer(arg0:Pointer[gpointer], arg1:GDestroyNotify) : ;

external (cdecl) g_malloc(arg0:gsize) : gpointer;

external (cdecl) g_malloc0(arg0:gsize) : gpointer;

external (cdecl) g_realloc(arg0:gpointer, arg1:gsize) : gpointer;

external (cdecl) g_try_malloc(arg0:gsize) : gpointer;

external (cdecl) g_try_malloc0(arg0:gsize) : gpointer;

external (cdecl) g_try_realloc(arg0:gpointer, arg1:gsize) : gpointer;

external (cdecl) g_malloc_n(arg0:gsize, arg1:gsize) : gpointer;

external (cdecl) g_malloc0_n(arg0:gsize, arg1:gsize) : gpointer;

external (cdecl) g_realloc_n(arg0:gpointer, arg1:gsize, arg2:gsize) : gpointer;

external (cdecl) g_try_malloc_n(arg0:gsize, arg1:gsize) : gpointer;

external (cdecl) g_try_malloc0_n(arg0:gsize, arg1:gsize) : gpointer;

external (cdecl) g_try_realloc_n(arg0:gpointer, arg1:gsize, arg2:gsize) : gpointer;

record Struct__GMemVTable (
    malloc : CCodePointer[[gsize],[gpointer]],
    realloc : CCodePointer[[gpointer, gsize],[gpointer]],
    free : CCodePointer[[gpointer],[]],
    calloc : CCodePointer[[gsize, gsize],[gpointer]],
    try_malloc : CCodePointer[[gsize],[gpointer]],
    try_realloc : CCodePointer[[gpointer, gsize],[gpointer]],
);

external (cdecl) g_mem_set_vtable(arg0:Pointer[GMemVTable]) : ;

external (cdecl) g_mem_is_system_malloc() : gboolean;

external g_mem_gc_friendly : gboolean;

external glib_mem_profiler_table : Pointer[GMemVTable];

external (cdecl) g_mem_profile() : ;

alias GNode = Struct__GNode;


alias GTraverseFlags = CUInt;
alias G_TRAVERSE_LEAVES = CUInt(1);
alias G_TRAVERSE_NON_LEAVES = CUInt(2);
alias G_TRAVERSE_ALL = CUInt(3);
alias G_TRAVERSE_MASK = CUInt(3);
alias G_TRAVERSE_LEAFS = CUInt(1);
alias G_TRAVERSE_NON_LEAFS = CUInt(2);


alias GTraverseType = CUInt;
alias G_IN_ORDER = CUInt(0);
alias G_PRE_ORDER = CUInt(1);
alias G_POST_ORDER = CUInt(2);
alias G_LEVEL_ORDER = CUInt(3);

alias GNodeTraverseFunc = CCodePointer[[Pointer[GNode], gpointer],[gboolean]];

alias GNodeForeachFunc = CCodePointer[[Pointer[GNode], gpointer],[]];

alias GCopyFunc = CCodePointer[[gconstpointer, gpointer],[gpointer]];

record Struct__GNode (
    data : gpointer,
    next : Pointer[GNode],
    prev : Pointer[GNode],
    parent : Pointer[GNode],
    children : Pointer[GNode],
);

external (cdecl) g_node_new(arg0:gpointer) : Pointer[GNode];

external (cdecl) g_node_destroy(arg0:Pointer[GNode]) : ;

external (cdecl) g_node_unlink(arg0:Pointer[GNode]) : ;

external (cdecl) g_node_copy_deep(arg0:Pointer[GNode], arg1:GCopyFunc, arg2:gpointer) : Pointer[GNode];

external (cdecl) g_node_copy(arg0:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_insert(arg0:Pointer[GNode], arg1:gint, arg2:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_insert_before(arg0:Pointer[GNode], arg1:Pointer[GNode], arg2:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_insert_after(arg0:Pointer[GNode], arg1:Pointer[GNode], arg2:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_prepend(arg0:Pointer[GNode], arg1:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_n_nodes(arg0:Pointer[GNode], arg1:GTraverseFlags) : guint;

external (cdecl) g_node_get_root(arg0:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_is_ancestor(arg0:Pointer[GNode], arg1:Pointer[GNode]) : gboolean;

external (cdecl) g_node_depth(arg0:Pointer[GNode]) : guint;

external (cdecl) g_node_find(arg0:Pointer[GNode], arg1:GTraverseType, arg2:GTraverseFlags, arg3:gpointer) : Pointer[GNode];

external (cdecl) g_node_traverse(arg0:Pointer[GNode], arg1:GTraverseType, arg2:GTraverseFlags, arg3:gint, arg4:GNodeTraverseFunc, arg5:gpointer) : ;

external (cdecl) g_node_max_height(arg0:Pointer[GNode]) : guint;

external (cdecl) g_node_children_foreach(arg0:Pointer[GNode], arg1:GTraverseFlags, arg2:GNodeForeachFunc, arg3:gpointer) : ;

external (cdecl) g_node_reverse_children(arg0:Pointer[GNode]) : ;

external (cdecl) g_node_n_children(arg0:Pointer[GNode]) : guint;

external (cdecl) g_node_nth_child(arg0:Pointer[GNode], arg1:guint) : Pointer[GNode];

external (cdecl) g_node_last_child(arg0:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_find_child(arg0:Pointer[GNode], arg1:GTraverseFlags, arg2:gpointer) : Pointer[GNode];

external (cdecl) g_node_child_position(arg0:Pointer[GNode], arg1:Pointer[GNode]) : gint;

external (cdecl) g_node_child_index(arg0:Pointer[GNode], arg1:gpointer) : gint;

external (cdecl) g_node_first_sibling(arg0:Pointer[GNode]) : Pointer[GNode];

external (cdecl) g_node_last_sibling(arg0:Pointer[GNode]) : Pointer[GNode];

alias GList = Struct__GList;

record Struct__GList (
    data : gpointer,
    next : Pointer[GList],
    prev : Pointer[GList],
);

external (cdecl) g_list_alloc() : Pointer[GList];

external (cdecl) g_list_free(arg0:Pointer[GList]) : ;

external (cdecl) g_list_free_1(arg0:Pointer[GList]) : ;

external (cdecl) g_list_free_full(arg0:Pointer[GList], arg1:GDestroyNotify) : ;

external (cdecl) g_list_append(arg0:Pointer[GList], arg1:gpointer) : Pointer[GList];

external (cdecl) g_list_prepend(arg0:Pointer[GList], arg1:gpointer) : Pointer[GList];

external (cdecl) g_list_insert(arg0:Pointer[GList], arg1:gpointer, arg2:gint) : Pointer[GList];

external (cdecl) g_list_insert_sorted(arg0:Pointer[GList], arg1:gpointer, arg2:GCompareFunc) : Pointer[GList];

external (cdecl) g_list_insert_sorted_with_data(arg0:Pointer[GList], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : Pointer[GList];

external (cdecl) g_list_insert_before(arg0:Pointer[GList], arg1:Pointer[GList], arg2:gpointer) : Pointer[GList];

external (cdecl) g_list_concat(arg0:Pointer[GList], arg1:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_remove(arg0:Pointer[GList], arg1:gconstpointer) : Pointer[GList];

external (cdecl) g_list_remove_all(arg0:Pointer[GList], arg1:gconstpointer) : Pointer[GList];

external (cdecl) g_list_remove_link(arg0:Pointer[GList], arg1:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_delete_link(arg0:Pointer[GList], arg1:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_reverse(arg0:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_copy(arg0:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_copy_deep(arg0:Pointer[GList], arg1:GCopyFunc, arg2:gpointer) : Pointer[GList];

external (cdecl) g_list_nth(arg0:Pointer[GList], arg1:guint) : Pointer[GList];

external (cdecl) g_list_nth_prev(arg0:Pointer[GList], arg1:guint) : Pointer[GList];

external (cdecl) g_list_find(arg0:Pointer[GList], arg1:gconstpointer) : Pointer[GList];

external (cdecl) g_list_find_custom(arg0:Pointer[GList], arg1:gconstpointer, arg2:GCompareFunc) : Pointer[GList];

external (cdecl) g_list_position(arg0:Pointer[GList], arg1:Pointer[GList]) : gint;

external (cdecl) g_list_index(arg0:Pointer[GList], arg1:gconstpointer) : gint;

external (cdecl) g_list_last(arg0:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_first(arg0:Pointer[GList]) : Pointer[GList];

external (cdecl) g_list_length(arg0:Pointer[GList]) : guint;

external (cdecl) g_list_foreach(arg0:Pointer[GList], arg1:GFunc, arg2:gpointer) : ;

external (cdecl) g_list_sort(arg0:Pointer[GList], arg1:GCompareFunc) : Pointer[GList];

external (cdecl) g_list_sort_with_data(arg0:Pointer[GList], arg1:GCompareDataFunc, arg2:gpointer) : Pointer[GList];

external (cdecl) g_list_nth_data(arg0:Pointer[GList], arg1:guint) : gpointer;

alias Struct__GHashTable = Opaque;

alias GHashTable = Struct__GHashTable;

alias GHRFunc = CCodePointer[[gpointer, gpointer, gpointer],[gboolean]];

alias GHashTableIter = Struct__GHashTableIter;

record Struct__GHashTableIter (
    dummy1 : gpointer,
    dummy2 : gpointer,
    dummy3 : gpointer,
    dummy4 : CInt,
    dummy5 : gboolean,
    dummy6 : gpointer,
);

external (cdecl) g_hash_table_new(arg0:GHashFunc, arg1:GEqualFunc) : Pointer[GHashTable];

external (cdecl) g_hash_table_new_full(arg0:GHashFunc, arg1:GEqualFunc, arg2:GDestroyNotify, arg3:GDestroyNotify) : Pointer[GHashTable];

external (cdecl) g_hash_table_destroy(arg0:Pointer[GHashTable]) : ;

external (cdecl) g_hash_table_insert(arg0:Pointer[GHashTable], arg1:gpointer, arg2:gpointer) : ;

external (cdecl) g_hash_table_replace(arg0:Pointer[GHashTable], arg1:gpointer, arg2:gpointer) : ;

external (cdecl) g_hash_table_add(arg0:Pointer[GHashTable], arg1:gpointer) : ;

external (cdecl) g_hash_table_remove(arg0:Pointer[GHashTable], arg1:gconstpointer) : gboolean;

external (cdecl) g_hash_table_remove_all(arg0:Pointer[GHashTable]) : ;

external (cdecl) g_hash_table_steal(arg0:Pointer[GHashTable], arg1:gconstpointer) : gboolean;

external (cdecl) g_hash_table_steal_all(arg0:Pointer[GHashTable]) : ;

external (cdecl) g_hash_table_lookup(arg0:Pointer[GHashTable], arg1:gconstpointer) : gpointer;

external (cdecl) g_hash_table_contains(arg0:Pointer[GHashTable], arg1:gconstpointer) : gboolean;

external (cdecl) g_hash_table_lookup_extended(arg0:Pointer[GHashTable], arg1:gconstpointer, arg2:Pointer[gpointer], arg3:Pointer[gpointer]) : gboolean;

external (cdecl) g_hash_table_foreach(arg0:Pointer[GHashTable], arg1:GHFunc, arg2:gpointer) : ;

external (cdecl) g_hash_table_find(arg0:Pointer[GHashTable], arg1:GHRFunc, arg2:gpointer) : gpointer;

external (cdecl) g_hash_table_foreach_remove(arg0:Pointer[GHashTable], arg1:GHRFunc, arg2:gpointer) : guint;

external (cdecl) g_hash_table_foreach_steal(arg0:Pointer[GHashTable], arg1:GHRFunc, arg2:gpointer) : guint;

external (cdecl) g_hash_table_size(arg0:Pointer[GHashTable]) : guint;

external (cdecl) g_hash_table_get_keys(arg0:Pointer[GHashTable]) : Pointer[GList];

external (cdecl) g_hash_table_get_values(arg0:Pointer[GHashTable]) : Pointer[GList];

external (cdecl) g_hash_table_iter_init(arg0:Pointer[GHashTableIter], arg1:Pointer[GHashTable]) : ;

external (cdecl) g_hash_table_iter_next(arg0:Pointer[GHashTableIter], arg1:Pointer[gpointer], arg2:Pointer[gpointer]) : gboolean;

external (cdecl) g_hash_table_iter_get_hash_table(arg0:Pointer[GHashTableIter]) : Pointer[GHashTable];

external (cdecl) g_hash_table_iter_remove(arg0:Pointer[GHashTableIter]) : ;

external (cdecl) g_hash_table_iter_replace(arg0:Pointer[GHashTableIter], arg1:gpointer) : ;

external (cdecl) g_hash_table_iter_steal(arg0:Pointer[GHashTableIter]) : ;

external (cdecl) g_hash_table_ref(arg0:Pointer[GHashTable]) : Pointer[GHashTable];

external (cdecl) g_hash_table_unref(arg0:Pointer[GHashTable]) : ;

external (cdecl) g_str_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_str_hash(arg0:gconstpointer) : guint;

external (cdecl) g_int_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_int_hash(arg0:gconstpointer) : guint;

external (cdecl) g_int64_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_int64_hash(arg0:gconstpointer) : guint;

external (cdecl) g_double_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_double_hash(arg0:gconstpointer) : guint;

external (cdecl) g_direct_hash(arg0:gconstpointer) : guint;

external (cdecl) g_direct_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

alias Struct__GHmac = Opaque;

alias GHmac = Struct__GHmac;

external (cdecl) g_hmac_new(arg0:GChecksumType, arg1:Pointer[guchar], arg2:gsize) : Pointer[GHmac];

external (cdecl) g_hmac_copy(arg0:Pointer[GHmac]) : Pointer[GHmac];

external (cdecl) g_hmac_ref(arg0:Pointer[GHmac]) : Pointer[GHmac];

external (cdecl) g_hmac_unref(arg0:Pointer[GHmac]) : ;

external (cdecl) g_hmac_update(arg0:Pointer[GHmac], arg1:Pointer[guchar], arg2:gssize) : ;

external (cdecl) g_hmac_get_string(arg0:Pointer[GHmac]) : Pointer[gchar];

external (cdecl) g_hmac_get_digest(arg0:Pointer[GHmac], arg1:Pointer[guint8], arg2:Pointer[gsize]) : ;

external (cdecl) g_compute_hmac_for_data(arg0:GChecksumType, arg1:Pointer[guchar], arg2:gsize, arg3:Pointer[guchar], arg4:gsize) : Pointer[gchar];

external (cdecl) g_compute_hmac_for_string(arg0:GChecksumType, arg1:Pointer[guchar], arg2:gsize, arg3:Pointer[gchar], arg4:gssize) : Pointer[gchar];

alias GHook = Struct__GHook;

alias GHookList = Struct__GHookList;

alias GHookCompareFunc = CCodePointer[[Pointer[GHook], Pointer[GHook]],[gint]];

alias GHookFindFunc = CCodePointer[[Pointer[GHook], gpointer],[gboolean]];

alias GHookMarshaller = CCodePointer[[Pointer[GHook], gpointer],[]];

alias GHookCheckMarshaller = CCodePointer[[Pointer[GHook], gpointer],[gboolean]];

alias GHookFunc = CCodePointer[[gpointer],[]];

alias GHookCheckFunc = CCodePointer[[gpointer],[gboolean]];

alias GHookFinalizeFunc = CCodePointer[[Pointer[GHookList], Pointer[GHook]],[]];


alias GHookFlagMask = CUInt;
alias G_HOOK_FLAG_ACTIVE = CUInt(1);
alias G_HOOK_FLAG_IN_CALL = CUInt(2);
alias G_HOOK_FLAG_MASK = CUInt(15);

record Struct__GHookList (
    seq_id : gulong,
    hook_size : guint,
    is_setup : guint,
    hooks : Pointer[GHook],
    dummy3 : gpointer,
    finalize_hook : GHookFinalizeFunc,
    dummy : Array[gpointer, 2],
);

record Struct__GHook (
    data : gpointer,
    next : Pointer[GHook],
    prev : Pointer[GHook],
    ref_count : guint,
    hook_id : gulong,
    flags : guint,
    func : gpointer,
    destroy : GDestroyNotify,
);

external (cdecl) g_hook_list_init(arg0:Pointer[GHookList], arg1:guint) : ;

external (cdecl) g_hook_list_clear(arg0:Pointer[GHookList]) : ;

external (cdecl) g_hook_alloc(arg0:Pointer[GHookList]) : Pointer[GHook];

external (cdecl) g_hook_free(arg0:Pointer[GHookList], arg1:Pointer[GHook]) : ;

external (cdecl) g_hook_ref(arg0:Pointer[GHookList], arg1:Pointer[GHook]) : Pointer[GHook];

external (cdecl) g_hook_unref(arg0:Pointer[GHookList], arg1:Pointer[GHook]) : ;

external (cdecl) g_hook_destroy(arg0:Pointer[GHookList], arg1:gulong) : gboolean;

external (cdecl) g_hook_destroy_link(arg0:Pointer[GHookList], arg1:Pointer[GHook]) : ;

external (cdecl) g_hook_prepend(arg0:Pointer[GHookList], arg1:Pointer[GHook]) : ;

external (cdecl) g_hook_insert_before(arg0:Pointer[GHookList], arg1:Pointer[GHook], arg2:Pointer[GHook]) : ;

external (cdecl) g_hook_insert_sorted(arg0:Pointer[GHookList], arg1:Pointer[GHook], arg2:GHookCompareFunc) : ;

external (cdecl) g_hook_get(arg0:Pointer[GHookList], arg1:gulong) : Pointer[GHook];

external (cdecl) g_hook_find(arg0:Pointer[GHookList], arg1:gboolean, arg2:GHookFindFunc, arg3:gpointer) : Pointer[GHook];

external (cdecl) g_hook_find_data(arg0:Pointer[GHookList], arg1:gboolean, arg2:gpointer) : Pointer[GHook];

external (cdecl) g_hook_find_func(arg0:Pointer[GHookList], arg1:gboolean, arg2:gpointer) : Pointer[GHook];

external (cdecl) g_hook_find_func_data(arg0:Pointer[GHookList], arg1:gboolean, arg2:gpointer, arg3:gpointer) : Pointer[GHook];

external (cdecl) g_hook_first_valid(arg0:Pointer[GHookList], arg1:gboolean) : Pointer[GHook];

external (cdecl) g_hook_next_valid(arg0:Pointer[GHookList], arg1:Pointer[GHook], arg2:gboolean) : Pointer[GHook];

external (cdecl) g_hook_compare_ids(arg0:Pointer[GHook], arg1:Pointer[GHook]) : gint;

external (cdecl) g_hook_list_invoke(arg0:Pointer[GHookList], arg1:gboolean) : ;

external (cdecl) g_hook_list_invoke_check(arg0:Pointer[GHookList], arg1:gboolean) : ;

external (cdecl) g_hook_list_marshal(arg0:Pointer[GHookList], arg1:gboolean, arg2:GHookMarshaller, arg3:gpointer) : ;

external (cdecl) g_hook_list_marshal_check(arg0:Pointer[GHookList], arg1:gboolean, arg2:GHookCheckMarshaller, arg3:gpointer) : ;

external (cdecl) g_hostname_is_non_ascii(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_hostname_is_ascii_encoded(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_hostname_is_ip_address(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_hostname_to_ascii(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_hostname_to_unicode(arg0:Pointer[gchar]) : Pointer[gchar];

alias GPollFD = Struct__GPollFD;

alias GPollFunc = CCodePointer[[Pointer[GPollFD], guint, gint],[gint]];

record Struct__GPollFD (
    fd : gint,
    events : gushort,
    revents : gushort,
);

external (cdecl) g_poll(arg0:Pointer[GPollFD], arg1:guint, arg2:gint) : gint;

alias GSList = Struct__GSList;

record Struct__GSList (
    data : gpointer,
    next : Pointer[GSList],
);

external (cdecl) g_slist_alloc() : Pointer[GSList];

external (cdecl) g_slist_free(arg0:Pointer[GSList]) : ;

external (cdecl) g_slist_free_1(arg0:Pointer[GSList]) : ;

external (cdecl) g_slist_free_full(arg0:Pointer[GSList], arg1:GDestroyNotify) : ;

external (cdecl) g_slist_append(arg0:Pointer[GSList], arg1:gpointer) : Pointer[GSList];

external (cdecl) g_slist_prepend(arg0:Pointer[GSList], arg1:gpointer) : Pointer[GSList];

external (cdecl) g_slist_insert(arg0:Pointer[GSList], arg1:gpointer, arg2:gint) : Pointer[GSList];

external (cdecl) g_slist_insert_sorted(arg0:Pointer[GSList], arg1:gpointer, arg2:GCompareFunc) : Pointer[GSList];

external (cdecl) g_slist_insert_sorted_with_data(arg0:Pointer[GSList], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : Pointer[GSList];

external (cdecl) g_slist_insert_before(arg0:Pointer[GSList], arg1:Pointer[GSList], arg2:gpointer) : Pointer[GSList];

external (cdecl) g_slist_concat(arg0:Pointer[GSList], arg1:Pointer[GSList]) : Pointer[GSList];

external (cdecl) g_slist_remove(arg0:Pointer[GSList], arg1:gconstpointer) : Pointer[GSList];

external (cdecl) g_slist_remove_all(arg0:Pointer[GSList], arg1:gconstpointer) : Pointer[GSList];

external (cdecl) g_slist_remove_link(arg0:Pointer[GSList], arg1:Pointer[GSList]) : Pointer[GSList];

external (cdecl) g_slist_delete_link(arg0:Pointer[GSList], arg1:Pointer[GSList]) : Pointer[GSList];

external (cdecl) g_slist_reverse(arg0:Pointer[GSList]) : Pointer[GSList];

external (cdecl) g_slist_copy(arg0:Pointer[GSList]) : Pointer[GSList];

external (cdecl) g_slist_copy_deep(arg0:Pointer[GSList], arg1:GCopyFunc, arg2:gpointer) : Pointer[GSList];

external (cdecl) g_slist_nth(arg0:Pointer[GSList], arg1:guint) : Pointer[GSList];

external (cdecl) g_slist_find(arg0:Pointer[GSList], arg1:gconstpointer) : Pointer[GSList];

external (cdecl) g_slist_find_custom(arg0:Pointer[GSList], arg1:gconstpointer, arg2:GCompareFunc) : Pointer[GSList];

external (cdecl) g_slist_position(arg0:Pointer[GSList], arg1:Pointer[GSList]) : gint;

external (cdecl) g_slist_index(arg0:Pointer[GSList], arg1:gconstpointer) : gint;

external (cdecl) g_slist_last(arg0:Pointer[GSList]) : Pointer[GSList];

external (cdecl) g_slist_length(arg0:Pointer[GSList]) : guint;

external (cdecl) g_slist_foreach(arg0:Pointer[GSList], arg1:GFunc, arg2:gpointer) : ;

external (cdecl) g_slist_sort(arg0:Pointer[GSList], arg1:GCompareFunc) : Pointer[GSList];

external (cdecl) g_slist_sort_with_data(arg0:Pointer[GSList], arg1:GCompareDataFunc, arg2:gpointer) : Pointer[GSList];

external (cdecl) g_slist_nth_data(arg0:Pointer[GSList], arg1:guint) : gpointer;

alias Struct__GMainContext = Opaque;

alias GMainContext = Struct__GMainContext;

alias Struct__GMainLoop = Opaque;

alias GMainLoop = Struct__GMainLoop;

alias GSource = Struct__GSource;

alias Struct__GSourcePrivate = Opaque;

alias GSourcePrivate = Struct__GSourcePrivate;

alias GSourceCallbackFuncs = Struct__GSourceCallbackFuncs;

alias GSourceFuncs = Struct__GSourceFuncs;

alias GSourceFunc = CCodePointer[[gpointer],[gboolean]];

alias GChildWatchFunc = CCodePointer[[GPid, gint, gpointer],[]];

record Struct__GSource (
    callback_data : gpointer,
    callback_funcs : Pointer[GSourceCallbackFuncs],
    source_funcs : Pointer[GSourceFuncs],
    ref_count : guint,
    context : Pointer[GMainContext],
    priority : gint,
    flags : guint,
    source_id : guint,
    poll_fds : Pointer[GSList],
    prev : Pointer[GSource],
    next : Pointer[GSource],
    name : Pointer[CChar],
    priv : Pointer[GSourcePrivate],
);

record Struct__GSourceCallbackFuncs (
    ref_ : CCodePointer[[gpointer],[]],
    unref : CCodePointer[[gpointer],[]],
    get : CCodePointer[[gpointer, Pointer[GSource], Pointer[GSourceFunc], Pointer[gpointer]],[]],
);

alias GSourceDummyMarshal = CCodePointer[[],[]];

record Struct__GSourceFuncs (
    prepare : CCodePointer[[Pointer[GSource], Pointer[gint]],[gboolean]],
    check : CCodePointer[[Pointer[GSource]],[gboolean]],
    dispatch : CCodePointer[[Pointer[GSource], GSourceFunc, gpointer],[gboolean]],
    finalize : CCodePointer[[Pointer[GSource]],[]],
    closure_callback : GSourceFunc,
    closure_marshal : GSourceDummyMarshal,
);

external (cdecl) g_main_context_new() : Pointer[GMainContext];

external (cdecl) g_main_context_ref(arg0:Pointer[GMainContext]) : Pointer[GMainContext];

external (cdecl) g_main_context_unref(arg0:Pointer[GMainContext]) : ;

external (cdecl) g_main_context_default() : Pointer[GMainContext];

external (cdecl) g_main_context_iteration(arg0:Pointer[GMainContext], arg1:gboolean) : gboolean;

external (cdecl) g_main_context_pending(arg0:Pointer[GMainContext]) : gboolean;

external (cdecl) g_main_context_find_source_by_id(arg0:Pointer[GMainContext], arg1:guint) : Pointer[GSource];

external (cdecl) g_main_context_find_source_by_user_data(arg0:Pointer[GMainContext], arg1:gpointer) : Pointer[GSource];

external (cdecl) g_main_context_find_source_by_funcs_user_data(arg0:Pointer[GMainContext], arg1:Pointer[GSourceFuncs], arg2:gpointer) : Pointer[GSource];

external (cdecl) g_main_context_wakeup(arg0:Pointer[GMainContext]) : ;

external (cdecl) g_main_context_acquire(arg0:Pointer[GMainContext]) : gboolean;

external (cdecl) g_main_context_release(arg0:Pointer[GMainContext]) : ;

external (cdecl) g_main_context_is_owner(arg0:Pointer[GMainContext]) : gboolean;

external (cdecl) g_main_context_wait(arg0:Pointer[GMainContext], arg1:Pointer[GCond], arg2:Pointer[GMutex]) : gboolean;

external (cdecl) g_main_context_prepare(arg0:Pointer[GMainContext], arg1:Pointer[gint]) : gboolean;

external (cdecl) g_main_context_query(arg0:Pointer[GMainContext], arg1:gint, arg2:Pointer[gint], arg3:Pointer[GPollFD], arg4:gint) : gint;

external (cdecl) g_main_context_check(arg0:Pointer[GMainContext], arg1:gint, arg2:Pointer[GPollFD], arg3:gint) : gint;

external (cdecl) g_main_context_dispatch(arg0:Pointer[GMainContext]) : ;

external (cdecl) g_main_context_set_poll_func(arg0:Pointer[GMainContext], arg1:GPollFunc) : ;

external (cdecl) g_main_context_get_poll_func(arg0:Pointer[GMainContext]) : GPollFunc;

external (cdecl) g_main_context_add_poll(arg0:Pointer[GMainContext], arg1:Pointer[GPollFD], arg2:gint) : ;

external (cdecl) g_main_context_remove_poll(arg0:Pointer[GMainContext], arg1:Pointer[GPollFD]) : ;

external (cdecl) g_main_depth() : gint;

external (cdecl) g_main_current_source() : Pointer[GSource];

external (cdecl) g_main_context_push_thread_default(arg0:Pointer[GMainContext]) : ;

external (cdecl) g_main_context_pop_thread_default(arg0:Pointer[GMainContext]) : ;

external (cdecl) g_main_context_get_thread_default() : Pointer[GMainContext];

external (cdecl) g_main_context_ref_thread_default() : Pointer[GMainContext];

external (cdecl) g_main_loop_new(arg0:Pointer[GMainContext], arg1:gboolean) : Pointer[GMainLoop];

external (cdecl) g_main_loop_run(arg0:Pointer[GMainLoop]) : ;

external (cdecl) g_main_loop_quit(arg0:Pointer[GMainLoop]) : ;

external (cdecl) g_main_loop_ref(arg0:Pointer[GMainLoop]) : Pointer[GMainLoop];

external (cdecl) g_main_loop_unref(arg0:Pointer[GMainLoop]) : ;

external (cdecl) g_main_loop_is_running(arg0:Pointer[GMainLoop]) : gboolean;

external (cdecl) g_main_loop_get_context(arg0:Pointer[GMainLoop]) : Pointer[GMainContext];

external (cdecl) g_source_new(arg0:Pointer[GSourceFuncs], arg1:guint) : Pointer[GSource];

external (cdecl) g_source_ref(arg0:Pointer[GSource]) : Pointer[GSource];

external (cdecl) g_source_unref(arg0:Pointer[GSource]) : ;

external (cdecl) g_source_attach(arg0:Pointer[GSource], arg1:Pointer[GMainContext]) : guint;

external (cdecl) g_source_destroy(arg0:Pointer[GSource]) : ;

external (cdecl) g_source_set_priority(arg0:Pointer[GSource], arg1:gint) : ;

external (cdecl) g_source_get_priority(arg0:Pointer[GSource]) : gint;

external (cdecl) g_source_set_can_recurse(arg0:Pointer[GSource], arg1:gboolean) : ;

external (cdecl) g_source_get_can_recurse(arg0:Pointer[GSource]) : gboolean;

external (cdecl) g_source_get_id(arg0:Pointer[GSource]) : guint;

external (cdecl) g_source_get_context(arg0:Pointer[GSource]) : Pointer[GMainContext];

external (cdecl) g_source_set_callback(arg0:Pointer[GSource], arg1:GSourceFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_source_set_funcs(arg0:Pointer[GSource], arg1:Pointer[GSourceFuncs]) : ;

external (cdecl) g_source_is_destroyed(arg0:Pointer[GSource]) : gboolean;

external (cdecl) g_source_set_name(arg0:Pointer[GSource], arg1:Pointer[CChar]) : ;

external (cdecl) g_source_get_name(arg0:Pointer[GSource]) : Pointer[CChar];

external (cdecl) g_source_set_name_by_id(arg0:guint, arg1:Pointer[CChar]) : ;

external (cdecl) g_source_set_callback_indirect(arg0:Pointer[GSource], arg1:gpointer, arg2:Pointer[GSourceCallbackFuncs]) : ;

external (cdecl) g_source_add_poll(arg0:Pointer[GSource], arg1:Pointer[GPollFD]) : ;

external (cdecl) g_source_remove_poll(arg0:Pointer[GSource], arg1:Pointer[GPollFD]) : ;

external (cdecl) g_source_add_child_source(arg0:Pointer[GSource], arg1:Pointer[GSource]) : ;

external (cdecl) g_source_remove_child_source(arg0:Pointer[GSource], arg1:Pointer[GSource]) : ;

external (cdecl) g_source_get_current_time(arg0:Pointer[GSource], arg1:Pointer[GTimeVal]) : ;

external (cdecl) g_source_get_time(arg0:Pointer[GSource]) : gint64;

external (cdecl) g_idle_source_new() : Pointer[GSource];

external (cdecl) g_child_watch_source_new(arg0:GPid) : Pointer[GSource];

external (cdecl) g_timeout_source_new(arg0:guint) : Pointer[GSource];

external (cdecl) g_timeout_source_new_seconds(arg0:guint) : Pointer[GSource];

external (cdecl) g_get_current_time(arg0:Pointer[GTimeVal]) : ;

external (cdecl) g_get_monotonic_time() : gint64;

external (cdecl) g_get_real_time() : gint64;

external (cdecl) g_source_remove(arg0:guint) : gboolean;

external (cdecl) g_source_remove_by_user_data(arg0:gpointer) : gboolean;

external (cdecl) g_source_remove_by_funcs_user_data(arg0:Pointer[GSourceFuncs], arg1:gpointer) : gboolean;

external (cdecl) g_timeout_add_full(arg0:gint, arg1:guint, arg2:GSourceFunc, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) g_timeout_add(arg0:guint, arg1:GSourceFunc, arg2:gpointer) : guint;

external (cdecl) g_timeout_add_seconds_full(arg0:gint, arg1:guint, arg2:GSourceFunc, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) g_timeout_add_seconds(arg0:guint, arg1:GSourceFunc, arg2:gpointer) : guint;

external (cdecl) g_child_watch_add_full(arg0:gint, arg1:GPid, arg2:GChildWatchFunc, arg3:gpointer, arg4:GDestroyNotify) : guint;

external (cdecl) g_child_watch_add(arg0:GPid, arg1:GChildWatchFunc, arg2:gpointer) : guint;

external (cdecl) g_idle_add(arg0:GSourceFunc, arg1:gpointer) : guint;

external (cdecl) g_idle_add_full(arg0:gint, arg1:GSourceFunc, arg2:gpointer, arg3:GDestroyNotify) : guint;

external (cdecl) g_idle_remove_by_data(arg0:gpointer) : gboolean;

external (cdecl) g_main_context_invoke_full(arg0:Pointer[GMainContext], arg1:gint, arg2:GSourceFunc, arg3:gpointer, arg4:GDestroyNotify) : ;

external (cdecl) g_main_context_invoke(arg0:Pointer[GMainContext], arg1:GSourceFunc, arg2:gpointer) : ;

external g_timeout_funcs : GSourceFuncs;

external g_child_watch_funcs : GSourceFuncs;

external g_idle_funcs : GSourceFuncs;

alias gunichar = guint32;

alias gunichar2 = guint16;


alias GUnicodeType = CUInt;
alias G_UNICODE_CONTROL = CUInt(0);
alias G_UNICODE_FORMAT = CUInt(1);
alias G_UNICODE_UNASSIGNED = CUInt(2);
alias G_UNICODE_PRIVATE_USE = CUInt(3);
alias G_UNICODE_SURROGATE = CUInt(4);
alias G_UNICODE_LOWERCASE_LETTER = CUInt(5);
alias G_UNICODE_MODIFIER_LETTER = CUInt(6);
alias G_UNICODE_OTHER_LETTER = CUInt(7);
alias G_UNICODE_TITLECASE_LETTER = CUInt(8);
alias G_UNICODE_UPPERCASE_LETTER = CUInt(9);
alias G_UNICODE_SPACING_MARK = CUInt(10);
alias G_UNICODE_ENCLOSING_MARK = CUInt(11);
alias G_UNICODE_NON_SPACING_MARK = CUInt(12);
alias G_UNICODE_DECIMAL_NUMBER = CUInt(13);
alias G_UNICODE_LETTER_NUMBER = CUInt(14);
alias G_UNICODE_OTHER_NUMBER = CUInt(15);
alias G_UNICODE_CONNECT_PUNCTUATION = CUInt(16);
alias G_UNICODE_DASH_PUNCTUATION = CUInt(17);
alias G_UNICODE_CLOSE_PUNCTUATION = CUInt(18);
alias G_UNICODE_FINAL_PUNCTUATION = CUInt(19);
alias G_UNICODE_INITIAL_PUNCTUATION = CUInt(20);
alias G_UNICODE_OTHER_PUNCTUATION = CUInt(21);
alias G_UNICODE_OPEN_PUNCTUATION = CUInt(22);
alias G_UNICODE_CURRENCY_SYMBOL = CUInt(23);
alias G_UNICODE_MODIFIER_SYMBOL = CUInt(24);
alias G_UNICODE_MATH_SYMBOL = CUInt(25);
alias G_UNICODE_OTHER_SYMBOL = CUInt(26);
alias G_UNICODE_LINE_SEPARATOR = CUInt(27);
alias G_UNICODE_PARAGRAPH_SEPARATOR = CUInt(28);
alias G_UNICODE_SPACE_SEPARATOR = CUInt(29);


alias GUnicodeBreakType = CUInt;
alias G_UNICODE_BREAK_MANDATORY = CUInt(0);
alias G_UNICODE_BREAK_CARRIAGE_RETURN = CUInt(1);
alias G_UNICODE_BREAK_LINE_FEED = CUInt(2);
alias G_UNICODE_BREAK_COMBINING_MARK = CUInt(3);
alias G_UNICODE_BREAK_SURROGATE = CUInt(4);
alias G_UNICODE_BREAK_ZERO_WIDTH_SPACE = CUInt(5);
alias G_UNICODE_BREAK_INSEPARABLE = CUInt(6);
alias G_UNICODE_BREAK_NON_BREAKING_GLUE = CUInt(7);
alias G_UNICODE_BREAK_CONTINGENT = CUInt(8);
alias G_UNICODE_BREAK_SPACE = CUInt(9);
alias G_UNICODE_BREAK_AFTER = CUInt(10);
alias G_UNICODE_BREAK_BEFORE = CUInt(11);
alias G_UNICODE_BREAK_BEFORE_AND_AFTER = CUInt(12);
alias G_UNICODE_BREAK_HYPHEN = CUInt(13);
alias G_UNICODE_BREAK_NON_STARTER = CUInt(14);
alias G_UNICODE_BREAK_OPEN_PUNCTUATION = CUInt(15);
alias G_UNICODE_BREAK_CLOSE_PUNCTUATION = CUInt(16);
alias G_UNICODE_BREAK_QUOTATION = CUInt(17);
alias G_UNICODE_BREAK_EXCLAMATION = CUInt(18);
alias G_UNICODE_BREAK_IDEOGRAPHIC = CUInt(19);
alias G_UNICODE_BREAK_NUMERIC = CUInt(20);
alias G_UNICODE_BREAK_INFIX_SEPARATOR = CUInt(21);
alias G_UNICODE_BREAK_SYMBOL = CUInt(22);
alias G_UNICODE_BREAK_ALPHABETIC = CUInt(23);
alias G_UNICODE_BREAK_PREFIX = CUInt(24);
alias G_UNICODE_BREAK_POSTFIX = CUInt(25);
alias G_UNICODE_BREAK_COMPLEX_CONTEXT = CUInt(26);
alias G_UNICODE_BREAK_AMBIGUOUS = CUInt(27);
alias G_UNICODE_BREAK_UNKNOWN = CUInt(28);
alias G_UNICODE_BREAK_NEXT_LINE = CUInt(29);
alias G_UNICODE_BREAK_WORD_JOINER = CUInt(30);
alias G_UNICODE_BREAK_HANGUL_L_JAMO = CUInt(31);
alias G_UNICODE_BREAK_HANGUL_V_JAMO = CUInt(32);
alias G_UNICODE_BREAK_HANGUL_T_JAMO = CUInt(33);
alias G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = CUInt(34);
alias G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = CUInt(35);
alias G_UNICODE_BREAK_CLOSE_PARANTHESIS = CUInt(36);
alias G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = CUInt(37);
alias G_UNICODE_BREAK_HEBREW_LETTER = CUInt(38);


alias GUnicodeScript = CInt;
alias G_UNICODE_SCRIPT_INVALID_CODE = CInt(-1);
alias G_UNICODE_SCRIPT_COMMON = CInt(0);
alias G_UNICODE_SCRIPT_INHERITED = CInt(1);
alias G_UNICODE_SCRIPT_ARABIC = CInt(2);
alias G_UNICODE_SCRIPT_ARMENIAN = CInt(3);
alias G_UNICODE_SCRIPT_BENGALI = CInt(4);
alias G_UNICODE_SCRIPT_BOPOMOFO = CInt(5);
alias G_UNICODE_SCRIPT_CHEROKEE = CInt(6);
alias G_UNICODE_SCRIPT_COPTIC = CInt(7);
alias G_UNICODE_SCRIPT_CYRILLIC = CInt(8);
alias G_UNICODE_SCRIPT_DESERET = CInt(9);
alias G_UNICODE_SCRIPT_DEVANAGARI = CInt(10);
alias G_UNICODE_SCRIPT_ETHIOPIC = CInt(11);
alias G_UNICODE_SCRIPT_GEORGIAN = CInt(12);
alias G_UNICODE_SCRIPT_GOTHIC = CInt(13);
alias G_UNICODE_SCRIPT_GREEK = CInt(14);
alias G_UNICODE_SCRIPT_GUJARATI = CInt(15);
alias G_UNICODE_SCRIPT_GURMUKHI = CInt(16);
alias G_UNICODE_SCRIPT_HAN = CInt(17);
alias G_UNICODE_SCRIPT_HANGUL = CInt(18);
alias G_UNICODE_SCRIPT_HEBREW = CInt(19);
alias G_UNICODE_SCRIPT_HIRAGANA = CInt(20);
alias G_UNICODE_SCRIPT_KANNADA = CInt(21);
alias G_UNICODE_SCRIPT_KATAKANA = CInt(22);
alias G_UNICODE_SCRIPT_KHMER = CInt(23);
alias G_UNICODE_SCRIPT_LAO = CInt(24);
alias G_UNICODE_SCRIPT_LATIN = CInt(25);
alias G_UNICODE_SCRIPT_MALAYALAM = CInt(26);
alias G_UNICODE_SCRIPT_MONGOLIAN = CInt(27);
alias G_UNICODE_SCRIPT_MYANMAR = CInt(28);
alias G_UNICODE_SCRIPT_OGHAM = CInt(29);
alias G_UNICODE_SCRIPT_OLD_ITALIC = CInt(30);
alias G_UNICODE_SCRIPT_ORIYA = CInt(31);
alias G_UNICODE_SCRIPT_RUNIC = CInt(32);
alias G_UNICODE_SCRIPT_SINHALA = CInt(33);
alias G_UNICODE_SCRIPT_SYRIAC = CInt(34);
alias G_UNICODE_SCRIPT_TAMIL = CInt(35);
alias G_UNICODE_SCRIPT_TELUGU = CInt(36);
alias G_UNICODE_SCRIPT_THAANA = CInt(37);
alias G_UNICODE_SCRIPT_THAI = CInt(38);
alias G_UNICODE_SCRIPT_TIBETAN = CInt(39);
alias G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = CInt(40);
alias G_UNICODE_SCRIPT_YI = CInt(41);
alias G_UNICODE_SCRIPT_TAGALOG = CInt(42);
alias G_UNICODE_SCRIPT_HANUNOO = CInt(43);
alias G_UNICODE_SCRIPT_BUHID = CInt(44);
alias G_UNICODE_SCRIPT_TAGBANWA = CInt(45);
alias G_UNICODE_SCRIPT_BRAILLE = CInt(46);
alias G_UNICODE_SCRIPT_CYPRIOT = CInt(47);
alias G_UNICODE_SCRIPT_LIMBU = CInt(48);
alias G_UNICODE_SCRIPT_OSMANYA = CInt(49);
alias G_UNICODE_SCRIPT_SHAVIAN = CInt(50);
alias G_UNICODE_SCRIPT_LINEAR_B = CInt(51);
alias G_UNICODE_SCRIPT_TAI_LE = CInt(52);
alias G_UNICODE_SCRIPT_UGARITIC = CInt(53);
alias G_UNICODE_SCRIPT_NEW_TAI_LUE = CInt(54);
alias G_UNICODE_SCRIPT_BUGINESE = CInt(55);
alias G_UNICODE_SCRIPT_GLAGOLITIC = CInt(56);
alias G_UNICODE_SCRIPT_TIFINAGH = CInt(57);
alias G_UNICODE_SCRIPT_SYLOTI_NAGRI = CInt(58);
alias G_UNICODE_SCRIPT_OLD_PERSIAN = CInt(59);
alias G_UNICODE_SCRIPT_KHAROSHTHI = CInt(60);
alias G_UNICODE_SCRIPT_UNKNOWN = CInt(61);
alias G_UNICODE_SCRIPT_BALINESE = CInt(62);
alias G_UNICODE_SCRIPT_CUNEIFORM = CInt(63);
alias G_UNICODE_SCRIPT_PHOENICIAN = CInt(64);
alias G_UNICODE_SCRIPT_PHAGS_PA = CInt(65);
alias G_UNICODE_SCRIPT_NKO = CInt(66);
alias G_UNICODE_SCRIPT_KAYAH_LI = CInt(67);
alias G_UNICODE_SCRIPT_LEPCHA = CInt(68);
alias G_UNICODE_SCRIPT_REJANG = CInt(69);
alias G_UNICODE_SCRIPT_SUNDANESE = CInt(70);
alias G_UNICODE_SCRIPT_SAURASHTRA = CInt(71);
alias G_UNICODE_SCRIPT_CHAM = CInt(72);
alias G_UNICODE_SCRIPT_OL_CHIKI = CInt(73);
alias G_UNICODE_SCRIPT_VAI = CInt(74);
alias G_UNICODE_SCRIPT_CARIAN = CInt(75);
alias G_UNICODE_SCRIPT_LYCIAN = CInt(76);
alias G_UNICODE_SCRIPT_LYDIAN = CInt(77);
alias G_UNICODE_SCRIPT_AVESTAN = CInt(78);
alias G_UNICODE_SCRIPT_BAMUM = CInt(79);
alias G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = CInt(80);
alias G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = CInt(81);
alias G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = CInt(82);
alias G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = CInt(83);
alias G_UNICODE_SCRIPT_JAVANESE = CInt(84);
alias G_UNICODE_SCRIPT_KAITHI = CInt(85);
alias G_UNICODE_SCRIPT_LISU = CInt(86);
alias G_UNICODE_SCRIPT_MEETEI_MAYEK = CInt(87);
alias G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = CInt(88);
alias G_UNICODE_SCRIPT_OLD_TURKIC = CInt(89);
alias G_UNICODE_SCRIPT_SAMARITAN = CInt(90);
alias G_UNICODE_SCRIPT_TAI_THAM = CInt(91);
alias G_UNICODE_SCRIPT_TAI_VIET = CInt(92);
alias G_UNICODE_SCRIPT_BATAK = CInt(93);
alias G_UNICODE_SCRIPT_BRAHMI = CInt(94);
alias G_UNICODE_SCRIPT_MANDAIC = CInt(95);
alias G_UNICODE_SCRIPT_CHAKMA = CInt(96);
alias G_UNICODE_SCRIPT_MEROITIC_CURSIVE = CInt(97);
alias G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = CInt(98);
alias G_UNICODE_SCRIPT_MIAO = CInt(99);
alias G_UNICODE_SCRIPT_SHARADA = CInt(100);
alias G_UNICODE_SCRIPT_SORA_SOMPENG = CInt(101);
alias G_UNICODE_SCRIPT_TAKRI = CInt(102);

external (cdecl) g_unicode_script_to_iso15924(arg0:GUnicodeScript) : guint32;

external (cdecl) g_unicode_script_from_iso15924(arg0:guint32) : GUnicodeScript;

external (cdecl) g_unichar_isalnum(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isalpha(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_iscntrl(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isdigit(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isgraph(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_islower(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isprint(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_ispunct(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isspace(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isupper(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isxdigit(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_istitle(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_isdefined(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_iswide(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_iswide_cjk(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_iszerowidth(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_ismark(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_toupper(arg0:gunichar) : gunichar;

external (cdecl) g_unichar_tolower(arg0:gunichar) : gunichar;

external (cdecl) g_unichar_totitle(arg0:gunichar) : gunichar;

external (cdecl) g_unichar_digit_value(arg0:gunichar) : gint;

external (cdecl) g_unichar_xdigit_value(arg0:gunichar) : gint;

external (cdecl) g_unichar_type(arg0:gunichar) : GUnicodeType;

external (cdecl) g_unichar_break_type(arg0:gunichar) : GUnicodeBreakType;

external (cdecl) g_unichar_combining_class(arg0:gunichar) : gint;

external (cdecl) g_unichar_get_mirror_char(arg0:gunichar, arg1:Pointer[gunichar]) : gboolean;

external (cdecl) g_unichar_get_script(arg0:gunichar) : GUnicodeScript;

external (cdecl) g_unichar_validate(arg0:gunichar) : gboolean;

external (cdecl) g_unichar_compose(arg0:gunichar, arg1:gunichar, arg2:Pointer[gunichar]) : gboolean;

external (cdecl) g_unichar_decompose(arg0:gunichar, arg1:Pointer[gunichar], arg2:Pointer[gunichar]) : gboolean;

external (cdecl) g_unichar_fully_decompose(arg0:gunichar, arg1:gboolean, arg2:Pointer[gunichar], arg3:gsize) : gsize;

external (cdecl) g_unicode_canonical_ordering(arg0:Pointer[gunichar], arg1:gsize) : ;

external (cdecl) g_unicode_canonical_decomposition(arg0:gunichar, arg1:Pointer[gsize]) : Pointer[gunichar];

external g_utf8_skip : Pointer[gchar];

external (cdecl) g_utf8_get_char(arg0:Pointer[gchar]) : gunichar;

external (cdecl) g_utf8_get_char_validated(arg0:Pointer[gchar], arg1:gssize) : gunichar;

external (cdecl) g_utf8_offset_to_pointer(arg0:Pointer[gchar], arg1:glong) : Pointer[gchar];

external (cdecl) g_utf8_pointer_to_offset(arg0:Pointer[gchar], arg1:Pointer[gchar]) : glong;

external (cdecl) g_utf8_prev_char(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_utf8_find_next_char(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_utf8_find_prev_char(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_utf8_strlen(arg0:Pointer[gchar], arg1:gssize) : glong;

external (cdecl) g_utf8_substring(arg0:Pointer[gchar], arg1:glong, arg2:glong) : Pointer[gchar];

external (cdecl) g_utf8_strncpy(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : Pointer[gchar];

external (cdecl) g_utf8_strchr(arg0:Pointer[gchar], arg1:gssize, arg2:gunichar) : Pointer[gchar];

external (cdecl) g_utf8_strrchr(arg0:Pointer[gchar], arg1:gssize, arg2:gunichar) : Pointer[gchar];

external (cdecl) g_utf8_strreverse(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_utf8_to_utf16(arg0:Pointer[gchar], arg1:glong, arg2:Pointer[glong], arg3:Pointer[glong], arg4:Pointer[Pointer[GError]]) : Pointer[gunichar2];

external (cdecl) g_utf8_to_ucs4(arg0:Pointer[gchar], arg1:glong, arg2:Pointer[glong], arg3:Pointer[glong], arg4:Pointer[Pointer[GError]]) : Pointer[gunichar];

external (cdecl) g_utf8_to_ucs4_fast(arg0:Pointer[gchar], arg1:glong, arg2:Pointer[glong]) : Pointer[gunichar];

external (cdecl) g_utf16_to_ucs4(arg0:Pointer[gunichar2], arg1:glong, arg2:Pointer[glong], arg3:Pointer[glong], arg4:Pointer[Pointer[GError]]) : Pointer[gunichar];

external (cdecl) g_utf16_to_utf8(arg0:Pointer[gunichar2], arg1:glong, arg2:Pointer[glong], arg3:Pointer[glong], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_ucs4_to_utf16(arg0:Pointer[gunichar], arg1:glong, arg2:Pointer[glong], arg3:Pointer[glong], arg4:Pointer[Pointer[GError]]) : Pointer[gunichar2];

external (cdecl) g_ucs4_to_utf8(arg0:Pointer[gunichar], arg1:glong, arg2:Pointer[glong], arg3:Pointer[glong], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_unichar_to_utf8(arg0:gunichar, arg1:Pointer[gchar]) : gint;

external (cdecl) g_utf8_validate(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) g_utf8_strup(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_utf8_strdown(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_utf8_casefold(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];


alias GNormalizeMode = CUInt;
alias G_NORMALIZE_DEFAULT = CUInt(0);
alias G_NORMALIZE_NFD = CUInt(0);
alias G_NORMALIZE_DEFAULT_COMPOSE = CUInt(1);
alias G_NORMALIZE_NFC = CUInt(1);
alias G_NORMALIZE_ALL = CUInt(2);
alias G_NORMALIZE_NFKD = CUInt(2);
alias G_NORMALIZE_ALL_COMPOSE = CUInt(3);
alias G_NORMALIZE_NFKC = CUInt(3);

external (cdecl) g_utf8_normalize(arg0:Pointer[gchar], arg1:gssize, arg2:GNormalizeMode) : Pointer[gchar];

external (cdecl) g_utf8_collate(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gint;

external (cdecl) g_utf8_collate_key(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_utf8_collate_key_for_filename(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) _g_utf8_make_valid(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_get_user_name() : Pointer[gchar];

external (cdecl) g_get_real_name() : Pointer[gchar];

external (cdecl) g_get_home_dir() : Pointer[gchar];

external (cdecl) g_get_tmp_dir() : Pointer[gchar];

external (cdecl) g_get_host_name() : Pointer[gchar];

external (cdecl) g_get_prgname() : Pointer[gchar];

external (cdecl) g_set_prgname(arg0:Pointer[gchar]) : ;

external (cdecl) g_get_application_name() : Pointer[gchar];

external (cdecl) g_set_application_name(arg0:Pointer[gchar]) : ;

external (cdecl) g_reload_user_special_dirs_cache() : ;

external (cdecl) g_get_user_data_dir() : Pointer[gchar];

external (cdecl) g_get_user_config_dir() : Pointer[gchar];

external (cdecl) g_get_user_cache_dir() : Pointer[gchar];

external (cdecl) g_get_system_data_dirs() : Pointer[Pointer[gchar]];

external (cdecl) g_get_system_config_dirs() : Pointer[Pointer[gchar]];

external (cdecl) g_get_user_runtime_dir() : Pointer[gchar];


alias GUserDirectory = CUInt;
alias G_USER_DIRECTORY_DESKTOP = CUInt(0);
alias G_USER_DIRECTORY_DOCUMENTS = CUInt(1);
alias G_USER_DIRECTORY_DOWNLOAD = CUInt(2);
alias G_USER_DIRECTORY_MUSIC = CUInt(3);
alias G_USER_DIRECTORY_PICTURES = CUInt(4);
alias G_USER_DIRECTORY_PUBLIC_SHARE = CUInt(5);
alias G_USER_DIRECTORY_TEMPLATES = CUInt(6);
alias G_USER_DIRECTORY_VIDEOS = CUInt(7);
alias G_USER_N_DIRECTORIES = CUInt(8);

external (cdecl) g_get_user_special_dir(arg0:GUserDirectory) : Pointer[gchar];

alias GDebugKey = Struct__GDebugKey;

record Struct__GDebugKey (
    key : Pointer[gchar],
    value : guint,
);

external (cdecl) g_parse_debug_string(arg0:Pointer[gchar], arg1:Pointer[GDebugKey], arg2:guint) : guint;

external (cdecl) g_snprintf(arg0:Pointer[gchar], arg1:gulong, arg2:Pointer[gchar], ..) : gint;

external (cdecl) g_vsnprintf(arg0:Pointer[gchar], arg1:gulong, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : gint;

external (cdecl) g_nullify_pointer(arg0:Pointer[gpointer]) : ;


alias GFormatSizeFlags = CUInt;
alias G_FORMAT_SIZE_DEFAULT = CUInt(0);
alias G_FORMAT_SIZE_LONG_FORMAT = CUInt(1);
alias G_FORMAT_SIZE_IEC_UNITS = CUInt(2);

external (cdecl) g_format_size_full(arg0:guint64, arg1:GFormatSizeFlags) : Pointer[gchar];

external (cdecl) g_format_size(arg0:guint64) : Pointer[gchar];

external (cdecl) g_format_size_for_display(arg0:goffset) : Pointer[gchar];

alias GVoidFunc = CCodePointer[[],[]];

external (cdecl) g_atexit(arg0:GVoidFunc) : ;

external (cdecl) g_find_program_in_path(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_bit_nth_lsf(arg0:gulong, arg1:gint) : gint;

external (cdecl) g_bit_nth_msf(arg0:gulong, arg1:gint) : gint;

external (cdecl) g_bit_storage(arg0:gulong) : guint;

alias GString = Struct__GString;

record Struct__GString (
    str : Pointer[gchar],
    len : gsize,
    allocated_len : gsize,
);

external (cdecl) g_string_new(arg0:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_new_len(arg0:Pointer[gchar], arg1:gssize) : Pointer[GString];

external (cdecl) g_string_sized_new(arg0:gsize) : Pointer[GString];

external (cdecl) g_string_free(arg0:Pointer[GString], arg1:gboolean) : Pointer[gchar];

external (cdecl) g_string_free_to_bytes(arg0:Pointer[GString]) : Pointer[GBytes];

external (cdecl) g_string_equal(arg0:Pointer[GString], arg1:Pointer[GString]) : gboolean;

external (cdecl) g_string_hash(arg0:Pointer[GString]) : guint;

external (cdecl) g_string_assign(arg0:Pointer[GString], arg1:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_truncate(arg0:Pointer[GString], arg1:gsize) : Pointer[GString];

external (cdecl) g_string_set_size(arg0:Pointer[GString], arg1:gsize) : Pointer[GString];

external (cdecl) g_string_insert_len(arg0:Pointer[GString], arg1:gssize, arg2:Pointer[gchar], arg3:gssize) : Pointer[GString];

external (cdecl) g_string_append(arg0:Pointer[GString], arg1:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_append_len(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:gssize) : Pointer[GString];

external (cdecl) g_string_append_c(arg0:Pointer[GString], arg1:gchar) : Pointer[GString];

external (cdecl) g_string_append_unichar(arg0:Pointer[GString], arg1:gunichar) : Pointer[GString];

external (cdecl) g_string_prepend(arg0:Pointer[GString], arg1:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_prepend_c(arg0:Pointer[GString], arg1:gchar) : Pointer[GString];

external (cdecl) g_string_prepend_unichar(arg0:Pointer[GString], arg1:gunichar) : Pointer[GString];

external (cdecl) g_string_prepend_len(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:gssize) : Pointer[GString];

external (cdecl) g_string_insert(arg0:Pointer[GString], arg1:gssize, arg2:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_insert_c(arg0:Pointer[GString], arg1:gssize, arg2:gchar) : Pointer[GString];

external (cdecl) g_string_insert_unichar(arg0:Pointer[GString], arg1:gssize, arg2:gunichar) : Pointer[GString];

external (cdecl) g_string_overwrite(arg0:Pointer[GString], arg1:gsize, arg2:Pointer[gchar]) : Pointer[GString];

external (cdecl) g_string_overwrite_len(arg0:Pointer[GString], arg1:gsize, arg2:Pointer[gchar], arg3:gssize) : Pointer[GString];

external (cdecl) g_string_erase(arg0:Pointer[GString], arg1:gssize, arg2:gssize) : Pointer[GString];

external (cdecl) g_string_ascii_down(arg0:Pointer[GString]) : Pointer[GString];

external (cdecl) g_string_ascii_up(arg0:Pointer[GString]) : Pointer[GString];

external (cdecl) g_string_vprintf(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) g_string_printf(arg0:Pointer[GString], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_string_append_vprintf(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) g_string_append_printf(arg0:Pointer[GString], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_string_append_uri_escaped(arg0:Pointer[GString], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gboolean) : Pointer[GString];

external (cdecl) g_string_append_c_inline(arg0:Pointer[GString], arg1:gchar) : Pointer[GString];

external (cdecl) g_string_down(arg0:Pointer[GString]) : Pointer[GString];

external (cdecl) g_string_up(arg0:Pointer[GString]) : Pointer[GString];

alias GIOChannel = Struct__GIOChannel;

alias GIOFuncs = Struct__GIOFuncs;


alias GIOError = CUInt;
alias G_IO_ERROR_NONE = CUInt(0);
alias G_IO_ERROR_AGAIN = CUInt(1);
alias G_IO_ERROR_INVAL = CUInt(2);
alias G_IO_ERROR_UNKNOWN = CUInt(3);


alias GIOChannelError = CUInt;
alias G_IO_CHANNEL_ERROR_FBIG = CUInt(0);
alias G_IO_CHANNEL_ERROR_INVAL = CUInt(1);
alias G_IO_CHANNEL_ERROR_IO = CUInt(2);
alias G_IO_CHANNEL_ERROR_ISDIR = CUInt(3);
alias G_IO_CHANNEL_ERROR_NOSPC = CUInt(4);
alias G_IO_CHANNEL_ERROR_NXIO = CUInt(5);
alias G_IO_CHANNEL_ERROR_OVERFLOW = CUInt(6);
alias G_IO_CHANNEL_ERROR_PIPE = CUInt(7);
alias G_IO_CHANNEL_ERROR_FAILED = CUInt(8);


alias GIOStatus = CUInt;
alias G_IO_STATUS_ERROR = CUInt(0);
alias G_IO_STATUS_NORMAL = CUInt(1);
alias G_IO_STATUS_EOF = CUInt(2);
alias G_IO_STATUS_AGAIN = CUInt(3);


alias GSeekType = CUInt;
alias G_SEEK_CUR = CUInt(0);
alias G_SEEK_SET = CUInt(1);
alias G_SEEK_END = CUInt(2);


alias GIOCondition = CUInt;
alias G_IO_IN = CUInt(1);
alias G_IO_OUT = CUInt(4);
alias G_IO_PRI = CUInt(2);
alias G_IO_ERR = CUInt(8);
alias G_IO_HUP = CUInt(16);
alias G_IO_NVAL = CUInt(32);


alias GIOFlags = CUInt;
alias G_IO_FLAG_APPEND = CUInt(1);
alias G_IO_FLAG_NONBLOCK = CUInt(2);
alias G_IO_FLAG_IS_READABLE = CUInt(4);
alias G_IO_FLAG_IS_WRITABLE = CUInt(8);
alias G_IO_FLAG_IS_SEEKABLE = CUInt(16);
alias G_IO_FLAG_MASK = CUInt(31);
alias G_IO_FLAG_GET_MASK = CUInt(31);
alias G_IO_FLAG_SET_MASK = CUInt(3);

record Struct__GIOChannel (
    ref_count : gint,
    funcs : Pointer[GIOFuncs],
    encoding : Pointer[gchar],
    read_cd : GIConv,
    write_cd : GIConv,
    line_term : Pointer[gchar],
    line_term_len : guint,
    buf_size : gsize,
    read_buf : Pointer[GString],
    encoded_read_buf : Pointer[GString],
    write_buf : Pointer[GString],
    partial_write_buf : Array[gchar, 6],
    use_buffer : guint,
    do_encode : guint,
    close_on_unref : guint,
    is_readable : guint,
    is_writeable : guint,
    is_seekable : guint,
    reserved1 : gpointer,
    reserved2 : gpointer,
);

alias GIOFunc = CCodePointer[[Pointer[GIOChannel], GIOCondition, gpointer],[gboolean]];

record Struct__GIOFuncs (
    io_read : CCodePointer[[Pointer[GIOChannel], Pointer[gchar], gsize, Pointer[gsize], Pointer[Pointer[GError]]],[GIOStatus]],
    io_write : CCodePointer[[Pointer[GIOChannel], Pointer[gchar], gsize, Pointer[gsize], Pointer[Pointer[GError]]],[GIOStatus]],
    io_seek : CCodePointer[[Pointer[GIOChannel], gint64, GSeekType, Pointer[Pointer[GError]]],[GIOStatus]],
    io_close : CCodePointer[[Pointer[GIOChannel], Pointer[Pointer[GError]]],[GIOStatus]],
    io_create_watch : CCodePointer[[Pointer[GIOChannel], GIOCondition],[Pointer[GSource]]],
    io_free : CCodePointer[[Pointer[GIOChannel]],[]],
    io_set_flags : CCodePointer[[Pointer[GIOChannel], GIOFlags, Pointer[Pointer[GError]]],[GIOStatus]],
    io_get_flags : CCodePointer[[Pointer[GIOChannel]],[GIOFlags]],
);

external (cdecl) g_io_channel_init(arg0:Pointer[GIOChannel]) : ;

external (cdecl) g_io_channel_ref(arg0:Pointer[GIOChannel]) : Pointer[GIOChannel];

external (cdecl) g_io_channel_unref(arg0:Pointer[GIOChannel]) : ;

external (cdecl) g_io_channel_read(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[gsize]) : GIOError;

external (cdecl) g_io_channel_write(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[gsize]) : GIOError;

external (cdecl) g_io_channel_seek(arg0:Pointer[GIOChannel], arg1:gint64, arg2:GSeekType) : GIOError;

external (cdecl) g_io_channel_close(arg0:Pointer[GIOChannel]) : ;

external (cdecl) g_io_channel_shutdown(arg0:Pointer[GIOChannel], arg1:gboolean, arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_add_watch_full(arg0:Pointer[GIOChannel], arg1:gint, arg2:GIOCondition, arg3:GIOFunc, arg4:gpointer, arg5:GDestroyNotify) : guint;

external (cdecl) g_io_create_watch(arg0:Pointer[GIOChannel], arg1:GIOCondition) : Pointer[GSource];

external (cdecl) g_io_add_watch(arg0:Pointer[GIOChannel], arg1:GIOCondition, arg2:GIOFunc, arg3:gpointer) : guint;

external (cdecl) g_io_channel_set_buffer_size(arg0:Pointer[GIOChannel], arg1:gsize) : ;

external (cdecl) g_io_channel_get_buffer_size(arg0:Pointer[GIOChannel]) : gsize;

external (cdecl) g_io_channel_get_buffer_condition(arg0:Pointer[GIOChannel]) : GIOCondition;

external (cdecl) g_io_channel_set_flags(arg0:Pointer[GIOChannel], arg1:GIOFlags, arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_get_flags(arg0:Pointer[GIOChannel]) : GIOFlags;

external (cdecl) g_io_channel_set_line_term(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) g_io_channel_get_line_term(arg0:Pointer[GIOChannel], arg1:Pointer[gint]) : Pointer[gchar];

external (cdecl) g_io_channel_set_buffered(arg0:Pointer[GIOChannel], arg1:gboolean) : ;

external (cdecl) g_io_channel_get_buffered(arg0:Pointer[GIOChannel]) : gboolean;

external (cdecl) g_io_channel_set_encoding(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_get_encoding(arg0:Pointer[GIOChannel]) : Pointer[gchar];

external (cdecl) g_io_channel_set_close_on_unref(arg0:Pointer[GIOChannel], arg1:gboolean) : ;

external (cdecl) g_io_channel_get_close_on_unref(arg0:Pointer[GIOChannel]) : gboolean;

external (cdecl) g_io_channel_flush(arg0:Pointer[GIOChannel], arg1:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_line(arg0:Pointer[GIOChannel], arg1:Pointer[Pointer[gchar]], arg2:Pointer[gsize], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_line_string(arg0:Pointer[GIOChannel], arg1:Pointer[GString], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_to_end(arg0:Pointer[GIOChannel], arg1:Pointer[Pointer[gchar]], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_chars(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_unichar(arg0:Pointer[GIOChannel], arg1:Pointer[gunichar], arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_write_chars(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gssize, arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_write_unichar(arg0:Pointer[GIOChannel], arg1:gunichar, arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_seek_position(arg0:Pointer[GIOChannel], arg1:gint64, arg2:GSeekType, arg3:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_new_file(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GIOChannel];

external (cdecl) g_io_channel_error_quark() : GQuark;

external (cdecl) g_io_channel_error_from_errno(arg0:gint) : GIOChannelError;

external (cdecl) g_io_channel_unix_new(arg0:CInt) : Pointer[GIOChannel];

external (cdecl) g_io_channel_unix_get_fd(arg0:Pointer[GIOChannel]) : gint;

external g_io_watch_funcs : GSourceFuncs;


alias GKeyFileError = CUInt;
alias G_KEY_FILE_ERROR_UNKNOWN_ENCODING = CUInt(0);
alias G_KEY_FILE_ERROR_PARSE = CUInt(1);
alias G_KEY_FILE_ERROR_NOT_FOUND = CUInt(2);
alias G_KEY_FILE_ERROR_KEY_NOT_FOUND = CUInt(3);
alias G_KEY_FILE_ERROR_GROUP_NOT_FOUND = CUInt(4);
alias G_KEY_FILE_ERROR_INVALID_VALUE = CUInt(5);

external (cdecl) g_key_file_error_quark() : GQuark;

alias Struct__GKeyFile = Opaque;

alias GKeyFile = Struct__GKeyFile;


alias GKeyFileFlags = CUInt;
alias G_KEY_FILE_NONE = CUInt(0);
alias G_KEY_FILE_KEEP_COMMENTS = CUInt(1);
alias G_KEY_FILE_KEEP_TRANSLATIONS = CUInt(2);

external (cdecl) g_key_file_new() : Pointer[GKeyFile];

external (cdecl) g_key_file_ref(arg0:Pointer[GKeyFile]) : Pointer[GKeyFile];

external (cdecl) g_key_file_unref(arg0:Pointer[GKeyFile]) : ;

external (cdecl) g_key_file_free(arg0:Pointer[GKeyFile]) : ;

external (cdecl) g_key_file_set_list_separator(arg0:Pointer[GKeyFile], arg1:gchar) : ;

external (cdecl) g_key_file_load_from_file(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:GKeyFileFlags, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_load_from_data(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:gsize, arg3:GKeyFileFlags, arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_load_from_dirs(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[gchar]], arg4:GKeyFileFlags, arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_load_from_data_dirs(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:GKeyFileFlags, arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_to_data(arg0:Pointer[GKeyFile], arg1:Pointer[gsize], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_key_file_get_start_group(arg0:Pointer[GKeyFile]) : Pointer[gchar];

external (cdecl) g_key_file_get_groups(arg0:Pointer[GKeyFile], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_key_file_get_keys(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_key_file_has_group(arg0:Pointer[GKeyFile], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_key_file_has_key(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_get_value(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_key_file_set_value(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) g_key_file_get_string(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_key_file_set_string(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : ;

external (cdecl) g_key_file_get_locale_string(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_key_file_set_locale_string(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar]) : ;

external (cdecl) g_key_file_get_boolean(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_set_boolean(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gboolean) : ;

external (cdecl) g_key_file_get_integer(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gint;

external (cdecl) g_key_file_set_integer(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint) : ;

external (cdecl) g_key_file_get_int64(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gint64;

external (cdecl) g_key_file_set_int64(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint64) : ;

external (cdecl) g_key_file_get_uint64(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : guint64;

external (cdecl) g_key_file_set_uint64(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:guint64) : ;

external (cdecl) g_key_file_get_double(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gdouble;

external (cdecl) g_key_file_set_double(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gdouble) : ;

external (cdecl) g_key_file_get_string_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_key_file_set_string_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[gchar]], arg4:gsize) : ;

external (cdecl) g_key_file_get_locale_string_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gsize], arg5:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_key_file_set_locale_string_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[Pointer[gchar]], arg5:gsize) : ;

external (cdecl) g_key_file_get_boolean_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gboolean];

external (cdecl) g_key_file_set_boolean_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gboolean], arg4:gsize) : ;

external (cdecl) g_key_file_get_integer_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gint];

external (cdecl) g_key_file_set_double_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gdouble], arg4:gsize) : ;

external (cdecl) g_key_file_get_double_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : Pointer[gdouble];

external (cdecl) g_key_file_set_integer_list(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gint], arg4:gsize) : ;

external (cdecl) g_key_file_set_comment(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_get_comment(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_key_file_remove_comment(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_remove_key(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_key_file_remove_group(arg0:Pointer[GKeyFile], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : gboolean;

alias Struct__GMappedFile = Opaque;

alias GMappedFile = Struct__GMappedFile;

external (cdecl) g_mapped_file_new(arg0:Pointer[gchar], arg1:gboolean, arg2:Pointer[Pointer[GError]]) : Pointer[GMappedFile];

external (cdecl) g_mapped_file_new_from_fd(arg0:gint, arg1:gboolean, arg2:Pointer[Pointer[GError]]) : Pointer[GMappedFile];

external (cdecl) g_mapped_file_get_length(arg0:Pointer[GMappedFile]) : gsize;

external (cdecl) g_mapped_file_get_contents(arg0:Pointer[GMappedFile]) : Pointer[gchar];

external (cdecl) g_mapped_file_get_bytes(arg0:Pointer[GMappedFile]) : Pointer[GBytes];

external (cdecl) g_mapped_file_ref(arg0:Pointer[GMappedFile]) : Pointer[GMappedFile];

external (cdecl) g_mapped_file_unref(arg0:Pointer[GMappedFile]) : ;

external (cdecl) g_mapped_file_free(arg0:Pointer[GMappedFile]) : ;


alias GMarkupError = CUInt;
alias G_MARKUP_ERROR_BAD_UTF8 = CUInt(0);
alias G_MARKUP_ERROR_EMPTY = CUInt(1);
alias G_MARKUP_ERROR_PARSE = CUInt(2);
alias G_MARKUP_ERROR_UNKNOWN_ELEMENT = CUInt(3);
alias G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = CUInt(4);
alias G_MARKUP_ERROR_INVALID_CONTENT = CUInt(5);
alias G_MARKUP_ERROR_MISSING_ATTRIBUTE = CUInt(6);

external (cdecl) g_markup_error_quark() : GQuark;


alias GMarkupParseFlags = CUInt;
alias G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = CUInt(1);
alias G_MARKUP_TREAT_CDATA_AS_TEXT = CUInt(2);
alias G_MARKUP_PREFIX_ERROR_POSITION = CUInt(4);

alias Struct__GMarkupParseContext = Opaque;

alias GMarkupParseContext = Struct__GMarkupParseContext;

alias GMarkupParser = Struct__GMarkupParser;

record Struct__GMarkupParser (
    start_element : CCodePointer[[Pointer[GMarkupParseContext], Pointer[gchar], Pointer[Pointer[gchar]], Pointer[Pointer[gchar]], gpointer, Pointer[Pointer[GError]]],[]],
    end_element : CCodePointer[[Pointer[GMarkupParseContext], Pointer[gchar], gpointer, Pointer[Pointer[GError]]],[]],
    text : CCodePointer[[Pointer[GMarkupParseContext], Pointer[gchar], gsize, gpointer, Pointer[Pointer[GError]]],[]],
    passthrough : CCodePointer[[Pointer[GMarkupParseContext], Pointer[gchar], gsize, gpointer, Pointer[Pointer[GError]]],[]],
    error : CCodePointer[[Pointer[GMarkupParseContext], Pointer[GError], gpointer],[]],
);

external (cdecl) g_markup_parse_context_new(arg0:Pointer[GMarkupParser], arg1:GMarkupParseFlags, arg2:gpointer, arg3:GDestroyNotify) : Pointer[GMarkupParseContext];

external (cdecl) g_markup_parse_context_free(arg0:Pointer[GMarkupParseContext]) : ;

external (cdecl) g_markup_parse_context_parse(arg0:Pointer[GMarkupParseContext], arg1:Pointer[gchar], arg2:gssize, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_markup_parse_context_push(arg0:Pointer[GMarkupParseContext], arg1:Pointer[GMarkupParser], arg2:gpointer) : ;

external (cdecl) g_markup_parse_context_pop(arg0:Pointer[GMarkupParseContext]) : gpointer;

external (cdecl) g_markup_parse_context_end_parse(arg0:Pointer[GMarkupParseContext], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_markup_parse_context_get_element(arg0:Pointer[GMarkupParseContext]) : Pointer[gchar];

external (cdecl) g_markup_parse_context_get_element_stack(arg0:Pointer[GMarkupParseContext]) : Pointer[GSList];

external (cdecl) g_markup_parse_context_get_position(arg0:Pointer[GMarkupParseContext], arg1:Pointer[gint], arg2:Pointer[gint]) : ;

external (cdecl) g_markup_parse_context_get_user_data(arg0:Pointer[GMarkupParseContext]) : gpointer;

external (cdecl) g_markup_escape_text(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_markup_printf_escaped(arg0:Pointer[CChar], ..) : Pointer[gchar];

external (cdecl) g_markup_vprintf_escaped(arg0:Pointer[CChar], arg1:Pointer[__va_list_tag]) : Pointer[gchar];


alias GMarkupCollectType = CUInt;
alias G_MARKUP_COLLECT_INVALID = CUInt(0);
alias G_MARKUP_COLLECT_STRING = CUInt(1);
alias G_MARKUP_COLLECT_STRDUP = CUInt(2);
alias G_MARKUP_COLLECT_BOOLEAN = CUInt(3);
alias G_MARKUP_COLLECT_TRISTATE = CUInt(4);
alias G_MARKUP_COLLECT_OPTIONAL = CUInt(65536);

external (cdecl) g_markup_collect_attributes(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[gchar]], arg3:Pointer[Pointer[GError]], arg4:GMarkupCollectType, arg5:Pointer[gchar], ..) : gboolean;

external (cdecl) g_printf_string_upper_bound(arg0:Pointer[gchar], arg1:Pointer[__va_list_tag]) : gsize;


alias GLogLevelFlags = CInt;
alias G_LOG_FLAG_RECURSION = CInt(1);
alias G_LOG_FLAG_FATAL = CInt(2);
alias G_LOG_LEVEL_ERROR = CInt(4);
alias G_LOG_LEVEL_CRITICAL = CInt(8);
alias G_LOG_LEVEL_WARNING = CInt(16);
alias G_LOG_LEVEL_MESSAGE = CInt(32);
alias G_LOG_LEVEL_INFO = CInt(64);
alias G_LOG_LEVEL_DEBUG = CInt(128);
alias G_LOG_LEVEL_MASK = CInt(-4);

alias GLogFunc = CCodePointer[[Pointer[gchar], GLogLevelFlags, Pointer[gchar], gpointer],[]];

external (cdecl) g_log_set_handler(arg0:Pointer[gchar], arg1:GLogLevelFlags, arg2:GLogFunc, arg3:gpointer) : guint;

external (cdecl) g_log_remove_handler(arg0:Pointer[gchar], arg1:guint) : ;

external (cdecl) g_log_default_handler(arg0:Pointer[gchar], arg1:GLogLevelFlags, arg2:Pointer[gchar], arg3:gpointer) : ;

external (cdecl) g_log_set_default_handler(arg0:GLogFunc, arg1:gpointer) : GLogFunc;

external (cdecl) g_log(arg0:Pointer[gchar], arg1:GLogLevelFlags, arg2:Pointer[gchar], ..) : ;

external (cdecl) g_logv(arg0:Pointer[gchar], arg1:GLogLevelFlags, arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : ;

external (cdecl) g_log_set_fatal_mask(arg0:Pointer[gchar], arg1:GLogLevelFlags) : GLogLevelFlags;

external (cdecl) g_log_set_always_fatal(arg0:GLogLevelFlags) : GLogLevelFlags;

external (cdecl) _g_log_fallback_handler(arg0:Pointer[gchar], arg1:GLogLevelFlags, arg2:Pointer[gchar], arg3:gpointer) : ;

external (cdecl) g_return_if_fail_warning(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:Pointer[CChar]) : ;

external (cdecl) g_warn_message(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar]) : ;

external (cdecl) g_assert_warning(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar]) : ;

alias GPrintFunc = CCodePointer[[Pointer[gchar]],[]];

external (cdecl) g_print(arg0:Pointer[gchar], ..) : ;

external (cdecl) g_set_print_handler(arg0:GPrintFunc) : GPrintFunc;

external (cdecl) g_printerr(arg0:Pointer[gchar], ..) : ;

external (cdecl) g_set_printerr_handler(arg0:GPrintFunc) : GPrintFunc;

alias Struct__GOptionContext = Opaque;

alias GOptionContext = Struct__GOptionContext;

alias Struct__GOptionGroup = Opaque;

alias GOptionGroup = Struct__GOptionGroup;

alias GOptionEntry = Struct__GOptionEntry;


alias GOptionFlags = CUInt;
alias G_OPTION_FLAG_HIDDEN = CUInt(1);
alias G_OPTION_FLAG_IN_MAIN = CUInt(2);
alias G_OPTION_FLAG_REVERSE = CUInt(4);
alias G_OPTION_FLAG_NO_ARG = CUInt(8);
alias G_OPTION_FLAG_FILENAME = CUInt(16);
alias G_OPTION_FLAG_OPTIONAL_ARG = CUInt(32);
alias G_OPTION_FLAG_NOALIAS = CUInt(64);


alias GOptionArg = CUInt;
alias G_OPTION_ARG_NONE = CUInt(0);
alias G_OPTION_ARG_STRING = CUInt(1);
alias G_OPTION_ARG_INT = CUInt(2);
alias G_OPTION_ARG_CALLBACK = CUInt(3);
alias G_OPTION_ARG_FILENAME = CUInt(4);
alias G_OPTION_ARG_STRING_ARRAY = CUInt(5);
alias G_OPTION_ARG_FILENAME_ARRAY = CUInt(6);
alias G_OPTION_ARG_DOUBLE = CUInt(7);
alias G_OPTION_ARG_INT64 = CUInt(8);

alias GOptionArgFunc = CCodePointer[[Pointer[gchar], Pointer[gchar], gpointer, Pointer[Pointer[GError]]],[gboolean]];

alias GOptionParseFunc = CCodePointer[[Pointer[GOptionContext], Pointer[GOptionGroup], gpointer, Pointer[Pointer[GError]]],[gboolean]];

alias GOptionErrorFunc = CCodePointer[[Pointer[GOptionContext], Pointer[GOptionGroup], gpointer, Pointer[Pointer[GError]]],[]];


alias GOptionError = CUInt;
alias G_OPTION_ERROR_UNKNOWN_OPTION = CUInt(0);
alias G_OPTION_ERROR_BAD_VALUE = CUInt(1);
alias G_OPTION_ERROR_FAILED = CUInt(2);

external (cdecl) g_option_error_quark() : GQuark;

record Struct__GOptionEntry (
    long_name : Pointer[gchar],
    short_name : gchar,
    flags : gint,
    arg : GOptionArg,
    arg_data : gpointer,
    description : Pointer[gchar],
    arg_description : Pointer[gchar],
);

external (cdecl) g_option_context_new(arg0:Pointer[gchar]) : Pointer[GOptionContext];

external (cdecl) g_option_context_set_summary(arg0:Pointer[GOptionContext], arg1:Pointer[gchar]) : ;

external (cdecl) g_option_context_get_summary(arg0:Pointer[GOptionContext]) : Pointer[gchar];

external (cdecl) g_option_context_set_description(arg0:Pointer[GOptionContext], arg1:Pointer[gchar]) : ;

external (cdecl) g_option_context_get_description(arg0:Pointer[GOptionContext]) : Pointer[gchar];

external (cdecl) g_option_context_free(arg0:Pointer[GOptionContext]) : ;

external (cdecl) g_option_context_set_help_enabled(arg0:Pointer[GOptionContext], arg1:gboolean) : ;

external (cdecl) g_option_context_get_help_enabled(arg0:Pointer[GOptionContext]) : gboolean;

external (cdecl) g_option_context_set_ignore_unknown_options(arg0:Pointer[GOptionContext], arg1:gboolean) : ;

external (cdecl) g_option_context_get_ignore_unknown_options(arg0:Pointer[GOptionContext]) : gboolean;

external (cdecl) g_option_context_add_main_entries(arg0:Pointer[GOptionContext], arg1:Pointer[GOptionEntry], arg2:Pointer[gchar]) : ;

external (cdecl) g_option_context_parse(arg0:Pointer[GOptionContext], arg1:Pointer[gint], arg2:Pointer[Pointer[Pointer[gchar]]], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_option_context_set_translate_func(arg0:Pointer[GOptionContext], arg1:GTranslateFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_option_context_set_translation_domain(arg0:Pointer[GOptionContext], arg1:Pointer[gchar]) : ;

external (cdecl) g_option_context_add_group(arg0:Pointer[GOptionContext], arg1:Pointer[GOptionGroup]) : ;

external (cdecl) g_option_context_set_main_group(arg0:Pointer[GOptionContext], arg1:Pointer[GOptionGroup]) : ;

external (cdecl) g_option_context_get_main_group(arg0:Pointer[GOptionContext]) : Pointer[GOptionGroup];

external (cdecl) g_option_context_get_help(arg0:Pointer[GOptionContext], arg1:gboolean, arg2:Pointer[GOptionGroup]) : Pointer[gchar];

external (cdecl) g_option_group_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gpointer, arg4:GDestroyNotify) : Pointer[GOptionGroup];

external (cdecl) g_option_group_set_parse_hooks(arg0:Pointer[GOptionGroup], arg1:GOptionParseFunc, arg2:GOptionParseFunc) : ;

external (cdecl) g_option_group_set_error_hook(arg0:Pointer[GOptionGroup], arg1:GOptionErrorFunc) : ;

external (cdecl) g_option_group_free(arg0:Pointer[GOptionGroup]) : ;

external (cdecl) g_option_group_add_entries(arg0:Pointer[GOptionGroup], arg1:Pointer[GOptionEntry]) : ;

external (cdecl) g_option_group_set_translate_func(arg0:Pointer[GOptionGroup], arg1:GTranslateFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_option_group_set_translation_domain(arg0:Pointer[GOptionGroup], arg1:Pointer[gchar]) : ;

alias Struct__GPatternSpec = Opaque;

alias GPatternSpec = Struct__GPatternSpec;

external (cdecl) g_pattern_spec_new(arg0:Pointer[gchar]) : Pointer[GPatternSpec];

external (cdecl) g_pattern_spec_free(arg0:Pointer[GPatternSpec]) : ;

external (cdecl) g_pattern_spec_equal(arg0:Pointer[GPatternSpec], arg1:Pointer[GPatternSpec]) : gboolean;

external (cdecl) g_pattern_match(arg0:Pointer[GPatternSpec], arg1:guint, arg2:Pointer[gchar], arg3:Pointer[gchar]) : gboolean;

external (cdecl) g_pattern_match_string(arg0:Pointer[GPatternSpec], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_pattern_match_simple(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_spaced_primes_closest(arg0:guint) : guint;

external (cdecl) g_qsort_with_data(arg0:gconstpointer, arg1:gint, arg2:gsize, arg3:GCompareDataFunc, arg4:gpointer) : ;

alias GQueue = Struct__GQueue;

record Struct__GQueue (
    head : Pointer[GList],
    tail : Pointer[GList],
    length : guint,
);

external (cdecl) g_queue_new() : Pointer[GQueue];

external (cdecl) g_queue_free(arg0:Pointer[GQueue]) : ;

external (cdecl) g_queue_free_full(arg0:Pointer[GQueue], arg1:GDestroyNotify) : ;

external (cdecl) g_queue_init(arg0:Pointer[GQueue]) : ;

external (cdecl) g_queue_clear(arg0:Pointer[GQueue]) : ;

external (cdecl) g_queue_is_empty(arg0:Pointer[GQueue]) : gboolean;

external (cdecl) g_queue_get_length(arg0:Pointer[GQueue]) : guint;

external (cdecl) g_queue_reverse(arg0:Pointer[GQueue]) : ;

external (cdecl) g_queue_copy(arg0:Pointer[GQueue]) : Pointer[GQueue];

external (cdecl) g_queue_foreach(arg0:Pointer[GQueue], arg1:GFunc, arg2:gpointer) : ;

external (cdecl) g_queue_find(arg0:Pointer[GQueue], arg1:gconstpointer) : Pointer[GList];

external (cdecl) g_queue_find_custom(arg0:Pointer[GQueue], arg1:gconstpointer, arg2:GCompareFunc) : Pointer[GList];

external (cdecl) g_queue_sort(arg0:Pointer[GQueue], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_queue_push_head(arg0:Pointer[GQueue], arg1:gpointer) : ;

external (cdecl) g_queue_push_tail(arg0:Pointer[GQueue], arg1:gpointer) : ;

external (cdecl) g_queue_push_nth(arg0:Pointer[GQueue], arg1:gpointer, arg2:gint) : ;

external (cdecl) g_queue_pop_head(arg0:Pointer[GQueue]) : gpointer;

external (cdecl) g_queue_pop_tail(arg0:Pointer[GQueue]) : gpointer;

external (cdecl) g_queue_pop_nth(arg0:Pointer[GQueue], arg1:guint) : gpointer;

external (cdecl) g_queue_peek_head(arg0:Pointer[GQueue]) : gpointer;

external (cdecl) g_queue_peek_tail(arg0:Pointer[GQueue]) : gpointer;

external (cdecl) g_queue_peek_nth(arg0:Pointer[GQueue], arg1:guint) : gpointer;

external (cdecl) g_queue_index(arg0:Pointer[GQueue], arg1:gconstpointer) : gint;

external (cdecl) g_queue_remove(arg0:Pointer[GQueue], arg1:gconstpointer) : gboolean;

external (cdecl) g_queue_remove_all(arg0:Pointer[GQueue], arg1:gconstpointer) : guint;

external (cdecl) g_queue_insert_before(arg0:Pointer[GQueue], arg1:Pointer[GList], arg2:gpointer) : ;

external (cdecl) g_queue_insert_after(arg0:Pointer[GQueue], arg1:Pointer[GList], arg2:gpointer) : ;

external (cdecl) g_queue_insert_sorted(arg0:Pointer[GQueue], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : ;

external (cdecl) g_queue_push_head_link(arg0:Pointer[GQueue], arg1:Pointer[GList]) : ;

external (cdecl) g_queue_push_tail_link(arg0:Pointer[GQueue], arg1:Pointer[GList]) : ;

external (cdecl) g_queue_push_nth_link(arg0:Pointer[GQueue], arg1:gint, arg2:Pointer[GList]) : ;

external (cdecl) g_queue_pop_head_link(arg0:Pointer[GQueue]) : Pointer[GList];

external (cdecl) g_queue_pop_tail_link(arg0:Pointer[GQueue]) : Pointer[GList];

external (cdecl) g_queue_pop_nth_link(arg0:Pointer[GQueue], arg1:guint) : Pointer[GList];

external (cdecl) g_queue_peek_head_link(arg0:Pointer[GQueue]) : Pointer[GList];

external (cdecl) g_queue_peek_tail_link(arg0:Pointer[GQueue]) : Pointer[GList];

external (cdecl) g_queue_peek_nth_link(arg0:Pointer[GQueue], arg1:guint) : Pointer[GList];

external (cdecl) g_queue_link_index(arg0:Pointer[GQueue], arg1:Pointer[GList]) : gint;

external (cdecl) g_queue_unlink(arg0:Pointer[GQueue], arg1:Pointer[GList]) : ;

external (cdecl) g_queue_delete_link(arg0:Pointer[GQueue], arg1:Pointer[GList]) : ;

alias Struct__GRand = Opaque;

alias GRand = Struct__GRand;

external (cdecl) g_rand_new_with_seed(arg0:guint32) : Pointer[GRand];

external (cdecl) g_rand_new_with_seed_array(arg0:Pointer[guint32], arg1:guint) : Pointer[GRand];

external (cdecl) g_rand_new() : Pointer[GRand];

external (cdecl) g_rand_free(arg0:Pointer[GRand]) : ;

external (cdecl) g_rand_copy(arg0:Pointer[GRand]) : Pointer[GRand];

external (cdecl) g_rand_set_seed(arg0:Pointer[GRand], arg1:guint32) : ;

external (cdecl) g_rand_set_seed_array(arg0:Pointer[GRand], arg1:Pointer[guint32], arg2:guint) : ;

external (cdecl) g_rand_int(arg0:Pointer[GRand]) : guint32;

external (cdecl) g_rand_int_range(arg0:Pointer[GRand], arg1:gint32, arg2:gint32) : gint32;

external (cdecl) g_rand_double(arg0:Pointer[GRand]) : gdouble;

external (cdecl) g_rand_double_range(arg0:Pointer[GRand], arg1:gdouble, arg2:gdouble) : gdouble;

external (cdecl) g_random_set_seed(arg0:guint32) : ;

external (cdecl) g_random_int() : guint32;

external (cdecl) g_random_int_range(arg0:gint32, arg1:gint32) : gint32;

external (cdecl) g_random_double() : gdouble;

external (cdecl) g_random_double_range(arg0:gdouble, arg1:gdouble) : gdouble;


alias GRegexError = CUInt;
alias G_REGEX_ERROR_COMPILE = CUInt(0);
alias G_REGEX_ERROR_OPTIMIZE = CUInt(1);
alias G_REGEX_ERROR_REPLACE = CUInt(2);
alias G_REGEX_ERROR_MATCH = CUInt(3);
alias G_REGEX_ERROR_INTERNAL = CUInt(4);
alias G_REGEX_ERROR_STRAY_BACKSLASH = CUInt(101);
alias G_REGEX_ERROR_MISSING_CONTROL_CHAR = CUInt(102);
alias G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = CUInt(103);
alias G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = CUInt(104);
alias G_REGEX_ERROR_QUANTIFIER_TOO_BIG = CUInt(105);
alias G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = CUInt(106);
alias G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = CUInt(107);
alias G_REGEX_ERROR_RANGE_OUT_OF_ORDER = CUInt(108);
alias G_REGEX_ERROR_NOTHING_TO_REPEAT = CUInt(109);
alias G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = CUInt(112);
alias G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = CUInt(113);
alias G_REGEX_ERROR_UNMATCHED_PARENTHESIS = CUInt(114);
alias G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = CUInt(115);
alias G_REGEX_ERROR_UNTERMINATED_COMMENT = CUInt(118);
alias G_REGEX_ERROR_EXPRESSION_TOO_LARGE = CUInt(120);
alias G_REGEX_ERROR_MEMORY_ERROR = CUInt(121);
alias G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = CUInt(125);
alias G_REGEX_ERROR_MALFORMED_CONDITION = CUInt(126);
alias G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = CUInt(127);
alias G_REGEX_ERROR_ASSERTION_EXPECTED = CUInt(128);
alias G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = CUInt(130);
alias G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = CUInt(131);
alias G_REGEX_ERROR_HEX_CODE_TOO_LARGE = CUInt(134);
alias G_REGEX_ERROR_INVALID_CONDITION = CUInt(135);
alias G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = CUInt(136);
alias G_REGEX_ERROR_INFINITE_LOOP = CUInt(140);
alias G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = CUInt(142);
alias G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = CUInt(143);
alias G_REGEX_ERROR_MALFORMED_PROPERTY = CUInt(146);
alias G_REGEX_ERROR_UNKNOWN_PROPERTY = CUInt(147);
alias G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = CUInt(148);
alias G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = CUInt(149);
alias G_REGEX_ERROR_INVALID_OCTAL_VALUE = CUInt(151);
alias G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = CUInt(154);
alias G_REGEX_ERROR_DEFINE_REPETION = CUInt(155);
alias G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = CUInt(156);
alias G_REGEX_ERROR_MISSING_BACK_REFERENCE = CUInt(157);
alias G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = CUInt(158);
alias G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = CUInt(159);
alias G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = CUInt(160);
alias G_REGEX_ERROR_NUMBER_TOO_BIG = CUInt(161);
alias G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = CUInt(162);
alias G_REGEX_ERROR_MISSING_DIGIT = CUInt(163);
alias G_REGEX_ERROR_INVALID_DATA_CHARACTER = CUInt(164);
alias G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = CUInt(165);
alias G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = CUInt(166);
alias G_REGEX_ERROR_INVALID_CONTROL_CHAR = CUInt(168);
alias G_REGEX_ERROR_MISSING_NAME = CUInt(169);
alias G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = CUInt(171);
alias G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = CUInt(172);
alias G_REGEX_ERROR_NAME_TOO_LONG = CUInt(175);
alias G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = CUInt(176);

external (cdecl) g_regex_error_quark() : GQuark;


alias GRegexCompileFlags = CUInt;
alias G_REGEX_CASELESS = CUInt(1);
alias G_REGEX_MULTILINE = CUInt(2);
alias G_REGEX_DOTALL = CUInt(4);
alias G_REGEX_EXTENDED = CUInt(8);
alias G_REGEX_ANCHORED = CUInt(16);
alias G_REGEX_DOLLAR_ENDONLY = CUInt(32);
alias G_REGEX_UNGREEDY = CUInt(512);
alias G_REGEX_RAW = CUInt(2048);
alias G_REGEX_NO_AUTO_CAPTURE = CUInt(4096);
alias G_REGEX_OPTIMIZE = CUInt(8192);
alias G_REGEX_FIRSTLINE = CUInt(262144);
alias G_REGEX_DUPNAMES = CUInt(524288);
alias G_REGEX_NEWLINE_CR = CUInt(1048576);
alias G_REGEX_NEWLINE_LF = CUInt(2097152);
alias G_REGEX_NEWLINE_CRLF = CUInt(3145728);
alias G_REGEX_NEWLINE_ANYCRLF = CUInt(5242880);
alias G_REGEX_BSR_ANYCRLF = CUInt(8388608);
alias G_REGEX_JAVASCRIPT_COMPAT = CUInt(33554432);


alias GRegexMatchFlags = CUInt;
alias G_REGEX_MATCH_ANCHORED = CUInt(16);
alias G_REGEX_MATCH_NOTBOL = CUInt(128);
alias G_REGEX_MATCH_NOTEOL = CUInt(256);
alias G_REGEX_MATCH_NOTEMPTY = CUInt(1024);
alias G_REGEX_MATCH_PARTIAL = CUInt(32768);
alias G_REGEX_MATCH_NEWLINE_CR = CUInt(1048576);
alias G_REGEX_MATCH_NEWLINE_LF = CUInt(2097152);
alias G_REGEX_MATCH_NEWLINE_CRLF = CUInt(3145728);
alias G_REGEX_MATCH_NEWLINE_ANY = CUInt(4194304);
alias G_REGEX_MATCH_NEWLINE_ANYCRLF = CUInt(5242880);
alias G_REGEX_MATCH_BSR_ANYCRLF = CUInt(8388608);
alias G_REGEX_MATCH_BSR_ANY = CUInt(16777216);
alias G_REGEX_MATCH_PARTIAL_SOFT = CUInt(32768);
alias G_REGEX_MATCH_PARTIAL_HARD = CUInt(134217728);
alias G_REGEX_MATCH_NOTEMPTY_ATSTART = CUInt(268435456);

alias Struct__GRegex = Opaque;

alias GRegex = Struct__GRegex;

alias Struct__GMatchInfo = Opaque;

alias GMatchInfo = Struct__GMatchInfo;

alias GRegexEvalCallback = CCodePointer[[Pointer[GMatchInfo], Pointer[GString], gpointer],[gboolean]];

external (cdecl) g_regex_new(arg0:Pointer[gchar], arg1:GRegexCompileFlags, arg2:GRegexMatchFlags, arg3:Pointer[Pointer[GError]]) : Pointer[GRegex];

external (cdecl) g_regex_ref(arg0:Pointer[GRegex]) : Pointer[GRegex];

external (cdecl) g_regex_unref(arg0:Pointer[GRegex]) : ;

external (cdecl) g_regex_get_pattern(arg0:Pointer[GRegex]) : Pointer[gchar];

external (cdecl) g_regex_get_max_backref(arg0:Pointer[GRegex]) : gint;

external (cdecl) g_regex_get_capture_count(arg0:Pointer[GRegex]) : gint;

external (cdecl) g_regex_get_has_cr_or_lf(arg0:Pointer[GRegex]) : gboolean;

external (cdecl) g_regex_get_string_number(arg0:Pointer[GRegex], arg1:Pointer[gchar]) : gint;

external (cdecl) g_regex_escape_string(arg0:Pointer[gchar], arg1:gint) : Pointer[gchar];

external (cdecl) g_regex_escape_nul(arg0:Pointer[gchar], arg1:gint) : Pointer[gchar];

external (cdecl) g_regex_get_compile_flags(arg0:Pointer[GRegex]) : GRegexCompileFlags;

external (cdecl) g_regex_get_match_flags(arg0:Pointer[GRegex]) : GRegexMatchFlags;

external (cdecl) g_regex_match_simple(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:GRegexCompileFlags, arg3:GRegexMatchFlags) : gboolean;

external (cdecl) g_regex_match(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:GRegexMatchFlags, arg3:Pointer[Pointer[GMatchInfo]]) : gboolean;

external (cdecl) g_regex_match_full(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:GRegexMatchFlags, arg5:Pointer[Pointer[GMatchInfo]], arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_regex_match_all(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:GRegexMatchFlags, arg3:Pointer[Pointer[GMatchInfo]]) : gboolean;

external (cdecl) g_regex_match_all_full(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:GRegexMatchFlags, arg5:Pointer[Pointer[GMatchInfo]], arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_regex_split_simple(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:GRegexCompileFlags, arg3:GRegexMatchFlags) : Pointer[Pointer[gchar]];

external (cdecl) g_regex_split(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:GRegexMatchFlags) : Pointer[Pointer[gchar]];

external (cdecl) g_regex_split_full(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:GRegexMatchFlags, arg5:gint, arg6:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_regex_replace(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:Pointer[gchar], arg5:GRegexMatchFlags, arg6:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_regex_replace_literal(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:Pointer[gchar], arg5:GRegexMatchFlags, arg6:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_regex_replace_eval(arg0:Pointer[GRegex], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:GRegexMatchFlags, arg5:GRegexEvalCallback, arg6:gpointer, arg7:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_regex_check_replacement(arg0:Pointer[gchar], arg1:Pointer[gboolean], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_match_info_get_regex(arg0:Pointer[GMatchInfo]) : Pointer[GRegex];

external (cdecl) g_match_info_get_string(arg0:Pointer[GMatchInfo]) : Pointer[gchar];

external (cdecl) g_match_info_ref(arg0:Pointer[GMatchInfo]) : Pointer[GMatchInfo];

external (cdecl) g_match_info_unref(arg0:Pointer[GMatchInfo]) : ;

external (cdecl) g_match_info_free(arg0:Pointer[GMatchInfo]) : ;

external (cdecl) g_match_info_next(arg0:Pointer[GMatchInfo], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_match_info_matches(arg0:Pointer[GMatchInfo]) : gboolean;

external (cdecl) g_match_info_get_match_count(arg0:Pointer[GMatchInfo]) : gint;

external (cdecl) g_match_info_is_partial_match(arg0:Pointer[GMatchInfo]) : gboolean;

external (cdecl) g_match_info_expand_references(arg0:Pointer[GMatchInfo], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_match_info_fetch(arg0:Pointer[GMatchInfo], arg1:gint) : Pointer[gchar];

external (cdecl) g_match_info_fetch_pos(arg0:Pointer[GMatchInfo], arg1:gint, arg2:Pointer[gint], arg3:Pointer[gint]) : gboolean;

external (cdecl) g_match_info_fetch_named(arg0:Pointer[GMatchInfo], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_match_info_fetch_named_pos(arg0:Pointer[GMatchInfo], arg1:Pointer[gchar], arg2:Pointer[gint], arg3:Pointer[gint]) : gboolean;

external (cdecl) g_match_info_fetch_all(arg0:Pointer[GMatchInfo]) : Pointer[Pointer[gchar]];

alias GScanner = Struct__GScanner;

alias GScannerConfig = Struct__GScannerConfig;

alias GTokenValue = Union__GTokenValue;

alias GScannerMsgFunc = CCodePointer[[Pointer[GScanner], Pointer[gchar], gboolean],[]];


alias GErrorType = CUInt;
alias G_ERR_UNKNOWN = CUInt(0);
alias G_ERR_UNEXP_EOF = CUInt(1);
alias G_ERR_UNEXP_EOF_IN_STRING = CUInt(2);
alias G_ERR_UNEXP_EOF_IN_COMMENT = CUInt(3);
alias G_ERR_NON_DIGIT_IN_CONST = CUInt(4);
alias G_ERR_DIGIT_RADIX = CUInt(5);
alias G_ERR_FLOAT_RADIX = CUInt(6);
alias G_ERR_FLOAT_MALFORMED = CUInt(7);


alias GTokenType = CUInt;
alias G_TOKEN_EOF = CUInt(0);
alias G_TOKEN_LEFT_PAREN = CUInt(40);
alias G_TOKEN_RIGHT_PAREN = CUInt(41);
alias G_TOKEN_LEFT_CURLY = CUInt(123);
alias G_TOKEN_RIGHT_CURLY = CUInt(125);
alias G_TOKEN_LEFT_BRACE = CUInt(91);
alias G_TOKEN_RIGHT_BRACE = CUInt(93);
alias G_TOKEN_EQUAL_SIGN = CUInt(61);
alias G_TOKEN_COMMA = CUInt(44);
alias G_TOKEN_NONE = CUInt(256);
alias G_TOKEN_ERROR = CUInt(257);
alias G_TOKEN_CHAR = CUInt(258);
alias G_TOKEN_BINARY = CUInt(259);
alias G_TOKEN_OCTAL = CUInt(260);
alias G_TOKEN_INT = CUInt(261);
alias G_TOKEN_HEX = CUInt(262);
alias G_TOKEN_FLOAT = CUInt(263);
alias G_TOKEN_STRING = CUInt(264);
alias G_TOKEN_SYMBOL = CUInt(265);
alias G_TOKEN_IDENTIFIER = CUInt(266);
alias G_TOKEN_IDENTIFIER_NULL = CUInt(267);
alias G_TOKEN_COMMENT_SINGLE = CUInt(268);
alias G_TOKEN_COMMENT_MULTI = CUInt(269);
alias G_TOKEN_LAST = CUInt(270);

alias Union__GTokenValue = Union[
    /* v_symbol */ gpointer,
    /* v_identifier */ Pointer[gchar],
    /* v_binary */ gulong,
    /* v_octal */ gulong,
    /* v_int */ gulong,
    /* v_int64 */ guint64,
    /* v_float */ gdouble,
    /* v_hex */ gulong,
    /* v_string */ Pointer[gchar],
    /* v_comment */ Pointer[gchar],
    /* v_char */ guchar,
    /* v_error */ guint,
];

record Struct__GScannerConfig (
    cset_skip_characters : Pointer[gchar],
    cset_identifier_first : Pointer[gchar],
    cset_identifier_nth : Pointer[gchar],
    cpair_comment_single : Pointer[gchar],
    case_sensitive : guint,
    skip_comment_multi : guint,
    skip_comment_single : guint,
    scan_comment_multi : guint,
    scan_identifier : guint,
    scan_identifier_1char : guint,
    scan_identifier_NULL : guint,
    scan_symbols : guint,
    scan_binary : guint,
    scan_octal : guint,
    scan_float : guint,
    scan_hex : guint,
    scan_hex_dollar : guint,
    scan_string_sq : guint,
    scan_string_dq : guint,
    numbers_2_int : guint,
    int_2_float : guint,
    identifier_2_string : guint,
    char_2_token : guint,
    symbol_2_token : guint,
    scope_0_fallback : guint,
    store_int64 : guint,
    padding_dummy : guint,
);

record Struct__GScanner (
    user_data : gpointer,
    max_parse_errors : guint,
    parse_errors : guint,
    input_name : Pointer[gchar],
    qdata : Pointer[GData],
    config : Pointer[GScannerConfig],
    token : GTokenType,
    value : GTokenValue,
    line : guint,
    position : guint,
    next_token : GTokenType,
    next_value : GTokenValue,
    next_line : guint,
    next_position : guint,
    symbol_table : Pointer[GHashTable],
    input_fd : gint,
    text : Pointer[gchar],
    text_end : Pointer[gchar],
    buffer : Pointer[gchar],
    scope_id : guint,
    msg_handler : GScannerMsgFunc,
);

external (cdecl) g_scanner_new(arg0:Pointer[GScannerConfig]) : Pointer[GScanner];

external (cdecl) g_scanner_destroy(arg0:Pointer[GScanner]) : ;

external (cdecl) g_scanner_input_file(arg0:Pointer[GScanner], arg1:gint) : ;

external (cdecl) g_scanner_sync_file_offset(arg0:Pointer[GScanner]) : ;

external (cdecl) g_scanner_input_text(arg0:Pointer[GScanner], arg1:Pointer[gchar], arg2:guint) : ;

external (cdecl) g_scanner_get_next_token(arg0:Pointer[GScanner]) : GTokenType;

external (cdecl) g_scanner_peek_next_token(arg0:Pointer[GScanner]) : GTokenType;

external (cdecl) g_scanner_cur_token(arg0:Pointer[GScanner]) : GTokenType;

external (cdecl) g_scanner_cur_value(arg0:Pointer[GScanner]) : GTokenValue;

external (cdecl) g_scanner_cur_line(arg0:Pointer[GScanner]) : guint;

external (cdecl) g_scanner_cur_position(arg0:Pointer[GScanner]) : guint;

external (cdecl) g_scanner_eof(arg0:Pointer[GScanner]) : gboolean;

external (cdecl) g_scanner_set_scope(arg0:Pointer[GScanner], arg1:guint) : guint;

external (cdecl) g_scanner_scope_add_symbol(arg0:Pointer[GScanner], arg1:guint, arg2:Pointer[gchar], arg3:gpointer) : ;

external (cdecl) g_scanner_scope_remove_symbol(arg0:Pointer[GScanner], arg1:guint, arg2:Pointer[gchar]) : ;

external (cdecl) g_scanner_scope_lookup_symbol(arg0:Pointer[GScanner], arg1:guint, arg2:Pointer[gchar]) : gpointer;

external (cdecl) g_scanner_scope_foreach_symbol(arg0:Pointer[GScanner], arg1:guint, arg2:GHFunc, arg3:gpointer) : ;

external (cdecl) g_scanner_lookup_symbol(arg0:Pointer[GScanner], arg1:Pointer[gchar]) : gpointer;

external (cdecl) g_scanner_unexp_token(arg0:Pointer[GScanner], arg1:GTokenType, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:gint) : ;

external (cdecl) g_scanner_error(arg0:Pointer[GScanner], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_scanner_warn(arg0:Pointer[GScanner], arg1:Pointer[gchar], ..) : ;

alias Struct__GSequence = Opaque;

alias GSequence = Struct__GSequence;

alias Struct__GSequenceNode = Opaque;

alias GSequenceIter = Struct__GSequenceNode;

alias GSequenceIterCompareFunc = CCodePointer[[Pointer[GSequenceIter], Pointer[GSequenceIter], gpointer],[gint]];

external (cdecl) g_sequence_new(arg0:GDestroyNotify) : Pointer[GSequence];

external (cdecl) g_sequence_free(arg0:Pointer[GSequence]) : ;

external (cdecl) g_sequence_get_length(arg0:Pointer[GSequence]) : gint;

external (cdecl) g_sequence_foreach(arg0:Pointer[GSequence], arg1:GFunc, arg2:gpointer) : ;

external (cdecl) g_sequence_foreach_range(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter], arg2:GFunc, arg3:gpointer) : ;

external (cdecl) g_sequence_sort(arg0:Pointer[GSequence], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_sequence_sort_iter(arg0:Pointer[GSequence], arg1:GSequenceIterCompareFunc, arg2:gpointer) : ;

external (cdecl) g_sequence_get_begin_iter(arg0:Pointer[GSequence]) : Pointer[GSequenceIter];

external (cdecl) g_sequence_get_end_iter(arg0:Pointer[GSequence]) : Pointer[GSequenceIter];

external (cdecl) g_sequence_get_iter_at_pos(arg0:Pointer[GSequence], arg1:gint) : Pointer[GSequenceIter];

external (cdecl) g_sequence_append(arg0:Pointer[GSequence], arg1:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_prepend(arg0:Pointer[GSequence], arg1:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_insert_before(arg0:Pointer[GSequenceIter], arg1:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_move(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter]) : ;

external (cdecl) g_sequence_swap(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter]) : ;

external (cdecl) g_sequence_insert_sorted(arg0:Pointer[GSequence], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_insert_sorted_iter(arg0:Pointer[GSequence], arg1:gpointer, arg2:GSequenceIterCompareFunc, arg3:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_sort_changed(arg0:Pointer[GSequenceIter], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_sequence_sort_changed_iter(arg0:Pointer[GSequenceIter], arg1:GSequenceIterCompareFunc, arg2:gpointer) : ;

external (cdecl) g_sequence_remove(arg0:Pointer[GSequenceIter]) : ;

external (cdecl) g_sequence_remove_range(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter]) : ;

external (cdecl) g_sequence_move_range(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter], arg2:Pointer[GSequenceIter]) : ;

external (cdecl) g_sequence_search(arg0:Pointer[GSequence], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_search_iter(arg0:Pointer[GSequence], arg1:gpointer, arg2:GSequenceIterCompareFunc, arg3:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_lookup(arg0:Pointer[GSequence], arg1:gpointer, arg2:GCompareDataFunc, arg3:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_lookup_iter(arg0:Pointer[GSequence], arg1:gpointer, arg2:GSequenceIterCompareFunc, arg3:gpointer) : Pointer[GSequenceIter];

external (cdecl) g_sequence_get(arg0:Pointer[GSequenceIter]) : gpointer;

external (cdecl) g_sequence_set(arg0:Pointer[GSequenceIter], arg1:gpointer) : ;

external (cdecl) g_sequence_iter_is_begin(arg0:Pointer[GSequenceIter]) : gboolean;

external (cdecl) g_sequence_iter_is_end(arg0:Pointer[GSequenceIter]) : gboolean;

external (cdecl) g_sequence_iter_next(arg0:Pointer[GSequenceIter]) : Pointer[GSequenceIter];

external (cdecl) g_sequence_iter_prev(arg0:Pointer[GSequenceIter]) : Pointer[GSequenceIter];

external (cdecl) g_sequence_iter_get_position(arg0:Pointer[GSequenceIter]) : gint;

external (cdecl) g_sequence_iter_move(arg0:Pointer[GSequenceIter], arg1:gint) : Pointer[GSequenceIter];

external (cdecl) g_sequence_iter_get_sequence(arg0:Pointer[GSequenceIter]) : Pointer[GSequence];

external (cdecl) g_sequence_iter_compare(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter]) : gint;

external (cdecl) g_sequence_range_get_midpoint(arg0:Pointer[GSequenceIter], arg1:Pointer[GSequenceIter]) : Pointer[GSequenceIter];


alias GShellError = CUInt;
alias G_SHELL_ERROR_BAD_QUOTING = CUInt(0);
alias G_SHELL_ERROR_EMPTY_STRING = CUInt(1);
alias G_SHELL_ERROR_FAILED = CUInt(2);

external (cdecl) g_shell_error_quark() : GQuark;

external (cdecl) g_shell_quote(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_shell_unquote(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_shell_parse_argv(arg0:Pointer[gchar], arg1:Pointer[gint], arg2:Pointer[Pointer[Pointer[gchar]]], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_slice_alloc(arg0:gsize) : gpointer;

external (cdecl) g_slice_alloc0(arg0:gsize) : gpointer;

external (cdecl) g_slice_copy(arg0:gsize, arg1:gconstpointer) : gpointer;

external (cdecl) g_slice_free1(arg0:gsize, arg1:gpointer) : ;

external (cdecl) g_slice_free_chain_with_offset(arg0:gsize, arg1:gpointer, arg2:gsize) : ;


alias GSliceConfig = CUInt;
alias G_SLICE_CONFIG_ALWAYS_MALLOC = CUInt(1);
alias G_SLICE_CONFIG_BYPASS_MAGAZINES = CUInt(2);
alias G_SLICE_CONFIG_WORKING_SET_MSECS = CUInt(3);
alias G_SLICE_CONFIG_COLOR_INCREMENT = CUInt(4);
alias G_SLICE_CONFIG_CHUNK_SIZES = CUInt(5);
alias G_SLICE_CONFIG_CONTENTION_COUNTER = CUInt(6);

external (cdecl) g_slice_set_config(arg0:GSliceConfig, arg1:gint64) : ;

external (cdecl) g_slice_get_config(arg0:GSliceConfig) : gint64;

external (cdecl) g_slice_get_config_state(arg0:GSliceConfig, arg1:gint64, arg2:Pointer[guint]) : Pointer[gint64];


alias GSpawnError = CUInt;
alias G_SPAWN_ERROR_FORK = CUInt(0);
alias G_SPAWN_ERROR_READ = CUInt(1);
alias G_SPAWN_ERROR_CHDIR = CUInt(2);
alias G_SPAWN_ERROR_ACCES = CUInt(3);
alias G_SPAWN_ERROR_PERM = CUInt(4);
alias G_SPAWN_ERROR_TOO_BIG = CUInt(5);
alias G_SPAWN_ERROR_2BIG = CUInt(5);
alias G_SPAWN_ERROR_NOEXEC = CUInt(6);
alias G_SPAWN_ERROR_NAMETOOLONG = CUInt(7);
alias G_SPAWN_ERROR_NOENT = CUInt(8);
alias G_SPAWN_ERROR_NOMEM = CUInt(9);
alias G_SPAWN_ERROR_NOTDIR = CUInt(10);
alias G_SPAWN_ERROR_LOOP = CUInt(11);
alias G_SPAWN_ERROR_TXTBUSY = CUInt(12);
alias G_SPAWN_ERROR_IO = CUInt(13);
alias G_SPAWN_ERROR_NFILE = CUInt(14);
alias G_SPAWN_ERROR_MFILE = CUInt(15);
alias G_SPAWN_ERROR_INVAL = CUInt(16);
alias G_SPAWN_ERROR_ISDIR = CUInt(17);
alias G_SPAWN_ERROR_LIBBAD = CUInt(18);
alias G_SPAWN_ERROR_FAILED = CUInt(19);

alias GSpawnChildSetupFunc = CCodePointer[[gpointer],[]];


alias GSpawnFlags = CUInt;
alias G_SPAWN_LEAVE_DESCRIPTORS_OPEN = CUInt(1);
alias G_SPAWN_DO_NOT_REAP_CHILD = CUInt(2);
alias G_SPAWN_SEARCH_PATH = CUInt(4);
alias G_SPAWN_STDOUT_TO_DEV_NULL = CUInt(8);
alias G_SPAWN_STDERR_TO_DEV_NULL = CUInt(16);
alias G_SPAWN_CHILD_INHERITS_STDIN = CUInt(32);
alias G_SPAWN_FILE_AND_ARGV_ZERO = CUInt(64);
alias G_SPAWN_SEARCH_PATH_FROM_ENVP = CUInt(128);

external (cdecl) g_spawn_error_quark() : GQuark;

external (cdecl) g_spawn_exit_error_quark() : GQuark;

external (cdecl) g_spawn_async(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[gchar]], arg3:GSpawnFlags, arg4:GSpawnChildSetupFunc, arg5:gpointer, arg6:Pointer[GPid], arg7:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_spawn_async_with_pipes(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[gchar]], arg3:GSpawnFlags, arg4:GSpawnChildSetupFunc, arg5:gpointer, arg6:Pointer[GPid], arg7:Pointer[gint], arg8:Pointer[gint], arg9:Pointer[gint], arg10:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_spawn_sync(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[gchar]], arg3:GSpawnFlags, arg4:GSpawnChildSetupFunc, arg5:gpointer, arg6:Pointer[Pointer[gchar]], arg7:Pointer[Pointer[gchar]], arg8:Pointer[gint], arg9:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_spawn_command_line_sync(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[gchar]], arg3:Pointer[gint], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_spawn_command_line_async(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_spawn_check_exit_status(arg0:gint, arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_spawn_close_pid(arg0:GPid) : ;


alias GAsciiType = CUInt;
alias G_ASCII_ALNUM = CUInt(1);
alias G_ASCII_ALPHA = CUInt(2);
alias G_ASCII_CNTRL = CUInt(4);
alias G_ASCII_DIGIT = CUInt(8);
alias G_ASCII_GRAPH = CUInt(16);
alias G_ASCII_LOWER = CUInt(32);
alias G_ASCII_PRINT = CUInt(64);
alias G_ASCII_PUNCT = CUInt(128);
alias G_ASCII_SPACE = CUInt(256);
alias G_ASCII_UPPER = CUInt(512);
alias G_ASCII_XDIGIT = CUInt(1024);

external g_ascii_table : Pointer[guint16];

external (cdecl) g_ascii_tolower(arg0:gchar) : gchar;

external (cdecl) g_ascii_toupper(arg0:gchar) : gchar;

external (cdecl) g_ascii_digit_value(arg0:gchar) : gint;

external (cdecl) g_ascii_xdigit_value(arg0:gchar) : gint;

external (cdecl) g_strdelimit(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gchar) : Pointer[gchar];

external (cdecl) g_strcanon(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gchar) : Pointer[gchar];

external (cdecl) g_strerror(arg0:gint) : Pointer[gchar];

external (cdecl) g_strsignal(arg0:gint) : Pointer[gchar];

external (cdecl) g_strreverse(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strlcpy(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : gsize;

external (cdecl) g_strlcat(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : gsize;

external (cdecl) g_strstr_len(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strrstr(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strrstr_len(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_str_has_suffix(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_str_has_prefix(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_strtod(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : gdouble;

external (cdecl) g_ascii_strtod(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : gdouble;

external (cdecl) g_ascii_strtoull(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:guint) : guint64;

external (cdecl) g_ascii_strtoll(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:guint) : gint64;

external (cdecl) g_ascii_dtostr(arg0:Pointer[gchar], arg1:gint, arg2:gdouble) : Pointer[gchar];

external (cdecl) g_ascii_formatd(arg0:Pointer[gchar], arg1:gint, arg2:Pointer[gchar], arg3:gdouble) : Pointer[gchar];

external (cdecl) g_strchug(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strchomp(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_ascii_strcasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gint;

external (cdecl) g_ascii_strncasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gsize) : gint;

external (cdecl) g_ascii_strdown(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_ascii_strup(arg0:Pointer[gchar], arg1:gssize) : Pointer[gchar];

external (cdecl) g_strcasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gint;

external (cdecl) g_strncasecmp(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:guint) : gint;

external (cdecl) g_strdown(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strup(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strdup(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strdup_printf(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_strdup_vprintf(arg0:Pointer[gchar], arg1:Pointer[__va_list_tag]) : Pointer[gchar];

external (cdecl) g_strndup(arg0:Pointer[gchar], arg1:gsize) : Pointer[gchar];

external (cdecl) g_strnfill(arg0:gsize, arg1:gchar) : Pointer[gchar];

external (cdecl) g_strconcat(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_strjoin(arg0:Pointer[gchar], ..) : Pointer[gchar];

external (cdecl) g_strcompress(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_strescape(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_memdup(arg0:gconstpointer, arg1:guint) : gpointer;

external (cdecl) g_strsplit(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gint) : Pointer[Pointer[gchar]];

external (cdecl) g_strsplit_set(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:gint) : Pointer[Pointer[gchar]];

external (cdecl) g_strjoinv(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]]) : Pointer[gchar];

external (cdecl) g_strfreev(arg0:Pointer[Pointer[gchar]]) : ;

external (cdecl) g_strdupv(arg0:Pointer[Pointer[gchar]]) : Pointer[Pointer[gchar]];

external (cdecl) g_strv_length(arg0:Pointer[Pointer[gchar]]) : guint;

external (cdecl) g_stpcpy(arg0:Pointer[gchar], arg1:Pointer[CChar]) : Pointer[gchar];

alias Struct__GStringChunk = Opaque;

alias GStringChunk = Struct__GStringChunk;

external (cdecl) g_string_chunk_new(arg0:gsize) : Pointer[GStringChunk];

external (cdecl) g_string_chunk_free(arg0:Pointer[GStringChunk]) : ;

external (cdecl) g_string_chunk_clear(arg0:Pointer[GStringChunk]) : ;

external (cdecl) g_string_chunk_insert(arg0:Pointer[GStringChunk], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_string_chunk_insert_len(arg0:Pointer[GStringChunk], arg1:Pointer[gchar], arg2:gssize) : Pointer[gchar];

external (cdecl) g_string_chunk_insert_const(arg0:Pointer[GStringChunk], arg1:Pointer[gchar]) : Pointer[gchar];

alias Struct_GTestCase = Opaque;

alias GTestCase = Struct_GTestCase;

alias Struct_GTestSuite = Opaque;

alias GTestSuite = Struct_GTestSuite;

alias GTestFunc = CCodePointer[[],[]];

alias GTestDataFunc = CCodePointer[[gconstpointer],[]];

alias GTestFixtureFunc = CCodePointer[[gpointer, gconstpointer],[]];

external (cdecl) g_strcmp0(arg0:Pointer[CChar], arg1:Pointer[CChar]) : CInt;

external (cdecl) g_test_minimized_result(arg0:CDouble, arg1:Pointer[CChar], ..) : ;

external (cdecl) g_test_maximized_result(arg0:CDouble, arg1:Pointer[CChar], ..) : ;

external (cdecl) g_test_init(arg0:Pointer[CInt], arg1:Pointer[Pointer[Pointer[CChar]]], ..) : ;

external (cdecl) g_test_run() : CInt;

external (cdecl) g_test_add_func(arg0:Pointer[CChar], arg1:GTestFunc) : ;

external (cdecl) g_test_add_data_func(arg0:Pointer[CChar], arg1:gconstpointer, arg2:GTestDataFunc) : ;

external (cdecl) g_test_add_data_func_full(arg0:Pointer[CChar], arg1:gpointer, arg2:GTestDataFunc, arg3:GDestroyNotify) : ;

external (cdecl) g_test_fail() : ;

external (cdecl) g_test_message(arg0:Pointer[CChar], ..) : ;

external (cdecl) g_test_bug_base(arg0:Pointer[CChar]) : ;

external (cdecl) g_test_bug(arg0:Pointer[CChar]) : ;

external (cdecl) g_test_timer_start() : ;

external (cdecl) g_test_timer_elapsed() : CDouble;

external (cdecl) g_test_timer_last() : CDouble;

external (cdecl) g_test_queue_free(arg0:gpointer) : ;

external (cdecl) g_test_queue_destroy(arg0:GDestroyNotify, arg1:gpointer) : ;


alias GTestTrapFlags = CUInt;
alias G_TEST_TRAP_SILENCE_STDOUT = CUInt(128);
alias G_TEST_TRAP_SILENCE_STDERR = CUInt(256);
alias G_TEST_TRAP_INHERIT_STDIN = CUInt(512);

external (cdecl) g_test_trap_fork(arg0:guint64, arg1:GTestTrapFlags) : gboolean;

external (cdecl) g_test_trap_has_passed() : gboolean;

external (cdecl) g_test_trap_reached_timeout() : gboolean;

external (cdecl) g_test_rand_int() : gint32;

external (cdecl) g_test_rand_int_range(arg0:gint32, arg1:gint32) : gint32;

external (cdecl) g_test_rand_double() : CDouble;

external (cdecl) g_test_rand_double_range(arg0:CDouble, arg1:CDouble) : CDouble;

external (cdecl) g_test_create_case(arg0:Pointer[CChar], arg1:gsize, arg2:gconstpointer, arg3:GTestFixtureFunc, arg4:GTestFixtureFunc, arg5:GTestFixtureFunc) : Pointer[GTestCase];

external (cdecl) g_test_create_suite(arg0:Pointer[CChar]) : Pointer[GTestSuite];

external (cdecl) g_test_get_root() : Pointer[GTestSuite];

external (cdecl) g_test_suite_add(arg0:Pointer[GTestSuite], arg1:Pointer[GTestCase]) : ;

external (cdecl) g_test_suite_add_suite(arg0:Pointer[GTestSuite], arg1:Pointer[GTestSuite]) : ;

external (cdecl) g_test_run_suite(arg0:Pointer[GTestSuite]) : CInt;

external (cdecl) g_test_trap_assertions(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:guint64, arg5:Pointer[CChar]) : ;

external (cdecl) g_assertion_message(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar]) : ;

external (cdecl) g_assertion_message_expr(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar]) : ;

external (cdecl) g_assertion_message_cmpstr(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar], arg5:Pointer[CChar], arg6:Pointer[CChar], arg7:Pointer[CChar]) : ;

external (cdecl) g_assertion_message_cmpnum(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar], arg5:CLongDouble, arg6:Pointer[CChar], arg7:CLongDouble, arg8:CChar) : ;

external (cdecl) g_assertion_message_error(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar], arg4:Pointer[CChar], arg5:Pointer[GError], arg6:GQuark, arg7:CInt) : ;

external (cdecl) g_test_add_vtable(arg0:Pointer[CChar], arg1:gsize, arg2:gconstpointer, arg3:GTestFixtureFunc, arg4:GTestFixtureFunc, arg5:GTestFixtureFunc) : ;

record GTestConfig (
    test_initialized : gboolean,
    test_quick : gboolean,
    test_perf : gboolean,
    test_verbose : gboolean,
    test_quiet : gboolean,
    test_undefined : gboolean,
);

external g_test_config_vars : Pointer[GTestConfig];


alias GTestLogType = CUInt;
alias G_TEST_LOG_NONE = CUInt(0);
alias G_TEST_LOG_ERROR = CUInt(1);
alias G_TEST_LOG_START_BINARY = CUInt(2);
alias G_TEST_LOG_LIST_CASE = CUInt(3);
alias G_TEST_LOG_SKIP_CASE = CUInt(4);
alias G_TEST_LOG_START_CASE = CUInt(5);
alias G_TEST_LOG_STOP_CASE = CUInt(6);
alias G_TEST_LOG_MIN_RESULT = CUInt(7);
alias G_TEST_LOG_MAX_RESULT = CUInt(8);
alias G_TEST_LOG_MESSAGE = CUInt(9);

record GTestLogMsg (
    log_type : GTestLogType,
    n_strings : guint,
    strings : Pointer[Pointer[gchar]],
    n_nums : guint,
    nums : Pointer[CLongDouble],
);

record GTestLogBuffer (
    data : Pointer[GString],
    msgs : Pointer[GSList],
);

external (cdecl) g_test_log_type_name(arg0:GTestLogType) : Pointer[CChar];

external (cdecl) g_test_log_buffer_new() : Pointer[GTestLogBuffer];

external (cdecl) g_test_log_buffer_free(arg0:Pointer[GTestLogBuffer]) : ;

external (cdecl) g_test_log_buffer_push(arg0:Pointer[GTestLogBuffer], arg1:guint, arg2:Pointer[guint8]) : ;

external (cdecl) g_test_log_buffer_pop(arg0:Pointer[GTestLogBuffer]) : Pointer[GTestLogMsg];

external (cdecl) g_test_log_msg_free(arg0:Pointer[GTestLogMsg]) : ;

alias GTestLogFatalFunc = CCodePointer[[Pointer[gchar], GLogLevelFlags, Pointer[gchar], gpointer],[gboolean]];

external (cdecl) g_test_log_set_fatal_handler(arg0:GTestLogFatalFunc, arg1:gpointer) : ;

external (cdecl) g_test_expect_message(arg0:Pointer[gchar], arg1:GLogLevelFlags, arg2:Pointer[gchar]) : ;

external (cdecl) g_test_assert_expected_messages_internal(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:CInt, arg3:Pointer[CChar]) : ;

alias GThreadPool = Struct__GThreadPool;

record Struct__GThreadPool (
    func : GFunc,
    user_data : gpointer,
    exclusive : gboolean,
);

external (cdecl) g_thread_pool_new(arg0:GFunc, arg1:gpointer, arg2:gint, arg3:gboolean, arg4:Pointer[Pointer[GError]]) : Pointer[GThreadPool];

external (cdecl) g_thread_pool_free(arg0:Pointer[GThreadPool], arg1:gboolean, arg2:gboolean) : ;

external (cdecl) g_thread_pool_push(arg0:Pointer[GThreadPool], arg1:gpointer, arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_thread_pool_unprocessed(arg0:Pointer[GThreadPool]) : guint;

external (cdecl) g_thread_pool_set_sort_function(arg0:Pointer[GThreadPool], arg1:GCompareDataFunc, arg2:gpointer) : ;

external (cdecl) g_thread_pool_set_max_threads(arg0:Pointer[GThreadPool], arg1:gint, arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_thread_pool_get_max_threads(arg0:Pointer[GThreadPool]) : gint;

external (cdecl) g_thread_pool_get_num_threads(arg0:Pointer[GThreadPool]) : guint;

external (cdecl) g_thread_pool_set_max_unused_threads(arg0:gint) : ;

external (cdecl) g_thread_pool_get_max_unused_threads() : gint;

external (cdecl) g_thread_pool_get_num_unused_threads() : guint;

external (cdecl) g_thread_pool_stop_unused_threads() : ;

external (cdecl) g_thread_pool_set_max_idle_time(arg0:guint) : ;

external (cdecl) g_thread_pool_get_max_idle_time() : guint;

alias Struct__GTimer = Opaque;

alias GTimer = Struct__GTimer;

external (cdecl) g_timer_new() : Pointer[GTimer];

external (cdecl) g_timer_destroy(arg0:Pointer[GTimer]) : ;

external (cdecl) g_timer_start(arg0:Pointer[GTimer]) : ;

external (cdecl) g_timer_stop(arg0:Pointer[GTimer]) : ;

external (cdecl) g_timer_reset(arg0:Pointer[GTimer]) : ;

external (cdecl) g_timer_continue(arg0:Pointer[GTimer]) : ;

external (cdecl) g_timer_elapsed(arg0:Pointer[GTimer], arg1:Pointer[gulong]) : gdouble;

external (cdecl) g_usleep(arg0:gulong) : ;

external (cdecl) g_time_val_add(arg0:Pointer[GTimeVal], arg1:glong) : ;

external (cdecl) g_time_val_from_iso8601(arg0:Pointer[gchar], arg1:Pointer[GTimeVal]) : gboolean;

external (cdecl) g_time_val_to_iso8601(arg0:Pointer[GTimeVal]) : Pointer[gchar];

alias GTrashStack = Struct__GTrashStack;

record Struct__GTrashStack (
    next : Pointer[GTrashStack],
);

external (cdecl) g_trash_stack_push(arg0:Pointer[Pointer[GTrashStack]], arg1:gpointer) : ;

external (cdecl) g_trash_stack_pop(arg0:Pointer[Pointer[GTrashStack]]) : gpointer;

external (cdecl) g_trash_stack_peek(arg0:Pointer[Pointer[GTrashStack]]) : gpointer;

external (cdecl) g_trash_stack_height(arg0:Pointer[Pointer[GTrashStack]]) : guint;

alias Struct__GTree = Opaque;

alias GTree = Struct__GTree;

alias GTraverseFunc = CCodePointer[[gpointer, gpointer, gpointer],[gboolean]];

external (cdecl) g_tree_new(arg0:GCompareFunc) : Pointer[GTree];

external (cdecl) g_tree_new_with_data(arg0:GCompareDataFunc, arg1:gpointer) : Pointer[GTree];

external (cdecl) g_tree_new_full(arg0:GCompareDataFunc, arg1:gpointer, arg2:GDestroyNotify, arg3:GDestroyNotify) : Pointer[GTree];

external (cdecl) g_tree_ref(arg0:Pointer[GTree]) : Pointer[GTree];

external (cdecl) g_tree_unref(arg0:Pointer[GTree]) : ;

external (cdecl) g_tree_destroy(arg0:Pointer[GTree]) : ;

external (cdecl) g_tree_insert(arg0:Pointer[GTree], arg1:gpointer, arg2:gpointer) : ;

external (cdecl) g_tree_replace(arg0:Pointer[GTree], arg1:gpointer, arg2:gpointer) : ;

external (cdecl) g_tree_remove(arg0:Pointer[GTree], arg1:gconstpointer) : gboolean;

external (cdecl) g_tree_steal(arg0:Pointer[GTree], arg1:gconstpointer) : gboolean;

external (cdecl) g_tree_lookup(arg0:Pointer[GTree], arg1:gconstpointer) : gpointer;

external (cdecl) g_tree_lookup_extended(arg0:Pointer[GTree], arg1:gconstpointer, arg2:Pointer[gpointer], arg3:Pointer[gpointer]) : gboolean;

external (cdecl) g_tree_foreach(arg0:Pointer[GTree], arg1:GTraverseFunc, arg2:gpointer) : ;

external (cdecl) g_tree_traverse(arg0:Pointer[GTree], arg1:GTraverseFunc, arg2:GTraverseType, arg3:gpointer) : ;

external (cdecl) g_tree_search(arg0:Pointer[GTree], arg1:GCompareFunc, arg2:gconstpointer) : gpointer;

external (cdecl) g_tree_height(arg0:Pointer[GTree]) : gint;

external (cdecl) g_tree_nnodes(arg0:Pointer[GTree]) : gint;

external (cdecl) g_uri_unescape_string(arg0:Pointer[CChar], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_uri_unescape_segment(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_uri_parse_scheme(arg0:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_uri_escape_string(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:gboolean) : Pointer[CChar];

alias Struct__GVariantType = Opaque;

alias GVariantType = Struct__GVariantType;

external (cdecl) g_variant_type_string_is_valid(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_variant_type_string_scan(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) g_variant_type_free(arg0:Pointer[GVariantType]) : ;

external (cdecl) g_variant_type_copy(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_new(arg0:Pointer[gchar]) : Pointer[GVariantType];

external (cdecl) g_variant_type_get_string_length(arg0:Pointer[GVariantType]) : gsize;

external (cdecl) g_variant_type_peek_string(arg0:Pointer[GVariantType]) : Pointer[gchar];

external (cdecl) g_variant_type_dup_string(arg0:Pointer[GVariantType]) : Pointer[gchar];

external (cdecl) g_variant_type_is_definite(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_container(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_basic(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_maybe(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_array(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_tuple(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_dict_entry(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_is_variant(arg0:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_hash(arg0:gconstpointer) : guint;

external (cdecl) g_variant_type_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_variant_type_is_subtype_of(arg0:Pointer[GVariantType], arg1:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_type_element(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_first(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_next(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_n_items(arg0:Pointer[GVariantType]) : gsize;

external (cdecl) g_variant_type_key(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_value(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_new_array(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_new_maybe(arg0:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_new_tuple(arg0:Pointer[Pointer[GVariantType]], arg1:gint) : Pointer[GVariantType];

external (cdecl) g_variant_type_new_dict_entry(arg0:Pointer[GVariantType], arg1:Pointer[GVariantType]) : Pointer[GVariantType];

external (cdecl) g_variant_type_checked_(arg0:Pointer[gchar]) : Pointer[GVariantType];

alias Struct__GVariant = Opaque;

alias GVariant = Struct__GVariant;


alias GVariantClass = CUInt;
alias G_VARIANT_CLASS_BOOLEAN = CUInt(98);
alias G_VARIANT_CLASS_BYTE = CUInt(121);
alias G_VARIANT_CLASS_INT16 = CUInt(110);
alias G_VARIANT_CLASS_UINT16 = CUInt(113);
alias G_VARIANT_CLASS_INT32 = CUInt(105);
alias G_VARIANT_CLASS_UINT32 = CUInt(117);
alias G_VARIANT_CLASS_INT64 = CUInt(120);
alias G_VARIANT_CLASS_UINT64 = CUInt(116);
alias G_VARIANT_CLASS_HANDLE = CUInt(104);
alias G_VARIANT_CLASS_DOUBLE = CUInt(100);
alias G_VARIANT_CLASS_STRING = CUInt(115);
alias G_VARIANT_CLASS_OBJECT_PATH = CUInt(111);
alias G_VARIANT_CLASS_SIGNATURE = CUInt(103);
alias G_VARIANT_CLASS_VARIANT = CUInt(118);
alias G_VARIANT_CLASS_MAYBE = CUInt(109);
alias G_VARIANT_CLASS_ARRAY = CUInt(97);
alias G_VARIANT_CLASS_TUPLE = CUInt(40);
alias G_VARIANT_CLASS_DICT_ENTRY = CUInt(123);

external (cdecl) g_variant_unref(arg0:Pointer[GVariant]) : ;

external (cdecl) g_variant_ref(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_ref_sink(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_is_floating(arg0:Pointer[GVariant]) : gboolean;

external (cdecl) g_variant_take_ref(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_get_type(arg0:Pointer[GVariant]) : Pointer[GVariantType];

external (cdecl) g_variant_get_type_string(arg0:Pointer[GVariant]) : Pointer[gchar];

external (cdecl) g_variant_is_of_type(arg0:Pointer[GVariant], arg1:Pointer[GVariantType]) : gboolean;

external (cdecl) g_variant_is_container(arg0:Pointer[GVariant]) : gboolean;

external (cdecl) g_variant_classify(arg0:Pointer[GVariant]) : GVariantClass;

external (cdecl) g_variant_new_boolean(arg0:gboolean) : Pointer[GVariant];

external (cdecl) g_variant_new_byte(arg0:guchar) : Pointer[GVariant];

external (cdecl) g_variant_new_int16(arg0:gint16) : Pointer[GVariant];

external (cdecl) g_variant_new_uint16(arg0:guint16) : Pointer[GVariant];

external (cdecl) g_variant_new_int32(arg0:gint32) : Pointer[GVariant];

external (cdecl) g_variant_new_uint32(arg0:guint32) : Pointer[GVariant];

external (cdecl) g_variant_new_int64(arg0:gint64) : Pointer[GVariant];

external (cdecl) g_variant_new_uint64(arg0:guint64) : Pointer[GVariant];

external (cdecl) g_variant_new_handle(arg0:gint32) : Pointer[GVariant];

external (cdecl) g_variant_new_double(arg0:gdouble) : Pointer[GVariant];

external (cdecl) g_variant_new_string(arg0:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_variant_new_object_path(arg0:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_variant_is_object_path(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_variant_new_signature(arg0:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_variant_is_signature(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_variant_new_variant(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_new_strv(arg0:Pointer[Pointer[gchar]], arg1:gssize) : Pointer[GVariant];

external (cdecl) g_variant_new_objv(arg0:Pointer[Pointer[gchar]], arg1:gssize) : Pointer[GVariant];

external (cdecl) g_variant_new_bytestring(arg0:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_variant_new_bytestring_array(arg0:Pointer[Pointer[gchar]], arg1:gssize) : Pointer[GVariant];

external (cdecl) g_variant_new_fixed_array(arg0:Pointer[GVariantType], arg1:gconstpointer, arg2:gsize, arg3:gsize) : Pointer[GVariant];

external (cdecl) g_variant_get_boolean(arg0:Pointer[GVariant]) : gboolean;

external (cdecl) g_variant_get_byte(arg0:Pointer[GVariant]) : guchar;

external (cdecl) g_variant_get_int16(arg0:Pointer[GVariant]) : gint16;

external (cdecl) g_variant_get_uint16(arg0:Pointer[GVariant]) : guint16;

external (cdecl) g_variant_get_int32(arg0:Pointer[GVariant]) : gint32;

external (cdecl) g_variant_get_uint32(arg0:Pointer[GVariant]) : guint32;

external (cdecl) g_variant_get_int64(arg0:Pointer[GVariant]) : gint64;

external (cdecl) g_variant_get_uint64(arg0:Pointer[GVariant]) : guint64;

external (cdecl) g_variant_get_handle(arg0:Pointer[GVariant]) : gint32;

external (cdecl) g_variant_get_double(arg0:Pointer[GVariant]) : gdouble;

external (cdecl) g_variant_get_variant(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_get_string(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[gchar];

external (cdecl) g_variant_dup_string(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[gchar];

external (cdecl) g_variant_get_strv(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_variant_dup_strv(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_variant_get_objv(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_variant_dup_objv(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_variant_get_bytestring(arg0:Pointer[GVariant]) : Pointer[gchar];

external (cdecl) g_variant_dup_bytestring(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[gchar];

external (cdecl) g_variant_get_bytestring_array(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_variant_dup_bytestring_array(arg0:Pointer[GVariant], arg1:Pointer[gsize]) : Pointer[Pointer[gchar]];

external (cdecl) g_variant_new_maybe(arg0:Pointer[GVariantType], arg1:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_new_array(arg0:Pointer[GVariantType], arg1:Pointer[Pointer[GVariant]], arg2:gsize) : Pointer[GVariant];

external (cdecl) g_variant_new_tuple(arg0:Pointer[Pointer[GVariant]], arg1:gsize) : Pointer[GVariant];

external (cdecl) g_variant_new_dict_entry(arg0:Pointer[GVariant], arg1:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_get_maybe(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_n_children(arg0:Pointer[GVariant]) : gsize;

external (cdecl) g_variant_get_child(arg0:Pointer[GVariant], arg1:gsize, arg2:Pointer[gchar], ..) : ;

external (cdecl) g_variant_get_child_value(arg0:Pointer[GVariant], arg1:gsize) : Pointer[GVariant];

external (cdecl) g_variant_lookup(arg0:Pointer[GVariant], arg1:Pointer[gchar], arg2:Pointer[gchar], ..) : gboolean;

external (cdecl) g_variant_lookup_value(arg0:Pointer[GVariant], arg1:Pointer[gchar], arg2:Pointer[GVariantType]) : Pointer[GVariant];

external (cdecl) g_variant_get_fixed_array(arg0:Pointer[GVariant], arg1:Pointer[gsize], arg2:gsize) : gconstpointer;

external (cdecl) g_variant_get_size(arg0:Pointer[GVariant]) : gsize;

external (cdecl) g_variant_get_data(arg0:Pointer[GVariant]) : gconstpointer;

external (cdecl) g_variant_store(arg0:Pointer[GVariant], arg1:gpointer) : ;

external (cdecl) g_variant_print(arg0:Pointer[GVariant], arg1:gboolean) : Pointer[gchar];

external (cdecl) g_variant_print_string(arg0:Pointer[GVariant], arg1:Pointer[GString], arg2:gboolean) : Pointer[GString];

external (cdecl) g_variant_hash(arg0:gconstpointer) : guint;

external (cdecl) g_variant_equal(arg0:gconstpointer, arg1:gconstpointer) : gboolean;

external (cdecl) g_variant_get_normal_form(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_is_normal_form(arg0:Pointer[GVariant]) : gboolean;

external (cdecl) g_variant_byteswap(arg0:Pointer[GVariant]) : Pointer[GVariant];

external (cdecl) g_variant_new_from_data(arg0:Pointer[GVariantType], arg1:gconstpointer, arg2:gsize, arg3:gboolean, arg4:GDestroyNotify, arg5:gpointer) : Pointer[GVariant];

alias GVariantIter = Struct__GVariantIter;

record Struct__GVariantIter (
    x : Array[gsize, 16],
);

external (cdecl) g_variant_iter_new(arg0:Pointer[GVariant]) : Pointer[GVariantIter];

external (cdecl) g_variant_iter_init(arg0:Pointer[GVariantIter], arg1:Pointer[GVariant]) : gsize;

external (cdecl) g_variant_iter_copy(arg0:Pointer[GVariantIter]) : Pointer[GVariantIter];

external (cdecl) g_variant_iter_n_children(arg0:Pointer[GVariantIter]) : gsize;

external (cdecl) g_variant_iter_free(arg0:Pointer[GVariantIter]) : ;

external (cdecl) g_variant_iter_next_value(arg0:Pointer[GVariantIter]) : Pointer[GVariant];

external (cdecl) g_variant_iter_next(arg0:Pointer[GVariantIter], arg1:Pointer[gchar], ..) : gboolean;

external (cdecl) g_variant_iter_loop(arg0:Pointer[GVariantIter], arg1:Pointer[gchar], ..) : gboolean;

alias GVariantBuilder = Struct__GVariantBuilder;

record Struct__GVariantBuilder (
    x : Array[gsize, 16],
);


alias GVariantParseError = CUInt;
alias G_VARIANT_PARSE_ERROR_FAILED = CUInt(0);
alias G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = CUInt(1);
alias G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = CUInt(2);
alias G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = CUInt(3);
alias G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = CUInt(4);
alias G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = CUInt(5);
alias G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = CUInt(6);
alias G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = CUInt(7);
alias G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = CUInt(8);
alias G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = CUInt(9);
alias G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = CUInt(10);
alias G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = CUInt(11);
alias G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = CUInt(12);
alias G_VARIANT_PARSE_ERROR_TYPE_ERROR = CUInt(13);
alias G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = CUInt(14);
alias G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = CUInt(15);
alias G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = CUInt(16);
alias G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = CUInt(17);

external (cdecl) g_variant_parser_get_error_quark() : GQuark;

external (cdecl) g_variant_builder_new(arg0:Pointer[GVariantType]) : Pointer[GVariantBuilder];

external (cdecl) g_variant_builder_unref(arg0:Pointer[GVariantBuilder]) : ;

external (cdecl) g_variant_builder_ref(arg0:Pointer[GVariantBuilder]) : Pointer[GVariantBuilder];

external (cdecl) g_variant_builder_init(arg0:Pointer[GVariantBuilder], arg1:Pointer[GVariantType]) : ;

external (cdecl) g_variant_builder_end(arg0:Pointer[GVariantBuilder]) : Pointer[GVariant];

external (cdecl) g_variant_builder_clear(arg0:Pointer[GVariantBuilder]) : ;

external (cdecl) g_variant_builder_open(arg0:Pointer[GVariantBuilder], arg1:Pointer[GVariantType]) : ;

external (cdecl) g_variant_builder_close(arg0:Pointer[GVariantBuilder]) : ;

external (cdecl) g_variant_builder_add_value(arg0:Pointer[GVariantBuilder], arg1:Pointer[GVariant]) : ;

external (cdecl) g_variant_builder_add(arg0:Pointer[GVariantBuilder], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_variant_builder_add_parsed(arg0:Pointer[GVariantBuilder], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_variant_new(arg0:Pointer[gchar], ..) : Pointer[GVariant];

external (cdecl) g_variant_get(arg0:Pointer[GVariant], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_variant_new_va(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[va_list]) : Pointer[GVariant];

external (cdecl) g_variant_get_va(arg0:Pointer[GVariant], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]], arg3:Pointer[va_list]) : ;

external (cdecl) g_variant_check_format_string(arg0:Pointer[GVariant], arg1:Pointer[gchar], arg2:gboolean) : gboolean;

external (cdecl) g_variant_parse(arg0:Pointer[GVariantType], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[Pointer[gchar]], arg4:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_variant_new_parsed(arg0:Pointer[gchar], ..) : Pointer[GVariant];

external (cdecl) g_variant_new_parsed_va(arg0:Pointer[gchar], arg1:Pointer[va_list]) : Pointer[GVariant];

external (cdecl) g_variant_compare(arg0:gconstpointer, arg1:gconstpointer) : gint;

external glib_major_version : guint;

external glib_minor_version : guint;

external glib_micro_version : guint;

external glib_interface_age : guint;

external glib_binary_age : guint;

external (cdecl) glib_check_version(arg0:guint, arg1:guint, arg2:guint) : Pointer[gchar];

alias Struct__GAllocator = Opaque;

alias GAllocator = Struct__GAllocator;

alias Struct__GMemChunk = Opaque;

alias GMemChunk = Struct__GMemChunk;

external (cdecl) g_mem_chunk_new(arg0:Pointer[gchar], arg1:gint, arg2:gsize, arg3:gint) : Pointer[GMemChunk];

external (cdecl) g_mem_chunk_destroy(arg0:Pointer[GMemChunk]) : ;

external (cdecl) g_mem_chunk_alloc(arg0:Pointer[GMemChunk]) : gpointer;

external (cdecl) g_mem_chunk_alloc0(arg0:Pointer[GMemChunk]) : gpointer;

external (cdecl) g_mem_chunk_free(arg0:Pointer[GMemChunk], arg1:gpointer) : ;

external (cdecl) g_mem_chunk_clean(arg0:Pointer[GMemChunk]) : ;

external (cdecl) g_mem_chunk_reset(arg0:Pointer[GMemChunk]) : ;

external (cdecl) g_mem_chunk_print(arg0:Pointer[GMemChunk]) : ;

external (cdecl) g_mem_chunk_info() : ;

external (cdecl) g_blow_chunks() : ;

external (cdecl) g_allocator_new(arg0:Pointer[gchar], arg1:guint) : Pointer[GAllocator];

external (cdecl) g_allocator_free(arg0:Pointer[GAllocator]) : ;

external (cdecl) g_list_push_allocator(arg0:Pointer[GAllocator]) : ;

external (cdecl) g_list_pop_allocator() : ;

external (cdecl) g_slist_push_allocator(arg0:Pointer[GAllocator]) : ;

external (cdecl) g_slist_pop_allocator() : ;

external (cdecl) g_node_push_allocator(arg0:Pointer[GAllocator]) : ;

external (cdecl) g_node_pop_allocator() : ;

alias Struct__GCache = Opaque;

alias GCache = Struct__GCache;

alias GCacheNewFunc = CCodePointer[[gpointer],[gpointer]];

alias GCacheDupFunc = CCodePointer[[gpointer],[gpointer]];

alias GCacheDestroyFunc = CCodePointer[[gpointer],[]];

external (cdecl) g_cache_new(arg0:GCacheNewFunc, arg1:GCacheDestroyFunc, arg2:GCacheDupFunc, arg3:GCacheDestroyFunc, arg4:GHashFunc, arg5:GHashFunc, arg6:GEqualFunc) : Pointer[GCache];

external (cdecl) g_cache_destroy(arg0:Pointer[GCache]) : ;

external (cdecl) g_cache_insert(arg0:Pointer[GCache], arg1:gpointer) : gpointer;

external (cdecl) g_cache_remove(arg0:Pointer[GCache], arg1:gconstpointer) : ;

external (cdecl) g_cache_key_foreach(arg0:Pointer[GCache], arg1:GHFunc, arg2:gpointer) : ;

external (cdecl) g_cache_value_foreach(arg0:Pointer[GCache], arg1:GHFunc, arg2:gpointer) : ;

alias GCompletion = Struct__GCompletion;

alias GCompletionFunc = CCodePointer[[gpointer],[Pointer[gchar]]];

alias GCompletionStrncmpFunc = CCodePointer[[Pointer[gchar], Pointer[gchar], gsize],[gint]];

record Struct__GCompletion (
    items : Pointer[GList],
    func : GCompletionFunc,
    prefix : Pointer[gchar],
    cache : Pointer[GList],
    strncmp_func : GCompletionStrncmpFunc,
);

external (cdecl) g_completion_new(arg0:GCompletionFunc) : Pointer[GCompletion];

external (cdecl) g_completion_add_items(arg0:Pointer[GCompletion], arg1:Pointer[GList]) : ;

external (cdecl) g_completion_remove_items(arg0:Pointer[GCompletion], arg1:Pointer[GList]) : ;

external (cdecl) g_completion_clear_items(arg0:Pointer[GCompletion]) : ;

external (cdecl) g_completion_complete(arg0:Pointer[GCompletion], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]]) : Pointer[GList];

external (cdecl) g_completion_complete_utf8(arg0:Pointer[GCompletion], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]]) : Pointer[GList];

external (cdecl) g_completion_set_compare(arg0:Pointer[GCompletion], arg1:GCompletionStrncmpFunc) : ;

external (cdecl) g_completion_free(arg0:Pointer[GCompletion]) : ;

alias Struct__GRelation = Opaque;

alias GRelation = Struct__GRelation;

alias GTuples = Struct__GTuples;

record Struct__GTuples (
    len : guint,
);

external (cdecl) g_relation_new(arg0:gint) : Pointer[GRelation];

external (cdecl) g_relation_destroy(arg0:Pointer[GRelation]) : ;

external (cdecl) g_relation_index(arg0:Pointer[GRelation], arg1:gint, arg2:GHashFunc, arg3:GEqualFunc) : ;

external (cdecl) g_relation_insert(arg0:Pointer[GRelation], ..) : ;

external (cdecl) g_relation_delete(arg0:Pointer[GRelation], arg1:gconstpointer, arg2:gint) : gint;

external (cdecl) g_relation_select(arg0:Pointer[GRelation], arg1:gconstpointer, arg2:gint) : Pointer[GTuples];

external (cdecl) g_relation_count(arg0:Pointer[GRelation], arg1:gconstpointer, arg2:gint) : gint;

external (cdecl) g_relation_exists(arg0:Pointer[GRelation], ..) : gboolean;

external (cdecl) g_relation_print(arg0:Pointer[GRelation]) : ;

external (cdecl) g_tuples_destroy(arg0:Pointer[GTuples]) : ;

external (cdecl) g_tuples_index(arg0:Pointer[GTuples], arg1:gint, arg2:gint) : gpointer;


alias GThreadPriority = CUInt;
alias G_THREAD_PRIORITY_LOW = CUInt(0);
alias G_THREAD_PRIORITY_NORMAL = CUInt(1);
alias G_THREAD_PRIORITY_HIGH = CUInt(2);
alias G_THREAD_PRIORITY_URGENT = CUInt(3);

record Struct__GThread (
    func : GThreadFunc,
    data : gpointer,
    joinable : gboolean,
    priority : GThreadPriority,
);

alias GThreadFunctions = Struct__GThreadFunctions;

record Struct__GThreadFunctions (
    mutex_new : CCodePointer[[],[Pointer[GMutex]]],
    mutex_lock : CCodePointer[[Pointer[GMutex]],[]],
    mutex_trylock : CCodePointer[[Pointer[GMutex]],[gboolean]],
    mutex_unlock : CCodePointer[[Pointer[GMutex]],[]],
    mutex_free : CCodePointer[[Pointer[GMutex]],[]],
    cond_new : CCodePointer[[],[Pointer[GCond]]],
    cond_signal : CCodePointer[[Pointer[GCond]],[]],
    cond_broadcast : CCodePointer[[Pointer[GCond]],[]],
    cond_wait : CCodePointer[[Pointer[GCond], Pointer[GMutex]],[]],
    cond_timed_wait : CCodePointer[[Pointer[GCond], Pointer[GMutex], Pointer[GTimeVal]],[gboolean]],
    cond_free : CCodePointer[[Pointer[GCond]],[]],
    private_new : CCodePointer[[GDestroyNotify],[Pointer[GPrivate]]],
    private_get : CCodePointer[[Pointer[GPrivate]],[gpointer]],
    private_set : CCodePointer[[Pointer[GPrivate], gpointer],[]],
    thread_create : CCodePointer[[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Pointer[Pointer[GError]]],[]],
    thread_yield : CCodePointer[[],[]],
    thread_join : CCodePointer[[gpointer],[]],
    thread_exit : CCodePointer[[],[]],
    thread_set_priority : CCodePointer[[gpointer, GThreadPriority],[]],
    thread_self : CCodePointer[[gpointer],[]],
    thread_equal : CCodePointer[[gpointer, gpointer],[gboolean]],
);

external g_thread_functions_for_glib_use : GThreadFunctions;

external g_thread_use_default_impl : gboolean;

external g_thread_gettime : CCodePointer[[],[guint64]];

external (cdecl) g_thread_create(arg0:GThreadFunc, arg1:gpointer, arg2:gboolean, arg3:Pointer[Pointer[GError]]) : Pointer[GThread];

external (cdecl) g_thread_create_full(arg0:GThreadFunc, arg1:gpointer, arg2:gulong, arg3:gboolean, arg4:gboolean, arg5:GThreadPriority, arg6:Pointer[Pointer[GError]]) : Pointer[GThread];

external (cdecl) g_thread_set_priority(arg0:Pointer[GThread], arg1:GThreadPriority) : ;

external (cdecl) g_thread_foreach(arg0:GFunc, arg1:gpointer) : ;

record GStaticMutex (
    mutex : Pointer[GMutex],
    unused : pthread_mutex_t,
);

external (cdecl) g_static_mutex_init(arg0:Pointer[GStaticMutex]) : ;

external (cdecl) g_static_mutex_free(arg0:Pointer[GStaticMutex]) : ;

external (cdecl) g_static_mutex_get_mutex_impl(arg0:Pointer[GStaticMutex]) : Pointer[GMutex];

alias GStaticRecMutex = Struct__GStaticRecMutex;

record Struct__GStaticRecMutex (
    mutex : GStaticMutex,
    depth : guint,
    unused : Union_Unnamed3,
);

external (cdecl) g_static_rec_mutex_init(arg0:Pointer[GStaticRecMutex]) : ;

external (cdecl) g_static_rec_mutex_lock(arg0:Pointer[GStaticRecMutex]) : ;

external (cdecl) g_static_rec_mutex_trylock(arg0:Pointer[GStaticRecMutex]) : gboolean;

external (cdecl) g_static_rec_mutex_unlock(arg0:Pointer[GStaticRecMutex]) : ;

external (cdecl) g_static_rec_mutex_lock_full(arg0:Pointer[GStaticRecMutex], arg1:guint) : ;

external (cdecl) g_static_rec_mutex_unlock_full(arg0:Pointer[GStaticRecMutex]) : guint;

external (cdecl) g_static_rec_mutex_free(arg0:Pointer[GStaticRecMutex]) : ;

alias GStaticRWLock = Struct__GStaticRWLock;

record Struct__GStaticRWLock (
    mutex : GStaticMutex,
    read_cond : Pointer[GCond],
    write_cond : Pointer[GCond],
    read_counter : guint,
    have_writer : gboolean,
    want_to_read : guint,
    want_to_write : guint,
);

external (cdecl) g_static_rw_lock_init(arg0:Pointer[GStaticRWLock]) : ;

external (cdecl) g_static_rw_lock_reader_lock(arg0:Pointer[GStaticRWLock]) : ;

external (cdecl) g_static_rw_lock_reader_trylock(arg0:Pointer[GStaticRWLock]) : gboolean;

external (cdecl) g_static_rw_lock_reader_unlock(arg0:Pointer[GStaticRWLock]) : ;

external (cdecl) g_static_rw_lock_writer_lock(arg0:Pointer[GStaticRWLock]) : ;

external (cdecl) g_static_rw_lock_writer_trylock(arg0:Pointer[GStaticRWLock]) : gboolean;

external (cdecl) g_static_rw_lock_writer_unlock(arg0:Pointer[GStaticRWLock]) : ;

external (cdecl) g_static_rw_lock_free(arg0:Pointer[GStaticRWLock]) : ;

external (cdecl) g_private_new(arg0:GDestroyNotify) : Pointer[GPrivate];

alias GStaticPrivate = Struct__GStaticPrivate;

record Struct__GStaticPrivate (
    index : guint,
);

external (cdecl) g_static_private_init(arg0:Pointer[GStaticPrivate]) : ;

external (cdecl) g_static_private_get(arg0:Pointer[GStaticPrivate]) : gpointer;

external (cdecl) g_static_private_set(arg0:Pointer[GStaticPrivate], arg1:gpointer, arg2:GDestroyNotify) : ;

external (cdecl) g_static_private_free(arg0:Pointer[GStaticPrivate]) : ;

external (cdecl) g_once_init_enter_impl(arg0:Pointer[gsize]) : gboolean;

external (cdecl) g_thread_init(arg0:gpointer) : ;

external (cdecl) g_thread_init_with_errorcheck_mutexes(arg0:gpointer) : ;

external (cdecl) g_thread_get_initialized() : gboolean;

external g_threads_got_initialized : gboolean;

external (cdecl) g_mutex_new() : Pointer[GMutex];

external (cdecl) g_mutex_free(arg0:Pointer[GMutex]) : ;

external (cdecl) g_cond_new() : Pointer[GCond];

external (cdecl) g_cond_free(arg0:Pointer[GCond]) : ;

external (cdecl) g_cond_timed_wait(arg0:Pointer[GCond], arg1:Pointer[GMutex], arg2:Pointer[GTimeVal]) : gboolean;

alias Union_Unnamed3 = Union[
    /* owner */ pthread_t,
    /* dummy */ gdouble,
];

record Struct_Unnamed1 (
    mantissa : guint,
    biased_exponent : guint,
    sign : guint,
);

record Struct_Unnamed2 (
    mantissa_low : guint,
    mantissa_high : guint,
    biased_exponent : guint,
    sign : guint,
);

