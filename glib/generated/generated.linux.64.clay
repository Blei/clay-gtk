// Automatically generated by clay-bindgen
// language: c

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias gint8 = CChar;

alias guint8 = CUChar;

alias gint16 = Short;

alias guint16 = UShort;

alias gint32 = Int;

alias guint32 = UInt;

alias gint64 = CLong;

alias guint64 = CULong;

alias gssize = CLong;

alias gsize = CULong;

alias goffset = CLong;

alias gintptr = CLong;

alias guintptr = CULong;

alias GStaticMutex = Struct__GStaticMutex;

record Struct__GStaticMutex (
    runtime_mutex : OpaquePointer,
    static_mutex : AUnionType,
);

alias GSystemThread = AUnionType;

alias GPid = Int;

alias gchar = CChar;

alias gshort = Short;

alias glong = CLong;

alias gint = Int;

alias gboolean = Int;

alias guchar = CUChar;

alias gushort = UShort;

alias gulong = CULong;

alias guint = UInt;

alias gfloat = Float;

alias gdouble = Double;

alias gpointer = RawPointer;

alias gconstpointer = RawPointer;

alias GCompareFunc = CCodePointer[(RawPointer,RawPointer),(Int)];

alias GCompareDataFunc = CCodePointer[(RawPointer,RawPointer,RawPointer),(Int)];

alias GEqualFunc = CCodePointer[(RawPointer,RawPointer),(Int)];

alias GDestroyNotify = CCodePointer[(RawPointer),()];

alias GFunc = CCodePointer[(RawPointer,RawPointer),()];

alias GHashFunc = CCodePointer[(RawPointer),(UInt)];

alias GHFunc = CCodePointer[(RawPointer,RawPointer,RawPointer),()];

alias GFreeFunc = CCodePointer[(RawPointer),()];

alias GTranslateFunc = CCodePointer[(Pointer[CChar],RawPointer),(Pointer[CChar])];

alias GDoubleIEEE754 = AUnionType;

alias GFloatIEEE754 = AUnionType;

alias GTimeVal = Struct__GTimeVal;

record Struct__GTimeVal (
    tv_sec : CLong,
    tv_usec : CLong,
);

alias GArray = Struct__GArray;

alias GByteArray = Struct__GByteArray;

alias GPtrArray = Struct__GPtrArray;

record Struct__GArray (
    data : Pointer[CChar],
    len : UInt,
);

record Struct__GByteArray (
    data : Pointer[CUChar],
    len : UInt,
);

record Struct__GPtrArray (
    pdata : Pointer[gpointer],
    len : UInt,
);

external g_array_new(
    zero_terminated : Int,
    clear_ : Int,
    element_size : UInt) Pointer[GArray];

external g_array_sized_new(
    zero_terminated : Int,
    clear_ : Int,
    element_size : UInt,
    reserved_size : UInt) Pointer[GArray];

external g_array_free(
    array : Pointer[GArray],
    free_segment : Int) Pointer[CChar];

external g_array_ref(
    array : Pointer[GArray]) Pointer[GArray];

external g_array_unref(
    array : Pointer[GArray]);

external g_array_get_element_size(
    array : Pointer[GArray]) UInt;

external g_array_append_vals(
    array : Pointer[GArray],
    data : gconstpointer,
    len : UInt) Pointer[GArray];

external g_array_prepend_vals(
    array : Pointer[GArray],
    data : gconstpointer,
    len : UInt) Pointer[GArray];

external g_array_insert_vals(
    array : Pointer[GArray],
    index_ : UInt,
    data : gconstpointer,
    len : UInt) Pointer[GArray];

external g_array_set_size(
    array : Pointer[GArray],
    length : UInt) Pointer[GArray];

external g_array_remove_index(
    array : Pointer[GArray],
    index_ : UInt) Pointer[GArray];

external g_array_remove_index_fast(
    array : Pointer[GArray],
    index_ : UInt) Pointer[GArray];

external g_array_remove_range(
    array : Pointer[GArray],
    index_ : UInt,
    length : UInt) Pointer[GArray];

external g_array_sort(
    array : Pointer[GArray],
    compare_func : GCompareFunc);

external g_array_sort_with_data(
    array : Pointer[GArray],
    compare_func : GCompareDataFunc,
    user_data : gpointer);

external g_ptr_array_new() Pointer[GPtrArray];

external g_ptr_array_new_with_free_func(
    element_free_func : GDestroyNotify) Pointer[GPtrArray];

external g_ptr_array_sized_new(
    reserved_size : UInt) Pointer[GPtrArray];

external g_ptr_array_free(
    array : Pointer[GPtrArray],
    free_seg : Int) Pointer[gpointer];

external g_ptr_array_ref(
    array : Pointer[GPtrArray]) Pointer[GPtrArray];

external g_ptr_array_unref(
    array : Pointer[GPtrArray]);

external g_ptr_array_set_free_func(
    array : Pointer[GPtrArray],
    element_free_func : GDestroyNotify);

external g_ptr_array_set_size(
    array : Pointer[GPtrArray],
    length : Int);

external g_ptr_array_remove_index(
    array : Pointer[GPtrArray],
    index_ : UInt) gpointer;

external g_ptr_array_remove_index_fast(
    array : Pointer[GPtrArray],
    index_ : UInt) gpointer;

external g_ptr_array_remove(
    array : Pointer[GPtrArray],
    data : gpointer) Int;

external g_ptr_array_remove_fast(
    array : Pointer[GPtrArray],
    data : gpointer) Int;

external g_ptr_array_remove_range(
    array : Pointer[GPtrArray],
    index_ : UInt,
    length : UInt);

external g_ptr_array_add(
    array : Pointer[GPtrArray],
    data : gpointer);

external g_ptr_array_sort(
    array : Pointer[GPtrArray],
    compare_func : GCompareFunc);

external g_ptr_array_sort_with_data(
    array : Pointer[GPtrArray],
    compare_func : GCompareDataFunc,
    user_data : gpointer);

external g_ptr_array_foreach(
    array : Pointer[GPtrArray],
    func : GFunc,
    user_data : gpointer);

external g_byte_array_new() Pointer[GByteArray];

external g_byte_array_sized_new(
    reserved_size : UInt) Pointer[GByteArray];

external g_byte_array_free(
    array : Pointer[GByteArray],
    free_segment : Int) Pointer[CUChar];

external g_byte_array_ref(
    array : Pointer[GByteArray]) Pointer[GByteArray];

external g_byte_array_unref(
    array : Pointer[GByteArray]);

external g_byte_array_append(
    array : Pointer[GByteArray],
    data : Pointer[CUChar],
    len : UInt) Pointer[GByteArray];

external g_byte_array_prepend(
    array : Pointer[GByteArray],
    data : Pointer[CUChar],
    len : UInt) Pointer[GByteArray];

external g_byte_array_set_size(
    array : Pointer[GByteArray],
    length : UInt) Pointer[GByteArray];

external g_byte_array_remove_index(
    array : Pointer[GByteArray],
    index_ : UInt) Pointer[GByteArray];

external g_byte_array_remove_index_fast(
    array : Pointer[GByteArray],
    index_ : UInt) Pointer[GByteArray];

external g_byte_array_remove_range(
    array : Pointer[GByteArray],
    index_ : UInt,
    length : UInt) Pointer[GByteArray];

external g_byte_array_sort(
    array : Pointer[GByteArray],
    compare_func : GCompareFunc);

external g_byte_array_sort_with_data(
    array : Pointer[GByteArray],
    compare_func : GCompareDataFunc,
    user_data : gpointer);

alias GQuark = UInt;

external g_quark_try_string(
    string : Pointer[CChar]) UInt;

external g_quark_from_static_string(
    string : Pointer[CChar]) UInt;

external g_quark_from_string(
    string : Pointer[CChar]) UInt;

external g_quark_to_string(
    quark : UInt) Pointer[CChar];

external g_intern_string(
    string : Pointer[CChar]) Pointer[CChar];

external g_intern_static_string(
    string : Pointer[CChar]) Pointer[CChar];

alias GError = Struct__GError;

record Struct__GError (
    domain : UInt,
    code : Int,
    message : Pointer[CChar],
);

external g_error_new(
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    ...) Pointer[GError];

external g_error_new_literal(
    domain : UInt,
    code : Int,
    message : Pointer[CChar]) Pointer[GError];

external g_error_new_valist(
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]) Pointer[GError];

external g_error_free(
    error : Pointer[GError]);

external g_error_copy(
    error : Pointer[GError]) Pointer[GError];

external g_error_matches(
    error : Pointer[GError],
    domain : UInt,
    code : Int) Int;

external g_set_error(
    err : Pointer[Pointer[GError]],
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    ...);

external g_set_error_literal(
    err : Pointer[Pointer[GError]],
    domain : UInt,
    code : Int,
    message : Pointer[CChar]);

external g_propagate_error(
    dest : Pointer[Pointer[GError]],
    src : Pointer[GError]);

external g_clear_error(
    err : Pointer[Pointer[GError]]);

external g_prefix_error(
    err : Pointer[Pointer[GError]],
    format : Pointer[CChar],
    ...);

external g_propagate_prefixed_error(
    dest : Pointer[Pointer[GError]],
    src : Pointer[GError],
    format : Pointer[CChar],
    ...);

external g_get_user_name() Pointer[CChar];

external g_get_real_name() Pointer[CChar];

external g_get_home_dir() Pointer[CChar];

external g_get_tmp_dir() Pointer[CChar];

external g_get_host_name() Pointer[CChar];

external g_get_prgname() Pointer[CChar];

external g_set_prgname(
    prgname : Pointer[CChar]);

external g_get_application_name() Pointer[CChar];

external g_set_application_name(
    application_name : Pointer[CChar]);

external g_reload_user_special_dirs_cache();

external g_get_user_data_dir() Pointer[CChar];

external g_get_user_config_dir() Pointer[CChar];

external g_get_user_cache_dir() Pointer[CChar];

external g_get_system_data_dirs() Pointer[Pointer[CChar]];

external g_get_system_config_dirs() Pointer[Pointer[CChar]];

external g_get_language_names() Pointer[Pointer[CChar]];

alias G_USER_DIRECTORY_DESKTOP = 0;
alias G_USER_DIRECTORY_DOCUMENTS = 1;
alias G_USER_DIRECTORY_DOWNLOAD = 2;
alias G_USER_DIRECTORY_MUSIC = 3;
alias G_USER_DIRECTORY_PICTURES = 4;
alias G_USER_DIRECTORY_PUBLIC_SHARE = 5;
alias G_USER_DIRECTORY_TEMPLATES = 6;
alias G_USER_DIRECTORY_VIDEOS = 7;
alias G_USER_N_DIRECTORIES = 8;

alias GUserDirectory = Int;

external g_get_user_special_dir(
    directory : GUserDirectory) Pointer[CChar];

alias GDebugKey = Struct__GDebugKey;

record Struct__GDebugKey (
    key : Pointer[CChar],
    value : UInt,
);

external g_parse_debug_string(
    string : Pointer[CChar],
    keys : Pointer[GDebugKey],
    nkeys : UInt) UInt;

external g_snprintf(
    string : Pointer[CChar],
    n : CULong,
    format : Pointer[CChar],
    ...) Int;

external g_vsnprintf(
    string : Pointer[CChar],
    n : CULong,
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]) Int;

external g_path_is_absolute(
    file_name : Pointer[CChar]) Int;

external g_path_skip_root(
    file_name : Pointer[CChar]) Pointer[CChar];

external g_basename(
    file_name : Pointer[CChar]) Pointer[CChar];

external g_get_current_dir() Pointer[CChar];

external g_path_get_basename(
    file_name : Pointer[CChar]) Pointer[CChar];

external g_path_get_dirname(
    file_name : Pointer[CChar]) Pointer[CChar];

external g_nullify_pointer(
    nullify_location : Pointer[gpointer]);

external g_getenv(
    variable : Pointer[CChar]) Pointer[CChar];

external g_setenv(
    variable : Pointer[CChar],
    value : Pointer[CChar],
    overwrite : Int) Int;

external g_unsetenv(
    variable : Pointer[CChar]);

external g_listenv() Pointer[Pointer[CChar]];

external _g_getenv_nomalloc(
    variable : Pointer[CChar],
    buffer : Pointer[CChar]) Pointer[CChar];

alias GVoidFunc = CCodePointer[(),()];

external g_atexit(
    func : GVoidFunc);

external g_find_program_in_path(
    program : Pointer[CChar]) Pointer[CChar];

alias GTrashStack = Struct__GTrashStack;

record Struct__GTrashStack (
    next : Pointer[GTrashStack],
);

external glib_major_version : UInt;

external glib_minor_version : UInt;

external glib_micro_version : UInt;

external glib_interface_age : UInt;

external glib_binary_age : UInt;

external glib_check_version(
    required_major : UInt,
    required_minor : UInt,
    required_micro : UInt) Pointer[CChar];

external g_atomic_int_exchange_and_add(
    atomic : Pointer[Int],
    val : Int) Int;

external g_atomic_int_add(
    atomic : Pointer[Int],
    val : Int);

external g_atomic_int_compare_and_exchange(
    atomic : Pointer[Int],
    oldval : Int,
    newval : Int) Int;

external g_atomic_pointer_compare_and_exchange(
    atomic : Pointer[gpointer],
    oldval : gpointer,
    newval : gpointer) Int;

external g_atomic_int_get(
    atomic : Pointer[Int]) Int;

external g_atomic_int_set(
    atomic : Pointer[Int],
    newval : Int);

external g_atomic_pointer_get(
    atomic : Pointer[gpointer]) gpointer;

external g_atomic_pointer_set(
    atomic : Pointer[gpointer],
    newval : gpointer);

external g_thread_error_quark() UInt;

alias G_THREAD_ERROR_AGAIN = 0;

alias GThreadError = Int;

alias GThreadFunc = CCodePointer[(RawPointer),(RawPointer)];

alias G_THREAD_PRIORITY_LOW = 0;
alias G_THREAD_PRIORITY_NORMAL = 1;
alias G_THREAD_PRIORITY_HIGH = 2;
alias G_THREAD_PRIORITY_URGENT = 3;

alias GThreadPriority = Int;

alias GThread = Struct__GThread;

record Struct__GThread (
    func : GThreadFunc,
    data : gpointer,
    joinable : Int,
    priority : GThreadPriority,
);

alias GMutex = Opaque;

alias GCond = Opaque;

alias GPrivate = Opaque;

alias GStaticPrivate = Struct__GStaticPrivate;

alias GThreadFunctions = Struct__GThreadFunctions;

record Struct__GThreadFunctions (
    mutex_new : CCodePointer[(),(OpaquePointer)],
    mutex_lock : CCodePointer[(OpaquePointer),()],
    mutex_trylock : CCodePointer[(OpaquePointer),(Int)],
    mutex_unlock : CCodePointer[(OpaquePointer),()],
    mutex_free : CCodePointer[(OpaquePointer),()],
    cond_new : CCodePointer[(),(OpaquePointer)],
    cond_signal : CCodePointer[(OpaquePointer),()],
    cond_broadcast : CCodePointer[(OpaquePointer),()],
    cond_wait : CCodePointer[(OpaquePointer,OpaquePointer),()],
    cond_timed_wait : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Struct__GTimeVal]),(Int)],
    cond_free : CCodePointer[(OpaquePointer),()],
    private_new : CCodePointer[(CCodePointer[(RawPointer),()]),(OpaquePointer)],
    private_get : CCodePointer[(OpaquePointer),(RawPointer)],
    private_set : CCodePointer[(OpaquePointer,RawPointer),()],
    thread_create : CCodePointer[(CCodePointer[(RawPointer),(RawPointer)],RawPointer,CULong,Int,Int,Int,RawPointer,Pointer[Pointer[Struct__GError]]),()],
    thread_yield : CCodePointer[(),()],
    thread_join : CCodePointer[(RawPointer),()],
    thread_exit : CCodePointer[(),()],
    thread_set_priority : CCodePointer[(RawPointer,Int),()],
    thread_self : CCodePointer[(RawPointer),()],
    thread_equal : CCodePointer[(RawPointer,RawPointer),(Int)],
);

external g_thread_functions_for_glib_use : GThreadFunctions;

external g_thread_use_default_impl : Int;

external g_threads_got_initialized : Int;

external g_thread_gettime : CCodePointer[(),(CULong)];

external g_thread_init(
    vtable : Pointer[GThreadFunctions]);

external g_thread_init_with_errorcheck_mutexes(
    vtable : Pointer[GThreadFunctions]);

external g_thread_get_initialized() Int;

external g_static_mutex_get_mutex_impl(
    mutex : Pointer[Pointer[GMutex]]) Pointer[GMutex];

external g_thread_create_full(
    func : GThreadFunc,
    data : gpointer,
    stack_size : CULong,
    joinable : Int,
    bound : Int,
    priority : GThreadPriority,
    error : Pointer[Pointer[GError]]) Pointer[GThread];

external g_thread_self() Pointer[GThread];

external g_thread_exit(
    retval : gpointer);

external g_thread_join(
    thread : Pointer[GThread]) gpointer;

external g_thread_set_priority(
    thread : Pointer[GThread],
    priority : GThreadPriority);

external g_static_mutex_init(
    mutex : Pointer[GStaticMutex]);

external g_static_mutex_free(
    mutex : Pointer[GStaticMutex]);

record Struct__GStaticPrivate (
    index : UInt,
);

external g_static_private_init(
    private_key : Pointer[GStaticPrivate]);

external g_static_private_get(
    private_key : Pointer[GStaticPrivate]) gpointer;

external g_static_private_set(
    private_key : Pointer[GStaticPrivate],
    data : gpointer,
    notify : GDestroyNotify);

external g_static_private_free(
    private_key : Pointer[GStaticPrivate]);

alias GStaticRecMutex = Struct__GStaticRecMutex;

record Struct__GStaticRecMutex (
    mutex : GStaticMutex,
    depth : UInt,
    owner : GSystemThread,
);

external g_static_rec_mutex_init(
    mutex : Pointer[GStaticRecMutex]);

external g_static_rec_mutex_lock(
    mutex : Pointer[GStaticRecMutex]);

external g_static_rec_mutex_trylock(
    mutex : Pointer[GStaticRecMutex]) Int;

external g_static_rec_mutex_unlock(
    mutex : Pointer[GStaticRecMutex]);

external g_static_rec_mutex_lock_full(
    mutex : Pointer[GStaticRecMutex],
    depth : UInt);

external g_static_rec_mutex_unlock_full(
    mutex : Pointer[GStaticRecMutex]) UInt;

external g_static_rec_mutex_free(
    mutex : Pointer[GStaticRecMutex]);

alias GStaticRWLock = Struct__GStaticRWLock;

record Struct__GStaticRWLock (
    mutex : GStaticMutex,
    read_cond : Pointer[GCond],
    write_cond : Pointer[GCond],
    read_counter : UInt,
    have_writer : Int,
    want_to_read : UInt,
    want_to_write : UInt,
);

external g_static_rw_lock_init(
    lock : Pointer[GStaticRWLock]);

external g_static_rw_lock_reader_lock(
    lock : Pointer[GStaticRWLock]);

external g_static_rw_lock_reader_trylock(
    lock : Pointer[GStaticRWLock]) Int;

external g_static_rw_lock_reader_unlock(
    lock : Pointer[GStaticRWLock]);

external g_static_rw_lock_writer_lock(
    lock : Pointer[GStaticRWLock]);

external g_static_rw_lock_writer_trylock(
    lock : Pointer[GStaticRWLock]) Int;

external g_static_rw_lock_writer_unlock(
    lock : Pointer[GStaticRWLock]);

external g_static_rw_lock_free(
    lock : Pointer[GStaticRWLock]);

external g_thread_foreach(
    thread_func : GFunc,
    user_data : gpointer);

alias G_ONCE_STATUS_NOTCALLED = 0;
alias G_ONCE_STATUS_PROGRESS = 1;
alias G_ONCE_STATUS_READY = 2;

alias GOnceStatus = Int;

alias GOnce = Struct__GOnce;

record Struct__GOnce (
    status : GOnceStatus,
    retval : gpointer,
);

external g_once_impl(
    once : Pointer[GOnce],
    func : GThreadFunc,
    arg : gpointer) gpointer;

external g_once_init_enter_impl(
    value_location : Pointer[CULong]) Int;

external g_once_init_leave(
    value_location : Pointer[CULong],
    initialization_value : CULong);

external glib_dummy_decl();

alias GAsyncQueue = Opaque;

external g_async_queue_new() Pointer[GAsyncQueue];

external g_async_queue_new_full(
    item_free_func : GDestroyNotify) Pointer[GAsyncQueue];

external g_async_queue_lock(
    queue : Pointer[GAsyncQueue]);

external g_async_queue_unlock(
    queue : Pointer[GAsyncQueue]);

external g_async_queue_ref(
    queue : Pointer[GAsyncQueue]) Pointer[GAsyncQueue];

external g_async_queue_unref(
    queue : Pointer[GAsyncQueue]);

external g_async_queue_ref_unlocked(
    queue : Pointer[GAsyncQueue]);

external g_async_queue_unref_and_unlock(
    queue : Pointer[GAsyncQueue]);

external g_async_queue_push(
    queue : Pointer[GAsyncQueue],
    data : gpointer);

external g_async_queue_push_unlocked(
    queue : Pointer[GAsyncQueue],
    data : gpointer);

external g_async_queue_push_sorted(
    queue : Pointer[GAsyncQueue],
    data : gpointer,
    func : GCompareDataFunc,
    user_data : gpointer);

external g_async_queue_push_sorted_unlocked(
    queue : Pointer[GAsyncQueue],
    data : gpointer,
    func : GCompareDataFunc,
    user_data : gpointer);

external g_async_queue_pop(
    queue : Pointer[GAsyncQueue]) gpointer;

external g_async_queue_pop_unlocked(
    queue : Pointer[GAsyncQueue]) gpointer;

external g_async_queue_try_pop(
    queue : Pointer[GAsyncQueue]) gpointer;

external g_async_queue_try_pop_unlocked(
    queue : Pointer[GAsyncQueue]) gpointer;

external g_async_queue_timed_pop(
    queue : Pointer[GAsyncQueue],
    end_time : Pointer[GTimeVal]) gpointer;

external g_async_queue_timed_pop_unlocked(
    queue : Pointer[GAsyncQueue],
    end_time : Pointer[GTimeVal]) gpointer;

external g_async_queue_length(
    queue : Pointer[GAsyncQueue]) Int;

external g_async_queue_length_unlocked(
    queue : Pointer[GAsyncQueue]) Int;

external g_async_queue_sort(
    queue : Pointer[GAsyncQueue],
    func : GCompareDataFunc,
    user_data : gpointer);

external g_async_queue_sort_unlocked(
    queue : Pointer[GAsyncQueue],
    func : GCompareDataFunc,
    user_data : gpointer);

external _g_async_queue_get_mutex(
    queue : Pointer[GAsyncQueue]) Pointer[GMutex];

external g_on_error_query(
    prg_name : Pointer[CChar]);

external g_on_error_stack_trace(
    prg_name : Pointer[CChar]);

external g_base64_encode_step(
    in_ : Pointer[CUChar],
    len : CULong,
    break_lines : Int,
    out : Pointer[CChar],
    state : Pointer[Int],
    save : Pointer[Int]) CULong;

external g_base64_encode_close(
    break_lines : Int,
    out : Pointer[CChar],
    state : Pointer[Int],
    save : Pointer[Int]) CULong;

external g_base64_encode(
    data : Pointer[CUChar],
    len : CULong) Pointer[CChar];

external g_base64_decode_step(
    in_ : Pointer[CChar],
    len : CULong,
    out : Pointer[CUChar],
    state : Pointer[Int],
    save : Pointer[UInt]) CULong;

external g_base64_decode(
    text : Pointer[CChar],
    out_len : Pointer[CULong]) Pointer[CUChar];

external g_base64_decode_inplace(
    text : Pointer[CChar],
    out_len : Pointer[CULong]) Pointer[CUChar];

external g_bit_lock(
    address : Pointer[Int],
    lock_bit : Int);

external g_bit_trylock(
    address : Pointer[Int],
    lock_bit : Int) Int;

external g_bit_unlock(
    address : Pointer[Int],
    lock_bit : Int);

alias G_BOOKMARK_FILE_ERROR_INVALID_URI = 0;
alias G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1;
alias G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2;
alias G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3;
alias G_BOOKMARK_FILE_ERROR_READ = 4;
alias G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5;
alias G_BOOKMARK_FILE_ERROR_WRITE = 6;
alias G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7;

alias GBookmarkFileError = Int;

external g_bookmark_file_error_quark() UInt;

alias GBookmarkFile = Opaque;

external g_bookmark_file_new() Pointer[GBookmarkFile];

external g_bookmark_file_free(
    bookmark : Pointer[GBookmarkFile]);

external g_bookmark_file_load_from_file(
    bookmark : Pointer[GBookmarkFile],
    filename : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_load_from_data(
    bookmark : Pointer[GBookmarkFile],
    data : Pointer[CChar],
    length : CULong,
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_load_from_data_dirs(
    bookmark : Pointer[GBookmarkFile],
    file : Pointer[CChar],
    full_path : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_to_data(
    bookmark : Pointer[GBookmarkFile],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_bookmark_file_to_file(
    bookmark : Pointer[GBookmarkFile],
    filename : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_set_title(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    title : Pointer[CChar]);

external g_bookmark_file_get_title(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_bookmark_file_set_description(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    description : Pointer[CChar]);

external g_bookmark_file_get_description(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_bookmark_file_set_mime_type(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    mime_type : Pointer[CChar]);

external g_bookmark_file_get_mime_type(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_bookmark_file_set_groups(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    groups : Pointer[Pointer[CChar]],
    length : CULong);

external g_bookmark_file_add_group(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    group : Pointer[CChar]);

external g_bookmark_file_has_group(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    group : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_get_groups(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_bookmark_file_add_application(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    name : Pointer[CChar],
    exec : Pointer[CChar]);

external g_bookmark_file_has_application(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_get_applications(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_bookmark_file_set_app_info(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    name : Pointer[CChar],
    exec : Pointer[CChar],
    count : Int,
    stamp : CLong,
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_get_app_info(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    name : Pointer[CChar],
    exec : Pointer[Pointer[CChar]],
    count : Pointer[UInt],
    stamp : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_set_is_private(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    is_private : Int);

external g_bookmark_file_get_is_private(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_set_icon(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    href : Pointer[CChar],
    mime_type : Pointer[CChar]);

external g_bookmark_file_get_icon(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    href : Pointer[Pointer[CChar]],
    mime_type : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_set_added(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    added : CLong);

external g_bookmark_file_get_added(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) CLong;

external g_bookmark_file_set_modified(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    modified : CLong);

external g_bookmark_file_get_modified(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) CLong;

external g_bookmark_file_set_visited(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    visited : CLong);

external g_bookmark_file_get_visited(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) CLong;

external g_bookmark_file_has_item(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar]) Int;

external g_bookmark_file_get_size(
    bookmark : Pointer[GBookmarkFile]) Int;

external g_bookmark_file_get_uris(
    bookmark : Pointer[GBookmarkFile],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external g_bookmark_file_remove_group(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    group : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_remove_application(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_remove_item(
    bookmark : Pointer[GBookmarkFile],
    uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_bookmark_file_move_item(
    bookmark : Pointer[GBookmarkFile],
    old_uri : Pointer[CChar],
    new_uri : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_slice_alloc(
    block_size : CULong) gpointer;

external g_slice_alloc0(
    block_size : CULong) gpointer;

external g_slice_copy(
    block_size : CULong,
    mem_block : gconstpointer) gpointer;

external g_slice_free1(
    block_size : CULong,
    mem_block : gpointer);

external g_slice_free_chain_with_offset(
    block_size : CULong,
    mem_chain : gpointer,
    next_offset : CULong);

alias G_SLICE_CONFIG_ALWAYS_MALLOC = 1;
alias G_SLICE_CONFIG_BYPASS_MAGAZINES = 2;
alias G_SLICE_CONFIG_WORKING_SET_MSECS = 3;
alias G_SLICE_CONFIG_COLOR_INCREMENT = 4;
alias G_SLICE_CONFIG_CHUNK_SIZES = 5;
alias G_SLICE_CONFIG_CONTENTION_COUNTER = 6;

alias GSliceConfig = Int;

external g_slice_set_config(
    ckey : GSliceConfig,
    value : CLong);

external g_slice_get_config(
    ckey : GSliceConfig) CLong;

external g_slice_get_config_state(
    ckey : GSliceConfig,
    address : CLong,
    n_values : Pointer[UInt]) Pointer[CLong];

alias GMemVTable = Struct__GMemVTable;

external g_free(
    mem : gpointer);

external g_malloc(
    n_bytes : CULong) gpointer;

external g_malloc0(
    n_bytes : CULong) gpointer;

external g_realloc(
    mem : gpointer,
    n_bytes : CULong) gpointer;

external g_try_malloc(
    n_bytes : CULong) gpointer;

external g_try_malloc0(
    n_bytes : CULong) gpointer;

external g_try_realloc(
    mem : gpointer,
    n_bytes : CULong) gpointer;

external g_malloc_n(
    n_blocks : CULong,
    n_block_bytes : CULong) gpointer;

external g_malloc0_n(
    n_blocks : CULong,
    n_block_bytes : CULong) gpointer;

external g_realloc_n(
    mem : gpointer,
    n_blocks : CULong,
    n_block_bytes : CULong) gpointer;

external g_try_malloc_n(
    n_blocks : CULong,
    n_block_bytes : CULong) gpointer;

external g_try_malloc0_n(
    n_blocks : CULong,
    n_block_bytes : CULong) gpointer;

external g_try_realloc_n(
    mem : gpointer,
    n_blocks : CULong,
    n_block_bytes : CULong) gpointer;

record Struct__GMemVTable (
    malloc : CCodePointer[(CULong),(RawPointer)],
    realloc : CCodePointer[(RawPointer,CULong),(RawPointer)],
    free : CCodePointer[(RawPointer),()],
    calloc : CCodePointer[(CULong,CULong),(RawPointer)],
    try_malloc : CCodePointer[(CULong),(RawPointer)],
    try_realloc : CCodePointer[(RawPointer,CULong),(RawPointer)],
);

external g_mem_set_vtable(
    vtable : Pointer[GMemVTable]);

external g_mem_is_system_malloc() Int;

external g_mem_gc_friendly : Int;

external glib_mem_profiler_table : Pointer[GMemVTable];

external g_mem_profile();

alias GAllocator = Opaque;

alias GMemChunk = Opaque;

external g_mem_chunk_new(
    name : Pointer[CChar],
    atom_size : Int,
    area_size : CULong,
    type : Int) Pointer[GMemChunk];

external g_mem_chunk_destroy(
    mem_chunk : Pointer[GMemChunk]);

external g_mem_chunk_alloc(
    mem_chunk : Pointer[GMemChunk]) gpointer;

external g_mem_chunk_alloc0(
    mem_chunk : Pointer[GMemChunk]) gpointer;

external g_mem_chunk_free(
    mem_chunk : Pointer[GMemChunk],
    mem : gpointer);

external g_mem_chunk_clean(
    mem_chunk : Pointer[GMemChunk]);

external g_mem_chunk_reset(
    mem_chunk : Pointer[GMemChunk]);

external g_mem_chunk_print(
    mem_chunk : Pointer[GMemChunk]);

external g_mem_chunk_info();

external g_blow_chunks();

external g_allocator_new(
    name : Pointer[CChar],
    n_preallocs : UInt) Pointer[GAllocator];

external g_allocator_free(
    allocator : Pointer[GAllocator]);

alias GList = Struct__GList;

record Struct__GList (
    data : gpointer,
    next : Pointer[GList],
    prev : Pointer[GList],
);

external g_list_alloc() Pointer[GList];

external g_list_free(
    list : Pointer[GList]);

external g_list_free_1(
    list : Pointer[GList]);

external g_list_append(
    list : Pointer[GList],
    data : gpointer) Pointer[GList];

external g_list_prepend(
    list : Pointer[GList],
    data : gpointer) Pointer[GList];

external g_list_insert(
    list : Pointer[GList],
    data : gpointer,
    position : Int) Pointer[GList];

external g_list_insert_sorted(
    list : Pointer[GList],
    data : gpointer,
    func : GCompareFunc) Pointer[GList];

external g_list_insert_sorted_with_data(
    list : Pointer[GList],
    data : gpointer,
    func : GCompareDataFunc,
    user_data : gpointer) Pointer[GList];

external g_list_insert_before(
    list : Pointer[GList],
    sibling : Pointer[GList],
    data : gpointer) Pointer[GList];

external g_list_concat(
    list1 : Pointer[GList],
    list2 : Pointer[GList]) Pointer[GList];

external g_list_remove(
    list : Pointer[GList],
    data : gconstpointer) Pointer[GList];

external g_list_remove_all(
    list : Pointer[GList],
    data : gconstpointer) Pointer[GList];

external g_list_remove_link(
    list : Pointer[GList],
    llink : Pointer[GList]) Pointer[GList];

external g_list_delete_link(
    list : Pointer[GList],
    link_ : Pointer[GList]) Pointer[GList];

external g_list_reverse(
    list : Pointer[GList]) Pointer[GList];

external g_list_copy(
    list : Pointer[GList]) Pointer[GList];

external g_list_nth(
    list : Pointer[GList],
    n : UInt) Pointer[GList];

external g_list_nth_prev(
    list : Pointer[GList],
    n : UInt) Pointer[GList];

external g_list_find(
    list : Pointer[GList],
    data : gconstpointer) Pointer[GList];

external g_list_find_custom(
    list : Pointer[GList],
    data : gconstpointer,
    func : GCompareFunc) Pointer[GList];

external g_list_position(
    list : Pointer[GList],
    llink : Pointer[GList]) Int;

external g_list_index(
    list : Pointer[GList],
    data : gconstpointer) Int;

external g_list_last(
    list : Pointer[GList]) Pointer[GList];

external g_list_first(
    list : Pointer[GList]) Pointer[GList];

external g_list_length(
    list : Pointer[GList]) UInt;

external g_list_foreach(
    list : Pointer[GList],
    func : GFunc,
    user_data : gpointer);

external g_list_sort(
    list : Pointer[GList],
    compare_func : GCompareFunc) Pointer[GList];

external g_list_sort_with_data(
    list : Pointer[GList],
    compare_func : GCompareDataFunc,
    user_data : gpointer) Pointer[GList];

external g_list_nth_data(
    list : Pointer[GList],
    n : UInt) gpointer;

external g_list_push_allocator(
    allocator : gpointer);

external g_list_pop_allocator();

alias GCache = Opaque;

alias GCacheNewFunc = CCodePointer[(RawPointer),(RawPointer)];

alias GCacheDupFunc = CCodePointer[(RawPointer),(RawPointer)];

alias GCacheDestroyFunc = CCodePointer[(RawPointer),()];

external g_cache_new(
    value_new_func : GCacheNewFunc,
    value_destroy_func : GCacheDestroyFunc,
    key_dup_func : GCacheDupFunc,
    key_destroy_func : GCacheDestroyFunc,
    hash_key_func : GHashFunc,
    hash_value_func : GHashFunc,
    key_equal_func : GEqualFunc) Pointer[GCache];

external g_cache_destroy(
    cache : Pointer[GCache]);

external g_cache_insert(
    cache : Pointer[GCache],
    key : gpointer) gpointer;

external g_cache_remove(
    cache : Pointer[GCache],
    value : gconstpointer);

external g_cache_key_foreach(
    cache : Pointer[GCache],
    func : GHFunc,
    user_data : gpointer);

external g_cache_value_foreach(
    cache : Pointer[GCache],
    func : GHFunc,
    user_data : gpointer);

alias G_CHECKSUM_MD5 = 0;
alias G_CHECKSUM_SHA1 = 1;
alias G_CHECKSUM_SHA256 = 2;

alias GChecksumType = Int;

alias GChecksum = Opaque;

external g_checksum_type_get_length(
    checksum_type : GChecksumType) CLong;

external g_checksum_new(
    checksum_type : GChecksumType) Pointer[GChecksum];

external g_checksum_reset(
    checksum : Pointer[GChecksum]);

external g_checksum_copy(
    checksum : Pointer[GChecksum]) Pointer[GChecksum];

external g_checksum_free(
    checksum : Pointer[GChecksum]);

external g_checksum_update(
    checksum : Pointer[GChecksum],
    data : Pointer[CUChar],
    length : CLong);

external g_checksum_get_string(
    checksum : Pointer[GChecksum]) Pointer[CChar];

external g_checksum_get_digest(
    checksum : Pointer[GChecksum],
    buffer : Pointer[CUChar],
    digest_len : Pointer[CULong]);

external g_compute_checksum_for_data(
    checksum_type : GChecksumType,
    data : Pointer[CUChar],
    length : CULong) Pointer[CChar];

external g_compute_checksum_for_string(
    checksum_type : GChecksumType,
    str : Pointer[CChar],
    length : CLong) Pointer[CChar];

alias GCompletion = Struct__GCompletion;

alias GCompletionFunc = CCodePointer[(RawPointer),(Pointer[CChar])];

alias GCompletionStrncmpFunc = CCodePointer[(Pointer[CChar],Pointer[CChar],CULong),(Int)];

record Struct__GCompletion (
    items : Pointer[GList],
    func : GCompletionFunc,
    prefix : Pointer[CChar],
    cache : Pointer[GList],
    strncmp_func : GCompletionStrncmpFunc,
);

external g_completion_new(
    func : GCompletionFunc) Pointer[GCompletion];

external g_completion_add_items(
    cmp : Pointer[GCompletion],
    items : Pointer[GList]);

external g_completion_remove_items(
    cmp : Pointer[GCompletion],
    items : Pointer[GList]);

external g_completion_clear_items(
    cmp : Pointer[GCompletion]);

external g_completion_complete(
    cmp : Pointer[GCompletion],
    prefix : Pointer[CChar],
    new_prefix : Pointer[Pointer[CChar]]) Pointer[GList];

external g_completion_complete_utf8(
    cmp : Pointer[GCompletion],
    prefix : Pointer[CChar],
    new_prefix : Pointer[Pointer[CChar]]) Pointer[GList];

external g_completion_set_compare(
    cmp : Pointer[GCompletion],
    strncmp_func : GCompletionStrncmpFunc);

external g_completion_free(
    cmp : Pointer[GCompletion]);

alias G_CONVERT_ERROR_NO_CONVERSION = 0;
alias G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1;
alias G_CONVERT_ERROR_FAILED = 2;
alias G_CONVERT_ERROR_PARTIAL_INPUT = 3;
alias G_CONVERT_ERROR_BAD_URI = 4;
alias G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5;

alias GConvertError = Int;

external g_convert_error_quark() UInt;

alias GIConv = OpaquePointer;

external g_iconv_open(
    to_codeset : Pointer[CChar],
    from_codeset : Pointer[CChar]) GIConv;

external g_iconv(
    converter : GIConv,
    inbuf : Pointer[Pointer[CChar]],
    inbytes_left : Pointer[CULong],
    outbuf : Pointer[Pointer[CChar]],
    outbytes_left : Pointer[CULong]) CULong;

external g_iconv_close(
    converter : GIConv) Int;

external g_convert(
    str : Pointer[CChar],
    len : CLong,
    to_codeset : Pointer[CChar],
    from_codeset : Pointer[CChar],
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_convert_with_iconv(
    str : Pointer[CChar],
    len : CLong,
    converter : GIConv,
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_convert_with_fallback(
    str : Pointer[CChar],
    len : CLong,
    to_codeset : Pointer[CChar],
    from_codeset : Pointer[CChar],
    fallback : Pointer[CChar],
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_locale_to_utf8(
    opsysstring : Pointer[CChar],
    len : CLong,
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_locale_from_utf8(
    utf8string : Pointer[CChar],
    len : CLong,
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_filename_to_utf8(
    opsysstring : Pointer[CChar],
    len : CLong,
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_filename_from_utf8(
    utf8string : Pointer[CChar],
    len : CLong,
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_filename_from_uri(
    uri : Pointer[CChar],
    hostname : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_filename_to_uri(
    filename : Pointer[CChar],
    hostname : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_filename_display_name(
    filename : Pointer[CChar]) Pointer[CChar];

external g_get_filename_charsets(
    charsets : Pointer[Pointer[Pointer[CChar]]]) Int;

external g_filename_display_basename(
    filename : Pointer[CChar]) Pointer[CChar];

external g_uri_list_extract_uris(
    uri_list : Pointer[CChar]) Pointer[Pointer[CChar]];

alias GData = Opaque;

alias GDataForeachFunc = CCodePointer[(UInt,RawPointer,RawPointer),()];

external g_datalist_init(
    datalist : Pointer[Pointer[GData]]);

external g_datalist_clear(
    datalist : Pointer[Pointer[GData]]);

external g_datalist_id_get_data(
    datalist : Pointer[Pointer[GData]],
    key_id : UInt) gpointer;

external g_datalist_id_set_data_full(
    datalist : Pointer[Pointer[GData]],
    key_id : UInt,
    data : gpointer,
    destroy_func : GDestroyNotify);

external g_datalist_id_remove_no_notify(
    datalist : Pointer[Pointer[GData]],
    key_id : UInt) gpointer;

external g_datalist_foreach(
    datalist : Pointer[Pointer[GData]],
    func : GDataForeachFunc,
    user_data : gpointer);

external g_datalist_set_flags(
    datalist : Pointer[Pointer[GData]],
    flags : UInt);

external g_datalist_unset_flags(
    datalist : Pointer[Pointer[GData]],
    flags : UInt);

external g_datalist_get_flags(
    datalist : Pointer[Pointer[GData]]) UInt;

external g_dataset_destroy(
    dataset_location : gconstpointer);

external g_dataset_id_get_data(
    dataset_location : gconstpointer,
    key_id : UInt) gpointer;

external g_dataset_id_set_data_full(
    dataset_location : gconstpointer,
    key_id : UInt,
    data : gpointer,
    destroy_func : GDestroyNotify);

external g_dataset_id_remove_no_notify(
    dataset_location : gconstpointer,
    key_id : UInt) gpointer;

external g_dataset_foreach(
    dataset_location : gconstpointer,
    func : GDataForeachFunc,
    user_data : gpointer);

alias GTime = Int;

alias GDateYear = UShort;

alias GDateDay = CUChar;

alias GDate = Struct__GDate;

alias G_DATE_DAY = 0;
alias G_DATE_MONTH = 1;
alias G_DATE_YEAR = 2;

alias GDateDMY = Int;

alias G_DATE_BAD_WEEKDAY = 0;
alias G_DATE_MONDAY = 1;
alias G_DATE_TUESDAY = 2;
alias G_DATE_WEDNESDAY = 3;
alias G_DATE_THURSDAY = 4;
alias G_DATE_FRIDAY = 5;
alias G_DATE_SATURDAY = 6;
alias G_DATE_SUNDAY = 7;

alias GDateWeekday = Int;

alias G_DATE_BAD_MONTH = 0;
alias G_DATE_JANUARY = 1;
alias G_DATE_FEBRUARY = 2;
alias G_DATE_MARCH = 3;
alias G_DATE_APRIL = 4;
alias G_DATE_MAY = 5;
alias G_DATE_JUNE = 6;
alias G_DATE_JULY = 7;
alias G_DATE_AUGUST = 8;
alias G_DATE_SEPTEMBER = 9;
alias G_DATE_OCTOBER = 10;
alias G_DATE_NOVEMBER = 11;
alias G_DATE_DECEMBER = 12;

alias GDateMonth = Int;

record Struct__GDate (
    julian_days : UInt,
    julian : UInt,
    dmy : UInt,
    day : UInt,
    month : UInt,
    year : UInt,
);

external g_date_new() Pointer[GDate];

external g_date_new_dmy(
    day : CUChar,
    month : GDateMonth,
    year : UShort) Pointer[GDate];

external g_date_new_julian(
    julian_day : UInt) Pointer[GDate];

external g_date_free(
    date : Pointer[GDate]);

external g_date_valid(
    date : Pointer[GDate]) Int;

external g_date_valid_day(
    day : CUChar) Int;

external g_date_valid_month(
    month : GDateMonth) Int;

external g_date_valid_year(
    year : UShort) Int;

external g_date_valid_weekday(
    weekday : GDateWeekday) Int;

external g_date_valid_julian(
    julian_date : UInt) Int;

external g_date_valid_dmy(
    day : CUChar,
    month : GDateMonth,
    year : UShort) Int;

external g_date_get_weekday(
    date : Pointer[GDate]) GDateWeekday;

external g_date_get_month(
    date : Pointer[GDate]) GDateMonth;

external g_date_get_year(
    date : Pointer[GDate]) UShort;

external g_date_get_day(
    date : Pointer[GDate]) CUChar;

external g_date_get_julian(
    date : Pointer[GDate]) UInt;

external g_date_get_day_of_year(
    date : Pointer[GDate]) UInt;

external g_date_get_monday_week_of_year(
    date : Pointer[GDate]) UInt;

external g_date_get_sunday_week_of_year(
    date : Pointer[GDate]) UInt;

external g_date_get_iso8601_week_of_year(
    date : Pointer[GDate]) UInt;

external g_date_clear(
    date : Pointer[GDate],
    n_dates : UInt);

external g_date_set_parse(
    date : Pointer[GDate],
    str : Pointer[CChar]);

external g_date_set_time_t(
    date : Pointer[GDate],
    timet : CLong);

external g_date_set_time_val(
    date : Pointer[GDate],
    timeval : Pointer[GTimeVal]);

external g_date_set_time(
    date : Pointer[GDate],
    time_ : Int);

external g_date_set_month(
    date : Pointer[GDate],
    month : GDateMonth);

external g_date_set_day(
    date : Pointer[GDate],
    day : CUChar);

external g_date_set_year(
    date : Pointer[GDate],
    year : UShort);

external g_date_set_dmy(
    date : Pointer[GDate],
    day : CUChar,
    month : GDateMonth,
    y : UShort);

external g_date_set_julian(
    date : Pointer[GDate],
    julian_date : UInt);

external g_date_is_first_of_month(
    date : Pointer[GDate]) Int;

external g_date_is_last_of_month(
    date : Pointer[GDate]) Int;

external g_date_add_days(
    date : Pointer[GDate],
    n_days : UInt);

external g_date_subtract_days(
    date : Pointer[GDate],
    n_days : UInt);

external g_date_add_months(
    date : Pointer[GDate],
    n_months : UInt);

external g_date_subtract_months(
    date : Pointer[GDate],
    n_months : UInt);

external g_date_add_years(
    date : Pointer[GDate],
    n_years : UInt);

external g_date_subtract_years(
    date : Pointer[GDate],
    n_years : UInt);

external g_date_is_leap_year(
    year : UShort) Int;

external g_date_get_days_in_month(
    month : GDateMonth,
    year : UShort) CUChar;

external g_date_get_monday_weeks_in_year(
    year : UShort) CUChar;

external g_date_get_sunday_weeks_in_year(
    year : UShort) CUChar;

external g_date_days_between(
    date1 : Pointer[GDate],
    date2 : Pointer[GDate]) Int;

external g_date_compare(
    lhs : Pointer[GDate],
    rhs : Pointer[GDate]) Int;

external g_date_to_struct_tm(
    date : Pointer[GDate],
    tm : Pointer[Struct_tm]);

external g_date_clamp(
    date : Pointer[GDate],
    min_date : Pointer[GDate],
    max_date : Pointer[GDate]);

external g_date_order(
    date1 : Pointer[GDate],
    date2 : Pointer[GDate]);

external g_date_strftime(
    s : Pointer[CChar],
    slen : CULong,
    format : Pointer[CChar],
    date : Pointer[GDate]) CULong;

alias GTimeZone = Opaque;

external g_time_zone_new(
    identifier : Pointer[CChar]) Pointer[GTimeZone];

external g_time_zone_new_utc() Pointer[GTimeZone];

external g_time_zone_new_local() Pointer[GTimeZone];

external g_time_zone_ref(
    tz : Pointer[GTimeZone]) Pointer[GTimeZone];

external g_time_zone_unref(
    tz : Pointer[GTimeZone]);

alias GTimeSpan = CLong;

alias GDateTime = Opaque;

external g_date_time_unref(
    datetime : Pointer[GDateTime]);

external g_date_time_ref(
    datetime : Pointer[GDateTime]) Pointer[GDateTime];

external g_date_time_new_now(
    tz : Pointer[GTimeZone]) Pointer[GDateTime];

external g_date_time_new_now_local() Pointer[GDateTime];

external g_date_time_new_now_utc() Pointer[GDateTime];

external g_date_time_new_from_unix_local(
    t : CLong) Pointer[GDateTime];

external g_date_time_new_from_unix_utc(
    t : CLong) Pointer[GDateTime];

external g_date_time_new_from_timeval_local(
    tv : Pointer[GTimeVal]) Pointer[GDateTime];

external g_date_time_new_from_timeval_utc(
    tv : Pointer[GTimeVal]) Pointer[GDateTime];

external g_date_time_new(
    tz : Pointer[GTimeZone],
    year : Int,
    month : Int,
    day : Int,
    hour : Int,
    minute : Int,
    seconds : Double) Pointer[GDateTime];

external g_date_time_new_local(
    year : Int,
    month : Int,
    day : Int,
    hour : Int,
    minute : Int,
    seconds : Double) Pointer[GDateTime];

external g_date_time_new_utc(
    year : Int,
    month : Int,
    day : Int,
    hour : Int,
    minute : Int,
    seconds : Double) Pointer[GDateTime];

external g_date_time_add(
    datetime : Pointer[GDateTime],
    timespan : CLong) Pointer[GDateTime];

external g_date_time_add_years(
    datetime : Pointer[GDateTime],
    years : Int) Pointer[GDateTime];

external g_date_time_add_months(
    datetime : Pointer[GDateTime],
    months : Int) Pointer[GDateTime];

external g_date_time_add_weeks(
    datetime : Pointer[GDateTime],
    weeks : Int) Pointer[GDateTime];

external g_date_time_add_days(
    datetime : Pointer[GDateTime],
    days : Int) Pointer[GDateTime];

external g_date_time_add_hours(
    datetime : Pointer[GDateTime],
    hours : Int) Pointer[GDateTime];

external g_date_time_add_minutes(
    datetime : Pointer[GDateTime],
    minutes : Int) Pointer[GDateTime];

external g_date_time_add_seconds(
    datetime : Pointer[GDateTime],
    seconds : Double) Pointer[GDateTime];

external g_date_time_add_full(
    datetime : Pointer[GDateTime],
    years : Int,
    months : Int,
    days : Int,
    hours : Int,
    minutes : Int,
    seconds : Double) Pointer[GDateTime];

external g_date_time_compare(
    dt1 : gconstpointer,
    dt2 : gconstpointer) Int;

external g_date_time_difference(
    end : Pointer[GDateTime],
    begin : Pointer[GDateTime]) CLong;

external g_date_time_hash(
    datetime : gconstpointer) UInt;

external g_date_time_equal(
    dt1 : gconstpointer,
    dt2 : gconstpointer) Int;

external g_date_time_get_ymd(
    datetime : Pointer[GDateTime],
    year : Pointer[Int],
    month : Pointer[Int],
    day : Pointer[Int]);

external g_date_time_get_year(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_month(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_day_of_month(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_week_numbering_year(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_week_of_year(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_day_of_week(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_day_of_year(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_hour(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_minute(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_second(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_microsecond(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_get_seconds(
    datetime : Pointer[GDateTime]) Double;

external g_date_time_to_unix(
    datetime : Pointer[GDateTime]) CLong;

external g_date_time_to_timeval(
    datetime : Pointer[GDateTime],
    tv : Pointer[GTimeVal]) Int;

external g_date_time_get_utc_offset(
    datetime : Pointer[GDateTime]) CLong;

external g_date_time_get_timezone_abbreviation(
    datetime : Pointer[GDateTime]) Pointer[CChar];

external g_date_time_is_daylight_savings(
    datetime : Pointer[GDateTime]) Int;

external g_date_time_to_timezone(
    datetime : Pointer[GDateTime],
    tz : Pointer[GTimeZone]) Pointer[GDateTime];

external g_date_time_to_local(
    datetime : Pointer[GDateTime]) Pointer[GDateTime];

external g_date_time_to_utc(
    datetime : Pointer[GDateTime]) Pointer[GDateTime];

external g_date_time_format(
    datetime : Pointer[GDateTime],
    format : Pointer[CChar]) Pointer[CChar];

alias GDir = Opaque;

external g_dir_open(
    path : Pointer[CChar],
    flags : UInt,
    error : Pointer[Pointer[GError]]) Pointer[GDir];

external g_dir_read_name(
    dir : Pointer[GDir]) Pointer[CChar];

external g_dir_rewind(
    dir : Pointer[GDir]);

external g_dir_close(
    dir : Pointer[GDir]);

alias G_FILE_ERROR_EXIST = 0;
alias G_FILE_ERROR_ISDIR = 1;
alias G_FILE_ERROR_ACCES = 2;
alias G_FILE_ERROR_NAMETOOLONG = 3;
alias G_FILE_ERROR_NOENT = 4;
alias G_FILE_ERROR_NOTDIR = 5;
alias G_FILE_ERROR_NXIO = 6;
alias G_FILE_ERROR_NODEV = 7;
alias G_FILE_ERROR_ROFS = 8;
alias G_FILE_ERROR_TXTBSY = 9;
alias G_FILE_ERROR_FAULT = 10;
alias G_FILE_ERROR_LOOP = 11;
alias G_FILE_ERROR_NOSPC = 12;
alias G_FILE_ERROR_NOMEM = 13;
alias G_FILE_ERROR_MFILE = 14;
alias G_FILE_ERROR_NFILE = 15;
alias G_FILE_ERROR_BADF = 16;
alias G_FILE_ERROR_INVAL = 17;
alias G_FILE_ERROR_PIPE = 18;
alias G_FILE_ERROR_AGAIN = 19;
alias G_FILE_ERROR_INTR = 20;
alias G_FILE_ERROR_IO = 21;
alias G_FILE_ERROR_PERM = 22;
alias G_FILE_ERROR_NOSYS = 23;
alias G_FILE_ERROR_FAILED = 24;

alias GFileError = Int;

alias G_FILE_TEST_IS_REGULAR = 1;
alias G_FILE_TEST_IS_SYMLINK = 2;
alias G_FILE_TEST_IS_DIR = 4;
alias G_FILE_TEST_IS_EXECUTABLE = 8;
alias G_FILE_TEST_EXISTS = 16;

alias GFileTest = Int;

external g_file_error_quark() UInt;

external g_file_error_from_errno(
    err_no : Int) GFileError;

external g_file_test(
    filename : Pointer[CChar],
    test : GFileTest) Int;

external g_file_get_contents(
    filename : Pointer[CChar],
    contents : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_contents(
    filename : Pointer[CChar],
    contents : Pointer[CChar],
    length : CLong,
    error : Pointer[Pointer[GError]]) Int;

external g_file_read_link(
    filename : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_mkstemp(
    tmpl : Pointer[CChar]) Int;

external g_mkstemp_full(
    tmpl : Pointer[CChar],
    flags : Int,
    mode : Int) Int;

external g_file_open_tmp(
    tmpl : Pointer[CChar],
    name_used : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_format_size_for_display(
    size : CLong) Pointer[CChar];

external g_build_path(
    separator : Pointer[CChar],
    first_element : Pointer[CChar],
    ...) Pointer[CChar];

external g_build_pathv(
    separator : Pointer[CChar],
    args : Pointer[Pointer[CChar]]) Pointer[CChar];

external g_build_filename(
    first_element : Pointer[CChar],
    ...) Pointer[CChar];

external g_build_filenamev(
    args : Pointer[Pointer[CChar]]) Pointer[CChar];

external g_mkdir_with_parents(
    pathname : Pointer[CChar],
    mode : Int) Int;

alias GHashTable = Opaque;

alias GHRFunc = CCodePointer[(RawPointer,RawPointer,RawPointer),(Int)];

alias GHashTableIter = Struct__GHashTableIter;

record Struct__GHashTableIter (
    dummy1 : gpointer,
    dummy2 : gpointer,
    dummy3 : gpointer,
    dummy4 : Int,
    dummy5 : Int,
    dummy6 : gpointer,
);

external g_hash_table_new(
    hash_func : GHashFunc,
    key_equal_func : GEqualFunc) Pointer[GHashTable];

external g_hash_table_new_full(
    hash_func : GHashFunc,
    key_equal_func : GEqualFunc,
    key_destroy_func : GDestroyNotify,
    value_destroy_func : GDestroyNotify) Pointer[GHashTable];

external g_hash_table_destroy(
    hash_table : Pointer[GHashTable]);

external g_hash_table_insert(
    hash_table : Pointer[GHashTable],
    key : gpointer,
    value : gpointer);

external g_hash_table_replace(
    hash_table : Pointer[GHashTable],
    key : gpointer,
    value : gpointer);

external g_hash_table_remove(
    hash_table : Pointer[GHashTable],
    key : gconstpointer) Int;

external g_hash_table_remove_all(
    hash_table : Pointer[GHashTable]);

external g_hash_table_steal(
    hash_table : Pointer[GHashTable],
    key : gconstpointer) Int;

external g_hash_table_steal_all(
    hash_table : Pointer[GHashTable]);

external g_hash_table_lookup(
    hash_table : Pointer[GHashTable],
    key : gconstpointer) gpointer;

external g_hash_table_lookup_extended(
    hash_table : Pointer[GHashTable],
    lookup_key : gconstpointer,
    orig_key : Pointer[gpointer],
    value : Pointer[gpointer]) Int;

external g_hash_table_foreach(
    hash_table : Pointer[GHashTable],
    func : GHFunc,
    user_data : gpointer);

external g_hash_table_find(
    hash_table : Pointer[GHashTable],
    predicate : GHRFunc,
    user_data : gpointer) gpointer;

external g_hash_table_foreach_remove(
    hash_table : Pointer[GHashTable],
    func : GHRFunc,
    user_data : gpointer) UInt;

external g_hash_table_foreach_steal(
    hash_table : Pointer[GHashTable],
    func : GHRFunc,
    user_data : gpointer) UInt;

external g_hash_table_size(
    hash_table : Pointer[GHashTable]) UInt;

external g_hash_table_get_keys(
    hash_table : Pointer[GHashTable]) Pointer[GList];

external g_hash_table_get_values(
    hash_table : Pointer[GHashTable]) Pointer[GList];

external g_hash_table_iter_init(
    iter : Pointer[GHashTableIter],
    hash_table : Pointer[GHashTable]);

external g_hash_table_iter_next(
    iter : Pointer[GHashTableIter],
    key : Pointer[gpointer],
    value : Pointer[gpointer]) Int;

external g_hash_table_iter_get_hash_table(
    iter : Pointer[GHashTableIter]) Pointer[GHashTable];

external g_hash_table_iter_remove(
    iter : Pointer[GHashTableIter]);

external g_hash_table_iter_steal(
    iter : Pointer[GHashTableIter]);

external g_hash_table_ref(
    hash_table : Pointer[GHashTable]) Pointer[GHashTable];

external g_hash_table_unref(
    hash_table : Pointer[GHashTable]);

external g_str_equal(
    v1 : gconstpointer,
    v2 : gconstpointer) Int;

external g_str_hash(
    v : gconstpointer) UInt;

external g_int_equal(
    v1 : gconstpointer,
    v2 : gconstpointer) Int;

external g_int_hash(
    v : gconstpointer) UInt;

external g_int64_equal(
    v1 : gconstpointer,
    v2 : gconstpointer) Int;

external g_int64_hash(
    v : gconstpointer) UInt;

external g_double_equal(
    v1 : gconstpointer,
    v2 : gconstpointer) Int;

external g_double_hash(
    v : gconstpointer) UInt;

external g_direct_hash(
    v : gconstpointer) UInt;

external g_direct_equal(
    v1 : gconstpointer,
    v2 : gconstpointer) Int;

alias GHook = Struct__GHook;

alias GHookList = Struct__GHookList;

alias GHookCompareFunc = CCodePointer[(Pointer[Struct__GHook],Pointer[Struct__GHook]),(Int)];

alias GHookFindFunc = CCodePointer[(Pointer[Struct__GHook],RawPointer),(Int)];

alias GHookMarshaller = CCodePointer[(Pointer[Struct__GHook],RawPointer),()];

alias GHookCheckMarshaller = CCodePointer[(Pointer[Struct__GHook],RawPointer),(Int)];

alias GHookFunc = CCodePointer[(RawPointer),()];

alias GHookCheckFunc = CCodePointer[(RawPointer),(Int)];

alias GHookFinalizeFunc = CCodePointer[(Pointer[Struct__GHookList],Pointer[Struct__GHook]),()];

alias G_HOOK_FLAG_ACTIVE = 1;
alias G_HOOK_FLAG_IN_CALL = 2;
alias G_HOOK_FLAG_MASK = 15;

alias GHookFlagMask = Int;

record Struct__GHookList (
    seq_id : CULong,
    hook_size : UInt,
    is_setup : UInt,
    hooks : Pointer[GHook],
    dummy3 : gpointer,
    finalize_hook : GHookFinalizeFunc,
    dummy : Array[gpointer,2],
);

record Struct__GHook (
    data : gpointer,
    next : Pointer[GHook],
    prev : Pointer[GHook],
    ref_count : UInt,
    hook_id : CULong,
    flags : UInt,
    func : gpointer,
    destroy : GDestroyNotify,
);

external g_hook_list_init(
    hook_list : Pointer[GHookList],
    hook_size : UInt);

external g_hook_list_clear(
    hook_list : Pointer[GHookList]);

external g_hook_alloc(
    hook_list : Pointer[GHookList]) Pointer[GHook];

external g_hook_free(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook]);

external g_hook_ref(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook]) Pointer[GHook];

external g_hook_unref(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook]);

external g_hook_destroy(
    hook_list : Pointer[GHookList],
    hook_id : CULong) Int;

external g_hook_destroy_link(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook]);

external g_hook_prepend(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook]);

external g_hook_insert_before(
    hook_list : Pointer[GHookList],
    sibling : Pointer[GHook],
    hook : Pointer[GHook]);

external g_hook_insert_sorted(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook],
    func : GHookCompareFunc);

external g_hook_get(
    hook_list : Pointer[GHookList],
    hook_id : CULong) Pointer[GHook];

external g_hook_find(
    hook_list : Pointer[GHookList],
    need_valids : Int,
    func : GHookFindFunc,
    data : gpointer) Pointer[GHook];

external g_hook_find_data(
    hook_list : Pointer[GHookList],
    need_valids : Int,
    data : gpointer) Pointer[GHook];

external g_hook_find_func(
    hook_list : Pointer[GHookList],
    need_valids : Int,
    func : gpointer) Pointer[GHook];

external g_hook_find_func_data(
    hook_list : Pointer[GHookList],
    need_valids : Int,
    func : gpointer,
    data : gpointer) Pointer[GHook];

external g_hook_first_valid(
    hook_list : Pointer[GHookList],
    may_be_in_call : Int) Pointer[GHook];

external g_hook_next_valid(
    hook_list : Pointer[GHookList],
    hook : Pointer[GHook],
    may_be_in_call : Int) Pointer[GHook];

external g_hook_compare_ids(
    new_hook : Pointer[GHook],
    sibling : Pointer[GHook]) Int;

external g_hook_list_invoke(
    hook_list : Pointer[GHookList],
    may_recurse : Int);

external g_hook_list_invoke_check(
    hook_list : Pointer[GHookList],
    may_recurse : Int);

external g_hook_list_marshal(
    hook_list : Pointer[GHookList],
    may_recurse : Int,
    marshaller : GHookMarshaller,
    marshal_data : gpointer);

external g_hook_list_marshal_check(
    hook_list : Pointer[GHookList],
    may_recurse : Int,
    marshaller : GHookCheckMarshaller,
    marshal_data : gpointer);

external g_hostname_is_non_ascii(
    hostname : Pointer[CChar]) Int;

external g_hostname_is_ascii_encoded(
    hostname : Pointer[CChar]) Int;

external g_hostname_is_ip_address(
    hostname : Pointer[CChar]) Int;

external g_hostname_to_ascii(
    hostname : Pointer[CChar]) Pointer[CChar];

external g_hostname_to_unicode(
    hostname : Pointer[CChar]) Pointer[CChar];

alias GPollFD = Struct__GPollFD;

alias GPollFunc = CCodePointer[(Pointer[Struct__GPollFD],UInt,Int),(Int)];

record Struct__GPollFD (
    fd : Int,
    events : UShort,
    revents : UShort,
);

external g_poll(
    fds : Pointer[GPollFD],
    nfds : UInt,
    timeout : Int) Int;

alias GSList = Struct__GSList;

record Struct__GSList (
    data : gpointer,
    next : Pointer[GSList],
);

external g_slist_alloc() Pointer[GSList];

external g_slist_free(
    list : Pointer[GSList]);

external g_slist_free_1(
    list : Pointer[GSList]);

external g_slist_append(
    list : Pointer[GSList],
    data : gpointer) Pointer[GSList];

external g_slist_prepend(
    list : Pointer[GSList],
    data : gpointer) Pointer[GSList];

external g_slist_insert(
    list : Pointer[GSList],
    data : gpointer,
    position : Int) Pointer[GSList];

external g_slist_insert_sorted(
    list : Pointer[GSList],
    data : gpointer,
    func : GCompareFunc) Pointer[GSList];

external g_slist_insert_sorted_with_data(
    list : Pointer[GSList],
    data : gpointer,
    func : GCompareDataFunc,
    user_data : gpointer) Pointer[GSList];

external g_slist_insert_before(
    slist : Pointer[GSList],
    sibling : Pointer[GSList],
    data : gpointer) Pointer[GSList];

external g_slist_concat(
    list1 : Pointer[GSList],
    list2 : Pointer[GSList]) Pointer[GSList];

external g_slist_remove(
    list : Pointer[GSList],
    data : gconstpointer) Pointer[GSList];

external g_slist_remove_all(
    list : Pointer[GSList],
    data : gconstpointer) Pointer[GSList];

external g_slist_remove_link(
    list : Pointer[GSList],
    link_ : Pointer[GSList]) Pointer[GSList];

external g_slist_delete_link(
    list : Pointer[GSList],
    link_ : Pointer[GSList]) Pointer[GSList];

external g_slist_reverse(
    list : Pointer[GSList]) Pointer[GSList];

external g_slist_copy(
    list : Pointer[GSList]) Pointer[GSList];

external g_slist_nth(
    list : Pointer[GSList],
    n : UInt) Pointer[GSList];

external g_slist_find(
    list : Pointer[GSList],
    data : gconstpointer) Pointer[GSList];

external g_slist_find_custom(
    list : Pointer[GSList],
    data : gconstpointer,
    func : GCompareFunc) Pointer[GSList];

external g_slist_position(
    list : Pointer[GSList],
    llink : Pointer[GSList]) Int;

external g_slist_index(
    list : Pointer[GSList],
    data : gconstpointer) Int;

external g_slist_last(
    list : Pointer[GSList]) Pointer[GSList];

external g_slist_length(
    list : Pointer[GSList]) UInt;

external g_slist_foreach(
    list : Pointer[GSList],
    func : GFunc,
    user_data : gpointer);

external g_slist_sort(
    list : Pointer[GSList],
    compare_func : GCompareFunc) Pointer[GSList];

external g_slist_sort_with_data(
    list : Pointer[GSList],
    compare_func : GCompareDataFunc,
    user_data : gpointer) Pointer[GSList];

external g_slist_nth_data(
    list : Pointer[GSList],
    n : UInt) gpointer;

external g_slist_push_allocator(
    dummy : gpointer);

external g_slist_pop_allocator();

alias GMainContext = Opaque;

alias GMainLoop = Opaque;

alias GSource = Struct__GSource;

alias GSourceCallbackFuncs = Struct__GSourceCallbackFuncs;

alias GSourceFuncs = Struct__GSourceFuncs;

alias GSourceFunc = CCodePointer[(RawPointer),(Int)];

alias GChildWatchFunc = CCodePointer[(Int,Int,RawPointer),()];

record Struct__GSource (
    callback_data : gpointer,
    callback_funcs : Pointer[GSourceCallbackFuncs],
    source_funcs : Pointer[GSourceFuncs],
    ref_count : UInt,
    context : Pointer[GMainContext],
    priority : Int,
    flags : UInt,
    source_id : UInt,
    poll_fds : Pointer[GSList],
    prev : Pointer[GSource],
    next : Pointer[GSource],
    name : Pointer[CChar],
    reserved2 : gpointer,
);

record Struct__GSourceCallbackFuncs (
    ref_ : CCodePointer[(RawPointer),()],
    unref : CCodePointer[(RawPointer),()],
    get : CCodePointer[(RawPointer,Pointer[Struct__GSource],Pointer[CCodePointer[(RawPointer),(Int)]],Pointer[RawPointer]),()],
);

alias GSourceDummyMarshal = CCodePointer[(),()];

record Struct__GSourceFuncs (
    prepare : CCodePointer[(Pointer[Struct__GSource],Pointer[Int]),(Int)],
    check : CCodePointer[(Pointer[Struct__GSource]),(Int)],
    dispatch : CCodePointer[(Pointer[Struct__GSource],CCodePointer[(RawPointer),(Int)],RawPointer),(Int)],
    finalize : CCodePointer[(Pointer[Struct__GSource]),()],
    closure_callback : GSourceFunc,
    closure_marshal : GSourceDummyMarshal,
);

external g_main_context_new() Pointer[GMainContext];

external g_main_context_ref(
    context : Pointer[GMainContext]) Pointer[GMainContext];

external g_main_context_unref(
    context : Pointer[GMainContext]);

external g_main_context_default() Pointer[GMainContext];

external g_main_context_iteration(
    context : Pointer[GMainContext],
    may_block : Int) Int;

external g_main_context_pending(
    context : Pointer[GMainContext]) Int;

external g_main_context_find_source_by_id(
    context : Pointer[GMainContext],
    source_id : UInt) Pointer[GSource];

external g_main_context_find_source_by_user_data(
    context : Pointer[GMainContext],
    user_data : gpointer) Pointer[GSource];

external g_main_context_find_source_by_funcs_user_data(
    context : Pointer[GMainContext],
    funcs : Pointer[GSourceFuncs],
    user_data : gpointer) Pointer[GSource];

external g_main_context_wakeup(
    context : Pointer[GMainContext]);

external g_main_context_acquire(
    context : Pointer[GMainContext]) Int;

external g_main_context_release(
    context : Pointer[GMainContext]);

external g_main_context_is_owner(
    context : Pointer[GMainContext]) Int;

external g_main_context_wait(
    context : Pointer[GMainContext],
    cond : Pointer[GCond],
    mutex : Pointer[GMutex]) Int;

external g_main_context_prepare(
    context : Pointer[GMainContext],
    priority : Pointer[Int]) Int;

external g_main_context_query(
    context : Pointer[GMainContext],
    max_priority : Int,
    timeout_ : Pointer[Int],
    fds : Pointer[GPollFD],
    n_fds : Int) Int;

external g_main_context_check(
    context : Pointer[GMainContext],
    max_priority : Int,
    fds : Pointer[GPollFD],
    n_fds : Int) Int;

external g_main_context_dispatch(
    context : Pointer[GMainContext]);

external g_main_context_set_poll_func(
    context : Pointer[GMainContext],
    func : GPollFunc);

external g_main_context_get_poll_func(
    context : Pointer[GMainContext]) GPollFunc;

external g_main_context_add_poll(
    context : Pointer[GMainContext],
    fd : Pointer[GPollFD],
    priority : Int);

external g_main_context_remove_poll(
    context : Pointer[GMainContext],
    fd : Pointer[GPollFD]);

external g_main_depth() Int;

external g_main_current_source() Pointer[GSource];

external g_main_context_push_thread_default(
    context : Pointer[GMainContext]);

external g_main_context_pop_thread_default(
    context : Pointer[GMainContext]);

external g_main_context_get_thread_default() Pointer[GMainContext];

external g_main_loop_new(
    context : Pointer[GMainContext],
    is_running : Int) Pointer[GMainLoop];

external g_main_loop_run(
    loop : Pointer[GMainLoop]);

external g_main_loop_quit(
    loop : Pointer[GMainLoop]);

external g_main_loop_ref(
    loop : Pointer[GMainLoop]) Pointer[GMainLoop];

external g_main_loop_unref(
    loop : Pointer[GMainLoop]);

external g_main_loop_is_running(
    loop : Pointer[GMainLoop]) Int;

external g_main_loop_get_context(
    loop : Pointer[GMainLoop]) Pointer[GMainContext];

external g_source_new(
    source_funcs : Pointer[GSourceFuncs],
    struct_size : UInt) Pointer[GSource];

external g_source_ref(
    source : Pointer[GSource]) Pointer[GSource];

external g_source_unref(
    source : Pointer[GSource]);

external g_source_attach(
    source : Pointer[GSource],
    context : Pointer[GMainContext]) UInt;

external g_source_destroy(
    source : Pointer[GSource]);

external g_source_set_priority(
    source : Pointer[GSource],
    priority : Int);

external g_source_get_priority(
    source : Pointer[GSource]) Int;

external g_source_set_can_recurse(
    source : Pointer[GSource],
    can_recurse : Int);

external g_source_get_can_recurse(
    source : Pointer[GSource]) Int;

external g_source_get_id(
    source : Pointer[GSource]) UInt;

external g_source_get_context(
    source : Pointer[GSource]) Pointer[GMainContext];

external g_source_set_callback(
    source : Pointer[GSource],
    func : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify);

external g_source_set_funcs(
    source : Pointer[GSource],
    funcs : Pointer[GSourceFuncs]);

external g_source_is_destroyed(
    source : Pointer[GSource]) Int;

external g_source_set_name(
    source : Pointer[GSource],
    name : Pointer[CChar]);

external g_source_get_name(
    source : Pointer[GSource]) Pointer[CChar];

external g_source_set_name_by_id(
    tag : UInt,
    name : Pointer[CChar]);

external g_source_set_callback_indirect(
    source : Pointer[GSource],
    callback_data : gpointer,
    callback_funcs : Pointer[GSourceCallbackFuncs]);

external g_source_add_poll(
    source : Pointer[GSource],
    fd : Pointer[GPollFD]);

external g_source_remove_poll(
    source : Pointer[GSource],
    fd : Pointer[GPollFD]);

external g_source_get_current_time(
    source : Pointer[GSource],
    timeval : Pointer[GTimeVal]);

external g_idle_source_new() Pointer[GSource];

external g_child_watch_source_new(
    pid : Int) Pointer[GSource];

external g_timeout_source_new(
    interval : UInt) Pointer[GSource];

external g_timeout_source_new_seconds(
    interval : UInt) Pointer[GSource];

external g_get_current_time(
    result : Pointer[GTimeVal]);

external g_source_remove(
    tag : UInt) Int;

external g_source_remove_by_user_data(
    user_data : gpointer) Int;

external g_source_remove_by_funcs_user_data(
    funcs : Pointer[GSourceFuncs],
    user_data : gpointer) Int;

external g_timeout_add_full(
    priority : Int,
    interval : UInt,
    function : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external g_timeout_add(
    interval : UInt,
    function : GSourceFunc,
    data : gpointer) UInt;

external g_timeout_add_seconds_full(
    priority : Int,
    interval : UInt,
    function : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external g_timeout_add_seconds(
    interval : UInt,
    function : GSourceFunc,
    data : gpointer) UInt;

external g_child_watch_add_full(
    priority : Int,
    pid : Int,
    function : GChildWatchFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external g_child_watch_add(
    pid : Int,
    function : GChildWatchFunc,
    data : gpointer) UInt;

external g_idle_add(
    function : GSourceFunc,
    data : gpointer) UInt;

external g_idle_add_full(
    priority : Int,
    function : GSourceFunc,
    data : gpointer,
    notify : GDestroyNotify) UInt;

external g_idle_remove_by_data(
    data : gpointer) Int;

external g_timeout_funcs : GSourceFuncs;

external g_child_watch_funcs : GSourceFuncs;

external g_idle_funcs : GSourceFuncs;

alias gunichar = UInt;

alias gunichar2 = UShort;

alias G_UNICODE_CONTROL = 0;
alias G_UNICODE_FORMAT = 1;
alias G_UNICODE_UNASSIGNED = 2;
alias G_UNICODE_PRIVATE_USE = 3;
alias G_UNICODE_SURROGATE = 4;
alias G_UNICODE_LOWERCASE_LETTER = 5;
alias G_UNICODE_MODIFIER_LETTER = 6;
alias G_UNICODE_OTHER_LETTER = 7;
alias G_UNICODE_TITLECASE_LETTER = 8;
alias G_UNICODE_UPPERCASE_LETTER = 9;
alias G_UNICODE_COMBINING_MARK = 10;
alias G_UNICODE_ENCLOSING_MARK = 11;
alias G_UNICODE_NON_SPACING_MARK = 12;
alias G_UNICODE_DECIMAL_NUMBER = 13;
alias G_UNICODE_LETTER_NUMBER = 14;
alias G_UNICODE_OTHER_NUMBER = 15;
alias G_UNICODE_CONNECT_PUNCTUATION = 16;
alias G_UNICODE_DASH_PUNCTUATION = 17;
alias G_UNICODE_CLOSE_PUNCTUATION = 18;
alias G_UNICODE_FINAL_PUNCTUATION = 19;
alias G_UNICODE_INITIAL_PUNCTUATION = 20;
alias G_UNICODE_OTHER_PUNCTUATION = 21;
alias G_UNICODE_OPEN_PUNCTUATION = 22;
alias G_UNICODE_CURRENCY_SYMBOL = 23;
alias G_UNICODE_MODIFIER_SYMBOL = 24;
alias G_UNICODE_MATH_SYMBOL = 25;
alias G_UNICODE_OTHER_SYMBOL = 26;
alias G_UNICODE_LINE_SEPARATOR = 27;
alias G_UNICODE_PARAGRAPH_SEPARATOR = 28;
alias G_UNICODE_SPACE_SEPARATOR = 29;

alias GUnicodeType = Int;

alias G_UNICODE_BREAK_MANDATORY = 0;
alias G_UNICODE_BREAK_CARRIAGE_RETURN = 1;
alias G_UNICODE_BREAK_LINE_FEED = 2;
alias G_UNICODE_BREAK_COMBINING_MARK = 3;
alias G_UNICODE_BREAK_SURROGATE = 4;
alias G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5;
alias G_UNICODE_BREAK_INSEPARABLE = 6;
alias G_UNICODE_BREAK_NON_BREAKING_GLUE = 7;
alias G_UNICODE_BREAK_CONTINGENT = 8;
alias G_UNICODE_BREAK_SPACE = 9;
alias G_UNICODE_BREAK_AFTER = 10;
alias G_UNICODE_BREAK_BEFORE = 11;
alias G_UNICODE_BREAK_BEFORE_AND_AFTER = 12;
alias G_UNICODE_BREAK_HYPHEN = 13;
alias G_UNICODE_BREAK_NON_STARTER = 14;
alias G_UNICODE_BREAK_OPEN_PUNCTUATION = 15;
alias G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16;
alias G_UNICODE_BREAK_QUOTATION = 17;
alias G_UNICODE_BREAK_EXCLAMATION = 18;
alias G_UNICODE_BREAK_IDEOGRAPHIC = 19;
alias G_UNICODE_BREAK_NUMERIC = 20;
alias G_UNICODE_BREAK_INFIX_SEPARATOR = 21;
alias G_UNICODE_BREAK_SYMBOL = 22;
alias G_UNICODE_BREAK_ALPHABETIC = 23;
alias G_UNICODE_BREAK_PREFIX = 24;
alias G_UNICODE_BREAK_POSTFIX = 25;
alias G_UNICODE_BREAK_COMPLEX_CONTEXT = 26;
alias G_UNICODE_BREAK_AMBIGUOUS = 27;
alias G_UNICODE_BREAK_UNKNOWN = 28;
alias G_UNICODE_BREAK_NEXT_LINE = 29;
alias G_UNICODE_BREAK_WORD_JOINER = 30;
alias G_UNICODE_BREAK_HANGUL_L_JAMO = 31;
alias G_UNICODE_BREAK_HANGUL_V_JAMO = 32;
alias G_UNICODE_BREAK_HANGUL_T_JAMO = 33;
alias G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34;
alias G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35;

alias GUnicodeBreakType = Int;

alias G_UNICODE_SCRIPT_INVALID_CODE = 4294967295;
alias G_UNICODE_SCRIPT_COMMON = 0;
alias G_UNICODE_SCRIPT_INHERITED = 1;
alias G_UNICODE_SCRIPT_ARABIC = 2;
alias G_UNICODE_SCRIPT_ARMENIAN = 3;
alias G_UNICODE_SCRIPT_BENGALI = 4;
alias G_UNICODE_SCRIPT_BOPOMOFO = 5;
alias G_UNICODE_SCRIPT_CHEROKEE = 6;
alias G_UNICODE_SCRIPT_COPTIC = 7;
alias G_UNICODE_SCRIPT_CYRILLIC = 8;
alias G_UNICODE_SCRIPT_DESERET = 9;
alias G_UNICODE_SCRIPT_DEVANAGARI = 10;
alias G_UNICODE_SCRIPT_ETHIOPIC = 11;
alias G_UNICODE_SCRIPT_GEORGIAN = 12;
alias G_UNICODE_SCRIPT_GOTHIC = 13;
alias G_UNICODE_SCRIPT_GREEK = 14;
alias G_UNICODE_SCRIPT_GUJARATI = 15;
alias G_UNICODE_SCRIPT_GURMUKHI = 16;
alias G_UNICODE_SCRIPT_HAN = 17;
alias G_UNICODE_SCRIPT_HANGUL = 18;
alias G_UNICODE_SCRIPT_HEBREW = 19;
alias G_UNICODE_SCRIPT_HIRAGANA = 20;
alias G_UNICODE_SCRIPT_KANNADA = 21;
alias G_UNICODE_SCRIPT_KATAKANA = 22;
alias G_UNICODE_SCRIPT_KHMER = 23;
alias G_UNICODE_SCRIPT_LAO = 24;
alias G_UNICODE_SCRIPT_LATIN = 25;
alias G_UNICODE_SCRIPT_MALAYALAM = 26;
alias G_UNICODE_SCRIPT_MONGOLIAN = 27;
alias G_UNICODE_SCRIPT_MYANMAR = 28;
alias G_UNICODE_SCRIPT_OGHAM = 29;
alias G_UNICODE_SCRIPT_OLD_ITALIC = 30;
alias G_UNICODE_SCRIPT_ORIYA = 31;
alias G_UNICODE_SCRIPT_RUNIC = 32;
alias G_UNICODE_SCRIPT_SINHALA = 33;
alias G_UNICODE_SCRIPT_SYRIAC = 34;
alias G_UNICODE_SCRIPT_TAMIL = 35;
alias G_UNICODE_SCRIPT_TELUGU = 36;
alias G_UNICODE_SCRIPT_THAANA = 37;
alias G_UNICODE_SCRIPT_THAI = 38;
alias G_UNICODE_SCRIPT_TIBETAN = 39;
alias G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40;
alias G_UNICODE_SCRIPT_YI = 41;
alias G_UNICODE_SCRIPT_TAGALOG = 42;
alias G_UNICODE_SCRIPT_HANUNOO = 43;
alias G_UNICODE_SCRIPT_BUHID = 44;
alias G_UNICODE_SCRIPT_TAGBANWA = 45;
alias G_UNICODE_SCRIPT_BRAILLE = 46;
alias G_UNICODE_SCRIPT_CYPRIOT = 47;
alias G_UNICODE_SCRIPT_LIMBU = 48;
alias G_UNICODE_SCRIPT_OSMANYA = 49;
alias G_UNICODE_SCRIPT_SHAVIAN = 50;
alias G_UNICODE_SCRIPT_LINEAR_B = 51;
alias G_UNICODE_SCRIPT_TAI_LE = 52;
alias G_UNICODE_SCRIPT_UGARITIC = 53;
alias G_UNICODE_SCRIPT_NEW_TAI_LUE = 54;
alias G_UNICODE_SCRIPT_BUGINESE = 55;
alias G_UNICODE_SCRIPT_GLAGOLITIC = 56;
alias G_UNICODE_SCRIPT_TIFINAGH = 57;
alias G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58;
alias G_UNICODE_SCRIPT_OLD_PERSIAN = 59;
alias G_UNICODE_SCRIPT_KHAROSHTHI = 60;
alias G_UNICODE_SCRIPT_UNKNOWN = 61;
alias G_UNICODE_SCRIPT_BALINESE = 62;
alias G_UNICODE_SCRIPT_CUNEIFORM = 63;
alias G_UNICODE_SCRIPT_PHOENICIAN = 64;
alias G_UNICODE_SCRIPT_PHAGS_PA = 65;
alias G_UNICODE_SCRIPT_NKO = 66;
alias G_UNICODE_SCRIPT_KAYAH_LI = 67;
alias G_UNICODE_SCRIPT_LEPCHA = 68;
alias G_UNICODE_SCRIPT_REJANG = 69;
alias G_UNICODE_SCRIPT_SUNDANESE = 70;
alias G_UNICODE_SCRIPT_SAURASHTRA = 71;
alias G_UNICODE_SCRIPT_CHAM = 72;
alias G_UNICODE_SCRIPT_OL_CHIKI = 73;
alias G_UNICODE_SCRIPT_VAI = 74;
alias G_UNICODE_SCRIPT_CARIAN = 75;
alias G_UNICODE_SCRIPT_LYCIAN = 76;
alias G_UNICODE_SCRIPT_LYDIAN = 77;
alias G_UNICODE_SCRIPT_AVESTAN = 78;
alias G_UNICODE_SCRIPT_BAMUM = 79;
alias G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80;
alias G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81;
alias G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82;
alias G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83;
alias G_UNICODE_SCRIPT_JAVANESE = 84;
alias G_UNICODE_SCRIPT_KAITHI = 85;
alias G_UNICODE_SCRIPT_LISU = 86;
alias G_UNICODE_SCRIPT_MEETEI_MAYEK = 87;
alias G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88;
alias G_UNICODE_SCRIPT_OLD_TURKISH = 89;
alias G_UNICODE_SCRIPT_SAMARITAN = 90;
alias G_UNICODE_SCRIPT_TAI_THAM = 91;
alias G_UNICODE_SCRIPT_TAI_VIET = 92;

alias GUnicodeScript = Int;

external g_get_charset(
    charset : Pointer[Pointer[CChar]]) Int;

external g_unichar_isalnum(
    c : UInt) Int;

external g_unichar_isalpha(
    c : UInt) Int;

external g_unichar_iscntrl(
    c : UInt) Int;

external g_unichar_isdigit(
    c : UInt) Int;

external g_unichar_isgraph(
    c : UInt) Int;

external g_unichar_islower(
    c : UInt) Int;

external g_unichar_isprint(
    c : UInt) Int;

external g_unichar_ispunct(
    c : UInt) Int;

external g_unichar_isspace(
    c : UInt) Int;

external g_unichar_isupper(
    c : UInt) Int;

external g_unichar_isxdigit(
    c : UInt) Int;

external g_unichar_istitle(
    c : UInt) Int;

external g_unichar_isdefined(
    c : UInt) Int;

external g_unichar_iswide(
    c : UInt) Int;

external g_unichar_iswide_cjk(
    c : UInt) Int;

external g_unichar_iszerowidth(
    c : UInt) Int;

external g_unichar_ismark(
    c : UInt) Int;

external g_unichar_toupper(
    c : UInt) UInt;

external g_unichar_tolower(
    c : UInt) UInt;

external g_unichar_totitle(
    c : UInt) UInt;

external g_unichar_digit_value(
    c : UInt) Int;

external g_unichar_xdigit_value(
    c : UInt) Int;

external g_unichar_type(
    c : UInt) GUnicodeType;

external g_unichar_break_type(
    c : UInt) GUnicodeBreakType;

external g_unichar_combining_class(
    uc : UInt) Int;

external g_unicode_canonical_ordering(
    string : Pointer[UInt],
    len : CULong);

external g_unicode_canonical_decomposition(
    ch : UInt,
    result_len : Pointer[CULong]) Pointer[UInt];

external g_utf8_skip : Pointer[CChar];

external g_utf8_get_char(
    p : Pointer[CChar]) UInt;

external g_utf8_get_char_validated(
    p : Pointer[CChar],
    max_len : CLong) UInt;

external g_utf8_offset_to_pointer(
    str : Pointer[CChar],
    offset : CLong) Pointer[CChar];

external g_utf8_pointer_to_offset(
    str : Pointer[CChar],
    pos : Pointer[CChar]) CLong;

external g_utf8_prev_char(
    p : Pointer[CChar]) Pointer[CChar];

external g_utf8_find_next_char(
    p : Pointer[CChar],
    end : Pointer[CChar]) Pointer[CChar];

external g_utf8_find_prev_char(
    str : Pointer[CChar],
    p : Pointer[CChar]) Pointer[CChar];

external g_utf8_strlen(
    p : Pointer[CChar],
    max : CLong) CLong;

external g_utf8_strncpy(
    dest : Pointer[CChar],
    src : Pointer[CChar],
    n : CULong) Pointer[CChar];

external g_utf8_strchr(
    p : Pointer[CChar],
    len : CLong,
    c : UInt) Pointer[CChar];

external g_utf8_strrchr(
    p : Pointer[CChar],
    len : CLong,
    c : UInt) Pointer[CChar];

external g_utf8_strreverse(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_utf8_to_utf16(
    str : Pointer[CChar],
    len : CLong,
    items_read : Pointer[CLong],
    items_written : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Pointer[UShort];

external g_utf8_to_ucs4(
    str : Pointer[CChar],
    len : CLong,
    items_read : Pointer[CLong],
    items_written : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Pointer[UInt];

external g_utf8_to_ucs4_fast(
    str : Pointer[CChar],
    len : CLong,
    items_written : Pointer[CLong]) Pointer[UInt];

external g_utf16_to_ucs4(
    str : Pointer[UShort],
    len : CLong,
    items_read : Pointer[CLong],
    items_written : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Pointer[UInt];

external g_utf16_to_utf8(
    str : Pointer[UShort],
    len : CLong,
    items_read : Pointer[CLong],
    items_written : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_ucs4_to_utf16(
    str : Pointer[UInt],
    len : CLong,
    items_read : Pointer[CLong],
    items_written : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Pointer[UShort];

external g_ucs4_to_utf8(
    str : Pointer[UInt],
    len : CLong,
    items_read : Pointer[CLong],
    items_written : Pointer[CLong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_unichar_to_utf8(
    c : UInt,
    outbuf : Pointer[CChar]) Int;

external g_utf8_validate(
    str : Pointer[CChar],
    max_len : CLong,
    end : Pointer[Pointer[CChar]]) Int;

external g_unichar_validate(
    ch : UInt) Int;

external g_utf8_strup(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_utf8_strdown(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_utf8_casefold(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

alias G_NORMALIZE_DEFAULT = 0;
alias G_NORMALIZE_NFD = 0;
alias G_NORMALIZE_DEFAULT_COMPOSE = 1;
alias G_NORMALIZE_NFC = 1;
alias G_NORMALIZE_ALL = 2;
alias G_NORMALIZE_NFKD = 2;
alias G_NORMALIZE_ALL_COMPOSE = 3;
alias G_NORMALIZE_NFKC = 3;

alias GNormalizeMode = Int;

external g_utf8_normalize(
    str : Pointer[CChar],
    len : CLong,
    mode : GNormalizeMode) Pointer[CChar];

external g_utf8_collate(
    str1 : Pointer[CChar],
    str2 : Pointer[CChar]) Int;

external g_utf8_collate_key(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_utf8_collate_key_for_filename(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_unichar_get_mirror_char(
    ch : UInt,
    mirrored_ch : Pointer[UInt]) Int;

external g_unichar_get_script(
    ch : UInt) GUnicodeScript;

external _g_utf8_make_valid(
    name : Pointer[CChar]) Pointer[CChar];

alias GString = Struct__GString;

alias GStringChunk = Opaque;

record Struct__GString (
    str : Pointer[CChar],
    len : CULong,
    allocated_len : CULong,
);

external g_string_chunk_new(
    size : CULong) Pointer[GStringChunk];

external g_string_chunk_free(
    chunk : Pointer[GStringChunk]);

external g_string_chunk_clear(
    chunk : Pointer[GStringChunk]);

external g_string_chunk_insert(
    chunk : Pointer[GStringChunk],
    string : Pointer[CChar]) Pointer[CChar];

external g_string_chunk_insert_len(
    chunk : Pointer[GStringChunk],
    string : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_string_chunk_insert_const(
    chunk : Pointer[GStringChunk],
    string : Pointer[CChar]) Pointer[CChar];

external g_string_new(
    init : Pointer[CChar]) Pointer[GString];

external g_string_new_len(
    init : Pointer[CChar],
    len : CLong) Pointer[GString];

external g_string_sized_new(
    dfl_size : CULong) Pointer[GString];

external g_string_free(
    string : Pointer[GString],
    free_segment : Int) Pointer[CChar];

external g_string_equal(
    v : Pointer[GString],
    v2 : Pointer[GString]) Int;

external g_string_hash(
    str : Pointer[GString]) UInt;

external g_string_assign(
    string : Pointer[GString],
    rval : Pointer[CChar]) Pointer[GString];

external g_string_truncate(
    string : Pointer[GString],
    len : CULong) Pointer[GString];

external g_string_set_size(
    string : Pointer[GString],
    len : CULong) Pointer[GString];

external g_string_insert_len(
    string : Pointer[GString],
    pos : CLong,
    val : Pointer[CChar],
    len : CLong) Pointer[GString];

external g_string_append(
    string : Pointer[GString],
    val : Pointer[CChar]) Pointer[GString];

external g_string_append_len(
    string : Pointer[GString],
    val : Pointer[CChar],
    len : CLong) Pointer[GString];

external g_string_append_c(
    string : Pointer[GString],
    c : CChar) Pointer[GString];

external g_string_append_unichar(
    string : Pointer[GString],
    wc : UInt) Pointer[GString];

external g_string_prepend(
    string : Pointer[GString],
    val : Pointer[CChar]) Pointer[GString];

external g_string_prepend_c(
    string : Pointer[GString],
    c : CChar) Pointer[GString];

external g_string_prepend_unichar(
    string : Pointer[GString],
    wc : UInt) Pointer[GString];

external g_string_prepend_len(
    string : Pointer[GString],
    val : Pointer[CChar],
    len : CLong) Pointer[GString];

external g_string_insert(
    string : Pointer[GString],
    pos : CLong,
    val : Pointer[CChar]) Pointer[GString];

external g_string_insert_c(
    string : Pointer[GString],
    pos : CLong,
    c : CChar) Pointer[GString];

external g_string_insert_unichar(
    string : Pointer[GString],
    pos : CLong,
    wc : UInt) Pointer[GString];

external g_string_overwrite(
    string : Pointer[GString],
    pos : CULong,
    val : Pointer[CChar]) Pointer[GString];

external g_string_overwrite_len(
    string : Pointer[GString],
    pos : CULong,
    val : Pointer[CChar],
    len : CLong) Pointer[GString];

external g_string_erase(
    string : Pointer[GString],
    pos : CLong,
    len : CLong) Pointer[GString];

external g_string_ascii_down(
    string : Pointer[GString]) Pointer[GString];

external g_string_ascii_up(
    string : Pointer[GString]) Pointer[GString];

external g_string_vprintf(
    string : Pointer[GString],
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external g_string_printf(
    string : Pointer[GString],
    format : Pointer[CChar],
    ...);

external g_string_append_vprintf(
    string : Pointer[GString],
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external g_string_append_printf(
    string : Pointer[GString],
    format : Pointer[CChar],
    ...);

external g_string_append_uri_escaped(
    string : Pointer[GString],
    unescaped : Pointer[CChar],
    reserved_chars_allowed : Pointer[CChar],
    allow_utf8 : Int) Pointer[GString];

external g_string_down(
    string : Pointer[GString]) Pointer[GString];

external g_string_up(
    string : Pointer[GString]) Pointer[GString];

alias GIOChannel = Struct__GIOChannel;

alias GIOFuncs = Struct__GIOFuncs;

alias G_IO_ERROR_NONE = 0;
alias G_IO_ERROR_AGAIN = 1;
alias G_IO_ERROR_INVAL = 2;
alias G_IO_ERROR_UNKNOWN = 3;

alias GIOError = Int;

alias G_IO_CHANNEL_ERROR_FBIG = 0;
alias G_IO_CHANNEL_ERROR_INVAL = 1;
alias G_IO_CHANNEL_ERROR_IO = 2;
alias G_IO_CHANNEL_ERROR_ISDIR = 3;
alias G_IO_CHANNEL_ERROR_NOSPC = 4;
alias G_IO_CHANNEL_ERROR_NXIO = 5;
alias G_IO_CHANNEL_ERROR_OVERFLOW = 6;
alias G_IO_CHANNEL_ERROR_PIPE = 7;
alias G_IO_CHANNEL_ERROR_FAILED = 8;

alias GIOChannelError = Int;

alias G_IO_STATUS_ERROR = 0;
alias G_IO_STATUS_NORMAL = 1;
alias G_IO_STATUS_EOF = 2;
alias G_IO_STATUS_AGAIN = 3;

alias GIOStatus = Int;

alias G_SEEK_CUR = 0;
alias G_SEEK_SET = 1;
alias G_SEEK_END = 2;

alias GSeekType = Int;

alias G_IO_IN = 1;
alias G_IO_OUT = 4;
alias G_IO_PRI = 2;
alias G_IO_ERR = 8;
alias G_IO_HUP = 16;
alias G_IO_NVAL = 32;

alias GIOCondition = Int;

alias G_IO_FLAG_APPEND = 1;
alias G_IO_FLAG_NONBLOCK = 2;
alias G_IO_FLAG_IS_READABLE = 4;
alias G_IO_FLAG_IS_WRITEABLE = 8;
alias G_IO_FLAG_IS_SEEKABLE = 16;
alias G_IO_FLAG_MASK = 31;
alias G_IO_FLAG_GET_MASK = 31;
alias G_IO_FLAG_SET_MASK = 3;

alias GIOFlags = Int;

record Struct__GIOChannel (
    ref_count : Int,
    funcs : Pointer[GIOFuncs],
    encoding : Pointer[CChar],
    read_cd : GIConv,
    write_cd : GIConv,
    line_term : Pointer[CChar],
    line_term_len : UInt,
    buf_size : CULong,
    read_buf : Pointer[GString],
    encoded_read_buf : Pointer[GString],
    write_buf : Pointer[GString],
    partial_write_buf : Array[CChar,6],
    use_buffer : UInt,
    do_encode : UInt,
    close_on_unref : UInt,
    is_readable : UInt,
    is_writeable : UInt,
    is_seekable : UInt,
    reserved1 : gpointer,
    reserved2 : gpointer,
);

alias GIOFunc = CCodePointer[(Pointer[Struct__GIOChannel],Int,RawPointer),(Int)];

record Struct__GIOFuncs (
    io_read : CCodePointer[(Pointer[Struct__GIOChannel],Pointer[CChar],CULong,Pointer[CULong],Pointer[Pointer[Struct__GError]]),(Int)],
    io_write : CCodePointer[(Pointer[Struct__GIOChannel],Pointer[CChar],CULong,Pointer[CULong],Pointer[Pointer[Struct__GError]]),(Int)],
    io_seek : CCodePointer[(Pointer[Struct__GIOChannel],CLong,Int,Pointer[Pointer[Struct__GError]]),(Int)],
    io_close : CCodePointer[(Pointer[Struct__GIOChannel],Pointer[Pointer[Struct__GError]]),(Int)],
    io_create_watch : CCodePointer[(Pointer[Struct__GIOChannel],Int),(Pointer[Struct__GSource])],
    io_free : CCodePointer[(Pointer[Struct__GIOChannel]),()],
    io_set_flags : CCodePointer[(Pointer[Struct__GIOChannel],Int,Pointer[Pointer[Struct__GError]]),(Int)],
    io_get_flags : CCodePointer[(Pointer[Struct__GIOChannel]),(Int)],
);

external g_io_channel_init(
    channel : Pointer[GIOChannel]);

external g_io_channel_ref(
    channel : Pointer[GIOChannel]) Pointer[GIOChannel];

external g_io_channel_unref(
    channel : Pointer[GIOChannel]);

external g_io_channel_read(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CULong,
    bytes_read : Pointer[CULong]) GIOError;

external g_io_channel_write(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CULong,
    bytes_written : Pointer[CULong]) GIOError;

external g_io_channel_seek(
    channel : Pointer[GIOChannel],
    offset : CLong,
    type : GSeekType) GIOError;

external g_io_channel_close(
    channel : Pointer[GIOChannel]);

external g_io_channel_shutdown(
    channel : Pointer[GIOChannel],
    flush : Int,
    err : Pointer[Pointer[GError]]) GIOStatus;

external g_io_add_watch_full(
    channel : Pointer[GIOChannel],
    priority : Int,
    condition : GIOCondition,
    func : GIOFunc,
    user_data : gpointer,
    notify : GDestroyNotify) UInt;

external g_io_create_watch(
    channel : Pointer[GIOChannel],
    condition : GIOCondition) Pointer[GSource];

external g_io_add_watch(
    channel : Pointer[GIOChannel],
    condition : GIOCondition,
    func : GIOFunc,
    user_data : gpointer) UInt;

external g_io_channel_set_buffer_size(
    channel : Pointer[GIOChannel],
    size : CULong);

external g_io_channel_get_buffer_size(
    channel : Pointer[GIOChannel]) CULong;

external g_io_channel_get_buffer_condition(
    channel : Pointer[GIOChannel]) GIOCondition;

external g_io_channel_set_flags(
    channel : Pointer[GIOChannel],
    flags : GIOFlags,
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_get_flags(
    channel : Pointer[GIOChannel]) GIOFlags;

external g_io_channel_set_line_term(
    channel : Pointer[GIOChannel],
    line_term : Pointer[CChar],
    length : Int);

external g_io_channel_get_line_term(
    channel : Pointer[GIOChannel],
    length : Pointer[Int]) Pointer[CChar];

external g_io_channel_set_buffered(
    channel : Pointer[GIOChannel],
    buffered : Int);

external g_io_channel_get_buffered(
    channel : Pointer[GIOChannel]) Int;

external g_io_channel_set_encoding(
    channel : Pointer[GIOChannel],
    encoding : Pointer[CChar],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_get_encoding(
    channel : Pointer[GIOChannel]) Pointer[CChar];

external g_io_channel_set_close_on_unref(
    channel : Pointer[GIOChannel],
    do_close : Int);

external g_io_channel_get_close_on_unref(
    channel : Pointer[GIOChannel]) Int;

external g_io_channel_flush(
    channel : Pointer[GIOChannel],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_line(
    channel : Pointer[GIOChannel],
    str_return : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    terminator_pos : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_line_string(
    channel : Pointer[GIOChannel],
    buffer : Pointer[GString],
    terminator_pos : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_to_end(
    channel : Pointer[GIOChannel],
    str_return : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_chars(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CULong,
    bytes_read : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_unichar(
    channel : Pointer[GIOChannel],
    thechar : Pointer[UInt],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_write_chars(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CLong,
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_write_unichar(
    channel : Pointer[GIOChannel],
    thechar : UInt,
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_seek_position(
    channel : Pointer[GIOChannel],
    offset : CLong,
    type : GSeekType,
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_new_file(
    filename : Pointer[CChar],
    mode : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GIOChannel];

external g_io_channel_error_quark() UInt;

external g_io_channel_error_from_errno(
    en : Int) GIOChannelError;

external g_io_channel_unix_new(
    fd : Int) Pointer[GIOChannel];

external g_io_channel_unix_get_fd(
    channel : Pointer[GIOChannel]) Int;

external g_io_watch_funcs : GSourceFuncs;

alias G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0;
alias G_KEY_FILE_ERROR_PARSE = 1;
alias G_KEY_FILE_ERROR_NOT_FOUND = 2;
alias G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3;
alias G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4;
alias G_KEY_FILE_ERROR_INVALID_VALUE = 5;

alias GKeyFileError = Int;

external g_key_file_error_quark() UInt;

alias GKeyFile = Opaque;

alias G_KEY_FILE_NONE = 0;
alias G_KEY_FILE_KEEP_COMMENTS = 1;
alias G_KEY_FILE_KEEP_TRANSLATIONS = 2;

alias GKeyFileFlags = Int;

external g_key_file_new() Pointer[GKeyFile];

external g_key_file_free(
    key_file : Pointer[GKeyFile]);

external g_key_file_set_list_separator(
    key_file : Pointer[GKeyFile],
    separator : CChar);

external g_key_file_load_from_file(
    key_file : Pointer[GKeyFile],
    file : Pointer[CChar],
    flags : GKeyFileFlags,
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_load_from_data(
    key_file : Pointer[GKeyFile],
    data : Pointer[CChar],
    length : CULong,
    flags : GKeyFileFlags,
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_load_from_dirs(
    key_file : Pointer[GKeyFile],
    file : Pointer[CChar],
    search_dirs : Pointer[Pointer[CChar]],
    full_path : Pointer[Pointer[CChar]],
    flags : GKeyFileFlags,
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_load_from_data_dirs(
    key_file : Pointer[GKeyFile],
    file : Pointer[CChar],
    full_path : Pointer[Pointer[CChar]],
    flags : GKeyFileFlags,
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_to_data(
    key_file : Pointer[GKeyFile],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_key_file_get_start_group(
    key_file : Pointer[GKeyFile]) Pointer[CChar];

external g_key_file_get_groups(
    key_file : Pointer[GKeyFile],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external g_key_file_get_keys(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_key_file_has_group(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar]) Int;

external g_key_file_has_key(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_get_value(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_key_file_set_value(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    value : Pointer[CChar]);

external g_key_file_get_string(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_key_file_set_string(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    string : Pointer[CChar]);

external g_key_file_get_locale_string(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    locale : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_key_file_set_locale_string(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    locale : Pointer[CChar],
    string : Pointer[CChar]);

external g_key_file_get_boolean(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_set_boolean(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    value : Int);

external g_key_file_get_integer(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_set_integer(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    value : Int);

external g_key_file_get_int64(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) CLong;

external g_key_file_set_int64(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    value : CLong);

external g_key_file_get_uint64(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) CULong;

external g_key_file_set_uint64(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    value : CULong);

external g_key_file_get_double(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Double;

external g_key_file_set_double(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    value : Double);

external g_key_file_get_string_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_key_file_set_string_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    list : Pointer[Pointer[CChar]],
    length : CULong);

external g_key_file_get_locale_string_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    locale : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_key_file_set_locale_string_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    locale : Pointer[CChar],
    list : Pointer[Pointer[CChar]],
    length : CULong);

external g_key_file_get_boolean_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Int];

external g_key_file_set_boolean_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    list : Pointer[Int],
    length : CULong);

external g_key_file_get_integer_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Int];

external g_key_file_set_double_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    list : Pointer[Double],
    length : CULong);

external g_key_file_get_double_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[Double];

external g_key_file_set_integer_list(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    list : Pointer[Int],
    length : CULong);

external g_key_file_set_comment(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    comment : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_get_comment(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_key_file_remove_comment(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_remove_key(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    key : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_key_file_remove_group(
    key_file : Pointer[GKeyFile],
    group_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

alias GMappedFile = Opaque;

external g_mapped_file_new(
    filename : Pointer[CChar],
    writable : Int,
    error : Pointer[Pointer[GError]]) Pointer[GMappedFile];

external g_mapped_file_get_length(
    file : Pointer[GMappedFile]) CULong;

external g_mapped_file_get_contents(
    file : Pointer[GMappedFile]) Pointer[CChar];

external g_mapped_file_ref(
    file : Pointer[GMappedFile]) Pointer[GMappedFile];

external g_mapped_file_unref(
    file : Pointer[GMappedFile]);

external g_mapped_file_free(
    file : Pointer[GMappedFile]);

alias G_MARKUP_ERROR_BAD_UTF8 = 0;
alias G_MARKUP_ERROR_EMPTY = 1;
alias G_MARKUP_ERROR_PARSE = 2;
alias G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3;
alias G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4;
alias G_MARKUP_ERROR_INVALID_CONTENT = 5;
alias G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6;

alias GMarkupError = Int;

external g_markup_error_quark() UInt;

alias G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1;
alias G_MARKUP_TREAT_CDATA_AS_TEXT = 2;
alias G_MARKUP_PREFIX_ERROR_POSITION = 4;

alias GMarkupParseFlags = Int;

alias GMarkupParseContext = Opaque;

alias GMarkupParser = Struct__GMarkupParser;

record Struct__GMarkupParser (
    start_element : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[CChar]],Pointer[Pointer[CChar]],RawPointer,Pointer[Pointer[Struct__GError]]),()],
    end_element : CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer,Pointer[Pointer[Struct__GError]]),()],
    text : CCodePointer[(OpaquePointer,Pointer[CChar],CULong,RawPointer,Pointer[Pointer[Struct__GError]]),()],
    passthrough : CCodePointer[(OpaquePointer,Pointer[CChar],CULong,RawPointer,Pointer[Pointer[Struct__GError]]),()],
    error : CCodePointer[(OpaquePointer,Pointer[Struct__GError],RawPointer),()],
);

external g_markup_parse_context_new(
    parser : Pointer[GMarkupParser],
    flags : GMarkupParseFlags,
    user_data : gpointer,
    user_data_dnotify : GDestroyNotify) Pointer[GMarkupParseContext];

external g_markup_parse_context_free(
    context : Pointer[GMarkupParseContext]);

external g_markup_parse_context_parse(
    context : Pointer[GMarkupParseContext],
    text : Pointer[CChar],
    text_len : CLong,
    error : Pointer[Pointer[GError]]) Int;

external g_markup_parse_context_push(
    context : Pointer[GMarkupParseContext],
    parser : Pointer[GMarkupParser],
    user_data : gpointer);

external g_markup_parse_context_pop(
    context : Pointer[GMarkupParseContext]) gpointer;

external g_markup_parse_context_end_parse(
    context : Pointer[GMarkupParseContext],
    error : Pointer[Pointer[GError]]) Int;

external g_markup_parse_context_get_element(
    context : Pointer[GMarkupParseContext]) Pointer[CChar];

external g_markup_parse_context_get_element_stack(
    context : Pointer[GMarkupParseContext]) Pointer[GSList];

external g_markup_parse_context_get_position(
    context : Pointer[GMarkupParseContext],
    line_number : Pointer[Int],
    char_number : Pointer[Int]);

external g_markup_parse_context_get_user_data(
    context : Pointer[GMarkupParseContext]) gpointer;

external g_markup_escape_text(
    text : Pointer[CChar],
    length : CLong) Pointer[CChar];

external g_markup_printf_escaped(
    format : Pointer[CChar],
    ...) Pointer[CChar];

external g_markup_vprintf_escaped(
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]) Pointer[CChar];

alias G_MARKUP_COLLECT_INVALID = 0;
alias G_MARKUP_COLLECT_STRING = 1;
alias G_MARKUP_COLLECT_STRDUP = 2;
alias G_MARKUP_COLLECT_BOOLEAN = 3;
alias G_MARKUP_COLLECT_TRISTATE = 4;
alias G_MARKUP_COLLECT_OPTIONAL = 65536;

alias GMarkupCollectType = Int;

external g_markup_collect_attributes(
    element_name : Pointer[CChar],
    attribute_names : Pointer[Pointer[CChar]],
    attribute_values : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]],
    first_type : GMarkupCollectType,
    first_attr : Pointer[CChar],
    ...) Int;

external g_printf_string_upper_bound(
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]) CULong;

alias G_LOG_FLAG_RECURSION = 1;
alias G_LOG_FLAG_FATAL = 2;
alias G_LOG_LEVEL_ERROR = 4;
alias G_LOG_LEVEL_CRITICAL = 8;
alias G_LOG_LEVEL_WARNING = 16;
alias G_LOG_LEVEL_MESSAGE = 32;
alias G_LOG_LEVEL_INFO = 64;
alias G_LOG_LEVEL_DEBUG = 128;
alias G_LOG_LEVEL_MASK = 4294967292;

alias GLogLevelFlags = Int;

alias GLogFunc = CCodePointer[(Pointer[CChar],Int,Pointer[CChar],RawPointer),()];

external g_log_set_handler(
    log_domain : Pointer[CChar],
    log_levels : GLogLevelFlags,
    log_func : GLogFunc,
    user_data : gpointer) UInt;

external g_log_remove_handler(
    log_domain : Pointer[CChar],
    handler_id : UInt);

external g_log_default_handler(
    log_domain : Pointer[CChar],
    log_level : GLogLevelFlags,
    message : Pointer[CChar],
    unused_data : gpointer);

external g_log_set_default_handler(
    log_func : GLogFunc,
    user_data : gpointer) GLogFunc;

external g_log(
    log_domain : Pointer[CChar],
    log_level : GLogLevelFlags,
    format : Pointer[CChar],
    ...);

external g_logv(
    log_domain : Pointer[CChar],
    log_level : GLogLevelFlags,
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external g_log_set_fatal_mask(
    log_domain : Pointer[CChar],
    fatal_mask : GLogLevelFlags) GLogLevelFlags;

external g_log_set_always_fatal(
    fatal_mask : GLogLevelFlags) GLogLevelFlags;

external _g_log_fallback_handler(
    log_domain : Pointer[CChar],
    log_level : GLogLevelFlags,
    message : Pointer[CChar],
    unused_data : gpointer);

external g_return_if_fail_warning(
    log_domain : Pointer[CChar],
    pretty_function : Pointer[CChar],
    expression : Pointer[CChar]);

external g_warn_message(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    warnexpr : Pointer[CChar]);

external g_assert_warning(
    log_domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    pretty_function : Pointer[CChar],
    expression : Pointer[CChar]);

alias GPrintFunc = CCodePointer[(Pointer[CChar]),()];

external g_print(
    format : Pointer[CChar],
    ...);

external g_set_print_handler(
    func : GPrintFunc) GPrintFunc;

external g_printerr(
    format : Pointer[CChar],
    ...);

external g_set_printerr_handler(
    func : GPrintFunc) GPrintFunc;

alias GNode = Struct__GNode;

alias G_TRAVERSE_LEAVES = 1;
alias G_TRAVERSE_NON_LEAVES = 2;
alias G_TRAVERSE_ALL = 3;
alias G_TRAVERSE_MASK = 3;
alias G_TRAVERSE_LEAFS = 1;
alias G_TRAVERSE_NON_LEAFS = 2;

alias GTraverseFlags = Int;

alias G_IN_ORDER = 0;
alias G_PRE_ORDER = 1;
alias G_POST_ORDER = 2;
alias G_LEVEL_ORDER = 3;

alias GTraverseType = Int;

alias GNodeTraverseFunc = CCodePointer[(Pointer[Struct__GNode],RawPointer),(Int)];

alias GNodeForeachFunc = CCodePointer[(Pointer[Struct__GNode],RawPointer),()];

alias GCopyFunc = CCodePointer[(RawPointer,RawPointer),(RawPointer)];

record Struct__GNode (
    data : gpointer,
    next : Pointer[GNode],
    prev : Pointer[GNode],
    parent : Pointer[GNode],
    children : Pointer[GNode],
);

external g_node_new(
    data : gpointer) Pointer[GNode];

external g_node_destroy(
    root : Pointer[GNode]);

external g_node_unlink(
    node : Pointer[GNode]);

external g_node_copy_deep(
    node : Pointer[GNode],
    copy_func : GCopyFunc,
    data : gpointer) Pointer[GNode];

external g_node_copy(
    node : Pointer[GNode]) Pointer[GNode];

external g_node_insert(
    parent : Pointer[GNode],
    position : Int,
    node : Pointer[GNode]) Pointer[GNode];

external g_node_insert_before(
    parent : Pointer[GNode],
    sibling : Pointer[GNode],
    node : Pointer[GNode]) Pointer[GNode];

external g_node_insert_after(
    parent : Pointer[GNode],
    sibling : Pointer[GNode],
    node : Pointer[GNode]) Pointer[GNode];

external g_node_prepend(
    parent : Pointer[GNode],
    node : Pointer[GNode]) Pointer[GNode];

external g_node_n_nodes(
    root : Pointer[GNode],
    flags : GTraverseFlags) UInt;

external g_node_get_root(
    node : Pointer[GNode]) Pointer[GNode];

external g_node_is_ancestor(
    node : Pointer[GNode],
    descendant : Pointer[GNode]) Int;

external g_node_depth(
    node : Pointer[GNode]) UInt;

external g_node_find(
    root : Pointer[GNode],
    order : GTraverseType,
    flags : GTraverseFlags,
    data : gpointer) Pointer[GNode];

external g_node_traverse(
    root : Pointer[GNode],
    order : GTraverseType,
    flags : GTraverseFlags,
    max_depth : Int,
    func : GNodeTraverseFunc,
    data : gpointer);

external g_node_max_height(
    root : Pointer[GNode]) UInt;

external g_node_children_foreach(
    node : Pointer[GNode],
    flags : GTraverseFlags,
    func : GNodeForeachFunc,
    data : gpointer);

external g_node_reverse_children(
    node : Pointer[GNode]);

external g_node_n_children(
    node : Pointer[GNode]) UInt;

external g_node_nth_child(
    node : Pointer[GNode],
    n : UInt) Pointer[GNode];

external g_node_last_child(
    node : Pointer[GNode]) Pointer[GNode];

external g_node_find_child(
    node : Pointer[GNode],
    flags : GTraverseFlags,
    data : gpointer) Pointer[GNode];

external g_node_child_position(
    node : Pointer[GNode],
    child : Pointer[GNode]) Int;

external g_node_child_index(
    node : Pointer[GNode],
    data : gpointer) Int;

external g_node_first_sibling(
    node : Pointer[GNode]) Pointer[GNode];

external g_node_last_sibling(
    node : Pointer[GNode]) Pointer[GNode];

external g_node_push_allocator(
    dummy : gpointer);

external g_node_pop_allocator();

alias GOptionContext = Opaque;

alias GOptionGroup = Opaque;

alias GOptionEntry = Struct__GOptionEntry;

alias G_OPTION_FLAG_HIDDEN = 1;
alias G_OPTION_FLAG_IN_MAIN = 2;
alias G_OPTION_FLAG_REVERSE = 4;
alias G_OPTION_FLAG_NO_ARG = 8;
alias G_OPTION_FLAG_FILENAME = 16;
alias G_OPTION_FLAG_OPTIONAL_ARG = 32;
alias G_OPTION_FLAG_NOALIAS = 64;

alias GOptionFlags = Int;

alias G_OPTION_ARG_NONE = 0;
alias G_OPTION_ARG_STRING = 1;
alias G_OPTION_ARG_INT = 2;
alias G_OPTION_ARG_CALLBACK = 3;
alias G_OPTION_ARG_FILENAME = 4;
alias G_OPTION_ARG_STRING_ARRAY = 5;
alias G_OPTION_ARG_FILENAME_ARRAY = 6;
alias G_OPTION_ARG_DOUBLE = 7;
alias G_OPTION_ARG_INT64 = 8;

alias GOptionArg = Int;

alias GOptionArgFunc = CCodePointer[(Pointer[CChar],Pointer[CChar],RawPointer,Pointer[Pointer[Struct__GError]]),(Int)];

alias GOptionParseFunc = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer,Pointer[Pointer[Struct__GError]]),(Int)];

alias GOptionErrorFunc = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer,Pointer[Pointer[Struct__GError]]),()];

alias G_OPTION_ERROR_UNKNOWN_OPTION = 0;
alias G_OPTION_ERROR_BAD_VALUE = 1;
alias G_OPTION_ERROR_FAILED = 2;

alias GOptionError = Int;

external g_option_error_quark() UInt;

record Struct__GOptionEntry (
    long_name : Pointer[CChar],
    short_name : CChar,
    flags : Int,
    arg : GOptionArg,
    arg_data : gpointer,
    description : Pointer[CChar],
    arg_description : Pointer[CChar],
);

external g_option_context_new(
    parameter_string : Pointer[CChar]) Pointer[GOptionContext];

external g_option_context_set_summary(
    context : Pointer[GOptionContext],
    summary : Pointer[CChar]);

external g_option_context_get_summary(
    context : Pointer[GOptionContext]) Pointer[CChar];

external g_option_context_set_description(
    context : Pointer[GOptionContext],
    description : Pointer[CChar]);

external g_option_context_get_description(
    context : Pointer[GOptionContext]) Pointer[CChar];

external g_option_context_free(
    context : Pointer[GOptionContext]);

external g_option_context_set_help_enabled(
    context : Pointer[GOptionContext],
    help_enabled : Int);

external g_option_context_get_help_enabled(
    context : Pointer[GOptionContext]) Int;

external g_option_context_set_ignore_unknown_options(
    context : Pointer[GOptionContext],
    ignore_unknown : Int);

external g_option_context_get_ignore_unknown_options(
    context : Pointer[GOptionContext]) Int;

external g_option_context_add_main_entries(
    context : Pointer[GOptionContext],
    entries : Pointer[GOptionEntry],
    translation_domain : Pointer[CChar]);

external g_option_context_parse(
    context : Pointer[GOptionContext],
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]],
    error : Pointer[Pointer[GError]]) Int;

external g_option_context_set_translate_func(
    context : Pointer[GOptionContext],
    func : GTranslateFunc,
    data : gpointer,
    destroy_notify : GDestroyNotify);

external g_option_context_set_translation_domain(
    context : Pointer[GOptionContext],
    domain : Pointer[CChar]);

external g_option_context_add_group(
    context : Pointer[GOptionContext],
    group : Pointer[GOptionGroup]);

external g_option_context_set_main_group(
    context : Pointer[GOptionContext],
    group : Pointer[GOptionGroup]);

external g_option_context_get_main_group(
    context : Pointer[GOptionContext]) Pointer[GOptionGroup];

external g_option_context_get_help(
    context : Pointer[GOptionContext],
    main_help : Int,
    group : Pointer[GOptionGroup]) Pointer[CChar];

external g_option_group_new(
    name : Pointer[CChar],
    description : Pointer[CChar],
    help_description : Pointer[CChar],
    user_data : gpointer,
    destroy : GDestroyNotify) Pointer[GOptionGroup];

external g_option_group_set_parse_hooks(
    group : Pointer[GOptionGroup],
    pre_parse_func : GOptionParseFunc,
    post_parse_func : GOptionParseFunc);

external g_option_group_set_error_hook(
    group : Pointer[GOptionGroup],
    error_func : GOptionErrorFunc);

external g_option_group_free(
    group : Pointer[GOptionGroup]);

external g_option_group_add_entries(
    group : Pointer[GOptionGroup],
    entries : Pointer[GOptionEntry]);

external g_option_group_set_translate_func(
    group : Pointer[GOptionGroup],
    func : GTranslateFunc,
    data : gpointer,
    destroy_notify : GDestroyNotify);

external g_option_group_set_translation_domain(
    group : Pointer[GOptionGroup],
    domain : Pointer[CChar]);

alias GPatternSpec = Opaque;

external g_pattern_spec_new(
    pattern : Pointer[CChar]) Pointer[GPatternSpec];

external g_pattern_spec_free(
    pspec : Pointer[GPatternSpec]);

external g_pattern_spec_equal(
    pspec1 : Pointer[GPatternSpec],
    pspec2 : Pointer[GPatternSpec]) Int;

external g_pattern_match(
    pspec : Pointer[GPatternSpec],
    string_length : UInt,
    string : Pointer[CChar],
    string_reversed : Pointer[CChar]) Int;

external g_pattern_match_string(
    pspec : Pointer[GPatternSpec],
    string : Pointer[CChar]) Int;

external g_pattern_match_simple(
    pattern : Pointer[CChar],
    string : Pointer[CChar]) Int;

external g_spaced_primes_closest(
    num : UInt) UInt;

external g_qsort_with_data(
    pbase : gconstpointer,
    total_elems : Int,
    size : CULong,
    compare_func : GCompareDataFunc,
    user_data : gpointer);

alias GQueue = Struct__GQueue;

record Struct__GQueue (
    head : Pointer[GList],
    tail : Pointer[GList],
    length : UInt,
);

external g_queue_new() Pointer[GQueue];

external g_queue_free(
    queue : Pointer[GQueue]);

external g_queue_init(
    queue : Pointer[GQueue]);

external g_queue_clear(
    queue : Pointer[GQueue]);

external g_queue_is_empty(
    queue : Pointer[GQueue]) Int;

external g_queue_get_length(
    queue : Pointer[GQueue]) UInt;

external g_queue_reverse(
    queue : Pointer[GQueue]);

external g_queue_copy(
    queue : Pointer[GQueue]) Pointer[GQueue];

external g_queue_foreach(
    queue : Pointer[GQueue],
    func : GFunc,
    user_data : gpointer);

external g_queue_find(
    queue : Pointer[GQueue],
    data : gconstpointer) Pointer[GList];

external g_queue_find_custom(
    queue : Pointer[GQueue],
    data : gconstpointer,
    func : GCompareFunc) Pointer[GList];

external g_queue_sort(
    queue : Pointer[GQueue],
    compare_func : GCompareDataFunc,
    user_data : gpointer);

external g_queue_push_head(
    queue : Pointer[GQueue],
    data : gpointer);

external g_queue_push_tail(
    queue : Pointer[GQueue],
    data : gpointer);

external g_queue_push_nth(
    queue : Pointer[GQueue],
    data : gpointer,
    n : Int);

external g_queue_pop_head(
    queue : Pointer[GQueue]) gpointer;

external g_queue_pop_tail(
    queue : Pointer[GQueue]) gpointer;

external g_queue_pop_nth(
    queue : Pointer[GQueue],
    n : UInt) gpointer;

external g_queue_peek_head(
    queue : Pointer[GQueue]) gpointer;

external g_queue_peek_tail(
    queue : Pointer[GQueue]) gpointer;

external g_queue_peek_nth(
    queue : Pointer[GQueue],
    n : UInt) gpointer;

external g_queue_index(
    queue : Pointer[GQueue],
    data : gconstpointer) Int;

external g_queue_remove(
    queue : Pointer[GQueue],
    data : gconstpointer);

external g_queue_remove_all(
    queue : Pointer[GQueue],
    data : gconstpointer);

external g_queue_insert_before(
    queue : Pointer[GQueue],
    sibling : Pointer[GList],
    data : gpointer);

external g_queue_insert_after(
    queue : Pointer[GQueue],
    sibling : Pointer[GList],
    data : gpointer);

external g_queue_insert_sorted(
    queue : Pointer[GQueue],
    data : gpointer,
    func : GCompareDataFunc,
    user_data : gpointer);

external g_queue_push_head_link(
    queue : Pointer[GQueue],
    link_ : Pointer[GList]);

external g_queue_push_tail_link(
    queue : Pointer[GQueue],
    link_ : Pointer[GList]);

external g_queue_push_nth_link(
    queue : Pointer[GQueue],
    n : Int,
    link_ : Pointer[GList]);

external g_queue_pop_head_link(
    queue : Pointer[GQueue]) Pointer[GList];

external g_queue_pop_tail_link(
    queue : Pointer[GQueue]) Pointer[GList];

external g_queue_pop_nth_link(
    queue : Pointer[GQueue],
    n : UInt) Pointer[GList];

external g_queue_peek_head_link(
    queue : Pointer[GQueue]) Pointer[GList];

external g_queue_peek_tail_link(
    queue : Pointer[GQueue]) Pointer[GList];

external g_queue_peek_nth_link(
    queue : Pointer[GQueue],
    n : UInt) Pointer[GList];

external g_queue_link_index(
    queue : Pointer[GQueue],
    link_ : Pointer[GList]) Int;

external g_queue_unlink(
    queue : Pointer[GQueue],
    link_ : Pointer[GList]);

external g_queue_delete_link(
    queue : Pointer[GQueue],
    link_ : Pointer[GList]);

alias GRand = Opaque;

external g_rand_new_with_seed(
    seed : UInt) Pointer[GRand];

external g_rand_new_with_seed_array(
    seed : Pointer[UInt],
    seed_length : UInt) Pointer[GRand];

external g_rand_new() Pointer[GRand];

external g_rand_free(
    rand_ : Pointer[GRand]);

external g_rand_copy(
    rand_ : Pointer[GRand]) Pointer[GRand];

external g_rand_set_seed(
    rand_ : Pointer[GRand],
    seed : UInt);

external g_rand_set_seed_array(
    rand_ : Pointer[GRand],
    seed : Pointer[UInt],
    seed_length : UInt);

external g_rand_int(
    rand_ : Pointer[GRand]) UInt;

external g_rand_int_range(
    rand_ : Pointer[GRand],
    begin : Int,
    end : Int) Int;

external g_rand_double(
    rand_ : Pointer[GRand]) Double;

external g_rand_double_range(
    rand_ : Pointer[GRand],
    begin : Double,
    end : Double) Double;

external g_random_set_seed(
    seed : UInt);

external g_random_int() UInt;

external g_random_int_range(
    begin : Int,
    end : Int) Int;

external g_random_double() Double;

external g_random_double_range(
    begin : Double,
    end : Double) Double;

alias GRelation = Opaque;

alias GTuples = Struct__GTuples;

record Struct__GTuples (
    len : UInt,
);

external g_relation_new(
    fields : Int) Pointer[GRelation];

external g_relation_destroy(
    relation : Pointer[GRelation]);

external g_relation_index(
    relation : Pointer[GRelation],
    field : Int,
    hash_func : GHashFunc,
    key_equal_func : GEqualFunc);

external g_relation_insert(
    relation : Pointer[GRelation],
    ...);

external g_relation_delete(
    relation : Pointer[GRelation],
    key : gconstpointer,
    field : Int) Int;

external g_relation_select(
    relation : Pointer[GRelation],
    key : gconstpointer,
    field : Int) Pointer[GTuples];

external g_relation_count(
    relation : Pointer[GRelation],
    key : gconstpointer,
    field : Int) Int;

external g_relation_exists(
    relation : Pointer[GRelation],
    ...) Int;

external g_relation_print(
    relation : Pointer[GRelation]);

external g_tuples_destroy(
    tuples : Pointer[GTuples]);

external g_tuples_index(
    tuples : Pointer[GTuples],
    index_ : Int,
    field : Int) gpointer;

alias G_REGEX_ERROR_COMPILE = 0;
alias G_REGEX_ERROR_OPTIMIZE = 1;
alias G_REGEX_ERROR_REPLACE = 2;
alias G_REGEX_ERROR_MATCH = 3;
alias G_REGEX_ERROR_INTERNAL = 4;
alias G_REGEX_ERROR_STRAY_BACKSLASH = 101;
alias G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102;
alias G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103;
alias G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104;
alias G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105;
alias G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106;
alias G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107;
alias G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108;
alias G_REGEX_ERROR_NOTHING_TO_REPEAT = 109;
alias G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112;
alias G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113;
alias G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114;
alias G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115;
alias G_REGEX_ERROR_UNTERMINATED_COMMENT = 118;
alias G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120;
alias G_REGEX_ERROR_MEMORY_ERROR = 121;
alias G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125;
alias G_REGEX_ERROR_MALFORMED_CONDITION = 126;
alias G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127;
alias G_REGEX_ERROR_ASSERTION_EXPECTED = 128;
alias G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130;
alias G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131;
alias G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134;
alias G_REGEX_ERROR_INVALID_CONDITION = 135;
alias G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136;
alias G_REGEX_ERROR_INFINITE_LOOP = 140;
alias G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142;
alias G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143;
alias G_REGEX_ERROR_MALFORMED_PROPERTY = 146;
alias G_REGEX_ERROR_UNKNOWN_PROPERTY = 147;
alias G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148;
alias G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149;
alias G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151;
alias G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154;
alias G_REGEX_ERROR_DEFINE_REPETION = 155;
alias G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156;
alias G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157;

alias GRegexError = Int;

external g_regex_error_quark() UInt;

alias G_REGEX_CASELESS = 1;
alias G_REGEX_MULTILINE = 2;
alias G_REGEX_DOTALL = 4;
alias G_REGEX_EXTENDED = 8;
alias G_REGEX_ANCHORED = 16;
alias G_REGEX_DOLLAR_ENDONLY = 32;
alias G_REGEX_UNGREEDY = 512;
alias G_REGEX_RAW = 2048;
alias G_REGEX_NO_AUTO_CAPTURE = 4096;
alias G_REGEX_OPTIMIZE = 8192;
alias G_REGEX_DUPNAMES = 524288;
alias G_REGEX_NEWLINE_CR = 1048576;
alias G_REGEX_NEWLINE_LF = 2097152;
alias G_REGEX_NEWLINE_CRLF = 3145728;

alias GRegexCompileFlags = Int;

alias G_REGEX_MATCH_ANCHORED = 16;
alias G_REGEX_MATCH_NOTBOL = 128;
alias G_REGEX_MATCH_NOTEOL = 256;
alias G_REGEX_MATCH_NOTEMPTY = 1024;
alias G_REGEX_MATCH_PARTIAL = 32768;
alias G_REGEX_MATCH_NEWLINE_CR = 1048576;
alias G_REGEX_MATCH_NEWLINE_LF = 2097152;
alias G_REGEX_MATCH_NEWLINE_CRLF = 3145728;
alias G_REGEX_MATCH_NEWLINE_ANY = 4194304;

alias GRegexMatchFlags = Int;

alias GRegex = Opaque;

alias GMatchInfo = Opaque;

alias GRegexEvalCallback = CCodePointer[(OpaquePointer,Pointer[Struct__GString],RawPointer),(Int)];

external g_regex_new(
    pattern : Pointer[CChar],
    compile_options : GRegexCompileFlags,
    match_options : GRegexMatchFlags,
    error : Pointer[Pointer[GError]]) Pointer[GRegex];

external g_regex_ref(
    regex : Pointer[GRegex]) Pointer[GRegex];

external g_regex_unref(
    regex : Pointer[GRegex]);

external g_regex_get_pattern(
    regex : Pointer[GRegex]) Pointer[CChar];

external g_regex_get_max_backref(
    regex : Pointer[GRegex]) Int;

external g_regex_get_capture_count(
    regex : Pointer[GRegex]) Int;

external g_regex_get_string_number(
    regex : Pointer[GRegex],
    name : Pointer[CChar]) Int;

external g_regex_escape_string(
    string : Pointer[CChar],
    length : Int) Pointer[CChar];

external g_regex_get_compile_flags(
    regex : Pointer[GRegex]) GRegexCompileFlags;

external g_regex_get_match_flags(
    regex : Pointer[GRegex]) GRegexMatchFlags;

external g_regex_match_simple(
    pattern : Pointer[CChar],
    string : Pointer[CChar],
    compile_options : GRegexCompileFlags,
    match_options : GRegexMatchFlags) Int;

external g_regex_match(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    match_options : GRegexMatchFlags,
    match_info : Pointer[Pointer[GMatchInfo]]) Int;

external g_regex_match_full(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    string_len : CLong,
    start_position : Int,
    match_options : GRegexMatchFlags,
    match_info : Pointer[Pointer[GMatchInfo]],
    error : Pointer[Pointer[GError]]) Int;

external g_regex_match_all(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    match_options : GRegexMatchFlags,
    match_info : Pointer[Pointer[GMatchInfo]]) Int;

external g_regex_match_all_full(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    string_len : CLong,
    start_position : Int,
    match_options : GRegexMatchFlags,
    match_info : Pointer[Pointer[GMatchInfo]],
    error : Pointer[Pointer[GError]]) Int;

external g_regex_split_simple(
    pattern : Pointer[CChar],
    string : Pointer[CChar],
    compile_options : GRegexCompileFlags,
    match_options : GRegexMatchFlags) Pointer[Pointer[CChar]];

external g_regex_split(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    match_options : GRegexMatchFlags) Pointer[Pointer[CChar]];

external g_regex_split_full(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    string_len : CLong,
    start_position : Int,
    match_options : GRegexMatchFlags,
    max_tokens : Int,
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_regex_replace(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    string_len : CLong,
    start_position : Int,
    replacement : Pointer[CChar],
    match_options : GRegexMatchFlags,
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_regex_replace_literal(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    string_len : CLong,
    start_position : Int,
    replacement : Pointer[CChar],
    match_options : GRegexMatchFlags,
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_regex_replace_eval(
    regex : Pointer[GRegex],
    string : Pointer[CChar],
    string_len : CLong,
    start_position : Int,
    match_options : GRegexMatchFlags,
    eval : GRegexEvalCallback,
    user_data : gpointer,
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_regex_check_replacement(
    replacement : Pointer[CChar],
    has_references : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external g_match_info_get_regex(
    match_info : Pointer[GMatchInfo]) Pointer[GRegex];

external g_match_info_get_string(
    match_info : Pointer[GMatchInfo]) Pointer[CChar];

external g_match_info_free(
    match_info : Pointer[GMatchInfo]);

external g_match_info_next(
    match_info : Pointer[GMatchInfo],
    error : Pointer[Pointer[GError]]) Int;

external g_match_info_matches(
    match_info : Pointer[GMatchInfo]) Int;

external g_match_info_get_match_count(
    match_info : Pointer[GMatchInfo]) Int;

external g_match_info_is_partial_match(
    match_info : Pointer[GMatchInfo]) Int;

external g_match_info_expand_references(
    match_info : Pointer[GMatchInfo],
    string_to_expand : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_match_info_fetch(
    match_info : Pointer[GMatchInfo],
    match_num : Int) Pointer[CChar];

external g_match_info_fetch_pos(
    match_info : Pointer[GMatchInfo],
    match_num : Int,
    start_pos : Pointer[Int],
    end_pos : Pointer[Int]) Int;

external g_match_info_fetch_named(
    match_info : Pointer[GMatchInfo],
    name : Pointer[CChar]) Pointer[CChar];

external g_match_info_fetch_named_pos(
    match_info : Pointer[GMatchInfo],
    name : Pointer[CChar],
    start_pos : Pointer[Int],
    end_pos : Pointer[Int]) Int;

external g_match_info_fetch_all(
    match_info : Pointer[GMatchInfo]) Pointer[Pointer[CChar]];

alias GScanner = Struct__GScanner;

alias GScannerConfig = Struct__GScannerConfig;

alias GTokenValue = AUnionType;

alias GScannerMsgFunc = CCodePointer[(Pointer[Struct__GScanner],Pointer[CChar],Int),()];

alias G_ERR_UNKNOWN = 0;
alias G_ERR_UNEXP_EOF = 1;
alias G_ERR_UNEXP_EOF_IN_STRING = 2;
alias G_ERR_UNEXP_EOF_IN_COMMENT = 3;
alias G_ERR_NON_DIGIT_IN_CONST = 4;
alias G_ERR_DIGIT_RADIX = 5;
alias G_ERR_FLOAT_RADIX = 6;
alias G_ERR_FLOAT_MALFORMED = 7;

alias GErrorType = Int;

alias G_TOKEN_EOF = 0;
alias G_TOKEN_LEFT_PAREN = 40;
alias G_TOKEN_RIGHT_PAREN = 41;
alias G_TOKEN_LEFT_CURLY = 123;
alias G_TOKEN_RIGHT_CURLY = 125;
alias G_TOKEN_LEFT_BRACE = 91;
alias G_TOKEN_RIGHT_BRACE = 93;
alias G_TOKEN_EQUAL_SIGN = 61;
alias G_TOKEN_COMMA = 44;
alias G_TOKEN_NONE = 256;
alias G_TOKEN_ERROR = 257;
alias G_TOKEN_CHAR = 258;
alias G_TOKEN_BINARY = 259;
alias G_TOKEN_OCTAL = 260;
alias G_TOKEN_INT = 261;
alias G_TOKEN_HEX = 262;
alias G_TOKEN_FLOAT = 263;
alias G_TOKEN_STRING = 264;
alias G_TOKEN_SYMBOL = 265;
alias G_TOKEN_IDENTIFIER = 266;
alias G_TOKEN_IDENTIFIER_NULL = 267;
alias G_TOKEN_COMMENT_SINGLE = 268;
alias G_TOKEN_COMMENT_MULTI = 269;
alias G_TOKEN_LAST = 270;

alias GTokenType = Int;

record Struct__GScannerConfig (
    cset_skip_characters : Pointer[CChar],
    cset_identifier_first : Pointer[CChar],
    cset_identifier_nth : Pointer[CChar],
    cpair_comment_single : Pointer[CChar],
    case_sensitive : UInt,
    skip_comment_multi : UInt,
    skip_comment_single : UInt,
    scan_comment_multi : UInt,
    scan_identifier : UInt,
    scan_identifier_1char : UInt,
    scan_identifier_NULL : UInt,
    scan_symbols : UInt,
    scan_binary : UInt,
    scan_octal : UInt,
    scan_float : UInt,
    scan_hex : UInt,
    scan_hex_dollar : UInt,
    scan_string_sq : UInt,
    scan_string_dq : UInt,
    numbers_2_int : UInt,
    int_2_float : UInt,
    identifier_2_string : UInt,
    char_2_token : UInt,
    symbol_2_token : UInt,
    scope_0_fallback : UInt,
    store_int64 : UInt,
    padding_dummy : UInt,
);

record Struct__GScanner (
    user_data : gpointer,
    max_parse_errors : UInt,
    parse_errors : UInt,
    input_name : Pointer[CChar],
    qdata : Pointer[GData],
    config : Pointer[GScannerConfig],
    token : GTokenType,
    value : GTokenValue,
    line : UInt,
    position : UInt,
    next_token : GTokenType,
    next_value : GTokenValue,
    next_line : UInt,
    next_position : UInt,
    symbol_table : Pointer[GHashTable],
    input_fd : Int,
    text : Pointer[CChar],
    text_end : Pointer[CChar],
    buffer : Pointer[CChar],
    scope_id : UInt,
    msg_handler : GScannerMsgFunc,
);

external g_scanner_new(
    config_templ : Pointer[GScannerConfig]) Pointer[GScanner];

external g_scanner_destroy(
    scanner : Pointer[GScanner]);

external g_scanner_input_file(
    scanner : Pointer[GScanner],
    input_fd : Int);

external g_scanner_sync_file_offset(
    scanner : Pointer[GScanner]);

external g_scanner_input_text(
    scanner : Pointer[GScanner],
    text : Pointer[CChar],
    text_len : UInt);

external g_scanner_get_next_token(
    scanner : Pointer[GScanner]) GTokenType;

external g_scanner_peek_next_token(
    scanner : Pointer[GScanner]) GTokenType;

external g_scanner_cur_token(
    scanner : Pointer[GScanner]) GTokenType;

external g_scanner_cur_value(
    scanner : Pointer[GScanner]) GTokenValue;

external g_scanner_cur_line(
    scanner : Pointer[GScanner]) UInt;

external g_scanner_cur_position(
    scanner : Pointer[GScanner]) UInt;

external g_scanner_eof(
    scanner : Pointer[GScanner]) Int;

external g_scanner_set_scope(
    scanner : Pointer[GScanner],
    scope_id : UInt) UInt;

external g_scanner_scope_add_symbol(
    scanner : Pointer[GScanner],
    scope_id : UInt,
    symbol : Pointer[CChar],
    value : gpointer);

external g_scanner_scope_remove_symbol(
    scanner : Pointer[GScanner],
    scope_id : UInt,
    symbol : Pointer[CChar]);

external g_scanner_scope_lookup_symbol(
    scanner : Pointer[GScanner],
    scope_id : UInt,
    symbol : Pointer[CChar]) gpointer;

external g_scanner_scope_foreach_symbol(
    scanner : Pointer[GScanner],
    scope_id : UInt,
    func : GHFunc,
    user_data : gpointer);

external g_scanner_lookup_symbol(
    scanner : Pointer[GScanner],
    symbol : Pointer[CChar]) gpointer;

external g_scanner_unexp_token(
    scanner : Pointer[GScanner],
    expected_token : GTokenType,
    identifier_spec : Pointer[CChar],
    symbol_spec : Pointer[CChar],
    symbol_name : Pointer[CChar],
    message : Pointer[CChar],
    is_error : Int);

external g_scanner_error(
    scanner : Pointer[GScanner],
    format : Pointer[CChar],
    ...);

external g_scanner_warn(
    scanner : Pointer[GScanner],
    format : Pointer[CChar],
    ...);

alias GSequence = Opaque;

alias GSequenceIter = Opaque;

alias GSequenceIterCompareFunc = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),(Int)];

external g_sequence_new(
    data_destroy : GDestroyNotify) Pointer[GSequence];

external g_sequence_free(
    seq : Pointer[GSequence]);

external g_sequence_get_length(
    seq : Pointer[GSequence]) Int;

external g_sequence_foreach(
    seq : Pointer[GSequence],
    func : GFunc,
    user_data : gpointer);

external g_sequence_foreach_range(
    begin : Pointer[GSequenceIter],
    end : Pointer[GSequenceIter],
    func : GFunc,
    user_data : gpointer);

external g_sequence_sort(
    seq : Pointer[GSequence],
    cmp_func : GCompareDataFunc,
    cmp_data : gpointer);

external g_sequence_sort_iter(
    seq : Pointer[GSequence],
    cmp_func : GSequenceIterCompareFunc,
    cmp_data : gpointer);

external g_sequence_get_begin_iter(
    seq : Pointer[GSequence]) Pointer[GSequenceIter];

external g_sequence_get_end_iter(
    seq : Pointer[GSequence]) Pointer[GSequenceIter];

external g_sequence_get_iter_at_pos(
    seq : Pointer[GSequence],
    pos : Int) Pointer[GSequenceIter];

external g_sequence_append(
    seq : Pointer[GSequence],
    data : gpointer) Pointer[GSequenceIter];

external g_sequence_prepend(
    seq : Pointer[GSequence],
    data : gpointer) Pointer[GSequenceIter];

external g_sequence_insert_before(
    iter : Pointer[GSequenceIter],
    data : gpointer) Pointer[GSequenceIter];

external g_sequence_move(
    src : Pointer[GSequenceIter],
    dest : Pointer[GSequenceIter]);

external g_sequence_swap(
    a : Pointer[GSequenceIter],
    b : Pointer[GSequenceIter]);

external g_sequence_insert_sorted(
    seq : Pointer[GSequence],
    data : gpointer,
    cmp_func : GCompareDataFunc,
    cmp_data : gpointer) Pointer[GSequenceIter];

external g_sequence_insert_sorted_iter(
    seq : Pointer[GSequence],
    data : gpointer,
    iter_cmp : GSequenceIterCompareFunc,
    cmp_data : gpointer) Pointer[GSequenceIter];

external g_sequence_sort_changed(
    iter : Pointer[GSequenceIter],
    cmp_func : GCompareDataFunc,
    cmp_data : gpointer);

external g_sequence_sort_changed_iter(
    iter : Pointer[GSequenceIter],
    iter_cmp : GSequenceIterCompareFunc,
    cmp_data : gpointer);

external g_sequence_remove(
    iter : Pointer[GSequenceIter]);

external g_sequence_remove_range(
    begin : Pointer[GSequenceIter],
    end : Pointer[GSequenceIter]);

external g_sequence_move_range(
    dest : Pointer[GSequenceIter],
    begin : Pointer[GSequenceIter],
    end : Pointer[GSequenceIter]);

external g_sequence_search(
    seq : Pointer[GSequence],
    data : gpointer,
    cmp_func : GCompareDataFunc,
    cmp_data : gpointer) Pointer[GSequenceIter];

external g_sequence_search_iter(
    seq : Pointer[GSequence],
    data : gpointer,
    iter_cmp : GSequenceIterCompareFunc,
    cmp_data : gpointer) Pointer[GSequenceIter];

external g_sequence_get(
    iter : Pointer[GSequenceIter]) gpointer;

external g_sequence_set(
    iter : Pointer[GSequenceIter],
    data : gpointer);

external g_sequence_iter_is_begin(
    iter : Pointer[GSequenceIter]) Int;

external g_sequence_iter_is_end(
    iter : Pointer[GSequenceIter]) Int;

external g_sequence_iter_next(
    iter : Pointer[GSequenceIter]) Pointer[GSequenceIter];

external g_sequence_iter_prev(
    iter : Pointer[GSequenceIter]) Pointer[GSequenceIter];

external g_sequence_iter_get_position(
    iter : Pointer[GSequenceIter]) Int;

external g_sequence_iter_move(
    iter : Pointer[GSequenceIter],
    delta : Int) Pointer[GSequenceIter];

external g_sequence_iter_get_sequence(
    iter : Pointer[GSequenceIter]) Pointer[GSequence];

external g_sequence_iter_compare(
    a : Pointer[GSequenceIter],
    b : Pointer[GSequenceIter]) Int;

external g_sequence_range_get_midpoint(
    begin : Pointer[GSequenceIter],
    end : Pointer[GSequenceIter]) Pointer[GSequenceIter];

alias G_SHELL_ERROR_BAD_QUOTING = 0;
alias G_SHELL_ERROR_EMPTY_STRING = 1;
alias G_SHELL_ERROR_FAILED = 2;

alias GShellError = Int;

external g_shell_error_quark() UInt;

external g_shell_quote(
    unquoted_string : Pointer[CChar]) Pointer[CChar];

external g_shell_unquote(
    quoted_string : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_shell_parse_argv(
    command_line : Pointer[CChar],
    argcp : Pointer[Int],
    argvp : Pointer[Pointer[Pointer[CChar]]],
    error : Pointer[Pointer[GError]]) Int;

alias G_SPAWN_ERROR_FORK = 0;
alias G_SPAWN_ERROR_READ = 1;
alias G_SPAWN_ERROR_CHDIR = 2;
alias G_SPAWN_ERROR_ACCES = 3;
alias G_SPAWN_ERROR_PERM = 4;
alias G_SPAWN_ERROR_2BIG = 5;
alias G_SPAWN_ERROR_NOEXEC = 6;
alias G_SPAWN_ERROR_NAMETOOLONG = 7;
alias G_SPAWN_ERROR_NOENT = 8;
alias G_SPAWN_ERROR_NOMEM = 9;
alias G_SPAWN_ERROR_NOTDIR = 10;
alias G_SPAWN_ERROR_LOOP = 11;
alias G_SPAWN_ERROR_TXTBUSY = 12;
alias G_SPAWN_ERROR_IO = 13;
alias G_SPAWN_ERROR_NFILE = 14;
alias G_SPAWN_ERROR_MFILE = 15;
alias G_SPAWN_ERROR_INVAL = 16;
alias G_SPAWN_ERROR_ISDIR = 17;
alias G_SPAWN_ERROR_LIBBAD = 18;
alias G_SPAWN_ERROR_FAILED = 19;

alias GSpawnError = Int;

alias GSpawnChildSetupFunc = CCodePointer[(RawPointer),()];

alias G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1;
alias G_SPAWN_DO_NOT_REAP_CHILD = 2;
alias G_SPAWN_SEARCH_PATH = 4;
alias G_SPAWN_STDOUT_TO_DEV_NULL = 8;
alias G_SPAWN_STDERR_TO_DEV_NULL = 16;
alias G_SPAWN_CHILD_INHERITS_STDIN = 32;
alias G_SPAWN_FILE_AND_ARGV_ZERO = 64;

alias GSpawnFlags = Int;

external g_spawn_error_quark() UInt;

external g_spawn_async(
    working_directory : Pointer[CChar],
    argv : Pointer[Pointer[CChar]],
    envp : Pointer[Pointer[CChar]],
    flags : GSpawnFlags,
    child_setup : GSpawnChildSetupFunc,
    user_data : gpointer,
    child_pid : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external g_spawn_async_with_pipes(
    working_directory : Pointer[CChar],
    argv : Pointer[Pointer[CChar]],
    envp : Pointer[Pointer[CChar]],
    flags : GSpawnFlags,
    child_setup : GSpawnChildSetupFunc,
    user_data : gpointer,
    child_pid : Pointer[Int],
    standard_input : Pointer[Int],
    standard_output : Pointer[Int],
    standard_error : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external g_spawn_sync(
    working_directory : Pointer[CChar],
    argv : Pointer[Pointer[CChar]],
    envp : Pointer[Pointer[CChar]],
    flags : GSpawnFlags,
    child_setup : GSpawnChildSetupFunc,
    user_data : gpointer,
    standard_output : Pointer[Pointer[CChar]],
    standard_error : Pointer[Pointer[CChar]],
    exit_status : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external g_spawn_command_line_sync(
    command_line : Pointer[CChar],
    standard_output : Pointer[Pointer[CChar]],
    standard_error : Pointer[Pointer[CChar]],
    exit_status : Pointer[Int],
    error : Pointer[Pointer[GError]]) Int;

external g_spawn_command_line_async(
    command_line : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_spawn_close_pid(
    pid : Int);

alias G_ASCII_ALNUM = 1;
alias G_ASCII_ALPHA = 2;
alias G_ASCII_CNTRL = 4;
alias G_ASCII_DIGIT = 8;
alias G_ASCII_GRAPH = 16;
alias G_ASCII_LOWER = 32;
alias G_ASCII_PRINT = 64;
alias G_ASCII_PUNCT = 128;
alias G_ASCII_SPACE = 256;
alias G_ASCII_UPPER = 512;
alias G_ASCII_XDIGIT = 1024;

alias GAsciiType = Int;

external g_ascii_table : Pointer[UShort];

external g_ascii_tolower(
    c : CChar) CChar;

external g_ascii_toupper(
    c : CChar) CChar;

external g_ascii_digit_value(
    c : CChar) Int;

external g_ascii_xdigit_value(
    c : CChar) Int;

external g_strdelimit(
    string : Pointer[CChar],
    delimiters : Pointer[CChar],
    new_delimiter : CChar) Pointer[CChar];

external g_strcanon(
    string : Pointer[CChar],
    valid_chars : Pointer[CChar],
    substitutor : CChar) Pointer[CChar];

external g_strerror(
    errnum : Int) Pointer[CChar];

external g_strsignal(
    signum : Int) Pointer[CChar];

external g_strreverse(
    string : Pointer[CChar]) Pointer[CChar];

external g_strlcpy(
    dest : Pointer[CChar],
    src : Pointer[CChar],
    dest_size : CULong) CULong;

external g_strlcat(
    dest : Pointer[CChar],
    src : Pointer[CChar],
    dest_size : CULong) CULong;

external g_strstr_len(
    haystack : Pointer[CChar],
    haystack_len : CLong,
    needle : Pointer[CChar]) Pointer[CChar];

external g_strrstr(
    haystack : Pointer[CChar],
    needle : Pointer[CChar]) Pointer[CChar];

external g_strrstr_len(
    haystack : Pointer[CChar],
    haystack_len : CLong,
    needle : Pointer[CChar]) Pointer[CChar];

external g_str_has_suffix(
    str : Pointer[CChar],
    suffix : Pointer[CChar]) Int;

external g_str_has_prefix(
    str : Pointer[CChar],
    prefix : Pointer[CChar]) Int;

external g_strtod(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]]) Double;

external g_ascii_strtod(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]]) Double;

external g_ascii_strtoull(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    base : UInt) CULong;

external g_ascii_strtoll(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    base : UInt) CLong;

external g_ascii_dtostr(
    buffer : Pointer[CChar],
    buf_len : Int,
    d : Double) Pointer[CChar];

external g_ascii_formatd(
    buffer : Pointer[CChar],
    buf_len : Int,
    format : Pointer[CChar],
    d : Double) Pointer[CChar];

external g_strchug(
    string : Pointer[CChar]) Pointer[CChar];

external g_strchomp(
    string : Pointer[CChar]) Pointer[CChar];

external g_ascii_strcasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar]) Int;

external g_ascii_strncasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar],
    n : CULong) Int;

external g_ascii_strdown(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_ascii_strup(
    str : Pointer[CChar],
    len : CLong) Pointer[CChar];

external g_strcasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar]) Int;

external g_strncasecmp(
    s1 : Pointer[CChar],
    s2 : Pointer[CChar],
    n : UInt) Int;

external g_strdown(
    string : Pointer[CChar]) Pointer[CChar];

external g_strup(
    string : Pointer[CChar]) Pointer[CChar];

external g_strdup(
    str : Pointer[CChar]) Pointer[CChar];

external g_strdup_printf(
    format : Pointer[CChar],
    ...) Pointer[CChar];

external g_strdup_vprintf(
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]) Pointer[CChar];

external g_strndup(
    str : Pointer[CChar],
    n : CULong) Pointer[CChar];

external g_strnfill(
    length : CULong,
    fill_char : CChar) Pointer[CChar];

external g_strconcat(
    string1 : Pointer[CChar],
    ...) Pointer[CChar];

external g_strjoin(
    separator : Pointer[CChar],
    ...) Pointer[CChar];

external g_strcompress(
    source : Pointer[CChar]) Pointer[CChar];

external g_strescape(
    source : Pointer[CChar],
    exceptions : Pointer[CChar]) Pointer[CChar];

external g_memdup(
    mem : gconstpointer,
    byte_size : UInt) gpointer;

external g_strsplit(
    string : Pointer[CChar],
    delimiter : Pointer[CChar],
    max_tokens : Int) Pointer[Pointer[CChar]];

external g_strsplit_set(
    string : Pointer[CChar],
    delimiters : Pointer[CChar],
    max_tokens : Int) Pointer[Pointer[CChar]];

external g_strjoinv(
    separator : Pointer[CChar],
    str_array : Pointer[Pointer[CChar]]) Pointer[CChar];

external g_strfreev(
    str_array : Pointer[Pointer[CChar]]);

external g_strdupv(
    str_array : Pointer[Pointer[CChar]]) Pointer[Pointer[CChar]];

external g_strv_length(
    str_array : Pointer[Pointer[CChar]]) UInt;

external g_stpcpy(
    dest : Pointer[CChar],
    src : Pointer[CChar]) Pointer[CChar];

external g_strip_context(
    msgid : Pointer[CChar],
    msgval : Pointer[CChar]) Pointer[CChar];

external g_dgettext(
    domain : Pointer[CChar],
    msgid : Pointer[CChar]) Pointer[CChar];

external g_dcgettext(
    domain : Pointer[CChar],
    msgid : Pointer[CChar],
    category : Int) Pointer[CChar];

external g_dngettext(
    domain : Pointer[CChar],
    msgid : Pointer[CChar],
    msgid_plural : Pointer[CChar],
    n : CULong) Pointer[CChar];

external g_dpgettext(
    domain : Pointer[CChar],
    msgctxtid : Pointer[CChar],
    msgidoffset : CULong) Pointer[CChar];

external g_dpgettext2(
    domain : Pointer[CChar],
    context : Pointer[CChar],
    msgid : Pointer[CChar]) Pointer[CChar];

alias GTestCase = Opaque;

alias GTestSuite = Opaque;

alias GTestFunc = CCodePointer[(),()];

alias GTestDataFunc = CCodePointer[(RawPointer),()];

alias GTestFixtureFunc = CCodePointer[(RawPointer,RawPointer),()];

external g_strcmp0(
    str1 : Pointer[CChar],
    str2 : Pointer[CChar]) Int;

external g_test_minimized_result(
    minimized_quantity : Double,
    format : Pointer[CChar],
    ...);

external g_test_maximized_result(
    maximized_quantity : Double,
    format : Pointer[CChar],
    ...);

external g_test_init(
    argc : Pointer[Int],
    argv : Pointer[Pointer[Pointer[CChar]]],
    ...);

external g_test_run() Int;

external g_test_add_func(
    testpath : Pointer[CChar],
    test_func : GTestFunc);

external g_test_add_data_func(
    testpath : Pointer[CChar],
    test_data : gconstpointer,
    test_func : GTestDataFunc);

external g_test_message(
    format : Pointer[CChar],
    ...);

external g_test_bug_base(
    uri_pattern : Pointer[CChar]);

external g_test_bug(
    bug_uri_snippet : Pointer[CChar]);

external g_test_timer_start();

external g_test_timer_elapsed() Double;

external g_test_timer_last() Double;

external g_test_queue_free(
    gfree_pointer : gpointer);

external g_test_queue_destroy(
    destroy_func : GDestroyNotify,
    destroy_data : gpointer);

alias G_TEST_TRAP_SILENCE_STDOUT = 128;
alias G_TEST_TRAP_SILENCE_STDERR = 256;
alias G_TEST_TRAP_INHERIT_STDIN = 512;

alias GTestTrapFlags = Int;

external g_test_trap_fork(
    usec_timeout : CULong,
    test_trap_flags : GTestTrapFlags) Int;

external g_test_trap_has_passed() Int;

external g_test_trap_reached_timeout() Int;

external g_test_rand_int() Int;

external g_test_rand_int_range(
    begin : Int,
    end : Int) Int;

external g_test_rand_double() Double;

external g_test_rand_double_range(
    range_start : Double,
    range_end : Double) Double;

external g_test_create_case(
    test_name : Pointer[CChar],
    data_size : CULong,
    test_data : gconstpointer,
    data_setup : GTestFixtureFunc,
    data_test : GTestFixtureFunc,
    data_teardown : GTestFixtureFunc) Pointer[GTestCase];

external g_test_create_suite(
    suite_name : Pointer[CChar]) Pointer[GTestSuite];

external g_test_get_root() Pointer[GTestSuite];

external g_test_suite_add(
    suite : Pointer[GTestSuite],
    test_case : Pointer[GTestCase]);

external g_test_suite_add_suite(
    suite : Pointer[GTestSuite],
    nestedsuite : Pointer[GTestSuite]);

external g_test_run_suite(
    suite : Pointer[GTestSuite]) Int;

external g_test_trap_assertions(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    assertion_flags : CULong,
    pattern : Pointer[CChar]);

external g_assertion_message(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    message : Pointer[CChar]);

external g_assertion_message_expr(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    expr : Pointer[CChar]);

external g_assertion_message_cmpstr(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    expr : Pointer[CChar],
    arg1 : Pointer[CChar],
    cmp : Pointer[CChar],
    arg2 : Pointer[CChar]);

external g_assertion_message_cmpnum(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    expr : Pointer[CChar],
    arg1 : UnsupportedCBuiltinType22,
    cmp : Pointer[CChar],
    arg2 : UnsupportedCBuiltinType22,
    numtype : CChar);

external g_assertion_message_error(
    domain : Pointer[CChar],
    file : Pointer[CChar],
    line : Int,
    func : Pointer[CChar],
    expr : Pointer[CChar],
    error : Pointer[GError],
    error_domain : UInt,
    error_code : Int);

external g_test_add_vtable(
    testpath : Pointer[CChar],
    data_size : CULong,
    test_data : gconstpointer,
    data_setup : GTestFixtureFunc,
    data_test : GTestFixtureFunc,
    data_teardown : GTestFixtureFunc);

record UnnamedStruct3 (
    test_initialized : Int,
    test_quick : Int,
    test_perf : Int,
    test_verbose : Int,
    test_quiet : Int,
);

alias GTestConfig = UnnamedStruct3;

external g_test_config_vars : Pointer[GTestConfig];

alias G_TEST_LOG_NONE = 0;
alias G_TEST_LOG_ERROR = 1;
alias G_TEST_LOG_START_BINARY = 2;
alias G_TEST_LOG_LIST_CASE = 3;
alias G_TEST_LOG_SKIP_CASE = 4;
alias G_TEST_LOG_START_CASE = 5;
alias G_TEST_LOG_STOP_CASE = 6;
alias G_TEST_LOG_MIN_RESULT = 7;
alias G_TEST_LOG_MAX_RESULT = 8;
alias G_TEST_LOG_MESSAGE = 9;

alias GTestLogType = Int;

record UnnamedStruct4 (
    log_type : GTestLogType,
    n_strings : UInt,
    strings : Pointer[Pointer[CChar]],
    n_nums : UInt,
    nums : Pointer[UnsupportedCBuiltinType22],
);

alias GTestLogMsg = UnnamedStruct4;

record UnnamedStruct5 (
    data : Pointer[GString],
    msgs : Pointer[GSList],
);

alias GTestLogBuffer = UnnamedStruct5;

external g_test_log_type_name(
    log_type : GTestLogType) Pointer[CChar];

external g_test_log_buffer_new() Pointer[GTestLogBuffer];

external g_test_log_buffer_free(
    tbuffer : Pointer[GTestLogBuffer]);

external g_test_log_buffer_push(
    tbuffer : Pointer[GTestLogBuffer],
    n_bytes : UInt,
    bytes : Pointer[CUChar]);

external g_test_log_buffer_pop(
    tbuffer : Pointer[GTestLogBuffer]) Pointer[GTestLogMsg];

external g_test_log_msg_free(
    tmsg : Pointer[GTestLogMsg]);

alias GTestLogFatalFunc = CCodePointer[(Pointer[CChar],Int,Pointer[CChar],RawPointer),(Int)];

external g_test_log_set_fatal_handler(
    log_func : GTestLogFatalFunc,
    user_data : gpointer);

alias GThreadPool = Struct__GThreadPool;

record Struct__GThreadPool (
    func : GFunc,
    user_data : gpointer,
    exclusive : Int,
);

external g_thread_pool_new(
    func : GFunc,
    user_data : gpointer,
    max_threads : Int,
    exclusive : Int,
    error : Pointer[Pointer[GError]]) Pointer[GThreadPool];

external g_thread_pool_push(
    pool : Pointer[GThreadPool],
    data : gpointer,
    error : Pointer[Pointer[GError]]);

external g_thread_pool_set_max_threads(
    pool : Pointer[GThreadPool],
    max_threads : Int,
    error : Pointer[Pointer[GError]]);

external g_thread_pool_get_max_threads(
    pool : Pointer[GThreadPool]) Int;

external g_thread_pool_get_num_threads(
    pool : Pointer[GThreadPool]) UInt;

external g_thread_pool_unprocessed(
    pool : Pointer[GThreadPool]) UInt;

external g_thread_pool_free(
    pool : Pointer[GThreadPool],
    immediate : Int,
    wait_ : Int);

external g_thread_pool_set_max_unused_threads(
    max_threads : Int);

external g_thread_pool_get_max_unused_threads() Int;

external g_thread_pool_get_num_unused_threads() UInt;

external g_thread_pool_stop_unused_threads();

external g_thread_pool_set_sort_function(
    pool : Pointer[GThreadPool],
    func : GCompareDataFunc,
    user_data : gpointer);

external g_thread_pool_set_max_idle_time(
    interval : UInt);

external g_thread_pool_get_max_idle_time() UInt;

alias GTimer = Opaque;

external g_timer_new() Pointer[GTimer];

external g_timer_destroy(
    timer : Pointer[GTimer]);

external g_timer_start(
    timer : Pointer[GTimer]);

external g_timer_stop(
    timer : Pointer[GTimer]);

external g_timer_reset(
    timer : Pointer[GTimer]);

external g_timer_continue(
    timer : Pointer[GTimer]);

external g_timer_elapsed(
    timer : Pointer[GTimer],
    microseconds : Pointer[CULong]) Double;

external g_usleep(
    microseconds : CULong);

external g_time_val_add(
    time_ : Pointer[GTimeVal],
    microseconds : CLong);

external g_time_val_from_iso8601(
    iso_date : Pointer[CChar],
    time_ : Pointer[GTimeVal]) Int;

external g_time_val_to_iso8601(
    time_ : Pointer[GTimeVal]) Pointer[CChar];

alias GTree = Opaque;

alias GTraverseFunc = CCodePointer[(RawPointer,RawPointer,RawPointer),(Int)];

external g_tree_new(
    key_compare_func : GCompareFunc) Pointer[GTree];

external g_tree_new_with_data(
    key_compare_func : GCompareDataFunc,
    key_compare_data : gpointer) Pointer[GTree];

external g_tree_new_full(
    key_compare_func : GCompareDataFunc,
    key_compare_data : gpointer,
    key_destroy_func : GDestroyNotify,
    value_destroy_func : GDestroyNotify) Pointer[GTree];

external g_tree_ref(
    tree : Pointer[GTree]) Pointer[GTree];

external g_tree_unref(
    tree : Pointer[GTree]);

external g_tree_destroy(
    tree : Pointer[GTree]);

external g_tree_insert(
    tree : Pointer[GTree],
    key : gpointer,
    value : gpointer);

external g_tree_replace(
    tree : Pointer[GTree],
    key : gpointer,
    value : gpointer);

external g_tree_remove(
    tree : Pointer[GTree],
    key : gconstpointer) Int;

external g_tree_steal(
    tree : Pointer[GTree],
    key : gconstpointer) Int;

external g_tree_lookup(
    tree : Pointer[GTree],
    key : gconstpointer) gpointer;

external g_tree_lookup_extended(
    tree : Pointer[GTree],
    lookup_key : gconstpointer,
    orig_key : Pointer[gpointer],
    value : Pointer[gpointer]) Int;

external g_tree_foreach(
    tree : Pointer[GTree],
    func : GTraverseFunc,
    user_data : gpointer);

external g_tree_traverse(
    tree : Pointer[GTree],
    traverse_func : GTraverseFunc,
    traverse_type : GTraverseType,
    user_data : gpointer);

external g_tree_search(
    tree : Pointer[GTree],
    search_func : GCompareFunc,
    user_data : gconstpointer) gpointer;

external g_tree_height(
    tree : Pointer[GTree]) Int;

external g_tree_nnodes(
    tree : Pointer[GTree]) Int;

external g_uri_unescape_string(
    escaped_string : Pointer[CChar],
    illegal_characters : Pointer[CChar]) Pointer[CChar];

external g_uri_unescape_segment(
    escaped_string : Pointer[CChar],
    escaped_string_end : Pointer[CChar],
    illegal_characters : Pointer[CChar]) Pointer[CChar];

external g_uri_parse_scheme(
    uri : Pointer[CChar]) Pointer[CChar];

external g_uri_escape_string(
    unescaped : Pointer[CChar],
    reserved_chars_allowed : Pointer[CChar],
    allow_utf8 : Int) Pointer[CChar];

alias GVariantType = Opaque;

external g_variant_type_string_is_valid(
    type_string : Pointer[CChar]) Int;

external g_variant_type_string_scan(
    string : Pointer[CChar],
    limit : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]]) Int;

external g_variant_type_free(
    type : Pointer[GVariantType]);

external g_variant_type_copy(
    type : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_new(
    type_string : Pointer[CChar]) Pointer[GVariantType];

external g_variant_type_get_string_length(
    type : Pointer[GVariantType]) CULong;

external g_variant_type_peek_string(
    type : Pointer[GVariantType]) Pointer[CChar];

external g_variant_type_dup_string(
    type : Pointer[GVariantType]) Pointer[CChar];

external g_variant_type_is_definite(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_container(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_basic(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_maybe(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_array(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_tuple(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_dict_entry(
    type : Pointer[GVariantType]) Int;

external g_variant_type_is_variant(
    type : Pointer[GVariantType]) Int;

external g_variant_type_hash(
    type : gconstpointer) UInt;

external g_variant_type_equal(
    type1 : gconstpointer,
    type2 : gconstpointer) Int;

external g_variant_type_is_subtype_of(
    type : Pointer[GVariantType],
    supertype : Pointer[GVariantType]) Int;

external g_variant_type_element(
    type : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_first(
    type : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_next(
    type : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_n_items(
    type : Pointer[GVariantType]) CULong;

external g_variant_type_key(
    type : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_value(
    type : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_new_array(
    element : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_new_maybe(
    element : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_new_tuple(
    items : Pointer[Pointer[GVariantType]],
    length : Int) Pointer[GVariantType];

external g_variant_type_new_dict_entry(
    key : Pointer[GVariantType],
    value : Pointer[GVariantType]) Pointer[GVariantType];

external g_variant_type_checked_(
    argument0 : Pointer[CChar]) Pointer[GVariantType];

alias GVariant = Opaque;

alias G_VARIANT_CLASS_BOOLEAN = 98;
alias G_VARIANT_CLASS_BYTE = 121;
alias G_VARIANT_CLASS_INT16 = 110;
alias G_VARIANT_CLASS_UINT16 = 113;
alias G_VARIANT_CLASS_INT32 = 105;
alias G_VARIANT_CLASS_UINT32 = 117;
alias G_VARIANT_CLASS_INT64 = 120;
alias G_VARIANT_CLASS_UINT64 = 116;
alias G_VARIANT_CLASS_HANDLE = 104;
alias G_VARIANT_CLASS_DOUBLE = 100;
alias G_VARIANT_CLASS_STRING = 115;
alias G_VARIANT_CLASS_OBJECT_PATH = 111;
alias G_VARIANT_CLASS_SIGNATURE = 103;
alias G_VARIANT_CLASS_VARIANT = 118;
alias G_VARIANT_CLASS_MAYBE = 109;
alias G_VARIANT_CLASS_ARRAY = 97;
alias G_VARIANT_CLASS_TUPLE = 40;
alias G_VARIANT_CLASS_DICT_ENTRY = 123;

alias GVariantClass = Int;

external g_variant_unref(
    value : Pointer[GVariant]);

external g_variant_ref(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_ref_sink(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_is_floating(
    value : Pointer[GVariant]) Int;

external g_variant_get_type(
    value : Pointer[GVariant]) Pointer[GVariantType];

external g_variant_get_type_string(
    value : Pointer[GVariant]) Pointer[CChar];

external g_variant_is_of_type(
    value : Pointer[GVariant],
    type : Pointer[GVariantType]) Int;

external g_variant_is_container(
    value : Pointer[GVariant]) Int;

external g_variant_classify(
    value : Pointer[GVariant]) GVariantClass;

external g_variant_new_boolean(
    boolean : Int) Pointer[GVariant];

external g_variant_new_byte(
    byte : CUChar) Pointer[GVariant];

external g_variant_new_int16(
    int16 : Short) Pointer[GVariant];

external g_variant_new_uint16(
    uint16 : UShort) Pointer[GVariant];

external g_variant_new_int32(
    int32 : Int) Pointer[GVariant];

external g_variant_new_uint32(
    uint32 : UInt) Pointer[GVariant];

external g_variant_new_int64(
    int64 : CLong) Pointer[GVariant];

external g_variant_new_uint64(
    uint64 : CULong) Pointer[GVariant];

external g_variant_new_handle(
    handle : Int) Pointer[GVariant];

external g_variant_new_double(
    floating : Double) Pointer[GVariant];

external g_variant_new_string(
    string : Pointer[CChar]) Pointer[GVariant];

external g_variant_new_object_path(
    object_path : Pointer[CChar]) Pointer[GVariant];

external g_variant_is_object_path(
    string : Pointer[CChar]) Int;

external g_variant_new_signature(
    signature : Pointer[CChar]) Pointer[GVariant];

external g_variant_is_signature(
    string : Pointer[CChar]) Int;

external g_variant_new_variant(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_new_strv(
    strv : Pointer[Pointer[CChar]],
    length : CLong) Pointer[GVariant];

external g_variant_new_bytestring(
    string : Pointer[CChar]) Pointer[GVariant];

external g_variant_new_bytestring_array(
    strv : Pointer[Pointer[CChar]],
    length : CLong) Pointer[GVariant];

external g_variant_get_boolean(
    value : Pointer[GVariant]) Int;

external g_variant_get_byte(
    value : Pointer[GVariant]) CUChar;

external g_variant_get_int16(
    value : Pointer[GVariant]) Short;

external g_variant_get_uint16(
    value : Pointer[GVariant]) UShort;

external g_variant_get_int32(
    value : Pointer[GVariant]) Int;

external g_variant_get_uint32(
    value : Pointer[GVariant]) UInt;

external g_variant_get_int64(
    value : Pointer[GVariant]) CLong;

external g_variant_get_uint64(
    value : Pointer[GVariant]) CULong;

external g_variant_get_handle(
    value : Pointer[GVariant]) Int;

external g_variant_get_double(
    value : Pointer[GVariant]) Double;

external g_variant_get_variant(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_get_string(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[CChar];

external g_variant_dup_string(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[CChar];

external g_variant_get_strv(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external g_variant_dup_strv(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external g_variant_get_bytestring(
    value : Pointer[GVariant]) Pointer[CChar];

external g_variant_dup_bytestring(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[CChar];

external g_variant_get_bytestring_array(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external g_variant_dup_bytestring_array(
    value : Pointer[GVariant],
    length : Pointer[CULong]) Pointer[Pointer[CChar]];

external g_variant_new_maybe(
    child_type : Pointer[GVariantType],
    child : Pointer[GVariant]) Pointer[GVariant];

external g_variant_new_array(
    child_type : Pointer[GVariantType],
    children : Pointer[Pointer[GVariant]],
    n_children : CULong) Pointer[GVariant];

external g_variant_new_tuple(
    children : Pointer[Pointer[GVariant]],
    n_children : CULong) Pointer[GVariant];

external g_variant_new_dict_entry(
    key : Pointer[GVariant],
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_get_maybe(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_n_children(
    value : Pointer[GVariant]) CULong;

external g_variant_get_child(
    value : Pointer[GVariant],
    index_ : CULong,
    format_string : Pointer[CChar],
    ...);

external g_variant_get_child_value(
    value : Pointer[GVariant],
    index_ : CULong) Pointer[GVariant];

external g_variant_get_fixed_array(
    value : Pointer[GVariant],
    n_elements : Pointer[CULong],
    element_size : CULong) gconstpointer;

external g_variant_get_size(
    value : Pointer[GVariant]) CULong;

external g_variant_get_data(
    value : Pointer[GVariant]) gconstpointer;

external g_variant_store(
    value : Pointer[GVariant],
    data : gpointer);

external g_variant_print(
    value : Pointer[GVariant],
    type_annotate : Int) Pointer[CChar];

external g_variant_print_string(
    value : Pointer[GVariant],
    string : Pointer[GString],
    type_annotate : Int) Pointer[GString];

external g_variant_hash(
    value : gconstpointer) UInt;

external g_variant_equal(
    one : gconstpointer,
    two : gconstpointer) Int;

external g_variant_get_normal_form(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_is_normal_form(
    value : Pointer[GVariant]) Int;

external g_variant_byteswap(
    value : Pointer[GVariant]) Pointer[GVariant];

external g_variant_new_from_data(
    type : Pointer[GVariantType],
    data : gconstpointer,
    size : CULong,
    trusted : Int,
    notify : GDestroyNotify,
    user_data : gpointer) Pointer[GVariant];

alias GVariantIter = Struct__GVariantIter;

record Struct__GVariantIter (
    x : Array[CULong,16],
);

external g_variant_iter_new(
    value : Pointer[GVariant]) Pointer[GVariantIter];

external g_variant_iter_init(
    iter : Pointer[GVariantIter],
    value : Pointer[GVariant]) CULong;

external g_variant_iter_copy(
    iter : Pointer[GVariantIter]) Pointer[GVariantIter];

external g_variant_iter_n_children(
    iter : Pointer[GVariantIter]) CULong;

external g_variant_iter_free(
    iter : Pointer[GVariantIter]);

external g_variant_iter_next_value(
    iter : Pointer[GVariantIter]) Pointer[GVariant];

external g_variant_iter_next(
    iter : Pointer[GVariantIter],
    format_string : Pointer[CChar],
    ...) Int;

external g_variant_iter_loop(
    iter : Pointer[GVariantIter],
    format_string : Pointer[CChar],
    ...) Int;

alias GVariantBuilder = Struct__GVariantBuilder;

record Struct__GVariantBuilder (
    x : Array[CULong,16],
);

alias G_VARIANT_PARSE_ERROR_FAILED = 0;

alias GVariantParseError = Int;

external g_variant_parser_get_error_quark() UInt;

external g_variant_builder_new(
    type : Pointer[GVariantType]) Pointer[GVariantBuilder];

external g_variant_builder_unref(
    builder : Pointer[GVariantBuilder]);

external g_variant_builder_ref(
    builder : Pointer[GVariantBuilder]) Pointer[GVariantBuilder];

external g_variant_builder_init(
    builder : Pointer[GVariantBuilder],
    type : Pointer[GVariantType]);

external g_variant_builder_end(
    builder : Pointer[GVariantBuilder]) Pointer[GVariant];

external g_variant_builder_clear(
    builder : Pointer[GVariantBuilder]);

external g_variant_builder_open(
    builder : Pointer[GVariantBuilder],
    type : Pointer[GVariantType]);

external g_variant_builder_close(
    builder : Pointer[GVariantBuilder]);

external g_variant_builder_add_value(
    builder : Pointer[GVariantBuilder],
    value : Pointer[GVariant]);

external g_variant_builder_add(
    builder : Pointer[GVariantBuilder],
    format_string : Pointer[CChar],
    ...);

external g_variant_builder_add_parsed(
    builder : Pointer[GVariantBuilder],
    format : Pointer[CChar],
    ...);

external g_variant_new(
    format_string : Pointer[CChar],
    ...) Pointer[GVariant];

external g_variant_get(
    value : Pointer[GVariant],
    format_string : Pointer[CChar],
    ...);

external g_variant_new_va(
    format_string : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    app : Pointer[va_list]) Pointer[GVariant];

external g_variant_get_va(
    value : Pointer[GVariant],
    format_string : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    app : Pointer[va_list]);

external g_variant_parse(
    type : Pointer[GVariantType],
    text : Pointer[CChar],
    limit : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Pointer[GVariant];

external g_variant_new_parsed(
    format : Pointer[CChar],
    ...) Pointer[GVariant];

external g_variant_new_parsed_va(
    format : Pointer[CChar],
    app : Pointer[va_list]) Pointer[GVariant];

external g_variant_compare(
    one : gconstpointer,
    two : gconstpointer) Int;
