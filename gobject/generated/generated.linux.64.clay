// Automatically generated by clay-bindgen
// language: c

import glib.generated.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias GType = CULong;

alias GValue = Struct__GValue;

alias GTypeCValue = AUnionType;

alias GTypePlugin = Opaque;

alias GTypeClass = Struct__GTypeClass;

alias GTypeInterface = Struct__GTypeInterface;

alias GTypeInstance = Struct__GTypeInstance;

alias GTypeInfo = Struct__GTypeInfo;

alias GTypeFundamentalInfo = Struct__GTypeFundamentalInfo;

alias GInterfaceInfo = Struct__GInterfaceInfo;

alias GTypeValueTable = Struct__GTypeValueTable;

alias GTypeQuery = Struct__GTypeQuery;

record Struct__GTypeClass (
    g_type : CULong,
);

record Struct__GTypeInstance (
    g_class : Pointer[GTypeClass],
);

record Struct__GTypeInterface (
    g_type : CULong,
    g_instance_type : CULong,
);

record Struct__GTypeQuery (
    type : CULong,
    type_name : Pointer[CChar],
    class_size : UInt,
    instance_size : UInt,
);

alias G_TYPE_DEBUG_NONE = 0;
alias G_TYPE_DEBUG_OBJECTS = 1;
alias G_TYPE_DEBUG_SIGNALS = 2;
alias G_TYPE_DEBUG_MASK = 3;

alias GTypeDebugFlags = Int;

external g_type_init();

external g_type_init_with_debug_flags(
    debug_flags : GTypeDebugFlags);

external g_type_name(
    type : CULong) Pointer[CChar];

external g_type_qname(
    type : CULong) UInt;

external g_type_from_name(
    name : Pointer[CChar]) CULong;

external g_type_parent(
    type : CULong) CULong;

external g_type_depth(
    type : CULong) UInt;

external g_type_next_base(
    leaf_type : CULong,
    root_type : CULong) CULong;

external g_type_is_a(
    type : CULong,
    is_a_type : CULong) Int;

external g_type_class_ref(
    type : CULong) gpointer;

external g_type_class_peek(
    type : CULong) gpointer;

external g_type_class_peek_static(
    type : CULong) gpointer;

external g_type_class_unref(
    g_class : gpointer);

external g_type_class_peek_parent(
    g_class : gpointer) gpointer;

external g_type_interface_peek(
    instance_class : gpointer,
    iface_type : CULong) gpointer;

external g_type_interface_peek_parent(
    g_iface : gpointer) gpointer;

external g_type_default_interface_ref(
    g_type : CULong) gpointer;

external g_type_default_interface_peek(
    g_type : CULong) gpointer;

external g_type_default_interface_unref(
    g_iface : gpointer);

external g_type_children(
    type : CULong,
    n_children : Pointer[UInt]) Pointer[CULong];

external g_type_interfaces(
    type : CULong,
    n_interfaces : Pointer[UInt]) Pointer[CULong];

external g_type_set_qdata(
    type : CULong,
    quark : UInt,
    data : gpointer);

external g_type_get_qdata(
    type : CULong,
    quark : UInt) gpointer;

external g_type_query(
    type : CULong,
    query : Pointer[GTypeQuery]);

alias GBaseInitFunc = CCodePointer[(RawPointer),()];

alias GBaseFinalizeFunc = CCodePointer[(RawPointer),()];

alias GClassInitFunc = CCodePointer[(RawPointer,RawPointer),()];

alias GClassFinalizeFunc = CCodePointer[(RawPointer,RawPointer),()];

alias GInstanceInitFunc = CCodePointer[(Pointer[Struct__GTypeInstance],RawPointer),()];

alias GInterfaceInitFunc = CCodePointer[(RawPointer,RawPointer),()];

alias GInterfaceFinalizeFunc = CCodePointer[(RawPointer,RawPointer),()];

alias GTypeClassCacheFunc = CCodePointer[(RawPointer,Pointer[Struct__GTypeClass]),(Int)];

alias GTypeInterfaceCheckFunc = CCodePointer[(RawPointer,RawPointer),()];

alias G_TYPE_FLAG_CLASSED = 1;
alias G_TYPE_FLAG_INSTANTIATABLE = 2;
alias G_TYPE_FLAG_DERIVABLE = 4;
alias G_TYPE_FLAG_DEEP_DERIVABLE = 8;

alias GTypeFundamentalFlags = Int;

alias G_TYPE_FLAG_ABSTRACT = 16;
alias G_TYPE_FLAG_VALUE_ABSTRACT = 32;

alias GTypeFlags = Int;

record Struct__GTypeInfo (
    class_size : UShort,
    base_init : GBaseInitFunc,
    base_finalize : GBaseFinalizeFunc,
    class_init : GClassInitFunc,
    class_finalize : GClassFinalizeFunc,
    class_data : gconstpointer,
    instance_size : UShort,
    n_preallocs : UShort,
    instance_init : GInstanceInitFunc,
    value_table : Pointer[GTypeValueTable],
);

record Struct__GTypeFundamentalInfo (
    type_flags : GTypeFundamentalFlags,
);

record Struct__GInterfaceInfo (
    interface_init : GInterfaceInitFunc,
    interface_finalize : GInterfaceFinalizeFunc,
    interface_data : gpointer,
);

record Struct__GTypeValueTable (
    value_init : CCodePointer[(Pointer[Struct__GValue]),()],
    value_free : CCodePointer[(Pointer[Struct__GValue]),()],
    value_copy : CCodePointer[(Pointer[Struct__GValue],Pointer[Struct__GValue]),()],
    value_peek_pointer : CCodePointer[(Pointer[Struct__GValue]),(RawPointer)],
    collect_format : Pointer[CChar],
    collect_value : CCodePointer[(Pointer[Struct__GValue],UInt,OpaquePointer,UInt),(Pointer[CChar])],
    lcopy_format : Pointer[CChar],
    lcopy_value : CCodePointer[(Pointer[Struct__GValue],UInt,OpaquePointer,UInt),(Pointer[CChar])],
);

external g_type_register_static(
    parent_type : CULong,
    type_name : Pointer[CChar],
    info : Pointer[GTypeInfo],
    flags : GTypeFlags) CULong;

external g_type_register_static_simple(
    parent_type : CULong,
    type_name : Pointer[CChar],
    class_size : UInt,
    class_init : GClassInitFunc,
    instance_size : UInt,
    instance_init : GInstanceInitFunc,
    flags : GTypeFlags) CULong;

external g_type_register_dynamic(
    parent_type : CULong,
    type_name : Pointer[CChar],
    plugin : Pointer[GTypePlugin],
    flags : GTypeFlags) CULong;

external g_type_register_fundamental(
    type_id : CULong,
    type_name : Pointer[CChar],
    info : Pointer[GTypeInfo],
    finfo : Pointer[GTypeFundamentalInfo],
    flags : GTypeFlags) CULong;

external g_type_add_interface_static(
    instance_type : CULong,
    interface_type : CULong,
    info : Pointer[GInterfaceInfo]);

external g_type_add_interface_dynamic(
    instance_type : CULong,
    interface_type : CULong,
    plugin : Pointer[GTypePlugin]);

external g_type_interface_add_prerequisite(
    interface_type : CULong,
    prerequisite_type : CULong);

external g_type_interface_prerequisites(
    interface_type : CULong,
    n_prerequisites : Pointer[UInt]) Pointer[CULong];

external g_type_class_add_private(
    g_class : gpointer,
    private_size : CULong);

external g_type_instance_get_private(
    instance_ : Pointer[GTypeInstance],
    private_type : CULong) gpointer;

external g_type_add_class_private(
    class_type : CULong,
    private_size : CULong);

external g_type_class_get_private(
    klass : Pointer[GTypeClass],
    private_type : CULong) gpointer;

external g_type_get_plugin(
    type : CULong) Pointer[GTypePlugin];

external g_type_interface_get_plugin(
    instance_type : CULong,
    interface_type : CULong) Pointer[GTypePlugin];

external g_type_fundamental_next() CULong;

external g_type_fundamental(
    type_id : CULong) CULong;

external g_type_create_instance(
    type : CULong) Pointer[GTypeInstance];

external g_type_free_instance(
    instance_ : Pointer[GTypeInstance]);

external g_type_add_class_cache_func(
    cache_data : gpointer,
    cache_func : GTypeClassCacheFunc);

external g_type_remove_class_cache_func(
    cache_data : gpointer,
    cache_func : GTypeClassCacheFunc);

external g_type_class_unref_uncached(
    g_class : gpointer);

external g_type_add_interface_check(
    check_data : gpointer,
    check_func : GTypeInterfaceCheckFunc);

external g_type_remove_interface_check(
    check_data : gpointer,
    check_func : GTypeInterfaceCheckFunc);

external g_type_value_table_peek(
    type : CULong) Pointer[GTypeValueTable];

external g_type_check_instance(
    instance_ : Pointer[GTypeInstance]) Int;

external g_type_check_instance_cast(
    instance_ : Pointer[GTypeInstance],
    iface_type : CULong) Pointer[GTypeInstance];

external g_type_check_instance_is_a(
    instance_ : Pointer[GTypeInstance],
    iface_type : CULong) Int;

external g_type_check_class_cast(
    g_class : Pointer[GTypeClass],
    is_a_type : CULong) Pointer[GTypeClass];

external g_type_check_class_is_a(
    g_class : Pointer[GTypeClass],
    is_a_type : CULong) Int;

external g_type_check_is_value_type(
    type : CULong) Int;

external g_type_check_value(
    value : Pointer[GValue]) Int;

external g_type_check_value_holds(
    value : Pointer[GValue],
    type : CULong) Int;

external g_type_test_flags(
    type : CULong,
    flags : UInt) Int;

external g_type_name_from_instance(
    instance_ : Pointer[GTypeInstance]) Pointer[CChar];

external g_type_name_from_class(
    g_class : Pointer[GTypeClass]) Pointer[CChar];

external g_value_c_init();

external g_value_types_init();

external g_enum_types_init();

external g_param_type_init();

external g_boxed_type_init();

external g_object_type_init();

external g_param_spec_types_init();

external g_value_transforms_init();

external g_signal_init();

external _g_type_debug_flags : GTypeDebugFlags;

alias GValueTransform = CCodePointer[(Pointer[Struct__GValue],Pointer[Struct__GValue]),()];

record Struct__GValue (
    g_type : CULong,
    data : Array[AUnionType,2],
);

external g_value_init(
    value : Pointer[GValue],
    g_type : CULong) Pointer[GValue];

external g_value_copy(
    src_value : Pointer[GValue],
    dest_value : Pointer[GValue]);

external g_value_reset(
    value : Pointer[GValue]) Pointer[GValue];

external g_value_unset(
    value : Pointer[GValue]);

external g_value_set_instance(
    value : Pointer[GValue],
    instance_ : gpointer);

external g_value_fits_pointer(
    value : Pointer[GValue]) Int;

external g_value_peek_pointer(
    value : Pointer[GValue]) gpointer;

external g_value_type_compatible(
    src_type : CULong,
    dest_type : CULong) Int;

external g_value_type_transformable(
    src_type : CULong,
    dest_type : CULong) Int;

external g_value_transform(
    src_value : Pointer[GValue],
    dest_value : Pointer[GValue]) Int;

external g_value_register_transform_func(
    src_type : CULong,
    dest_type : CULong,
    transform_func : GValueTransform);

alias G_PARAM_READABLE = 1;
alias G_PARAM_WRITABLE = 2;
alias G_PARAM_CONSTRUCT = 4;
alias G_PARAM_CONSTRUCT_ONLY = 8;
alias G_PARAM_LAX_VALIDATION = 16;
alias G_PARAM_STATIC_NAME = 32;
alias G_PARAM_PRIVATE = 32;
alias G_PARAM_STATIC_NICK = 64;
alias G_PARAM_STATIC_BLURB = 128;
alias G_PARAM_DEPRECATED = 2147483648;

alias GParamFlags = Int;

alias GParamSpec = Struct__GParamSpec;

alias GParamSpecClass = Struct__GParamSpecClass;

alias GParameter = Struct__GParameter;

alias GParamSpecPool = Opaque;

record Struct__GParamSpec (
    g_type_instance : GTypeInstance,
    name : Pointer[CChar],
    flags : GParamFlags,
    value_type : CULong,
    owner_type : CULong,
    _nick : Pointer[CChar],
    _blurb : Pointer[CChar],
    qdata : Pointer[GData],
    ref_count : UInt,
    param_id : UInt,
);

record Struct__GParamSpecClass (
    g_type_class : GTypeClass,
    value_type : CULong,
    finalize : CCodePointer[(Pointer[Struct__GParamSpec]),()],
    value_set_default : CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GValue]),()],
    value_validate : CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GValue]),(Int)],
    values_cmp : CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GValue],Pointer[Struct__GValue]),(Int)],
    dummy : Array[gpointer,4],
);

record Struct__GParameter (
    name : Pointer[CChar],
    value : GValue,
);

external g_param_spec_ref(
    pspec : Pointer[GParamSpec]) Pointer[GParamSpec];

external g_param_spec_unref(
    pspec : Pointer[GParamSpec]);

external g_param_spec_sink(
    pspec : Pointer[GParamSpec]);

external g_param_spec_ref_sink(
    pspec : Pointer[GParamSpec]) Pointer[GParamSpec];

external g_param_spec_get_qdata(
    pspec : Pointer[GParamSpec],
    quark : UInt) gpointer;

external g_param_spec_set_qdata(
    pspec : Pointer[GParamSpec],
    quark : UInt,
    data : gpointer);

external g_param_spec_set_qdata_full(
    pspec : Pointer[GParamSpec],
    quark : UInt,
    data : gpointer,
    destroy : GDestroyNotify);

external g_param_spec_steal_qdata(
    pspec : Pointer[GParamSpec],
    quark : UInt) gpointer;

external g_param_spec_get_redirect_target(
    pspec : Pointer[GParamSpec]) Pointer[GParamSpec];

external g_param_value_set_default(
    pspec : Pointer[GParamSpec],
    value : Pointer[GValue]);

external g_param_value_defaults(
    pspec : Pointer[GParamSpec],
    value : Pointer[GValue]) Int;

external g_param_value_validate(
    pspec : Pointer[GParamSpec],
    value : Pointer[GValue]) Int;

external g_param_value_convert(
    pspec : Pointer[GParamSpec],
    src_value : Pointer[GValue],
    dest_value : Pointer[GValue],
    strict_validation : Int) Int;

external g_param_values_cmp(
    pspec : Pointer[GParamSpec],
    value1 : Pointer[GValue],
    value2 : Pointer[GValue]) Int;

external g_param_spec_get_name(
    pspec : Pointer[GParamSpec]) Pointer[CChar];

external g_param_spec_get_nick(
    pspec : Pointer[GParamSpec]) Pointer[CChar];

external g_param_spec_get_blurb(
    pspec : Pointer[GParamSpec]) Pointer[CChar];

external g_value_set_param(
    value : Pointer[GValue],
    param : Pointer[GParamSpec]);

external g_value_get_param(
    value : Pointer[GValue]) Pointer[GParamSpec];

external g_value_dup_param(
    value : Pointer[GValue]) Pointer[GParamSpec];

external g_value_take_param(
    value : Pointer[GValue],
    param : Pointer[GParamSpec]);

external g_value_set_param_take_ownership(
    value : Pointer[GValue],
    param : Pointer[GParamSpec]);

alias GParamSpecTypeInfo = Struct__GParamSpecTypeInfo;

record Struct__GParamSpecTypeInfo (
    instance_size : UShort,
    n_preallocs : UShort,
    instance_init : CCodePointer[(Pointer[Struct__GParamSpec]),()],
    value_type : CULong,
    finalize : CCodePointer[(Pointer[Struct__GParamSpec]),()],
    value_set_default : CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GValue]),()],
    value_validate : CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GValue]),(Int)],
    values_cmp : CCodePointer[(Pointer[Struct__GParamSpec],Pointer[Struct__GValue],Pointer[Struct__GValue]),(Int)],
);

external g_param_type_register_static(
    name : Pointer[CChar],
    pspec_info : Pointer[GParamSpecTypeInfo]) CULong;

external _g_param_type_register_static_constant(
    name : Pointer[CChar],
    pspec_info : Pointer[GParamSpecTypeInfo],
    opt_type : CULong) CULong;

external g_param_spec_internal(
    param_type : CULong,
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    flags : GParamFlags) gpointer;

external g_param_spec_pool_new(
    type_prefixing : Int) Pointer[GParamSpecPool];

external g_param_spec_pool_insert(
    pool : Pointer[GParamSpecPool],
    pspec : Pointer[GParamSpec],
    owner_type : CULong);

external g_param_spec_pool_remove(
    pool : Pointer[GParamSpecPool],
    pspec : Pointer[GParamSpec]);

external g_param_spec_pool_lookup(
    pool : Pointer[GParamSpecPool],
    param_name : Pointer[CChar],
    owner_type : CULong,
    walk_ancestors : Int) Pointer[GParamSpec];

external g_param_spec_pool_list_owned(
    pool : Pointer[GParamSpecPool],
    owner_type : CULong) Pointer[GList];

external g_param_spec_pool_list(
    pool : Pointer[GParamSpecPool],
    owner_type : CULong,
    n_pspecs_p : Pointer[UInt]) Pointer[Pointer[GParamSpec]];

alias GClosure = Struct__GClosure;

alias GClosureNotifyData = Struct__GClosureNotifyData;

alias GCallback = CCodePointer[(),()];

alias GClosureNotify = CCodePointer[(RawPointer,Pointer[Struct__GClosure]),()];

alias GClosureMarshal = CCodePointer[(Pointer[Struct__GClosure],Pointer[Struct__GValue],UInt,Pointer[Struct__GValue],RawPointer,RawPointer),()];

alias GCClosure = Struct__GCClosure;

record Struct__GClosureNotifyData (
    data : gpointer,
    notify : GClosureNotify,
);

record Struct__GClosure (
    ref_count : UInt,
    meta_marshal : UInt,
    n_guards : UInt,
    n_fnotifiers : UInt,
    n_inotifiers : UInt,
    in_inotify : UInt,
    floating : UInt,
    derivative_flag : UInt,
    in_marshal : UInt,
    is_invalid : UInt,
    marshal : CCodePointer[(Pointer[Struct__GClosure],Pointer[Struct__GValue],UInt,Pointer[Struct__GValue],RawPointer,RawPointer),()],
    data : gpointer,
    notifiers : Pointer[GClosureNotifyData],
);

record Struct__GCClosure (
    closure : GClosure,
    callback : gpointer,
);

external g_cclosure_new(
    callback_func : GCallback,
    user_data : gpointer,
    destroy_data : GClosureNotify) Pointer[GClosure];

external g_cclosure_new_swap(
    callback_func : GCallback,
    user_data : gpointer,
    destroy_data : GClosureNotify) Pointer[GClosure];

external g_signal_type_cclosure_new(
    itype : CULong,
    struct_offset : UInt) Pointer[GClosure];

external g_closure_ref(
    closure : Pointer[GClosure]) Pointer[GClosure];

external g_closure_sink(
    closure : Pointer[GClosure]);

external g_closure_unref(
    closure : Pointer[GClosure]);

external g_closure_new_simple(
    sizeof_closure : UInt,
    data : gpointer) Pointer[GClosure];

external g_closure_add_finalize_notifier(
    closure : Pointer[GClosure],
    notify_data : gpointer,
    notify_func : GClosureNotify);

external g_closure_remove_finalize_notifier(
    closure : Pointer[GClosure],
    notify_data : gpointer,
    notify_func : GClosureNotify);

external g_closure_add_invalidate_notifier(
    closure : Pointer[GClosure],
    notify_data : gpointer,
    notify_func : GClosureNotify);

external g_closure_remove_invalidate_notifier(
    closure : Pointer[GClosure],
    notify_data : gpointer,
    notify_func : GClosureNotify);

external g_closure_add_marshal_guards(
    closure : Pointer[GClosure],
    pre_marshal_data : gpointer,
    pre_marshal_notify : GClosureNotify,
    post_marshal_data : gpointer,
    post_marshal_notify : GClosureNotify);

external g_closure_set_marshal(
    closure : Pointer[GClosure],
    marshal : GClosureMarshal);

external g_closure_set_meta_marshal(
    closure : Pointer[GClosure],
    marshal_data : gpointer,
    meta_marshal : GClosureMarshal);

external g_closure_invalidate(
    closure : Pointer[GClosure]);

external g_closure_invoke(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer);

external g_cclosure_marshal_VOID__VOID(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__BOOLEAN(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__CHAR(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__UCHAR(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__INT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__UINT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__LONG(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__ULONG(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__ENUM(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__FLAGS(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__FLOAT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__DOUBLE(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__STRING(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__PARAM(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__BOXED(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__OBJECT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__VARIANT(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_VOID__UINT_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_BOOLEAN__FLAGS(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_STRING__OBJECT_POINTER(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

external g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
    closure : Pointer[GClosure],
    return_value : Pointer[GValue],
    n_param_values : UInt,
    param_values : Pointer[GValue],
    invocation_hint : gpointer,
    marshal_data : gpointer);

alias GSignalQuery = Struct__GSignalQuery;

alias GSignalInvocationHint = Struct__GSignalInvocationHint;

alias GSignalCMarshaller = GClosureMarshal;

alias GSignalEmissionHook = CCodePointer[(Pointer[Struct__GSignalInvocationHint],UInt,Pointer[Struct__GValue],RawPointer),(Int)];

alias GSignalAccumulator = CCodePointer[(Pointer[Struct__GSignalInvocationHint],Pointer[Struct__GValue],Pointer[Struct__GValue],RawPointer),(Int)];

alias G_SIGNAL_RUN_FIRST = 1;
alias G_SIGNAL_RUN_LAST = 2;
alias G_SIGNAL_RUN_CLEANUP = 4;
alias G_SIGNAL_NO_RECURSE = 8;
alias G_SIGNAL_DETAILED = 16;
alias G_SIGNAL_ACTION = 32;
alias G_SIGNAL_NO_HOOKS = 64;

alias GSignalFlags = Int;

alias G_CONNECT_AFTER = 1;
alias G_CONNECT_SWAPPED = 2;

alias GConnectFlags = Int;

alias G_SIGNAL_MATCH_ID = 1;
alias G_SIGNAL_MATCH_DETAIL = 2;
alias G_SIGNAL_MATCH_CLOSURE = 4;
alias G_SIGNAL_MATCH_FUNC = 8;
alias G_SIGNAL_MATCH_DATA = 16;
alias G_SIGNAL_MATCH_UNBLOCKED = 32;

alias GSignalMatchType = Int;

record Struct__GSignalInvocationHint (
    signal_id : UInt,
    detail : UInt,
    run_type : GSignalFlags,
);

record Struct__GSignalQuery (
    signal_id : UInt,
    signal_name : Pointer[CChar],
    itype : CULong,
    signal_flags : GSignalFlags,
    return_type : CULong,
    n_params : UInt,
    param_types : Pointer[CULong],
);

external g_signal_newv(
    signal_name : Pointer[CChar],
    itype : CULong,
    signal_flags : GSignalFlags,
    class_closure : Pointer[GClosure],
    accumulator : GSignalAccumulator,
    accu_data : gpointer,
    c_marshaller : GSignalCMarshaller,
    return_type : CULong,
    n_params : UInt,
    param_types : Pointer[CULong]) UInt;

external g_signal_new_valist(
    signal_name : Pointer[CChar],
    itype : CULong,
    signal_flags : GSignalFlags,
    class_closure : Pointer[GClosure],
    accumulator : GSignalAccumulator,
    accu_data : gpointer,
    c_marshaller : GSignalCMarshaller,
    return_type : CULong,
    n_params : UInt,
    args : Pointer[__va_list_tag]) UInt;

external g_signal_new(
    signal_name : Pointer[CChar],
    itype : CULong,
    signal_flags : GSignalFlags,
    class_offset : UInt,
    accumulator : GSignalAccumulator,
    accu_data : gpointer,
    c_marshaller : GSignalCMarshaller,
    return_type : CULong,
    n_params : UInt,
    ...) UInt;

external g_signal_new_class_handler(
    signal_name : Pointer[CChar],
    itype : CULong,
    signal_flags : GSignalFlags,
    class_handler : GCallback,
    accumulator : GSignalAccumulator,
    accu_data : gpointer,
    c_marshaller : GSignalCMarshaller,
    return_type : CULong,
    n_params : UInt,
    ...) UInt;

external g_signal_emitv(
    instance_and_params : Pointer[GValue],
    signal_id : UInt,
    detail : UInt,
    return_value : Pointer[GValue]);

external g_signal_emit_valist(
    instance_ : gpointer,
    signal_id : UInt,
    detail : UInt,
    var_args : Pointer[__va_list_tag]);

external g_signal_emit(
    instance_ : gpointer,
    signal_id : UInt,
    detail : UInt,
    ...);

external g_signal_emit_by_name(
    instance_ : gpointer,
    detailed_signal : Pointer[CChar],
    ...);

external g_signal_lookup(
    name : Pointer[CChar],
    itype : CULong) UInt;

external g_signal_name(
    signal_id : UInt) Pointer[CChar];

external g_signal_query(
    signal_id : UInt,
    query : Pointer[GSignalQuery]);

external g_signal_list_ids(
    itype : CULong,
    n_ids : Pointer[UInt]) Pointer[UInt];

external g_signal_parse_name(
    detailed_signal : Pointer[CChar],
    itype : CULong,
    signal_id_p : Pointer[UInt],
    detail_p : Pointer[UInt],
    force_detail_quark : Int) Int;

external g_signal_get_invocation_hint(
    instance_ : gpointer) Pointer[GSignalInvocationHint];

external g_signal_stop_emission(
    instance_ : gpointer,
    signal_id : UInt,
    detail : UInt);

external g_signal_stop_emission_by_name(
    instance_ : gpointer,
    detailed_signal : Pointer[CChar]);

external g_signal_add_emission_hook(
    signal_id : UInt,
    detail : UInt,
    hook_func : GSignalEmissionHook,
    hook_data : gpointer,
    data_destroy : GDestroyNotify) CULong;

external g_signal_remove_emission_hook(
    signal_id : UInt,
    hook_id : CULong);

external g_signal_has_handler_pending(
    instance_ : gpointer,
    signal_id : UInt,
    detail : UInt,
    may_be_blocked : Int) Int;

external g_signal_connect_closure_by_id(
    instance_ : gpointer,
    signal_id : UInt,
    detail : UInt,
    closure : Pointer[GClosure],
    after : Int) CULong;

external g_signal_connect_closure(
    instance_ : gpointer,
    detailed_signal : Pointer[CChar],
    closure : Pointer[GClosure],
    after : Int) CULong;

external g_signal_connect_data(
    instance_ : gpointer,
    detailed_signal : Pointer[CChar],
    c_handler : GCallback,
    data : gpointer,
    destroy_data : GClosureNotify,
    connect_flags : GConnectFlags) CULong;

external g_signal_handler_block(
    instance_ : gpointer,
    handler_id : CULong);

external g_signal_handler_unblock(
    instance_ : gpointer,
    handler_id : CULong);

external g_signal_handler_disconnect(
    instance_ : gpointer,
    handler_id : CULong);

external g_signal_handler_is_connected(
    instance_ : gpointer,
    handler_id : CULong) Int;

external g_signal_handler_find(
    instance_ : gpointer,
    mask : GSignalMatchType,
    signal_id : UInt,
    detail : UInt,
    closure : Pointer[GClosure],
    func : gpointer,
    data : gpointer) CULong;

external g_signal_handlers_block_matched(
    instance_ : gpointer,
    mask : GSignalMatchType,
    signal_id : UInt,
    detail : UInt,
    closure : Pointer[GClosure],
    func : gpointer,
    data : gpointer) UInt;

external g_signal_handlers_unblock_matched(
    instance_ : gpointer,
    mask : GSignalMatchType,
    signal_id : UInt,
    detail : UInt,
    closure : Pointer[GClosure],
    func : gpointer,
    data : gpointer) UInt;

external g_signal_handlers_disconnect_matched(
    instance_ : gpointer,
    mask : GSignalMatchType,
    signal_id : UInt,
    detail : UInt,
    closure : Pointer[GClosure],
    func : gpointer,
    data : gpointer) UInt;

external g_signal_override_class_closure(
    signal_id : UInt,
    instance_type : CULong,
    class_closure : Pointer[GClosure]);

external g_signal_override_class_handler(
    signal_name : Pointer[CChar],
    instance_type : CULong,
    class_handler : GCallback);

external g_signal_chain_from_overridden(
    instance_and_params : Pointer[GValue],
    return_value : Pointer[GValue]);

external g_signal_chain_from_overridden_handler(
    instance_ : gpointer,
    ...);

external g_signal_accumulator_true_handled(
    ihint : Pointer[GSignalInvocationHint],
    return_accu : Pointer[GValue],
    handler_return : Pointer[GValue],
    dummy : gpointer) Int;

external g_signal_handlers_destroy(
    instance_ : gpointer);

external _g_signals_destroy(
    itype : CULong);

alias GObject = Struct__GObject;

alias GObjectClass = Struct__GObjectClass;

alias GInitiallyUnowned = Struct__GObject;

alias GInitiallyUnownedClass = Struct__GObjectClass;

alias GObjectConstructParam = Struct__GObjectConstructParam;

alias GObjectGetPropertyFunc = CCodePointer[(Pointer[Struct__GObject],UInt,Pointer[Struct__GValue],Pointer[Struct__GParamSpec]),()];

alias GObjectSetPropertyFunc = CCodePointer[(Pointer[Struct__GObject],UInt,Pointer[Struct__GValue],Pointer[Struct__GParamSpec]),()];

alias GObjectFinalizeFunc = CCodePointer[(Pointer[Struct__GObject]),()];

alias GWeakNotify = CCodePointer[(RawPointer,Pointer[Struct__GObject]),()];

record Struct__GObject (
    g_type_instance : GTypeInstance,
    ref_count : UInt,
    qdata : Pointer[GData],
);

record Struct__GObjectClass (
    g_type_class : GTypeClass,
    construct_properties : Pointer[GSList],
    constructor : CCodePointer[(CULong,UInt,Pointer[Struct__GObjectConstructParam]),(Pointer[Struct__GObject])],
    set_property : CCodePointer[(Pointer[Struct__GObject],UInt,Pointer[Struct__GValue],Pointer[Struct__GParamSpec]),()],
    get_property : CCodePointer[(Pointer[Struct__GObject],UInt,Pointer[Struct__GValue],Pointer[Struct__GParamSpec]),()],
    dispose : CCodePointer[(Pointer[Struct__GObject]),()],
    finalize : CCodePointer[(Pointer[Struct__GObject]),()],
    dispatch_properties_changed : CCodePointer[(Pointer[Struct__GObject],UInt,Pointer[Pointer[Struct__GParamSpec]]),()],
    notify : CCodePointer[(Pointer[Struct__GObject],Pointer[Struct__GParamSpec]),()],
    constructed : CCodePointer[(Pointer[Struct__GObject]),()],
    flags : CULong,
    pdummy : Array[gpointer,6],
);

record Struct__GObjectConstructParam (
    pspec : Pointer[GParamSpec],
    value : Pointer[GValue],
);

external g_initially_unowned_get_type() CULong;

external g_object_class_install_property(
    oclass : Pointer[GObjectClass],
    property_id : UInt,
    pspec : Pointer[GParamSpec]);

external g_object_class_find_property(
    oclass : Pointer[GObjectClass],
    property_name : Pointer[CChar]) Pointer[GParamSpec];

external g_object_class_list_properties(
    oclass : Pointer[GObjectClass],
    n_properties : Pointer[UInt]) Pointer[Pointer[GParamSpec]];

external g_object_class_override_property(
    oclass : Pointer[GObjectClass],
    property_id : UInt,
    name : Pointer[CChar]);

external g_object_class_install_properties(
    oclass : Pointer[GObjectClass],
    n_pspecs : UInt,
    pspecs : Pointer[Pointer[GParamSpec]]);

external g_object_interface_install_property(
    g_iface : gpointer,
    pspec : Pointer[GParamSpec]);

external g_object_interface_find_property(
    g_iface : gpointer,
    property_name : Pointer[CChar]) Pointer[GParamSpec];

external g_object_interface_list_properties(
    g_iface : gpointer,
    n_properties_p : Pointer[UInt]) Pointer[Pointer[GParamSpec]];

external g_object_get_type() CULong;

external g_object_new(
    object_type : CULong,
    first_property_name : Pointer[CChar],
    ...) gpointer;

external g_object_newv(
    object_type : CULong,
    n_parameters : UInt,
    parameters : Pointer[GParameter]) gpointer;

external g_object_new_valist(
    object_type : CULong,
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]) Pointer[GObject];

external g_object_set(
    object : gpointer,
    first_property_name : Pointer[CChar],
    ...);

external g_object_get(
    object : gpointer,
    first_property_name : Pointer[CChar],
    ...);

external g_object_connect(
    object : gpointer,
    signal_spec : Pointer[CChar],
    ...) gpointer;

external g_object_disconnect(
    object : gpointer,
    signal_spec : Pointer[CChar],
    ...);

external g_object_set_valist(
    object : Pointer[GObject],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external g_object_get_valist(
    object : Pointer[GObject],
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external g_object_set_property(
    object : Pointer[GObject],
    property_name : Pointer[CChar],
    value : Pointer[GValue]);

external g_object_get_property(
    object : Pointer[GObject],
    property_name : Pointer[CChar],
    value : Pointer[GValue]);

external g_object_freeze_notify(
    object : Pointer[GObject]);

external g_object_notify(
    object : Pointer[GObject],
    property_name : Pointer[CChar]);

external g_object_notify_by_pspec(
    object : Pointer[GObject],
    pspec : Pointer[GParamSpec]);

external g_object_thaw_notify(
    object : Pointer[GObject]);

external g_object_is_floating(
    object : gpointer) Int;

external g_object_ref_sink(
    object : gpointer) gpointer;

external g_object_ref(
    object : gpointer) gpointer;

external g_object_unref(
    object : gpointer);

external g_object_weak_ref(
    object : Pointer[GObject],
    notify : GWeakNotify,
    data : gpointer);

external g_object_weak_unref(
    object : Pointer[GObject],
    notify : GWeakNotify,
    data : gpointer);

external g_object_add_weak_pointer(
    object : Pointer[GObject],
    weak_pointer_location : Pointer[gpointer]);

external g_object_remove_weak_pointer(
    object : Pointer[GObject],
    weak_pointer_location : Pointer[gpointer]);

alias GToggleNotify = CCodePointer[(RawPointer,Pointer[Struct__GObject],Int),()];

external g_object_add_toggle_ref(
    object : Pointer[GObject],
    notify : GToggleNotify,
    data : gpointer);

external g_object_remove_toggle_ref(
    object : Pointer[GObject],
    notify : GToggleNotify,
    data : gpointer);

external g_object_get_qdata(
    object : Pointer[GObject],
    quark : UInt) gpointer;

external g_object_set_qdata(
    object : Pointer[GObject],
    quark : UInt,
    data : gpointer);

external g_object_set_qdata_full(
    object : Pointer[GObject],
    quark : UInt,
    data : gpointer,
    destroy : GDestroyNotify);

external g_object_steal_qdata(
    object : Pointer[GObject],
    quark : UInt) gpointer;

external g_object_get_data(
    object : Pointer[GObject],
    key : Pointer[CChar]) gpointer;

external g_object_set_data(
    object : Pointer[GObject],
    key : Pointer[CChar],
    data : gpointer);

external g_object_set_data_full(
    object : Pointer[GObject],
    key : Pointer[CChar],
    data : gpointer,
    destroy : GDestroyNotify);

external g_object_steal_data(
    object : Pointer[GObject],
    key : Pointer[CChar]) gpointer;

external g_object_watch_closure(
    object : Pointer[GObject],
    closure : Pointer[GClosure]);

external g_cclosure_new_object(
    callback_func : GCallback,
    object : Pointer[GObject]) Pointer[GClosure];

external g_cclosure_new_object_swap(
    callback_func : GCallback,
    object : Pointer[GObject]) Pointer[GClosure];

external g_closure_new_object(
    sizeof_closure : UInt,
    object : Pointer[GObject]) Pointer[GClosure];

external g_value_set_object(
    value : Pointer[GValue],
    v_object : gpointer);

external g_value_get_object(
    value : Pointer[GValue]) gpointer;

external g_value_dup_object(
    value : Pointer[GValue]) gpointer;

external g_signal_connect_object(
    instance_ : gpointer,
    detailed_signal : Pointer[CChar],
    c_handler : GCallback,
    gobject : gpointer,
    connect_flags : GConnectFlags) CULong;

external g_object_force_floating(
    object : Pointer[GObject]);

external g_object_run_dispose(
    object : Pointer[GObject]);

external g_value_take_object(
    value : Pointer[GValue],
    v_object : gpointer);

external g_value_set_object_take_ownership(
    value : Pointer[GValue],
    v_object : gpointer);

external g_object_compat_control(
    what : CULong,
    data : gpointer) CULong;

alias GBinding = Opaque;

alias GBindingTransformFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GValue],Pointer[Struct__GValue],RawPointer),(Int)];

alias G_BINDING_DEFAULT = 0;
alias G_BINDING_BIDIRECTIONAL = 1;
alias G_BINDING_SYNC_CREATE = 2;
alias G_BINDING_INVERT_BOOLEAN = 4;

alias GBindingFlags = Int;

external g_binding_flags_get_type() CULong;

external g_binding_get_type() CULong;

external g_binding_get_flags(
    binding : Pointer[GBinding]) GBindingFlags;

external g_binding_get_source(
    binding : Pointer[GBinding]) Pointer[GObject];

external g_binding_get_target(
    binding : Pointer[GBinding]) Pointer[GObject];

external g_binding_get_source_property(
    binding : Pointer[GBinding]) Pointer[CChar];

external g_binding_get_target_property(
    binding : Pointer[GBinding]) Pointer[CChar];

external g_object_bind_property(
    source : gpointer,
    source_property : Pointer[CChar],
    target : gpointer,
    target_property : Pointer[CChar],
    flags : GBindingFlags) Pointer[GBinding];

external g_object_bind_property_full(
    source : gpointer,
    source_property : Pointer[CChar],
    target : gpointer,
    target_property : Pointer[CChar],
    flags : GBindingFlags,
    transform_to : GBindingTransformFunc,
    transform_from : GBindingTransformFunc,
    user_data : gpointer,
    notify : GDestroyNotify) Pointer[GBinding];

external g_object_bind_property_with_closures(
    source : gpointer,
    source_property : Pointer[CChar],
    target : gpointer,
    target_property : Pointer[CChar],
    flags : GBindingFlags,
    transform_to : Pointer[GClosure],
    transform_from : Pointer[GClosure]) Pointer[GBinding];

alias GBoxedCopyFunc = CCodePointer[(RawPointer),(RawPointer)];

alias GBoxedFreeFunc = CCodePointer[(RawPointer),()];

external g_boxed_copy(
    boxed_type : CULong,
    src_boxed : gconstpointer) gpointer;

external g_boxed_free(
    boxed_type : CULong,
    boxed : gpointer);

external g_value_set_boxed(
    value : Pointer[GValue],
    v_boxed : gconstpointer);

external g_value_set_static_boxed(
    value : Pointer[GValue],
    v_boxed : gconstpointer);

external g_value_get_boxed(
    value : Pointer[GValue]) gpointer;

external g_value_dup_boxed(
    value : Pointer[GValue]) gpointer;

external g_boxed_type_register_static(
    name : Pointer[CChar],
    boxed_copy : GBoxedCopyFunc,
    boxed_free : GBoxedFreeFunc) CULong;

external g_value_take_boxed(
    value : Pointer[GValue],
    v_boxed : gconstpointer);

external g_value_set_boxed_take_ownership(
    value : Pointer[GValue],
    v_boxed : gconstpointer);

external g_closure_get_type() CULong;

external g_value_get_type() CULong;

external g_value_array_get_type() CULong;

external g_date_get_type() CULong;

external g_strv_get_type() CULong;

external g_gstring_get_type() CULong;

external g_hash_table_get_type() CULong;

external g_array_get_type() CULong;

external g_byte_array_get_type() CULong;

external g_ptr_array_get_type() CULong;

external g_variant_type_get_gtype() CULong;

external g_regex_get_type() CULong;

external g_error_get_type() CULong;

external g_date_time_get_type() CULong;

external g_variant_get_gtype() CULong;

alias GStrv = Pointer[Pointer[CChar]];

alias GEnumClass = Struct__GEnumClass;

alias GFlagsClass = Struct__GFlagsClass;

alias GEnumValue = Struct__GEnumValue;

alias GFlagsValue = Struct__GFlagsValue;

record Struct__GEnumClass (
    g_type_class : GTypeClass,
    minimum : Int,
    maximum : Int,
    n_values : UInt,
    values : Pointer[GEnumValue],
);

record Struct__GFlagsClass (
    g_type_class : GTypeClass,
    mask : UInt,
    n_values : UInt,
    values : Pointer[GFlagsValue],
);

record Struct__GEnumValue (
    value : Int,
    value_name : Pointer[CChar],
    value_nick : Pointer[CChar],
);

record Struct__GFlagsValue (
    value : UInt,
    value_name : Pointer[CChar],
    value_nick : Pointer[CChar],
);

external g_enum_get_value(
    enum_class : Pointer[GEnumClass],
    value : Int) Pointer[GEnumValue];

external g_enum_get_value_by_name(
    enum_class : Pointer[GEnumClass],
    name : Pointer[CChar]) Pointer[GEnumValue];

external g_enum_get_value_by_nick(
    enum_class : Pointer[GEnumClass],
    nick : Pointer[CChar]) Pointer[GEnumValue];

external g_flags_get_first_value(
    flags_class : Pointer[GFlagsClass],
    value : UInt) Pointer[GFlagsValue];

external g_flags_get_value_by_name(
    flags_class : Pointer[GFlagsClass],
    name : Pointer[CChar]) Pointer[GFlagsValue];

external g_flags_get_value_by_nick(
    flags_class : Pointer[GFlagsClass],
    nick : Pointer[CChar]) Pointer[GFlagsValue];

external g_value_set_enum(
    value : Pointer[GValue],
    v_enum : Int);

external g_value_get_enum(
    value : Pointer[GValue]) Int;

external g_value_set_flags(
    value : Pointer[GValue],
    v_flags : UInt);

external g_value_get_flags(
    value : Pointer[GValue]) UInt;

external g_enum_register_static(
    name : Pointer[CChar],
    const_static_values : Pointer[GEnumValue]) CULong;

external g_flags_register_static(
    name : Pointer[CChar],
    const_static_values : Pointer[GFlagsValue]) CULong;

external g_enum_complete_type_info(
    g_enum_type : CULong,
    info : Pointer[GTypeInfo],
    const_values : Pointer[GEnumValue]);

external g_flags_complete_type_info(
    g_flags_type : CULong,
    info : Pointer[GTypeInfo],
    const_values : Pointer[GFlagsValue]);

alias GParamSpecChar = Struct__GParamSpecChar;

alias GParamSpecUChar = Struct__GParamSpecUChar;

alias GParamSpecBoolean = Struct__GParamSpecBoolean;

alias GParamSpecInt = Struct__GParamSpecInt;

alias GParamSpecUInt = Struct__GParamSpecUInt;

alias GParamSpecLong = Struct__GParamSpecLong;

alias GParamSpecULong = Struct__GParamSpecULong;

alias GParamSpecInt64 = Struct__GParamSpecInt64;

alias GParamSpecUInt64 = Struct__GParamSpecUInt64;

alias GParamSpecUnichar = Struct__GParamSpecUnichar;

alias GParamSpecEnum = Struct__GParamSpecEnum;

alias GParamSpecFlags = Struct__GParamSpecFlags;

alias GParamSpecFloat = Struct__GParamSpecFloat;

alias GParamSpecDouble = Struct__GParamSpecDouble;

alias GParamSpecString = Struct__GParamSpecString;

alias GParamSpecParam = Struct__GParamSpecParam;

alias GParamSpecBoxed = Struct__GParamSpecBoxed;

alias GParamSpecPointer = Struct__GParamSpecPointer;

alias GParamSpecValueArray = Struct__GParamSpecValueArray;

alias GParamSpecObject = Struct__GParamSpecObject;

alias GParamSpecOverride = Struct__GParamSpecOverride;

alias GParamSpecGType = Struct__GParamSpecGType;

alias GParamSpecVariant = Struct__GParamSpecVariant;

record Struct__GParamSpecChar (
    parent_instance : GParamSpec,
    minimum : CChar,
    maximum : CChar,
    default_value : CChar,
);

record Struct__GParamSpecUChar (
    parent_instance : GParamSpec,
    minimum : CUChar,
    maximum : CUChar,
    default_value : CUChar,
);

record Struct__GParamSpecBoolean (
    parent_instance : GParamSpec,
    default_value : Int,
);

record Struct__GParamSpecInt (
    parent_instance : GParamSpec,
    minimum : Int,
    maximum : Int,
    default_value : Int,
);

record Struct__GParamSpecUInt (
    parent_instance : GParamSpec,
    minimum : UInt,
    maximum : UInt,
    default_value : UInt,
);

record Struct__GParamSpecLong (
    parent_instance : GParamSpec,
    minimum : CLong,
    maximum : CLong,
    default_value : CLong,
);

record Struct__GParamSpecULong (
    parent_instance : GParamSpec,
    minimum : CULong,
    maximum : CULong,
    default_value : CULong,
);

record Struct__GParamSpecInt64 (
    parent_instance : GParamSpec,
    minimum : CLong,
    maximum : CLong,
    default_value : CLong,
);

record Struct__GParamSpecUInt64 (
    parent_instance : GParamSpec,
    minimum : CULong,
    maximum : CULong,
    default_value : CULong,
);

record Struct__GParamSpecUnichar (
    parent_instance : GParamSpec,
    default_value : UInt,
);

record Struct__GParamSpecEnum (
    parent_instance : GParamSpec,
    enum_class : Pointer[GEnumClass],
    default_value : Int,
);

record Struct__GParamSpecFlags (
    parent_instance : GParamSpec,
    flags_class : Pointer[GFlagsClass],
    default_value : UInt,
);

record Struct__GParamSpecFloat (
    parent_instance : GParamSpec,
    minimum : Float,
    maximum : Float,
    default_value : Float,
    epsilon : Float,
);

record Struct__GParamSpecDouble (
    parent_instance : GParamSpec,
    minimum : Double,
    maximum : Double,
    default_value : Double,
    epsilon : Double,
);

record Struct__GParamSpecString (
    parent_instance : GParamSpec,
    default_value : Pointer[CChar],
    cset_first : Pointer[CChar],
    cset_nth : Pointer[CChar],
    substitutor : CChar,
    null_fold_if_empty : UInt,
    ensure_non_null : UInt,
);

record Struct__GParamSpecParam (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecBoxed (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecPointer (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecValueArray (
    parent_instance : GParamSpec,
    element_spec : Pointer[GParamSpec],
    fixed_n_elements : UInt,
);

record Struct__GParamSpecObject (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecOverride (
    parent_instance : GParamSpec,
    overridden : Pointer[GParamSpec],
);

record Struct__GParamSpecGType (
    parent_instance : GParamSpec,
    is_a_type : CULong,
);

record Struct__GParamSpecVariant (
    parent_instance : GParamSpec,
    type : Pointer[GVariantType],
    default_value : Pointer[GVariant],
    padding : Array[gpointer,4],
);

external g_param_spec_char(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : CChar,
    maximum : CChar,
    default_value : CChar,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_uchar(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : CUChar,
    maximum : CUChar,
    default_value : CUChar,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_boolean(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    default_value : Int,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_int(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : Int,
    maximum : Int,
    default_value : Int,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_uint(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : UInt,
    maximum : UInt,
    default_value : UInt,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_long(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : CLong,
    maximum : CLong,
    default_value : CLong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_ulong(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : CULong,
    maximum : CULong,
    default_value : CULong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_int64(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : CLong,
    maximum : CLong,
    default_value : CLong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_uint64(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : CULong,
    maximum : CULong,
    default_value : CULong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_unichar(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    default_value : UInt,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_enum(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    enum_type : CULong,
    default_value : Int,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_flags(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    flags_type : CULong,
    default_value : UInt,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_float(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : Float,
    maximum : Float,
    default_value : Float,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_double(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    minimum : Double,
    maximum : Double,
    default_value : Double,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_string(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    default_value : Pointer[CChar],
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_param(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    param_type : CULong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_boxed(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    boxed_type : CULong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_pointer(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_value_array(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    element_spec : Pointer[GParamSpec],
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_object(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    object_type : CULong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_override(
    name : Pointer[CChar],
    overridden : Pointer[GParamSpec]) Pointer[GParamSpec];

external g_param_spec_gtype(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    is_a_type : CULong,
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_variant(
    name : Pointer[CChar],
    nick : Pointer[CChar],
    blurb : Pointer[CChar],
    type : Pointer[GVariantType],
    default_value : Pointer[GVariant],
    flags : GParamFlags) Pointer[GParamSpec];

external g_param_spec_types : Pointer[CULong];

external g_source_set_closure(
    source : Pointer[GSource],
    closure : Pointer[GClosure]);

external g_io_channel_get_type() CULong;

external g_io_condition_get_type() CULong;

alias GTypeModule = Struct__GTypeModule;

alias GTypeModuleClass = Struct__GTypeModuleClass;

record Struct__GTypeModule (
    parent_instance : GObject,
    use_count : UInt,
    type_infos : Pointer[GSList],
    interface_infos : Pointer[GSList],
    name : Pointer[CChar],
);

record Struct__GTypeModuleClass (
    parent_class : GObjectClass,
    load : CCodePointer[(Pointer[Struct__GTypeModule]),(Int)],
    unload : CCodePointer[(Pointer[Struct__GTypeModule]),()],
    reserved1 : CCodePointer[(),()],
    reserved2 : CCodePointer[(),()],
    reserved3 : CCodePointer[(),()],
    reserved4 : CCodePointer[(),()],
);

external g_type_module_get_type() CULong;

external g_type_module_use(
    module : Pointer[GTypeModule]) Int;

external g_type_module_unuse(
    module : Pointer[GTypeModule]);

external g_type_module_set_name(
    module : Pointer[GTypeModule],
    name : Pointer[CChar]);

external g_type_module_register_type(
    module : Pointer[GTypeModule],
    parent_type : CULong,
    type_name : Pointer[CChar],
    type_info : Pointer[GTypeInfo],
    flags : GTypeFlags) CULong;

external g_type_module_add_interface(
    module : Pointer[GTypeModule],
    instance_type : CULong,
    interface_type : CULong,
    interface_info : Pointer[GInterfaceInfo]);

external g_type_module_register_enum(
    module : Pointer[GTypeModule],
    name : Pointer[CChar],
    const_static_values : Pointer[GEnumValue]) CULong;

external g_type_module_register_flags(
    module : Pointer[GTypeModule],
    name : Pointer[CChar],
    const_static_values : Pointer[GFlagsValue]) CULong;

alias GTypePluginClass = Struct__GTypePluginClass;

alias GTypePluginUse = CCodePointer[(OpaquePointer),()];

alias GTypePluginUnuse = CCodePointer[(OpaquePointer),()];

alias GTypePluginCompleteTypeInfo = CCodePointer[(OpaquePointer,CULong,Pointer[Struct__GTypeInfo],Pointer[Struct__GTypeValueTable]),()];

alias GTypePluginCompleteInterfaceInfo = CCodePointer[(OpaquePointer,CULong,CULong,Pointer[Struct__GInterfaceInfo]),()];

record Struct__GTypePluginClass (
    base_iface : GTypeInterface,
    use_plugin : GTypePluginUse,
    unuse_plugin : GTypePluginUnuse,
    complete_type_info : GTypePluginCompleteTypeInfo,
    complete_interface_info : GTypePluginCompleteInterfaceInfo,
);

external g_type_plugin_get_type() CULong;

external g_type_plugin_use(
    plugin : Pointer[GTypePlugin]);

external g_type_plugin_unuse(
    plugin : Pointer[GTypePlugin]);

external g_type_plugin_complete_type_info(
    plugin : Pointer[GTypePlugin],
    g_type : CULong,
    info : Pointer[GTypeInfo],
    value_table : Pointer[GTypeValueTable]);

external g_type_plugin_complete_interface_info(
    plugin : Pointer[GTypePlugin],
    instance_type : CULong,
    interface_type : CULong,
    info : Pointer[GInterfaceInfo]);

alias GValueArray = Struct__GValueArray;

record Struct__GValueArray (
    n_values : UInt,
    values : Pointer[GValue],
    n_prealloced : UInt,
);

external g_value_array_get_nth(
    value_array : Pointer[GValueArray],
    index_ : UInt) Pointer[GValue];

external g_value_array_new(
    n_prealloced : UInt) Pointer[GValueArray];

external g_value_array_free(
    value_array : Pointer[GValueArray]);

external g_value_array_copy(
    value_array : Pointer[GValueArray]) Pointer[GValueArray];

external g_value_array_prepend(
    value_array : Pointer[GValueArray],
    value : Pointer[GValue]) Pointer[GValueArray];

external g_value_array_append(
    value_array : Pointer[GValueArray],
    value : Pointer[GValue]) Pointer[GValueArray];

external g_value_array_insert(
    value_array : Pointer[GValueArray],
    index_ : UInt,
    value : Pointer[GValue]) Pointer[GValueArray];

external g_value_array_remove(
    value_array : Pointer[GValueArray],
    index_ : UInt) Pointer[GValueArray];

external g_value_array_sort(
    value_array : Pointer[GValueArray],
    compare_func : GCompareFunc) Pointer[GValueArray];

external g_value_array_sort_with_data(
    value_array : Pointer[GValueArray],
    compare_func : GCompareDataFunc,
    user_data : gpointer) Pointer[GValueArray];

external g_value_set_char(
    value : Pointer[GValue],
    v_char : CChar);

external g_value_get_char(
    value : Pointer[GValue]) CChar;

external g_value_set_uchar(
    value : Pointer[GValue],
    v_uchar : CUChar);

external g_value_get_uchar(
    value : Pointer[GValue]) CUChar;

external g_value_set_boolean(
    value : Pointer[GValue],
    v_boolean : Int);

external g_value_get_boolean(
    value : Pointer[GValue]) Int;

external g_value_set_int(
    value : Pointer[GValue],
    v_int : Int);

external g_value_get_int(
    value : Pointer[GValue]) Int;

external g_value_set_uint(
    value : Pointer[GValue],
    v_uint : UInt);

external g_value_get_uint(
    value : Pointer[GValue]) UInt;

external g_value_set_long(
    value : Pointer[GValue],
    v_long : CLong);

external g_value_get_long(
    value : Pointer[GValue]) CLong;

external g_value_set_ulong(
    value : Pointer[GValue],
    v_ulong : CULong);

external g_value_get_ulong(
    value : Pointer[GValue]) CULong;

external g_value_set_int64(
    value : Pointer[GValue],
    v_int64 : CLong);

external g_value_get_int64(
    value : Pointer[GValue]) CLong;

external g_value_set_uint64(
    value : Pointer[GValue],
    v_uint64 : CULong);

external g_value_get_uint64(
    value : Pointer[GValue]) CULong;

external g_value_set_float(
    value : Pointer[GValue],
    v_float : Float);

external g_value_get_float(
    value : Pointer[GValue]) Float;

external g_value_set_double(
    value : Pointer[GValue],
    v_double : Double);

external g_value_get_double(
    value : Pointer[GValue]) Double;

external g_value_set_string(
    value : Pointer[GValue],
    v_string : Pointer[CChar]);

external g_value_set_static_string(
    value : Pointer[GValue],
    v_string : Pointer[CChar]);

external g_value_get_string(
    value : Pointer[GValue]) Pointer[CChar];

external g_value_dup_string(
    value : Pointer[GValue]) Pointer[CChar];

external g_value_set_pointer(
    value : Pointer[GValue],
    v_pointer : gpointer);

external g_value_get_pointer(
    value : Pointer[GValue]) gpointer;

external g_gtype_get_type() CULong;

external g_value_set_gtype(
    value : Pointer[GValue],
    v_gtype : CULong);

external g_value_get_gtype(
    value : Pointer[GValue]) CULong;

external g_value_set_variant(
    value : Pointer[GValue],
    variant_ : Pointer[GVariant]);

external g_value_take_variant(
    value : Pointer[GValue],
    variant_ : Pointer[GVariant]);

external g_value_get_variant(
    value : Pointer[GValue]) Pointer[GVariant];

external g_value_dup_variant(
    value : Pointer[GValue]) Pointer[GVariant];

external g_pointer_type_register_static(
    name : Pointer[CChar]) CULong;

external g_strdup_value_contents(
    value : Pointer[GValue]) Pointer[CChar];

external g_value_take_string(
    value : Pointer[GValue],
    v_string : Pointer[CChar]);

external g_value_set_string_take_ownership(
    value : Pointer[GValue],
    v_string : Pointer[CChar]);

alias gchararray = Pointer[CChar];
