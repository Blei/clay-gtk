/* automatically generated by clay-bindgen */
import glib.generated.*;

alias GType = gsize;

alias GValue = Struct__GValue;

alias Union__GTypeCValue = Opaque;

alias GTypeCValue = Union__GTypeCValue;

alias Struct__GTypePlugin = Opaque;

alias GTypePlugin = Struct__GTypePlugin;

alias GTypeClass = Struct__GTypeClass;

alias GTypeInterface = Struct__GTypeInterface;

alias GTypeInstance = Struct__GTypeInstance;

alias GTypeInfo = Struct__GTypeInfo;

alias GTypeFundamentalInfo = Struct__GTypeFundamentalInfo;

alias GInterfaceInfo = Struct__GInterfaceInfo;

alias GTypeValueTable = Struct__GTypeValueTable;

alias GTypeQuery = Struct__GTypeQuery;

record Struct__GTypeClass (
    g_type : GType,
);

record Struct__GTypeInstance (
    g_class : Pointer[GTypeClass],
);

record Struct__GTypeInterface (
    g_type : GType,
    g_instance_type : GType,
);

record Struct__GTypeQuery (
    type : GType,
    type_name : Pointer[gchar],
    class_size : guint,
    instance_size : guint,
);

alias Enum_Unnamed1 = UInt;
alias G_TYPE_DEBUG_NONE = UInt(0);
alias G_TYPE_DEBUG_OBJECTS = UInt(1);
alias G_TYPE_DEBUG_SIGNALS = UInt(2);
alias G_TYPE_DEBUG_MASK = UInt(3);

alias GTypeDebugFlags = UInt;

external (cdecl) g_type_init() : ;

external (cdecl) g_type_init_with_debug_flags(arg0:GTypeDebugFlags) : ;

external (cdecl) g_type_name(arg0:GType) : Pointer[gchar];

external (cdecl) g_type_qname(arg0:GType) : GQuark;

external (cdecl) g_type_from_name(arg0:Pointer[gchar]) : GType;

external (cdecl) g_type_parent(arg0:GType) : GType;

external (cdecl) g_type_depth(arg0:GType) : guint;

external (cdecl) g_type_next_base(arg0:GType, arg1:GType) : GType;

external (cdecl) g_type_is_a(arg0:GType, arg1:GType) : gboolean;

external (cdecl) g_type_class_ref(arg0:GType) : gpointer;

external (cdecl) g_type_class_peek(arg0:GType) : gpointer;

external (cdecl) g_type_class_peek_static(arg0:GType) : gpointer;

external (cdecl) g_type_class_unref(arg0:gpointer) : ;

external (cdecl) g_type_class_peek_parent(arg0:gpointer) : gpointer;

external (cdecl) g_type_interface_peek(arg0:gpointer, arg1:GType) : gpointer;

external (cdecl) g_type_interface_peek_parent(arg0:gpointer) : gpointer;

external (cdecl) g_type_default_interface_ref(arg0:GType) : gpointer;

external (cdecl) g_type_default_interface_peek(arg0:GType) : gpointer;

external (cdecl) g_type_default_interface_unref(arg0:gpointer) : ;

external (cdecl) g_type_children(arg0:GType, arg1:Pointer[guint]) : Pointer[GType];

external (cdecl) g_type_interfaces(arg0:GType, arg1:Pointer[guint]) : Pointer[GType];

external (cdecl) g_type_set_qdata(arg0:GType, arg1:GQuark, arg2:gpointer) : ;

external (cdecl) g_type_get_qdata(arg0:GType, arg1:GQuark) : gpointer;

external (cdecl) g_type_query(arg0:GType, arg1:Pointer[GTypeQuery]) : ;

alias GBaseInitFunc = CCodePointer[[gpointer],[]];

alias GBaseFinalizeFunc = CCodePointer[[gpointer],[]];

alias GClassInitFunc = CCodePointer[[gpointer, gpointer],[]];

alias GClassFinalizeFunc = CCodePointer[[gpointer, gpointer],[]];

alias GInstanceInitFunc = CCodePointer[[Pointer[GTypeInstance], gpointer],[]];

alias GInterfaceInitFunc = CCodePointer[[gpointer, gpointer],[]];

alias GInterfaceFinalizeFunc = CCodePointer[[gpointer, gpointer],[]];

alias GTypeClassCacheFunc = CCodePointer[[gpointer, Pointer[GTypeClass]],[gboolean]];

alias GTypeInterfaceCheckFunc = CCodePointer[[gpointer, gpointer],[]];

alias Enum_Unnamed2 = UInt;
alias G_TYPE_FLAG_CLASSED = UInt(1);
alias G_TYPE_FLAG_INSTANTIATABLE = UInt(2);
alias G_TYPE_FLAG_DERIVABLE = UInt(4);
alias G_TYPE_FLAG_DEEP_DERIVABLE = UInt(8);

alias GTypeFundamentalFlags = UInt;

alias Enum_Unnamed3 = UInt;
alias G_TYPE_FLAG_ABSTRACT = UInt(16);
alias G_TYPE_FLAG_VALUE_ABSTRACT = UInt(32);

alias GTypeFlags = UInt;

record Struct__GTypeInfo (
    class_size : guint16,
    base_init : GBaseInitFunc,
    base_finalize : GBaseFinalizeFunc,
    class_init : GClassInitFunc,
    class_finalize : GClassFinalizeFunc,
    class_data : gconstpointer,
    instance_size : guint16,
    n_preallocs : guint16,
    instance_init : GInstanceInitFunc,
    value_table : Pointer[GTypeValueTable],
);

record Struct__GTypeFundamentalInfo (
    type_flags : GTypeFundamentalFlags,
);

record Struct__GInterfaceInfo (
    interface_init : GInterfaceInitFunc,
    interface_finalize : GInterfaceFinalizeFunc,
    interface_data : gpointer,
);

record Struct__GTypeValueTable (
    value_init : CCodePointer[[Pointer[GValue]],[]],
    value_free : CCodePointer[[Pointer[GValue]],[]],
    value_copy : CCodePointer[[Pointer[GValue], Pointer[GValue]],[]],
    value_peek_pointer : CCodePointer[[Pointer[GValue]],[gpointer]],
    collect_format : Pointer[gchar],
    collect_value : CCodePointer[[Pointer[GValue], guint, Pointer[GTypeCValue], guint],[Pointer[gchar]]],
    lcopy_format : Pointer[gchar],
    lcopy_value : CCodePointer[[Pointer[GValue], guint, Pointer[GTypeCValue], guint],[Pointer[gchar]]],
);

external (cdecl) g_type_register_static(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[GTypeInfo], arg3:GTypeFlags) : GType;

external (cdecl) g_type_register_static_simple(arg0:GType, arg1:Pointer[gchar], arg2:guint, arg3:GClassInitFunc, arg4:guint, arg5:GInstanceInitFunc, arg6:GTypeFlags) : GType;

external (cdecl) g_type_register_dynamic(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[GTypePlugin], arg3:GTypeFlags) : GType;

external (cdecl) g_type_register_fundamental(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[GTypeInfo], arg3:Pointer[GTypeFundamentalInfo], arg4:GTypeFlags) : GType;

external (cdecl) g_type_add_interface_static(arg0:GType, arg1:GType, arg2:Pointer[GInterfaceInfo]) : ;

external (cdecl) g_type_add_interface_dynamic(arg0:GType, arg1:GType, arg2:Pointer[GTypePlugin]) : ;

external (cdecl) g_type_interface_add_prerequisite(arg0:GType, arg1:GType) : ;

external (cdecl) g_type_interface_prerequisites(arg0:GType, arg1:Pointer[guint]) : Pointer[GType];

external (cdecl) g_type_class_add_private(arg0:gpointer, arg1:gsize) : ;

external (cdecl) g_type_instance_get_private(arg0:Pointer[GTypeInstance], arg1:GType) : gpointer;

external (cdecl) g_type_add_class_private(arg0:GType, arg1:gsize) : ;

external (cdecl) g_type_class_get_private(arg0:Pointer[GTypeClass], arg1:GType) : gpointer;

external (cdecl) g_type_get_plugin(arg0:GType) : Pointer[GTypePlugin];

external (cdecl) g_type_interface_get_plugin(arg0:GType, arg1:GType) : Pointer[GTypePlugin];

external (cdecl) g_type_fundamental_next() : GType;

external (cdecl) g_type_fundamental(arg0:GType) : GType;

external (cdecl) g_type_create_instance(arg0:GType) : Pointer[GTypeInstance];

external (cdecl) g_type_free_instance(arg0:Pointer[GTypeInstance]) : ;

external (cdecl) g_type_add_class_cache_func(arg0:gpointer, arg1:GTypeClassCacheFunc) : ;

external (cdecl) g_type_remove_class_cache_func(arg0:gpointer, arg1:GTypeClassCacheFunc) : ;

external (cdecl) g_type_class_unref_uncached(arg0:gpointer) : ;

external (cdecl) g_type_add_interface_check(arg0:gpointer, arg1:GTypeInterfaceCheckFunc) : ;

external (cdecl) g_type_remove_interface_check(arg0:gpointer, arg1:GTypeInterfaceCheckFunc) : ;

external (cdecl) g_type_value_table_peek(arg0:GType) : Pointer[GTypeValueTable];

external (cdecl) g_type_check_instance(arg0:Pointer[GTypeInstance]) : gboolean;

external (cdecl) g_type_check_instance_cast(arg0:Pointer[GTypeInstance], arg1:GType) : Pointer[GTypeInstance];

external (cdecl) g_type_check_instance_is_a(arg0:Pointer[GTypeInstance], arg1:GType) : gboolean;

external (cdecl) g_type_check_class_cast(arg0:Pointer[GTypeClass], arg1:GType) : Pointer[GTypeClass];

external (cdecl) g_type_check_class_is_a(arg0:Pointer[GTypeClass], arg1:GType) : gboolean;

external (cdecl) g_type_check_is_value_type(arg0:GType) : gboolean;

external (cdecl) g_type_check_value(arg0:Pointer[GValue]) : gboolean;

external (cdecl) g_type_check_value_holds(arg0:Pointer[GValue], arg1:GType) : gboolean;

external (cdecl) g_type_test_flags(arg0:GType, arg1:guint) : gboolean;

external (cdecl) g_type_name_from_instance(arg0:Pointer[GTypeInstance]) : Pointer[gchar];

external (cdecl) g_type_name_from_class(arg0:Pointer[GTypeClass]) : Pointer[gchar];

external _g_type_debug_flags : GTypeDebugFlags;

alias GValueTransform = CCodePointer[[Pointer[GValue], Pointer[GValue]],[]];

record Struct__GValue (
    g_type : GType,
    data : Array[Union_Unnamed4, 2],
);

alias Union_Unnamed4 = Union[
    /* v_int */ gint,
    /* v_uint */ guint,
    /* v_long */ glong,
    /* v_ulong */ gulong,
    /* v_int64 */ gint64,
    /* v_uint64 */ guint64,
    /* v_float */ gfloat,
    /* v_double */ gdouble,
    /* v_pointer */ gpointer,
];

external (cdecl) g_value_init(arg0:Pointer[GValue], arg1:GType) : Pointer[GValue];

external (cdecl) g_value_copy(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) g_value_reset(arg0:Pointer[GValue]) : Pointer[GValue];

external (cdecl) g_value_unset(arg0:Pointer[GValue]) : ;

external (cdecl) g_value_set_instance(arg0:Pointer[GValue], arg1:gpointer) : ;

external (cdecl) g_value_fits_pointer(arg0:Pointer[GValue]) : gboolean;

external (cdecl) g_value_peek_pointer(arg0:Pointer[GValue]) : gpointer;

external (cdecl) g_value_type_compatible(arg0:GType, arg1:GType) : gboolean;

external (cdecl) g_value_type_transformable(arg0:GType, arg1:GType) : gboolean;

external (cdecl) g_value_transform(arg0:Pointer[GValue], arg1:Pointer[GValue]) : gboolean;

external (cdecl) g_value_register_transform_func(arg0:GType, arg1:GType, arg2:GValueTransform) : ;

alias Enum_Unnamed5 = Int;
alias G_PARAM_READABLE = Int(1);
alias G_PARAM_WRITABLE = Int(2);
alias G_PARAM_CONSTRUCT = Int(4);
alias G_PARAM_CONSTRUCT_ONLY = Int(8);
alias G_PARAM_LAX_VALIDATION = Int(16);
alias G_PARAM_STATIC_NAME = Int(32);
alias G_PARAM_PRIVATE = Int(32);
alias G_PARAM_STATIC_NICK = Int(64);
alias G_PARAM_STATIC_BLURB = Int(128);
alias G_PARAM_DEPRECATED = Int(-2147483648);

alias GParamFlags = Int;

alias GParamSpec = Struct__GParamSpec;

alias GParamSpecClass = Struct__GParamSpecClass;

alias GParameter = Struct__GParameter;

alias Struct__GParamSpecPool = Opaque;

alias GParamSpecPool = Struct__GParamSpecPool;

record Struct__GParamSpec (
    g_type_instance : GTypeInstance,
    name : Pointer[gchar],
    flags : GParamFlags,
    value_type : GType,
    owner_type : GType,
    _nick : Pointer[gchar],
    _blurb : Pointer[gchar],
    qdata : Pointer[GData],
    ref_count : guint,
    param_id : guint,
);

record Struct__GParamSpecClass (
    g_type_class : GTypeClass,
    value_type : GType,
    finalize : CCodePointer[[Pointer[GParamSpec]],[]],
    value_set_default : CCodePointer[[Pointer[GParamSpec], Pointer[GValue]],[]],
    value_validate : CCodePointer[[Pointer[GParamSpec], Pointer[GValue]],[gboolean]],
    values_cmp : CCodePointer[[Pointer[GParamSpec], Pointer[GValue], Pointer[GValue]],[gint]],
    dummy : Array[gpointer, 4],
);

record Struct__GParameter (
    name : Pointer[gchar],
    value : GValue,
);

external (cdecl) g_param_spec_ref(arg0:Pointer[GParamSpec]) : Pointer[GParamSpec];

external (cdecl) g_param_spec_unref(arg0:Pointer[GParamSpec]) : ;

external (cdecl) g_param_spec_sink(arg0:Pointer[GParamSpec]) : ;

external (cdecl) g_param_spec_ref_sink(arg0:Pointer[GParamSpec]) : Pointer[GParamSpec];

external (cdecl) g_param_spec_get_qdata(arg0:Pointer[GParamSpec], arg1:GQuark) : gpointer;

external (cdecl) g_param_spec_set_qdata(arg0:Pointer[GParamSpec], arg1:GQuark, arg2:gpointer) : ;

external (cdecl) g_param_spec_set_qdata_full(arg0:Pointer[GParamSpec], arg1:GQuark, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_param_spec_steal_qdata(arg0:Pointer[GParamSpec], arg1:GQuark) : gpointer;

external (cdecl) g_param_spec_get_redirect_target(arg0:Pointer[GParamSpec]) : Pointer[GParamSpec];

external (cdecl) g_param_value_set_default(arg0:Pointer[GParamSpec], arg1:Pointer[GValue]) : ;

external (cdecl) g_param_value_defaults(arg0:Pointer[GParamSpec], arg1:Pointer[GValue]) : gboolean;

external (cdecl) g_param_value_validate(arg0:Pointer[GParamSpec], arg1:Pointer[GValue]) : gboolean;

external (cdecl) g_param_value_convert(arg0:Pointer[GParamSpec], arg1:Pointer[GValue], arg2:Pointer[GValue], arg3:gboolean) : gboolean;

external (cdecl) g_param_values_cmp(arg0:Pointer[GParamSpec], arg1:Pointer[GValue], arg2:Pointer[GValue]) : gint;

external (cdecl) g_param_spec_get_name(arg0:Pointer[GParamSpec]) : Pointer[gchar];

external (cdecl) g_param_spec_get_nick(arg0:Pointer[GParamSpec]) : Pointer[gchar];

external (cdecl) g_param_spec_get_blurb(arg0:Pointer[GParamSpec]) : Pointer[gchar];

external (cdecl) g_value_set_param(arg0:Pointer[GValue], arg1:Pointer[GParamSpec]) : ;

external (cdecl) g_value_get_param(arg0:Pointer[GValue]) : Pointer[GParamSpec];

external (cdecl) g_value_dup_param(arg0:Pointer[GValue]) : Pointer[GParamSpec];

external (cdecl) g_value_take_param(arg0:Pointer[GValue], arg1:Pointer[GParamSpec]) : ;

external (cdecl) g_value_set_param_take_ownership(arg0:Pointer[GValue], arg1:Pointer[GParamSpec]) : ;

alias GParamSpecTypeInfo = Struct__GParamSpecTypeInfo;

record Struct__GParamSpecTypeInfo (
    instance_size : guint16,
    n_preallocs : guint16,
    instance_init : CCodePointer[[Pointer[GParamSpec]],[]],
    value_type : GType,
    finalize : CCodePointer[[Pointer[GParamSpec]],[]],
    value_set_default : CCodePointer[[Pointer[GParamSpec], Pointer[GValue]],[]],
    value_validate : CCodePointer[[Pointer[GParamSpec], Pointer[GValue]],[gboolean]],
    values_cmp : CCodePointer[[Pointer[GParamSpec], Pointer[GValue], Pointer[GValue]],[gint]],
);

external (cdecl) g_param_type_register_static(arg0:Pointer[gchar], arg1:Pointer[GParamSpecTypeInfo]) : GType;

external (cdecl) _g_param_type_register_static_constant(arg0:Pointer[gchar], arg1:Pointer[GParamSpecTypeInfo], arg2:GType) : GType;

external (cdecl) g_param_spec_internal(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GParamFlags) : gpointer;

external (cdecl) g_param_spec_pool_new(arg0:gboolean) : Pointer[GParamSpecPool];

external (cdecl) g_param_spec_pool_insert(arg0:Pointer[GParamSpecPool], arg1:Pointer[GParamSpec], arg2:GType) : ;

external (cdecl) g_param_spec_pool_remove(arg0:Pointer[GParamSpecPool], arg1:Pointer[GParamSpec]) : ;

external (cdecl) g_param_spec_pool_lookup(arg0:Pointer[GParamSpecPool], arg1:Pointer[gchar], arg2:GType, arg3:gboolean) : Pointer[GParamSpec];

external (cdecl) g_param_spec_pool_list_owned(arg0:Pointer[GParamSpecPool], arg1:GType) : Pointer[GList];

external (cdecl) g_param_spec_pool_list(arg0:Pointer[GParamSpecPool], arg1:GType, arg2:Pointer[guint]) : Pointer[Pointer[GParamSpec]];

alias GClosure = Struct__GClosure;

alias GClosureNotifyData = Struct__GClosureNotifyData;

alias GCallback = CCodePointer[[],[]];

alias GClosureNotify = CCodePointer[[gpointer, Pointer[GClosure]],[]];

alias GClosureMarshal = CCodePointer[[Pointer[GClosure], Pointer[GValue], guint, Pointer[GValue], gpointer, gpointer],[]];

alias GCClosure = Struct__GCClosure;

record Struct__GClosureNotifyData (
    data : gpointer,
    notify : GClosureNotify,
);

record Struct__GClosure (
    ref_count : guint,
    meta_marshal : guint,
    n_guards : guint,
    n_fnotifiers : guint,
    n_inotifiers : guint,
    in_inotify : guint,
    floating : guint,
    derivative_flag : guint,
    in_marshal : guint,
    is_invalid : guint,
    marshal : CCodePointer[[Pointer[GClosure], Pointer[GValue], guint, Pointer[GValue], gpointer, gpointer],[]],
    data : gpointer,
    notifiers : Pointer[GClosureNotifyData],
);

record Struct__GCClosure (
    closure : GClosure,
    callback : gpointer,
);

external (cdecl) g_cclosure_new(arg0:GCallback, arg1:gpointer, arg2:GClosureNotify) : Pointer[GClosure];

external (cdecl) g_cclosure_new_swap(arg0:GCallback, arg1:gpointer, arg2:GClosureNotify) : Pointer[GClosure];

external (cdecl) g_signal_type_cclosure_new(arg0:GType, arg1:guint) : Pointer[GClosure];

external (cdecl) g_closure_ref(arg0:Pointer[GClosure]) : Pointer[GClosure];

external (cdecl) g_closure_sink(arg0:Pointer[GClosure]) : ;

external (cdecl) g_closure_unref(arg0:Pointer[GClosure]) : ;

external (cdecl) g_closure_new_simple(arg0:guint, arg1:gpointer) : Pointer[GClosure];

external (cdecl) g_closure_add_finalize_notifier(arg0:Pointer[GClosure], arg1:gpointer, arg2:GClosureNotify) : ;

external (cdecl) g_closure_remove_finalize_notifier(arg0:Pointer[GClosure], arg1:gpointer, arg2:GClosureNotify) : ;

external (cdecl) g_closure_add_invalidate_notifier(arg0:Pointer[GClosure], arg1:gpointer, arg2:GClosureNotify) : ;

external (cdecl) g_closure_remove_invalidate_notifier(arg0:Pointer[GClosure], arg1:gpointer, arg2:GClosureNotify) : ;

external (cdecl) g_closure_add_marshal_guards(arg0:Pointer[GClosure], arg1:gpointer, arg2:GClosureNotify, arg3:gpointer, arg4:GClosureNotify) : ;

external (cdecl) g_closure_set_marshal(arg0:Pointer[GClosure], arg1:GClosureMarshal) : ;

external (cdecl) g_closure_set_meta_marshal(arg0:Pointer[GClosure], arg1:gpointer, arg2:GClosureMarshal) : ;

external (cdecl) g_closure_invalidate(arg0:Pointer[GClosure]) : ;

external (cdecl) g_closure_invoke(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer) : ;

external (cdecl) g_cclosure_marshal_generic(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__VOID(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__BOOLEAN(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__CHAR(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__UCHAR(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__INT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__UINT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__LONG(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__ULONG(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__ENUM(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__FLAGS(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__FLOAT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__DOUBLE(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__STRING(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__PARAM(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__BOXED(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__OBJECT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__VARIANT(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_VOID__UINT_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_BOOLEAN__FLAGS(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_STRING__OBJECT_POINTER(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

external (cdecl) g_cclosure_marshal_BOOLEAN__BOXED_BOXED(arg0:Pointer[GClosure], arg1:Pointer[GValue], arg2:guint, arg3:Pointer[GValue], arg4:gpointer, arg5:gpointer) : ;

alias GSignalQuery = Struct__GSignalQuery;

alias GSignalInvocationHint = Struct__GSignalInvocationHint;

alias GSignalCMarshaller = GClosureMarshal;

alias GSignalEmissionHook = CCodePointer[[Pointer[GSignalInvocationHint], guint, Pointer[GValue], gpointer],[gboolean]];

alias GSignalAccumulator = CCodePointer[[Pointer[GSignalInvocationHint], Pointer[GValue], Pointer[GValue], gpointer],[gboolean]];

alias Enum_Unnamed6 = UInt;
alias G_SIGNAL_RUN_FIRST = UInt(1);
alias G_SIGNAL_RUN_LAST = UInt(2);
alias G_SIGNAL_RUN_CLEANUP = UInt(4);
alias G_SIGNAL_NO_RECURSE = UInt(8);
alias G_SIGNAL_DETAILED = UInt(16);
alias G_SIGNAL_ACTION = UInt(32);
alias G_SIGNAL_NO_HOOKS = UInt(64);
alias G_SIGNAL_MUST_COLLECT = UInt(128);

alias GSignalFlags = UInt;

alias Enum_Unnamed7 = UInt;
alias G_CONNECT_AFTER = UInt(1);
alias G_CONNECT_SWAPPED = UInt(2);

alias GConnectFlags = UInt;

alias Enum_Unnamed8 = UInt;
alias G_SIGNAL_MATCH_ID = UInt(1);
alias G_SIGNAL_MATCH_DETAIL = UInt(2);
alias G_SIGNAL_MATCH_CLOSURE = UInt(4);
alias G_SIGNAL_MATCH_FUNC = UInt(8);
alias G_SIGNAL_MATCH_DATA = UInt(16);
alias G_SIGNAL_MATCH_UNBLOCKED = UInt(32);

alias GSignalMatchType = UInt;

record Struct__GSignalInvocationHint (
    signal_id : guint,
    detail : GQuark,
    run_type : GSignalFlags,
);

record Struct__GSignalQuery (
    signal_id : guint,
    signal_name : Pointer[gchar],
    itype : GType,
    signal_flags : GSignalFlags,
    return_type : GType,
    n_params : guint,
    param_types : Pointer[GType],
);

external (cdecl) g_signal_newv(arg0:Pointer[gchar], arg1:GType, arg2:GSignalFlags, arg3:Pointer[GClosure], arg4:GSignalAccumulator, arg5:gpointer, arg6:GSignalCMarshaller, arg7:GType, arg8:guint, arg9:Pointer[GType]) : guint;

external (cdecl) g_signal_new_valist(arg0:Pointer[gchar], arg1:GType, arg2:GSignalFlags, arg3:Pointer[GClosure], arg4:GSignalAccumulator, arg5:gpointer, arg6:GSignalCMarshaller, arg7:GType, arg8:guint, arg9:Pointer[__va_list_tag]) : guint;

external (cdecl) g_signal_new(arg0:Pointer[gchar], arg1:GType, arg2:GSignalFlags, arg3:guint, arg4:GSignalAccumulator, arg5:gpointer, arg6:GSignalCMarshaller, arg7:GType, arg8:guint, ..) : guint;

external (cdecl) g_signal_new_class_handler(arg0:Pointer[gchar], arg1:GType, arg2:GSignalFlags, arg3:GCallback, arg4:GSignalAccumulator, arg5:gpointer, arg6:GSignalCMarshaller, arg7:GType, arg8:guint, ..) : guint;

external (cdecl) g_signal_emitv(arg0:Pointer[GValue], arg1:guint, arg2:GQuark, arg3:Pointer[GValue]) : ;

external (cdecl) g_signal_emit_valist(arg0:gpointer, arg1:guint, arg2:GQuark, arg3:Pointer[__va_list_tag]) : ;

external (cdecl) g_signal_emit(arg0:gpointer, arg1:guint, arg2:GQuark, ..) : ;

external (cdecl) g_signal_emit_by_name(arg0:gpointer, arg1:Pointer[gchar], ..) : ;

external (cdecl) g_signal_lookup(arg0:Pointer[gchar], arg1:GType) : guint;

external (cdecl) g_signal_name(arg0:guint) : Pointer[gchar];

external (cdecl) g_signal_query(arg0:guint, arg1:Pointer[GSignalQuery]) : ;

external (cdecl) g_signal_list_ids(arg0:GType, arg1:Pointer[guint]) : Pointer[guint];

external (cdecl) g_signal_parse_name(arg0:Pointer[gchar], arg1:GType, arg2:Pointer[guint], arg3:Pointer[GQuark], arg4:gboolean) : gboolean;

external (cdecl) g_signal_get_invocation_hint(arg0:gpointer) : Pointer[GSignalInvocationHint];

external (cdecl) g_signal_stop_emission(arg0:gpointer, arg1:guint, arg2:GQuark) : ;

external (cdecl) g_signal_stop_emission_by_name(arg0:gpointer, arg1:Pointer[gchar]) : ;

external (cdecl) g_signal_add_emission_hook(arg0:guint, arg1:GQuark, arg2:GSignalEmissionHook, arg3:gpointer, arg4:GDestroyNotify) : gulong;

external (cdecl) g_signal_remove_emission_hook(arg0:guint, arg1:gulong) : ;

external (cdecl) g_signal_has_handler_pending(arg0:gpointer, arg1:guint, arg2:GQuark, arg3:gboolean) : gboolean;

external (cdecl) g_signal_connect_closure_by_id(arg0:gpointer, arg1:guint, arg2:GQuark, arg3:Pointer[GClosure], arg4:gboolean) : gulong;

external (cdecl) g_signal_connect_closure(arg0:gpointer, arg1:Pointer[gchar], arg2:Pointer[GClosure], arg3:gboolean) : gulong;

external (cdecl) g_signal_connect_data(arg0:gpointer, arg1:Pointer[gchar], arg2:GCallback, arg3:gpointer, arg4:GClosureNotify, arg5:GConnectFlags) : gulong;

external (cdecl) g_signal_handler_block(arg0:gpointer, arg1:gulong) : ;

external (cdecl) g_signal_handler_unblock(arg0:gpointer, arg1:gulong) : ;

external (cdecl) g_signal_handler_disconnect(arg0:gpointer, arg1:gulong) : ;

external (cdecl) g_signal_handler_is_connected(arg0:gpointer, arg1:gulong) : gboolean;

external (cdecl) g_signal_handler_find(arg0:gpointer, arg1:GSignalMatchType, arg2:guint, arg3:GQuark, arg4:Pointer[GClosure], arg5:gpointer, arg6:gpointer) : gulong;

external (cdecl) g_signal_handlers_block_matched(arg0:gpointer, arg1:GSignalMatchType, arg2:guint, arg3:GQuark, arg4:Pointer[GClosure], arg5:gpointer, arg6:gpointer) : guint;

external (cdecl) g_signal_handlers_unblock_matched(arg0:gpointer, arg1:GSignalMatchType, arg2:guint, arg3:GQuark, arg4:Pointer[GClosure], arg5:gpointer, arg6:gpointer) : guint;

external (cdecl) g_signal_handlers_disconnect_matched(arg0:gpointer, arg1:GSignalMatchType, arg2:guint, arg3:GQuark, arg4:Pointer[GClosure], arg5:gpointer, arg6:gpointer) : guint;

external (cdecl) g_signal_override_class_closure(arg0:guint, arg1:GType, arg2:Pointer[GClosure]) : ;

external (cdecl) g_signal_override_class_handler(arg0:Pointer[gchar], arg1:GType, arg2:GCallback) : ;

external (cdecl) g_signal_chain_from_overridden(arg0:Pointer[GValue], arg1:Pointer[GValue]) : ;

external (cdecl) g_signal_chain_from_overridden_handler(arg0:gpointer, ..) : ;

external (cdecl) g_signal_accumulator_true_handled(arg0:Pointer[GSignalInvocationHint], arg1:Pointer[GValue], arg2:Pointer[GValue], arg3:gpointer) : gboolean;

external (cdecl) g_signal_accumulator_first_wins(arg0:Pointer[GSignalInvocationHint], arg1:Pointer[GValue], arg2:Pointer[GValue], arg3:gpointer) : gboolean;

external (cdecl) g_signal_handlers_destroy(arg0:gpointer) : ;

external (cdecl) _g_signals_destroy(arg0:GType) : ;

alias GObject = Struct__GObject;

alias GObjectClass = Struct__GObjectClass;

alias GInitiallyUnowned = Struct__GObject;

alias GInitiallyUnownedClass = Struct__GObjectClass;

alias GObjectConstructParam = Struct__GObjectConstructParam;

alias GObjectGetPropertyFunc = CCodePointer[[Pointer[GObject], guint, Pointer[GValue], Pointer[GParamSpec]],[]];

alias GObjectSetPropertyFunc = CCodePointer[[Pointer[GObject], guint, Pointer[GValue], Pointer[GParamSpec]],[]];

alias GObjectFinalizeFunc = CCodePointer[[Pointer[GObject]],[]];

alias GWeakNotify = CCodePointer[[gpointer, Pointer[GObject]],[]];

record Struct__GObject (
    g_type_instance : GTypeInstance,
    ref_count : guint,
    qdata : Pointer[GData],
);

record Struct__GObjectClass (
    g_type_class : GTypeClass,
    construct_properties : Pointer[GSList],
    constructor : CCodePointer[[GType, guint, Pointer[GObjectConstructParam]],[Pointer[GObject]]],
    set_property : CCodePointer[[Pointer[GObject], guint, Pointer[GValue], Pointer[GParamSpec]],[]],
    get_property : CCodePointer[[Pointer[GObject], guint, Pointer[GValue], Pointer[GParamSpec]],[]],
    dispose : CCodePointer[[Pointer[GObject]],[]],
    finalize : CCodePointer[[Pointer[GObject]],[]],
    dispatch_properties_changed : CCodePointer[[Pointer[GObject], guint, Pointer[Pointer[GParamSpec]]],[]],
    notify : CCodePointer[[Pointer[GObject], Pointer[GParamSpec]],[]],
    constructed : CCodePointer[[Pointer[GObject]],[]],
    flags : gsize,
    pdummy : Array[gpointer, 6],
);

record Struct__GObjectConstructParam (
    pspec : Pointer[GParamSpec],
    value : Pointer[GValue],
);

external (cdecl) g_initially_unowned_get_type() : GType;

external (cdecl) g_object_class_install_property(arg0:Pointer[GObjectClass], arg1:guint, arg2:Pointer[GParamSpec]) : ;

external (cdecl) g_object_class_find_property(arg0:Pointer[GObjectClass], arg1:Pointer[gchar]) : Pointer[GParamSpec];

external (cdecl) g_object_class_list_properties(arg0:Pointer[GObjectClass], arg1:Pointer[guint]) : Pointer[Pointer[GParamSpec]];

external (cdecl) g_object_class_override_property(arg0:Pointer[GObjectClass], arg1:guint, arg2:Pointer[gchar]) : ;

external (cdecl) g_object_class_install_properties(arg0:Pointer[GObjectClass], arg1:guint, arg2:Pointer[Pointer[GParamSpec]]) : ;

external (cdecl) g_object_interface_install_property(arg0:gpointer, arg1:Pointer[GParamSpec]) : ;

external (cdecl) g_object_interface_find_property(arg0:gpointer, arg1:Pointer[gchar]) : Pointer[GParamSpec];

external (cdecl) g_object_interface_list_properties(arg0:gpointer, arg1:Pointer[guint]) : Pointer[Pointer[GParamSpec]];

external (cdecl) g_object_get_type() : GType;

external (cdecl) g_object_new(arg0:GType, arg1:Pointer[gchar], ..) : gpointer;

external (cdecl) g_object_newv(arg0:GType, arg1:guint, arg2:Pointer[GParameter]) : gpointer;

external (cdecl) g_object_new_valist(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : Pointer[GObject];

external (cdecl) g_object_set(arg0:gpointer, arg1:Pointer[gchar], ..) : ;

external (cdecl) g_object_get(arg0:gpointer, arg1:Pointer[gchar], ..) : ;

external (cdecl) g_object_connect(arg0:gpointer, arg1:Pointer[gchar], ..) : gpointer;

external (cdecl) g_object_disconnect(arg0:gpointer, arg1:Pointer[gchar], ..) : ;

external (cdecl) g_object_set_valist(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) g_object_get_valist(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:Pointer[__va_list_tag]) : ;

external (cdecl) g_object_set_property(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) g_object_get_property(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:Pointer[GValue]) : ;

external (cdecl) g_object_freeze_notify(arg0:Pointer[GObject]) : ;

external (cdecl) g_object_notify(arg0:Pointer[GObject], arg1:Pointer[gchar]) : ;

external (cdecl) g_object_notify_by_pspec(arg0:Pointer[GObject], arg1:Pointer[GParamSpec]) : ;

external (cdecl) g_object_thaw_notify(arg0:Pointer[GObject]) : ;

external (cdecl) g_object_is_floating(arg0:gpointer) : gboolean;

external (cdecl) g_object_ref_sink(arg0:gpointer) : gpointer;

external (cdecl) g_object_ref(arg0:gpointer) : gpointer;

external (cdecl) g_object_unref(arg0:gpointer) : ;

external (cdecl) g_object_weak_ref(arg0:Pointer[GObject], arg1:GWeakNotify, arg2:gpointer) : ;

external (cdecl) g_object_weak_unref(arg0:Pointer[GObject], arg1:GWeakNotify, arg2:gpointer) : ;

external (cdecl) g_object_add_weak_pointer(arg0:Pointer[GObject], arg1:Pointer[gpointer]) : ;

external (cdecl) g_object_remove_weak_pointer(arg0:Pointer[GObject], arg1:Pointer[gpointer]) : ;

alias GToggleNotify = CCodePointer[[gpointer, Pointer[GObject], gboolean],[]];

external (cdecl) g_object_add_toggle_ref(arg0:Pointer[GObject], arg1:GToggleNotify, arg2:gpointer) : ;

external (cdecl) g_object_remove_toggle_ref(arg0:Pointer[GObject], arg1:GToggleNotify, arg2:gpointer) : ;

external (cdecl) g_object_get_qdata(arg0:Pointer[GObject], arg1:GQuark) : gpointer;

external (cdecl) g_object_set_qdata(arg0:Pointer[GObject], arg1:GQuark, arg2:gpointer) : ;

external (cdecl) g_object_set_qdata_full(arg0:Pointer[GObject], arg1:GQuark, arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_object_steal_qdata(arg0:Pointer[GObject], arg1:GQuark) : gpointer;

external (cdecl) g_object_get_data(arg0:Pointer[GObject], arg1:Pointer[gchar]) : gpointer;

external (cdecl) g_object_set_data(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:gpointer) : ;

external (cdecl) g_object_set_data_full(arg0:Pointer[GObject], arg1:Pointer[gchar], arg2:gpointer, arg3:GDestroyNotify) : ;

external (cdecl) g_object_steal_data(arg0:Pointer[GObject], arg1:Pointer[gchar]) : gpointer;

external (cdecl) g_object_watch_closure(arg0:Pointer[GObject], arg1:Pointer[GClosure]) : ;

external (cdecl) g_cclosure_new_object(arg0:GCallback, arg1:Pointer[GObject]) : Pointer[GClosure];

external (cdecl) g_cclosure_new_object_swap(arg0:GCallback, arg1:Pointer[GObject]) : Pointer[GClosure];

external (cdecl) g_closure_new_object(arg0:guint, arg1:Pointer[GObject]) : Pointer[GClosure];

external (cdecl) g_value_set_object(arg0:Pointer[GValue], arg1:gpointer) : ;

external (cdecl) g_value_get_object(arg0:Pointer[GValue]) : gpointer;

external (cdecl) g_value_dup_object(arg0:Pointer[GValue]) : gpointer;

external (cdecl) g_signal_connect_object(arg0:gpointer, arg1:Pointer[gchar], arg2:GCallback, arg3:gpointer, arg4:GConnectFlags) : gulong;

external (cdecl) g_object_force_floating(arg0:Pointer[GObject]) : ;

external (cdecl) g_object_run_dispose(arg0:Pointer[GObject]) : ;

external (cdecl) g_value_take_object(arg0:Pointer[GValue], arg1:gpointer) : ;

external (cdecl) g_value_set_object_take_ownership(arg0:Pointer[GValue], arg1:gpointer) : ;

external (cdecl) g_object_compat_control(arg0:gsize, arg1:gpointer) : gsize;

external (cdecl) g_clear_object(arg0:Pointer[Pointer[GObject]]) : ;

alias Struct__GBinding = Opaque;

alias GBinding = Struct__GBinding;

alias GBindingTransformFunc = CCodePointer[[Pointer[GBinding], Pointer[GValue], Pointer[GValue], gpointer],[gboolean]];

alias Enum_Unnamed9 = UInt;
alias G_BINDING_DEFAULT = UInt(0);
alias G_BINDING_BIDIRECTIONAL = UInt(1);
alias G_BINDING_SYNC_CREATE = UInt(2);
alias G_BINDING_INVERT_BOOLEAN = UInt(4);

alias GBindingFlags = UInt;

external (cdecl) g_binding_flags_get_type() : GType;

external (cdecl) g_binding_get_type() : GType;

external (cdecl) g_binding_get_flags(arg0:Pointer[GBinding]) : GBindingFlags;

external (cdecl) g_binding_get_source(arg0:Pointer[GBinding]) : Pointer[GObject];

external (cdecl) g_binding_get_target(arg0:Pointer[GBinding]) : Pointer[GObject];

external (cdecl) g_binding_get_source_property(arg0:Pointer[GBinding]) : Pointer[gchar];

external (cdecl) g_binding_get_target_property(arg0:Pointer[GBinding]) : Pointer[gchar];

external (cdecl) g_object_bind_property(arg0:gpointer, arg1:Pointer[gchar], arg2:gpointer, arg3:Pointer[gchar], arg4:GBindingFlags) : Pointer[GBinding];

external (cdecl) g_object_bind_property_full(arg0:gpointer, arg1:Pointer[gchar], arg2:gpointer, arg3:Pointer[gchar], arg4:GBindingFlags, arg5:GBindingTransformFunc, arg6:GBindingTransformFunc, arg7:gpointer, arg8:GDestroyNotify) : Pointer[GBinding];

external (cdecl) g_object_bind_property_with_closures(arg0:gpointer, arg1:Pointer[gchar], arg2:gpointer, arg3:Pointer[gchar], arg4:GBindingFlags, arg5:Pointer[GClosure], arg6:Pointer[GClosure]) : Pointer[GBinding];

external (cdecl) g_date_get_type() : GType;

external (cdecl) g_strv_get_type() : GType;

external (cdecl) g_gstring_get_type() : GType;

external (cdecl) g_hash_table_get_type() : GType;

external (cdecl) g_array_get_type() : GType;

external (cdecl) g_byte_array_get_type() : GType;

external (cdecl) g_ptr_array_get_type() : GType;

external (cdecl) g_variant_type_get_gtype() : GType;

external (cdecl) g_regex_get_type() : GType;

external (cdecl) g_match_info_get_type() : GType;

external (cdecl) g_error_get_type() : GType;

external (cdecl) g_date_time_get_type() : GType;

external (cdecl) g_io_channel_get_type() : GType;

external (cdecl) g_io_condition_get_type() : GType;

external (cdecl) g_variant_builder_get_type() : GType;

external (cdecl) g_main_loop_get_type() : GType;

external (cdecl) g_main_context_get_type() : GType;

external (cdecl) g_source_get_type() : GType;

external (cdecl) g_variant_get_gtype() : GType;

alias GStrv = Pointer[Pointer[gchar]];

alias GBoxedCopyFunc = CCodePointer[[gpointer],[gpointer]];

alias GBoxedFreeFunc = CCodePointer[[gpointer],[]];

external (cdecl) g_boxed_copy(arg0:GType, arg1:gconstpointer) : gpointer;

external (cdecl) g_boxed_free(arg0:GType, arg1:gpointer) : ;

external (cdecl) g_value_set_boxed(arg0:Pointer[GValue], arg1:gconstpointer) : ;

external (cdecl) g_value_set_static_boxed(arg0:Pointer[GValue], arg1:gconstpointer) : ;

external (cdecl) g_value_take_boxed(arg0:Pointer[GValue], arg1:gconstpointer) : ;

external (cdecl) g_value_set_boxed_take_ownership(arg0:Pointer[GValue], arg1:gconstpointer) : ;

external (cdecl) g_value_get_boxed(arg0:Pointer[GValue]) : gpointer;

external (cdecl) g_value_dup_boxed(arg0:Pointer[GValue]) : gpointer;

external (cdecl) g_boxed_type_register_static(arg0:Pointer[gchar], arg1:GBoxedCopyFunc, arg2:GBoxedFreeFunc) : GType;

external (cdecl) g_closure_get_type() : GType;

external (cdecl) g_value_get_type() : GType;

external (cdecl) g_value_array_get_type() : GType;

alias GEnumClass = Struct__GEnumClass;

alias GFlagsClass = Struct__GFlagsClass;

alias GEnumValue = Struct__GEnumValue;

alias GFlagsValue = Struct__GFlagsValue;

record Struct__GEnumClass (
    g_type_class : GTypeClass,
    minimum : gint,
    maximum : gint,
    n_values : guint,
    values : Pointer[GEnumValue],
);

record Struct__GFlagsClass (
    g_type_class : GTypeClass,
    mask : guint,
    n_values : guint,
    values : Pointer[GFlagsValue],
);

record Struct__GEnumValue (
    value : gint,
    value_name : Pointer[gchar],
    value_nick : Pointer[gchar],
);

record Struct__GFlagsValue (
    value : guint,
    value_name : Pointer[gchar],
    value_nick : Pointer[gchar],
);

external (cdecl) g_enum_get_value(arg0:Pointer[GEnumClass], arg1:gint) : Pointer[GEnumValue];

external (cdecl) g_enum_get_value_by_name(arg0:Pointer[GEnumClass], arg1:Pointer[gchar]) : Pointer[GEnumValue];

external (cdecl) g_enum_get_value_by_nick(arg0:Pointer[GEnumClass], arg1:Pointer[gchar]) : Pointer[GEnumValue];

external (cdecl) g_flags_get_first_value(arg0:Pointer[GFlagsClass], arg1:guint) : Pointer[GFlagsValue];

external (cdecl) g_flags_get_value_by_name(arg0:Pointer[GFlagsClass], arg1:Pointer[gchar]) : Pointer[GFlagsValue];

external (cdecl) g_flags_get_value_by_nick(arg0:Pointer[GFlagsClass], arg1:Pointer[gchar]) : Pointer[GFlagsValue];

external (cdecl) g_value_set_enum(arg0:Pointer[GValue], arg1:gint) : ;

external (cdecl) g_value_get_enum(arg0:Pointer[GValue]) : gint;

external (cdecl) g_value_set_flags(arg0:Pointer[GValue], arg1:guint) : ;

external (cdecl) g_value_get_flags(arg0:Pointer[GValue]) : guint;

external (cdecl) g_enum_register_static(arg0:Pointer[gchar], arg1:Pointer[GEnumValue]) : GType;

external (cdecl) g_flags_register_static(arg0:Pointer[gchar], arg1:Pointer[GFlagsValue]) : GType;

external (cdecl) g_enum_complete_type_info(arg0:GType, arg1:Pointer[GTypeInfo], arg2:Pointer[GEnumValue]) : ;

external (cdecl) g_flags_complete_type_info(arg0:GType, arg1:Pointer[GTypeInfo], arg2:Pointer[GFlagsValue]) : ;

alias GParamSpecChar = Struct__GParamSpecChar;

alias GParamSpecUChar = Struct__GParamSpecUChar;

alias GParamSpecBoolean = Struct__GParamSpecBoolean;

alias GParamSpecInt = Struct__GParamSpecInt;

alias GParamSpecUInt = Struct__GParamSpecUInt;

alias GParamSpecLong = Struct__GParamSpecLong;

alias GParamSpecULong = Struct__GParamSpecULong;

alias GParamSpecInt64 = Struct__GParamSpecInt64;

alias GParamSpecUInt64 = Struct__GParamSpecUInt64;

alias GParamSpecUnichar = Struct__GParamSpecUnichar;

alias GParamSpecEnum = Struct__GParamSpecEnum;

alias GParamSpecFlags = Struct__GParamSpecFlags;

alias GParamSpecFloat = Struct__GParamSpecFloat;

alias GParamSpecDouble = Struct__GParamSpecDouble;

alias GParamSpecString = Struct__GParamSpecString;

alias GParamSpecParam = Struct__GParamSpecParam;

alias GParamSpecBoxed = Struct__GParamSpecBoxed;

alias GParamSpecPointer = Struct__GParamSpecPointer;

alias GParamSpecValueArray = Struct__GParamSpecValueArray;

alias GParamSpecObject = Struct__GParamSpecObject;

alias GParamSpecOverride = Struct__GParamSpecOverride;

alias GParamSpecGType = Struct__GParamSpecGType;

alias GParamSpecVariant = Struct__GParamSpecVariant;

record Struct__GParamSpecChar (
    parent_instance : GParamSpec,
    minimum : gint8,
    maximum : gint8,
    default_value : gint8,
);

record Struct__GParamSpecUChar (
    parent_instance : GParamSpec,
    minimum : guint8,
    maximum : guint8,
    default_value : guint8,
);

record Struct__GParamSpecBoolean (
    parent_instance : GParamSpec,
    default_value : gboolean,
);

record Struct__GParamSpecInt (
    parent_instance : GParamSpec,
    minimum : gint,
    maximum : gint,
    default_value : gint,
);

record Struct__GParamSpecUInt (
    parent_instance : GParamSpec,
    minimum : guint,
    maximum : guint,
    default_value : guint,
);

record Struct__GParamSpecLong (
    parent_instance : GParamSpec,
    minimum : glong,
    maximum : glong,
    default_value : glong,
);

record Struct__GParamSpecULong (
    parent_instance : GParamSpec,
    minimum : gulong,
    maximum : gulong,
    default_value : gulong,
);

record Struct__GParamSpecInt64 (
    parent_instance : GParamSpec,
    minimum : gint64,
    maximum : gint64,
    default_value : gint64,
);

record Struct__GParamSpecUInt64 (
    parent_instance : GParamSpec,
    minimum : guint64,
    maximum : guint64,
    default_value : guint64,
);

record Struct__GParamSpecUnichar (
    parent_instance : GParamSpec,
    default_value : gunichar,
);

record Struct__GParamSpecEnum (
    parent_instance : GParamSpec,
    enum_class : Pointer[GEnumClass],
    default_value : gint,
);

record Struct__GParamSpecFlags (
    parent_instance : GParamSpec,
    flags_class : Pointer[GFlagsClass],
    default_value : guint,
);

record Struct__GParamSpecFloat (
    parent_instance : GParamSpec,
    minimum : gfloat,
    maximum : gfloat,
    default_value : gfloat,
    epsilon : gfloat,
);

record Struct__GParamSpecDouble (
    parent_instance : GParamSpec,
    minimum : gdouble,
    maximum : gdouble,
    default_value : gdouble,
    epsilon : gdouble,
);

record Struct__GParamSpecString (
    parent_instance : GParamSpec,
    default_value : Pointer[gchar],
    cset_first : Pointer[gchar],
    cset_nth : Pointer[gchar],
    substitutor : gchar,
    null_fold_if_empty : guint,
    ensure_non_null : guint,
);

record Struct__GParamSpecParam (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecBoxed (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecPointer (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecValueArray (
    parent_instance : GParamSpec,
    element_spec : Pointer[GParamSpec],
    fixed_n_elements : guint,
);

record Struct__GParamSpecObject (
    parent_instance : GParamSpec,
);

record Struct__GParamSpecOverride (
    parent_instance : GParamSpec,
    overridden : Pointer[GParamSpec],
);

record Struct__GParamSpecGType (
    parent_instance : GParamSpec,
    is_a_type : GType,
);

record Struct__GParamSpecVariant (
    parent_instance : GParamSpec,
    type : Pointer[GVariantType],
    default_value : Pointer[GVariant],
    padding : Array[gpointer, 4],
);

external (cdecl) g_param_spec_char(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint8, arg4:gint8, arg5:gint8, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_uchar(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:guint8, arg4:guint8, arg5:guint8, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_boolean(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gboolean, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_int(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint, arg4:gint, arg5:gint, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_uint(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:guint, arg4:guint, arg5:guint, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_long(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:glong, arg4:glong, arg5:glong, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_ulong(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gulong, arg4:gulong, arg5:gulong, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_int64(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gint64, arg4:gint64, arg5:gint64, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_uint64(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:guint64, arg4:guint64, arg5:guint64, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_unichar(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gunichar, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_enum(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GType, arg4:gint, arg5:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_flags(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GType, arg4:guint, arg5:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_float(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gfloat, arg4:gfloat, arg5:gfloat, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_double(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:gdouble, arg4:gdouble, arg5:gdouble, arg6:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_string(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_param(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GType, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_boxed(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GType, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_pointer(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_value_array(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[GParamSpec], arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_object(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GType, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_override(arg0:Pointer[gchar], arg1:Pointer[GParamSpec]) : Pointer[GParamSpec];

external (cdecl) g_param_spec_gtype(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:GType, arg4:GParamFlags) : Pointer[GParamSpec];

external (cdecl) g_param_spec_variant(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[GVariantType], arg4:Pointer[GVariant], arg5:GParamFlags) : Pointer[GParamSpec];

external g_param_spec_types : Pointer[GType];

external (cdecl) g_source_set_closure(arg0:Pointer[GSource], arg1:Pointer[GClosure]) : ;

external (cdecl) g_source_set_dummy_callback(arg0:Pointer[GSource]) : ;

alias GTypeModule = Struct__GTypeModule;

alias GTypeModuleClass = Struct__GTypeModuleClass;

record Struct__GTypeModule (
    parent_instance : GObject,
    use_count : guint,
    type_infos : Pointer[GSList],
    interface_infos : Pointer[GSList],
    name : Pointer[gchar],
);

record Struct__GTypeModuleClass (
    parent_class : GObjectClass,
    load : CCodePointer[[Pointer[GTypeModule]],[gboolean]],
    unload : CCodePointer[[Pointer[GTypeModule]],[]],
    reserved1 : CCodePointer[[],[]],
    reserved2 : CCodePointer[[],[]],
    reserved3 : CCodePointer[[],[]],
    reserved4 : CCodePointer[[],[]],
);

external (cdecl) g_type_module_get_type() : GType;

external (cdecl) g_type_module_use(arg0:Pointer[GTypeModule]) : gboolean;

external (cdecl) g_type_module_unuse(arg0:Pointer[GTypeModule]) : ;

external (cdecl) g_type_module_set_name(arg0:Pointer[GTypeModule], arg1:Pointer[gchar]) : ;

external (cdecl) g_type_module_register_type(arg0:Pointer[GTypeModule], arg1:GType, arg2:Pointer[gchar], arg3:Pointer[GTypeInfo], arg4:GTypeFlags) : GType;

external (cdecl) g_type_module_add_interface(arg0:Pointer[GTypeModule], arg1:GType, arg2:GType, arg3:Pointer[GInterfaceInfo]) : ;

external (cdecl) g_type_module_register_enum(arg0:Pointer[GTypeModule], arg1:Pointer[gchar], arg2:Pointer[GEnumValue]) : GType;

external (cdecl) g_type_module_register_flags(arg0:Pointer[GTypeModule], arg1:Pointer[gchar], arg2:Pointer[GFlagsValue]) : GType;

alias GTypePluginClass = Struct__GTypePluginClass;

alias GTypePluginUse = CCodePointer[[Pointer[GTypePlugin]],[]];

alias GTypePluginUnuse = CCodePointer[[Pointer[GTypePlugin]],[]];

alias GTypePluginCompleteTypeInfo = CCodePointer[[Pointer[GTypePlugin], GType, Pointer[GTypeInfo], Pointer[GTypeValueTable]],[]];

alias GTypePluginCompleteInterfaceInfo = CCodePointer[[Pointer[GTypePlugin], GType, GType, Pointer[GInterfaceInfo]],[]];

record Struct__GTypePluginClass (
    base_iface : GTypeInterface,
    use_plugin : GTypePluginUse,
    unuse_plugin : GTypePluginUnuse,
    complete_type_info : GTypePluginCompleteTypeInfo,
    complete_interface_info : GTypePluginCompleteInterfaceInfo,
);

external (cdecl) g_type_plugin_get_type() : GType;

external (cdecl) g_type_plugin_use(arg0:Pointer[GTypePlugin]) : ;

external (cdecl) g_type_plugin_unuse(arg0:Pointer[GTypePlugin]) : ;

external (cdecl) g_type_plugin_complete_type_info(arg0:Pointer[GTypePlugin], arg1:GType, arg2:Pointer[GTypeInfo], arg3:Pointer[GTypeValueTable]) : ;

external (cdecl) g_type_plugin_complete_interface_info(arg0:Pointer[GTypePlugin], arg1:GType, arg2:GType, arg3:Pointer[GInterfaceInfo]) : ;

alias GValueArray = Struct__GValueArray;

record Struct__GValueArray (
    n_values : guint,
    values : Pointer[GValue],
    n_prealloced : guint,
);

external (cdecl) g_value_array_get_nth(arg0:Pointer[GValueArray], arg1:guint) : Pointer[GValue];

external (cdecl) g_value_array_new(arg0:guint) : Pointer[GValueArray];

external (cdecl) g_value_array_free(arg0:Pointer[GValueArray]) : ;

external (cdecl) g_value_array_copy(arg0:Pointer[GValueArray]) : Pointer[GValueArray];

external (cdecl) g_value_array_prepend(arg0:Pointer[GValueArray], arg1:Pointer[GValue]) : Pointer[GValueArray];

external (cdecl) g_value_array_append(arg0:Pointer[GValueArray], arg1:Pointer[GValue]) : Pointer[GValueArray];

external (cdecl) g_value_array_insert(arg0:Pointer[GValueArray], arg1:guint, arg2:Pointer[GValue]) : Pointer[GValueArray];

external (cdecl) g_value_array_remove(arg0:Pointer[GValueArray], arg1:guint) : Pointer[GValueArray];

external (cdecl) g_value_array_sort(arg0:Pointer[GValueArray], arg1:GCompareFunc) : Pointer[GValueArray];

external (cdecl) g_value_array_sort_with_data(arg0:Pointer[GValueArray], arg1:GCompareDataFunc, arg2:gpointer) : Pointer[GValueArray];

external (cdecl) g_value_set_char(arg0:Pointer[GValue], arg1:gchar) : ;

external (cdecl) g_value_get_char(arg0:Pointer[GValue]) : gchar;

external (cdecl) g_value_set_uchar(arg0:Pointer[GValue], arg1:guchar) : ;

external (cdecl) g_value_get_uchar(arg0:Pointer[GValue]) : guchar;

external (cdecl) g_value_set_boolean(arg0:Pointer[GValue], arg1:gboolean) : ;

external (cdecl) g_value_get_boolean(arg0:Pointer[GValue]) : gboolean;

external (cdecl) g_value_set_int(arg0:Pointer[GValue], arg1:gint) : ;

external (cdecl) g_value_get_int(arg0:Pointer[GValue]) : gint;

external (cdecl) g_value_set_uint(arg0:Pointer[GValue], arg1:guint) : ;

external (cdecl) g_value_get_uint(arg0:Pointer[GValue]) : guint;

external (cdecl) g_value_set_long(arg0:Pointer[GValue], arg1:glong) : ;

external (cdecl) g_value_get_long(arg0:Pointer[GValue]) : glong;

external (cdecl) g_value_set_ulong(arg0:Pointer[GValue], arg1:gulong) : ;

external (cdecl) g_value_get_ulong(arg0:Pointer[GValue]) : gulong;

external (cdecl) g_value_set_int64(arg0:Pointer[GValue], arg1:gint64) : ;

external (cdecl) g_value_get_int64(arg0:Pointer[GValue]) : gint64;

external (cdecl) g_value_set_uint64(arg0:Pointer[GValue], arg1:guint64) : ;

external (cdecl) g_value_get_uint64(arg0:Pointer[GValue]) : guint64;

external (cdecl) g_value_set_float(arg0:Pointer[GValue], arg1:gfloat) : ;

external (cdecl) g_value_get_float(arg0:Pointer[GValue]) : gfloat;

external (cdecl) g_value_set_double(arg0:Pointer[GValue], arg1:gdouble) : ;

external (cdecl) g_value_get_double(arg0:Pointer[GValue]) : gdouble;

external (cdecl) g_value_set_string(arg0:Pointer[GValue], arg1:Pointer[gchar]) : ;

external (cdecl) g_value_set_static_string(arg0:Pointer[GValue], arg1:Pointer[gchar]) : ;

external (cdecl) g_value_get_string(arg0:Pointer[GValue]) : Pointer[gchar];

external (cdecl) g_value_dup_string(arg0:Pointer[GValue]) : Pointer[gchar];

external (cdecl) g_value_set_pointer(arg0:Pointer[GValue], arg1:gpointer) : ;

external (cdecl) g_value_get_pointer(arg0:Pointer[GValue]) : gpointer;

external (cdecl) g_gtype_get_type() : GType;

external (cdecl) g_value_set_gtype(arg0:Pointer[GValue], arg1:GType) : ;

external (cdecl) g_value_get_gtype(arg0:Pointer[GValue]) : GType;

external (cdecl) g_value_set_variant(arg0:Pointer[GValue], arg1:Pointer[GVariant]) : ;

external (cdecl) g_value_take_variant(arg0:Pointer[GValue], arg1:Pointer[GVariant]) : ;

external (cdecl) g_value_get_variant(arg0:Pointer[GValue]) : Pointer[GVariant];

external (cdecl) g_value_dup_variant(arg0:Pointer[GValue]) : Pointer[GVariant];

external (cdecl) g_pointer_type_register_static(arg0:Pointer[gchar]) : GType;

external (cdecl) g_strdup_value_contents(arg0:Pointer[GValue]) : Pointer[gchar];

external (cdecl) g_value_take_string(arg0:Pointer[GValue], arg1:Pointer[gchar]) : ;

external (cdecl) g_value_set_string_take_ownership(arg0:Pointer[GValue], arg1:Pointer[gchar]) : ;

alias gchararray = Pointer[gchar];

