// Automatically generated by clay-bindgen
// language: c

import glib.generated.*;
import gobject.generated.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias GIOChannel = Struct__GIOChannel;

alias GIOFuncs = Struct__GIOFuncs;

alias G_IO_ERROR_NONE = 0;
alias G_IO_ERROR_AGAIN = 1;
alias G_IO_ERROR_INVAL = 2;
alias G_IO_ERROR_UNKNOWN = 3;

alias GIOError = Int;

alias G_IO_CHANNEL_ERROR_FBIG = 0;
alias G_IO_CHANNEL_ERROR_INVAL = 1;
alias G_IO_CHANNEL_ERROR_IO = 2;
alias G_IO_CHANNEL_ERROR_ISDIR = 3;
alias G_IO_CHANNEL_ERROR_NOSPC = 4;
alias G_IO_CHANNEL_ERROR_NXIO = 5;
alias G_IO_CHANNEL_ERROR_OVERFLOW = 6;
alias G_IO_CHANNEL_ERROR_PIPE = 7;
alias G_IO_CHANNEL_ERROR_FAILED = 8;

alias GIOChannelError = Int;

alias G_IO_STATUS_ERROR = 0;
alias G_IO_STATUS_NORMAL = 1;
alias G_IO_STATUS_EOF = 2;
alias G_IO_STATUS_AGAIN = 3;

alias GIOStatus = Int;

alias G_SEEK_CUR = 0;
alias G_SEEK_SET = 1;
alias G_SEEK_END = 2;

alias GSeekType = Int;

alias G_IO_IN = 1;
alias G_IO_OUT = 4;
alias G_IO_PRI = 2;
alias G_IO_ERR = 8;
alias G_IO_HUP = 16;
alias G_IO_NVAL = 32;

alias GIOCondition = Int;

alias G_IO_FLAG_APPEND = 1;
alias G_IO_FLAG_NONBLOCK = 2;
alias G_IO_FLAG_IS_READABLE = 4;
alias G_IO_FLAG_IS_WRITEABLE = 8;
alias G_IO_FLAG_IS_SEEKABLE = 16;
alias G_IO_FLAG_MASK = 31;
alias G_IO_FLAG_GET_MASK = 31;
alias G_IO_FLAG_SET_MASK = 3;

alias GIOFlags = Int;

record Struct__GIOChannel (
    ref_count : Int,
    funcs : Pointer[GIOFuncs],
    encoding : Pointer[CChar],
    read_cd : GIConv,
    write_cd : GIConv,
    line_term : Pointer[CChar],
    line_term_len : UInt,
    buf_size : CULong,
    read_buf : Pointer[GString],
    encoded_read_buf : Pointer[GString],
    write_buf : Pointer[GString],
    partial_write_buf : Array[CChar,6],
    use_buffer : UInt,
    do_encode : UInt,
    close_on_unref : UInt,
    is_readable : UInt,
    is_writeable : UInt,
    is_seekable : UInt,
    reserved1 : gpointer,
    reserved2 : gpointer,
);

alias GIOFunc = CCodePointer[(Pointer[Struct__GIOChannel],Int,RawPointer),(Int)];

record Struct__GIOFuncs (
    io_read : CCodePointer[(Pointer[Struct__GIOChannel],Pointer[CChar],CULong,Pointer[CULong],Pointer[Pointer[Struct__GError]]),(Int)],
    io_write : CCodePointer[(Pointer[Struct__GIOChannel],Pointer[CChar],CULong,Pointer[CULong],Pointer[Pointer[Struct__GError]]),(Int)],
    io_seek : CCodePointer[(Pointer[Struct__GIOChannel],CLong,Int,Pointer[Pointer[Struct__GError]]),(Int)],
    io_close : CCodePointer[(Pointer[Struct__GIOChannel],Pointer[Pointer[Struct__GError]]),(Int)],
    io_create_watch : CCodePointer[(Pointer[Struct__GIOChannel],Int),(Pointer[Struct__GSource])],
    io_free : CCodePointer[(Pointer[Struct__GIOChannel]),()],
    io_set_flags : CCodePointer[(Pointer[Struct__GIOChannel],Int,Pointer[Pointer[Struct__GError]]),(Int)],
    io_get_flags : CCodePointer[(Pointer[Struct__GIOChannel]),(Int)],
);

external g_io_channel_init(
    channel : Pointer[GIOChannel]);

external g_io_channel_ref(
    channel : Pointer[GIOChannel]) Pointer[GIOChannel];

external g_io_channel_unref(
    channel : Pointer[GIOChannel]);

external g_io_channel_read(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CULong,
    bytes_read : Pointer[CULong]) GIOError;

external g_io_channel_write(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CULong,
    bytes_written : Pointer[CULong]) GIOError;

external g_io_channel_seek(
    channel : Pointer[GIOChannel],
    offset : CLong,
    type : GSeekType) GIOError;

external g_io_channel_close(
    channel : Pointer[GIOChannel]);

external g_io_channel_shutdown(
    channel : Pointer[GIOChannel],
    flush : Int,
    err : Pointer[Pointer[GError]]) GIOStatus;

external g_io_add_watch_full(
    channel : Pointer[GIOChannel],
    priority : Int,
    condition : GIOCondition,
    func : GIOFunc,
    user_data : gpointer,
    notify : GDestroyNotify) UInt;

external g_io_create_watch(
    channel : Pointer[GIOChannel],
    condition : GIOCondition) Pointer[GSource];

external g_io_add_watch(
    channel : Pointer[GIOChannel],
    condition : GIOCondition,
    func : GIOFunc,
    user_data : gpointer) UInt;

external g_io_channel_set_buffer_size(
    channel : Pointer[GIOChannel],
    size : CULong);

external g_io_channel_get_buffer_size(
    channel : Pointer[GIOChannel]) CULong;

external g_io_channel_get_buffer_condition(
    channel : Pointer[GIOChannel]) GIOCondition;

external g_io_channel_set_flags(
    channel : Pointer[GIOChannel],
    flags : GIOFlags,
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_get_flags(
    channel : Pointer[GIOChannel]) GIOFlags;

external g_io_channel_set_line_term(
    channel : Pointer[GIOChannel],
    line_term : Pointer[CChar],
    length : Int);

external g_io_channel_get_line_term(
    channel : Pointer[GIOChannel],
    length : Pointer[Int]) Pointer[CChar];

external g_io_channel_set_buffered(
    channel : Pointer[GIOChannel],
    buffered : Int);

external g_io_channel_get_buffered(
    channel : Pointer[GIOChannel]) Int;

external g_io_channel_set_encoding(
    channel : Pointer[GIOChannel],
    encoding : Pointer[CChar],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_get_encoding(
    channel : Pointer[GIOChannel]) Pointer[CChar];

external g_io_channel_set_close_on_unref(
    channel : Pointer[GIOChannel],
    do_close : Int);

external g_io_channel_get_close_on_unref(
    channel : Pointer[GIOChannel]) Int;

external g_io_channel_flush(
    channel : Pointer[GIOChannel],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_line(
    channel : Pointer[GIOChannel],
    str_return : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    terminator_pos : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_line_string(
    channel : Pointer[GIOChannel],
    buffer : Pointer[GString],
    terminator_pos : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_to_end(
    channel : Pointer[GIOChannel],
    str_return : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_chars(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CULong,
    bytes_read : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_read_unichar(
    channel : Pointer[GIOChannel],
    thechar : Pointer[UInt],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_write_chars(
    channel : Pointer[GIOChannel],
    buf : Pointer[CChar],
    count : CLong,
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_write_unichar(
    channel : Pointer[GIOChannel],
    thechar : UInt,
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_seek_position(
    channel : Pointer[GIOChannel],
    offset : CLong,
    type : GSeekType,
    error : Pointer[Pointer[GError]]) GIOStatus;

external g_io_channel_new_file(
    filename : Pointer[CChar],
    mode : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GIOChannel];

external g_io_channel_error_quark() UInt;

external g_io_channel_error_from_errno(
    en : Int) GIOChannelError;

external g_io_channel_unix_new(
    fd : Int) Pointer[GIOChannel];

external g_io_channel_unix_get_fd(
    channel : Pointer[GIOChannel]) Int;

external g_io_watch_funcs : GSourceFuncs;

alias G_APP_INFO_CREATE_NONE = 0;
alias G_APP_INFO_CREATE_NEEDS_TERMINAL = 1;
alias G_APP_INFO_CREATE_SUPPORTS_URIS = 2;
alias G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4;

alias GAppInfoCreateFlags = Int;

alias G_CONVERTER_NO_FLAGS = 0;
alias G_CONVERTER_INPUT_AT_END = 1;
alias G_CONVERTER_FLUSH = 2;

alias GConverterFlags = Int;

alias G_CONVERTER_ERROR = 0;
alias G_CONVERTER_CONVERTED = 1;
alias G_CONVERTER_FINISHED = 2;
alias G_CONVERTER_FLUSHED = 3;

alias GConverterResult = Int;

alias G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0;
alias G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1;
alias G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2;

alias GDataStreamByteOrder = Int;

alias G_DATA_STREAM_NEWLINE_TYPE_LF = 0;
alias G_DATA_STREAM_NEWLINE_TYPE_CR = 1;
alias G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2;
alias G_DATA_STREAM_NEWLINE_TYPE_ANY = 3;

alias GDataStreamNewlineType = Int;

alias G_FILE_ATTRIBUTE_TYPE_INVALID = 0;
alias G_FILE_ATTRIBUTE_TYPE_STRING = 1;
alias G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2;
alias G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3;
alias G_FILE_ATTRIBUTE_TYPE_UINT32 = 4;
alias G_FILE_ATTRIBUTE_TYPE_INT32 = 5;
alias G_FILE_ATTRIBUTE_TYPE_UINT64 = 6;
alias G_FILE_ATTRIBUTE_TYPE_INT64 = 7;
alias G_FILE_ATTRIBUTE_TYPE_OBJECT = 8;
alias G_FILE_ATTRIBUTE_TYPE_STRINGV = 9;

alias GFileAttributeType = Int;

alias G_FILE_ATTRIBUTE_INFO_NONE = 0;
alias G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1;
alias G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2;

alias GFileAttributeInfoFlags = Int;

alias G_FILE_ATTRIBUTE_STATUS_UNSET = 0;
alias G_FILE_ATTRIBUTE_STATUS_SET = 1;
alias G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2;

alias GFileAttributeStatus = Int;

alias G_FILE_QUERY_INFO_NONE = 0;
alias G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1;

alias GFileQueryInfoFlags = Int;

alias G_FILE_CREATE_NONE = 0;
alias G_FILE_CREATE_PRIVATE = 1;
alias G_FILE_CREATE_REPLACE_DESTINATION = 2;

alias GFileCreateFlags = Int;

alias G_MOUNT_MOUNT_NONE = 0;

alias GMountMountFlags = Int;

alias G_MOUNT_UNMOUNT_NONE = 0;
alias G_MOUNT_UNMOUNT_FORCE = 1;

alias GMountUnmountFlags = Int;

alias G_DRIVE_START_NONE = 0;

alias GDriveStartFlags = Int;

alias G_DRIVE_START_STOP_TYPE_UNKNOWN = 0;
alias G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1;
alias G_DRIVE_START_STOP_TYPE_NETWORK = 2;
alias G_DRIVE_START_STOP_TYPE_MULTIDISK = 3;
alias G_DRIVE_START_STOP_TYPE_PASSWORD = 4;

alias GDriveStartStopType = Int;

alias G_FILE_COPY_NONE = 0;
alias G_FILE_COPY_OVERWRITE = 1;
alias G_FILE_COPY_BACKUP = 2;
alias G_FILE_COPY_NOFOLLOW_SYMLINKS = 4;
alias G_FILE_COPY_ALL_METADATA = 8;
alias G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16;
alias G_FILE_COPY_TARGET_DEFAULT_PERMS = 32;

alias GFileCopyFlags = Int;

alias G_FILE_MONITOR_NONE = 0;
alias G_FILE_MONITOR_WATCH_MOUNTS = 1;
alias G_FILE_MONITOR_SEND_MOVED = 2;

alias GFileMonitorFlags = Int;

alias G_FILE_TYPE_UNKNOWN = 0;
alias G_FILE_TYPE_REGULAR = 1;
alias G_FILE_TYPE_DIRECTORY = 2;
alias G_FILE_TYPE_SYMBOLIC_LINK = 3;
alias G_FILE_TYPE_SPECIAL = 4;
alias G_FILE_TYPE_SHORTCUT = 5;
alias G_FILE_TYPE_MOUNTABLE = 6;

alias GFileType = Int;

alias G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0;
alias G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1;
alias G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2;

alias GFilesystemPreviewType = Int;

alias G_FILE_MONITOR_EVENT_CHANGED = 0;
alias G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1;
alias G_FILE_MONITOR_EVENT_DELETED = 2;
alias G_FILE_MONITOR_EVENT_CREATED = 3;
alias G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4;
alias G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5;
alias G_FILE_MONITOR_EVENT_UNMOUNTED = 6;
alias G_FILE_MONITOR_EVENT_MOVED = 7;

alias GFileMonitorEvent = Int;

alias G_IO_ERROR_FAILED = 0;
alias G_IO_ERROR_NOT_FOUND = 1;
alias G_IO_ERROR_EXISTS = 2;
alias G_IO_ERROR_IS_DIRECTORY = 3;
alias G_IO_ERROR_NOT_DIRECTORY = 4;
alias G_IO_ERROR_NOT_EMPTY = 5;
alias G_IO_ERROR_NOT_REGULAR_FILE = 6;
alias G_IO_ERROR_NOT_SYMBOLIC_LINK = 7;
alias G_IO_ERROR_NOT_MOUNTABLE_FILE = 8;
alias G_IO_ERROR_FILENAME_TOO_LONG = 9;
alias G_IO_ERROR_INVALID_FILENAME = 10;
alias G_IO_ERROR_TOO_MANY_LINKS = 11;
alias G_IO_ERROR_NO_SPACE = 12;
alias G_IO_ERROR_INVALID_ARGUMENT = 13;
alias G_IO_ERROR_PERMISSION_DENIED = 14;
alias G_IO_ERROR_NOT_SUPPORTED = 15;
alias G_IO_ERROR_NOT_MOUNTED = 16;
alias G_IO_ERROR_ALREADY_MOUNTED = 17;
alias G_IO_ERROR_CLOSED = 18;
alias G_IO_ERROR_CANCELLED = 19;
alias G_IO_ERROR_PENDING = 20;
alias G_IO_ERROR_READ_ONLY = 21;
alias G_IO_ERROR_CANT_CREATE_BACKUP = 22;
alias G_IO_ERROR_WRONG_ETAG = 23;
alias G_IO_ERROR_TIMED_OUT = 24;
alias G_IO_ERROR_WOULD_RECURSE = 25;
alias G_IO_ERROR_BUSY = 26;
alias G_IO_ERROR_WOULD_BLOCK = 27;
alias G_IO_ERROR_HOST_NOT_FOUND = 28;
alias G_IO_ERROR_WOULD_MERGE = 29;
alias G_IO_ERROR_FAILED_HANDLED = 30;
alias G_IO_ERROR_TOO_MANY_OPEN_FILES = 31;
alias G_IO_ERROR_NOT_INITIALIZED = 32;
alias G_IO_ERROR_ADDRESS_IN_USE = 33;
alias G_IO_ERROR_PARTIAL_INPUT = 34;
alias G_IO_ERROR_INVALID_DATA = 35;
alias G_IO_ERROR_DBUS_ERROR = 36;
alias G_IO_ERROR_HOST_UNREACHABLE = 37;
alias G_IO_ERROR_NETWORK_UNREACHABLE = 38;
alias G_IO_ERROR_CONNECTION_REFUSED = 39;
alias G_IO_ERROR_PROXY_FAILED = 40;
alias G_IO_ERROR_PROXY_AUTH_FAILED = 41;
alias G_IO_ERROR_PROXY_NEED_AUTH = 42;
alias G_IO_ERROR_PROXY_NOT_ALLOWED = 43;

alias GIOErrorEnum = Int;

alias G_ASK_PASSWORD_NEED_PASSWORD = 1;
alias G_ASK_PASSWORD_NEED_USERNAME = 2;
alias G_ASK_PASSWORD_NEED_DOMAIN = 4;
alias G_ASK_PASSWORD_SAVING_SUPPORTED = 8;
alias G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16;

alias GAskPasswordFlags = Int;

alias G_PASSWORD_SAVE_NEVER = 0;
alias G_PASSWORD_SAVE_FOR_SESSION = 1;
alias G_PASSWORD_SAVE_PERMANENTLY = 2;

alias GPasswordSave = Int;

alias G_MOUNT_OPERATION_HANDLED = 0;
alias G_MOUNT_OPERATION_ABORTED = 1;
alias G_MOUNT_OPERATION_UNHANDLED = 2;

alias GMountOperationResult = Int;

alias G_OUTPUT_STREAM_SPLICE_NONE = 0;
alias G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1;
alias G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2;

alias GOutputStreamSpliceFlags = Int;

alias G_EMBLEM_ORIGIN_UNKNOWN = 0;
alias G_EMBLEM_ORIGIN_DEVICE = 1;
alias G_EMBLEM_ORIGIN_LIVEMETADATA = 2;
alias G_EMBLEM_ORIGIN_TAG = 3;

alias GEmblemOrigin = Int;

alias G_RESOLVER_ERROR_NOT_FOUND = 0;
alias G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1;
alias G_RESOLVER_ERROR_INTERNAL = 2;

alias GResolverError = Int;

alias G_SOCKET_FAMILY_INVALID = 0;
alias G_SOCKET_FAMILY_UNIX = 1;
alias G_SOCKET_FAMILY_IPV4 = 2;
alias G_SOCKET_FAMILY_IPV6 = 10;

alias GSocketFamily = Int;

alias G_SOCKET_TYPE_INVALID = 0;
alias G_SOCKET_TYPE_STREAM = 1;
alias G_SOCKET_TYPE_DATAGRAM = 2;
alias G_SOCKET_TYPE_SEQPACKET = 3;

alias GSocketType = Int;

alias G_SOCKET_MSG_NONE = 0;
alias G_SOCKET_MSG_OOB = 1;
alias G_SOCKET_MSG_PEEK = 2;
alias G_SOCKET_MSG_DONTROUTE = 4;

alias GSocketMsgFlags = Int;

alias G_SOCKET_PROTOCOL_UNKNOWN = 4294967295;
alias G_SOCKET_PROTOCOL_DEFAULT = 0;
alias G_SOCKET_PROTOCOL_TCP = 6;
alias G_SOCKET_PROTOCOL_UDP = 17;
alias G_SOCKET_PROTOCOL_SCTP = 132;

alias GSocketProtocol = Int;

alias G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0;
alias G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1;
alias G_ZLIB_COMPRESSOR_FORMAT_RAW = 2;

alias GZlibCompressorFormat = Int;

alias G_UNIX_SOCKET_ADDRESS_INVALID = 0;
alias G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1;
alias G_UNIX_SOCKET_ADDRESS_PATH = 2;
alias G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3;
alias G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4;

alias GUnixSocketAddressType = Int;

alias G_BUS_TYPE_STARTER = 4294967295;
alias G_BUS_TYPE_NONE = 0;
alias G_BUS_TYPE_SYSTEM = 1;
alias G_BUS_TYPE_SESSION = 2;

alias GBusType = Int;

alias G_BUS_NAME_OWNER_FLAGS_NONE = 0;
alias G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1;
alias G_BUS_NAME_OWNER_FLAGS_REPLACE = 2;

alias GBusNameOwnerFlags = Int;

alias G_BUS_NAME_WATCHER_FLAGS_NONE = 0;
alias G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1;

alias GBusNameWatcherFlags = Int;

alias G_DBUS_PROXY_FLAGS_NONE = 0;
alias G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1;
alias G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2;
alias G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4;

alias GDBusProxyFlags = Int;

alias G_DBUS_ERROR_FAILED = 0;
alias G_DBUS_ERROR_NO_MEMORY = 1;
alias G_DBUS_ERROR_SERVICE_UNKNOWN = 2;
alias G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3;
alias G_DBUS_ERROR_NO_REPLY = 4;
alias G_DBUS_ERROR_IO_ERROR = 5;
alias G_DBUS_ERROR_BAD_ADDRESS = 6;
alias G_DBUS_ERROR_NOT_SUPPORTED = 7;
alias G_DBUS_ERROR_LIMITS_EXCEEDED = 8;
alias G_DBUS_ERROR_ACCESS_DENIED = 9;
alias G_DBUS_ERROR_AUTH_FAILED = 10;
alias G_DBUS_ERROR_NO_SERVER = 11;
alias G_DBUS_ERROR_TIMEOUT = 12;
alias G_DBUS_ERROR_NO_NETWORK = 13;
alias G_DBUS_ERROR_ADDRESS_IN_USE = 14;
alias G_DBUS_ERROR_DISCONNECTED = 15;
alias G_DBUS_ERROR_INVALID_ARGS = 16;
alias G_DBUS_ERROR_FILE_NOT_FOUND = 17;
alias G_DBUS_ERROR_FILE_EXISTS = 18;
alias G_DBUS_ERROR_UNKNOWN_METHOD = 19;
alias G_DBUS_ERROR_TIMED_OUT = 20;
alias G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21;
alias G_DBUS_ERROR_MATCH_RULE_INVALID = 22;
alias G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23;
alias G_DBUS_ERROR_SPAWN_FORK_FAILED = 24;
alias G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25;
alias G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26;
alias G_DBUS_ERROR_SPAWN_FAILED = 27;
alias G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28;
alias G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29;
alias G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30;
alias G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31;
alias G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32;
alias G_DBUS_ERROR_SPAWN_FILE_INVALID = 33;
alias G_DBUS_ERROR_SPAWN_NO_MEMORY = 34;
alias G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35;
alias G_DBUS_ERROR_INVALID_SIGNATURE = 36;
alias G_DBUS_ERROR_INVALID_FILE_CONTENT = 37;
alias G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38;
alias G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39;
alias G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40;

alias GDBusError = Int;

alias G_DBUS_CONNECTION_FLAGS_NONE = 0;
alias G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1;
alias G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2;
alias G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4;
alias G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8;
alias G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16;

alias GDBusConnectionFlags = Int;

alias G_DBUS_CAPABILITY_FLAGS_NONE = 0;
alias G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1;

alias GDBusCapabilityFlags = Int;

alias G_DBUS_CALL_FLAGS_NONE = 0;
alias G_DBUS_CALL_FLAGS_NO_AUTO_START = 1;

alias GDBusCallFlags = Int;

alias G_DBUS_MESSAGE_TYPE_INVALID = 0;
alias G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1;
alias G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2;
alias G_DBUS_MESSAGE_TYPE_ERROR = 3;
alias G_DBUS_MESSAGE_TYPE_SIGNAL = 4;

alias GDBusMessageType = Int;

alias G_DBUS_MESSAGE_FLAGS_NONE = 0;
alias G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1;
alias G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2;

alias GDBusMessageFlags = Int;

alias G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0;
alias G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1;
alias G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2;
alias G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3;
alias G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4;
alias G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5;
alias G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6;
alias G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7;
alias G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8;
alias G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9;

alias GDBusMessageHeaderField = Int;

alias G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0;
alias G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1;
alias G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2;

alias GDBusPropertyInfoFlags = Int;

alias G_DBUS_SUBTREE_FLAGS_NONE = 0;
alias G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1;

alias GDBusSubtreeFlags = Int;

alias G_DBUS_SERVER_FLAGS_NONE = 0;
alias G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1;
alias G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2;

alias GDBusServerFlags = Int;

alias G_DBUS_SIGNAL_FLAGS_NONE = 0;

alias GDBusSignalFlags = Int;

alias G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0;
alias G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1;

alias GDBusSendMessageFlags = Int;

alias G_CREDENTIALS_TYPE_INVALID = 0;
alias G_CREDENTIALS_TYPE_LINUX_UCRED = 1;
alias G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2;

alias GCredentialsType = Int;

alias G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66;
alias G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108;

alias GDBusMessageByteOrder = Int;

alias GAppLaunchContext = Struct__GAppLaunchContext;

alias GAppInfo = Opaque;

alias GAsyncResult = Opaque;

alias GAsyncInitable = Opaque;

alias GBufferedInputStream = Struct__GBufferedInputStream;

alias GBufferedOutputStream = Struct__GBufferedOutputStream;

alias GCancellable = Struct__GCancellable;

alias GCharsetConverter = Opaque;

alias GConverter = Opaque;

alias GConverterInputStream = Struct__GConverterInputStream;

alias GConverterOutputStream = Struct__GConverterOutputStream;

alias GDataInputStream = Struct__GDataInputStream;

alias GSimplePermission = Opaque;

alias GZlibCompressor = Opaque;

alias GZlibDecompressor = Opaque;

alias GSettingsBackend = Opaque;

alias GSettings = Struct__GSettings;

alias GPermission = Struct__GPermission;

alias GDrive = Opaque;

alias GFileEnumerator = Struct__GFileEnumerator;

alias GFileMonitor = Struct__GFileMonitor;

alias GFilterInputStream = Struct__GFilterInputStream;

alias GFilterOutputStream = Struct__GFilterOutputStream;

alias GFile = Opaque;

alias GFileInfo = Opaque;

alias GFileAttributeMatcher = Opaque;

alias GFileAttributeInfo = Struct__GFileAttributeInfo;

alias GFileAttributeInfoList = Struct__GFileAttributeInfoList;

alias GFileDescriptorBased = Opaque;

alias GFileInputStream = Struct__GFileInputStream;

alias GFileOutputStream = Struct__GFileOutputStream;

alias GFileIOStream = Struct__GFileIOStream;

alias GFileIcon = Opaque;

alias GFilenameCompleter = Opaque;

alias GIcon = Opaque;

alias GInetAddress = Struct__GInetAddress;

alias GInetSocketAddress = Struct__GInetSocketAddress;

alias GInputStream = Struct__GInputStream;

alias GInitable = Opaque;

alias GIOModule = Opaque;

alias GIOExtensionPoint = Opaque;

alias GIOExtension = Opaque;

alias GIOSchedulerJob = Opaque;

alias GLoadableIcon = Opaque;

alias GMemoryInputStream = Struct__GMemoryInputStream;

alias GMemoryOutputStream = Struct__GMemoryOutputStream;

alias GMount = Opaque;

alias GMountOperation = Struct__GMountOperation;

alias GNetworkAddress = Struct__GNetworkAddress;

alias GNetworkService = Struct__GNetworkService;

alias GOutputStream = Struct__GOutputStream;

alias GIOStream = Struct__GIOStream;

alias GResolver = Struct__GResolver;

alias GSeekable = Opaque;

alias GSimpleAsyncResult = Opaque;

alias GSocket = Struct__GSocket;

alias GSocketControlMessage = Struct__GSocketControlMessage;

alias GSocketClient = Struct__GSocketClient;

alias GSocketConnection = Struct__GSocketConnection;

alias GSocketListener = Struct__GSocketListener;

alias GSocketService = Struct__GSocketService;

alias GSocketAddress = Struct__GSocketAddress;

alias GSocketAddressEnumerator = Struct__GSocketAddressEnumerator;

alias GSocketConnectable = Opaque;

alias GSrvTarget = Opaque;

alias GTcpConnection = Struct__GTcpConnection;

alias GThreadedSocketService = Struct__GThreadedSocketService;

alias GThemedIcon = Opaque;

alias GVfs = Struct__GVfs;

alias GProxyResolver = Opaque;

alias GProxy = Opaque;

alias GProxyAddress = Struct__GProxyAddress;

alias GProxyAddressEnumerator = Struct__GProxyAddressEnumerator;

alias GVolume = Opaque;

alias GVolumeMonitor = Struct__GVolumeMonitor;

alias GAsyncReadyCallback = CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()];

alias GFileProgressCallback = CCodePointer[(CLong,CLong,RawPointer),()];

alias GFileReadMoreCallback = CCodePointer[(Pointer[CChar],CLong,RawPointer),(Int)];

alias GIOSchedulerJobFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],RawPointer),(Int)];

alias GSimpleAsyncThreadFunc = CCodePointer[(OpaquePointer,Pointer[Struct__GObject],Pointer[Struct__GCancellable]),()];

alias GSocketSourceFunc = CCodePointer[(Pointer[Struct__GSocket],Int,RawPointer),(Int)];

alias GInputVector = Struct__GInputVector;

record Struct__GInputVector (
    buffer : gpointer,
    size : CULong,
);

alias GOutputVector = Struct__GOutputVector;

record Struct__GOutputVector (
    buffer : gconstpointer,
    size : CULong,
);

alias GCredentials = Opaque;

alias GUnixCredentialsMessage = Opaque;

alias GUnixFDList = Opaque;

alias GDBusMessage = Opaque;

alias GDBusConnection = Opaque;

alias GDBusProxy = Struct__GDBusProxy;

alias GDBusMethodInvocation = Opaque;

alias GDBusServer = Opaque;

alias GDBusAuthObserver = Opaque;

alias GDBusErrorEntry = Struct__GDBusErrorEntry;

alias GDBusInterfaceVTable = Struct__GDBusInterfaceVTable;

alias GDBusSubtreeVTable = Struct__GDBusSubtreeVTable;

alias GDBusAnnotationInfo = Struct__GDBusAnnotationInfo;

alias GDBusArgInfo = Struct__GDBusArgInfo;

alias GDBusMethodInfo = Struct__GDBusMethodInfo;

alias GDBusSignalInfo = Struct__GDBusSignalInfo;

alias GDBusPropertyInfo = Struct__GDBusPropertyInfo;

alias GDBusInterfaceInfo = Struct__GDBusInterfaceInfo;

alias GDBusNodeInfo = Struct__GDBusNodeInfo;

alias GAppLaunchContextClass = Struct__GAppLaunchContextClass;

alias GAppLaunchContextPrivate = Opaque;

alias GAppInfoIface = Struct__GAppInfoIface;

record Struct__GAppInfoIface (
    g_iface : GTypeInterface,
    dup : CCodePointer[(OpaquePointer),(OpaquePointer)],
    equal : CCodePointer[(OpaquePointer,OpaquePointer),(Int)],
    get_id : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_description : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_executable : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_icon : CCodePointer[(OpaquePointer),(OpaquePointer)],
    launch : CCodePointer[(OpaquePointer,Pointer[Struct__GList],Pointer[Struct__GAppLaunchContext],Pointer[Pointer[Struct__GError]]),(Int)],
    supports_uris : CCodePointer[(OpaquePointer),(Int)],
    supports_files : CCodePointer[(OpaquePointer),(Int)],
    launch_uris : CCodePointer[(OpaquePointer,Pointer[Struct__GList],Pointer[Struct__GAppLaunchContext],Pointer[Pointer[Struct__GError]]),(Int)],
    should_show : CCodePointer[(OpaquePointer),(Int)],
    set_as_default_for_type : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(Int)],
    set_as_default_for_extension : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(Int)],
    add_supports_type : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(Int)],
    can_remove_supports_type : CCodePointer[(OpaquePointer),(Int)],
    remove_supports_type : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(Int)],
    can_delete : CCodePointer[(OpaquePointer),(Int)],
    do_delete : CCodePointer[(OpaquePointer),(Int)],
    get_commandline : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_display_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
);

external g_app_info_get_type() CULong;

external g_app_info_create_from_commandline(
    commandline : Pointer[CChar],
    application_name : Pointer[CChar],
    flags : GAppInfoCreateFlags,
    error : Pointer[Pointer[GError]]) Pointer[GAppInfo];

external g_app_info_dup(
    appinfo : Pointer[GAppInfo]) Pointer[GAppInfo];

external g_app_info_equal(
    appinfo1 : Pointer[GAppInfo],
    appinfo2 : Pointer[GAppInfo]) Int;

external g_app_info_get_id(
    appinfo : Pointer[GAppInfo]) Pointer[CChar];

external g_app_info_get_name(
    appinfo : Pointer[GAppInfo]) Pointer[CChar];

external g_app_info_get_display_name(
    appinfo : Pointer[GAppInfo]) Pointer[CChar];

external g_app_info_get_description(
    appinfo : Pointer[GAppInfo]) Pointer[CChar];

external g_app_info_get_executable(
    appinfo : Pointer[GAppInfo]) Pointer[CChar];

external g_app_info_get_commandline(
    appinfo : Pointer[GAppInfo]) Pointer[CChar];

external g_app_info_get_icon(
    appinfo : Pointer[GAppInfo]) Pointer[GIcon];

external g_app_info_launch(
    appinfo : Pointer[GAppInfo],
    files : Pointer[GList],
    launch_context : Pointer[GAppLaunchContext],
    error : Pointer[Pointer[GError]]) Int;

external g_app_info_supports_uris(
    appinfo : Pointer[GAppInfo]) Int;

external g_app_info_supports_files(
    appinfo : Pointer[GAppInfo]) Int;

external g_app_info_launch_uris(
    appinfo : Pointer[GAppInfo],
    uris : Pointer[GList],
    launch_context : Pointer[GAppLaunchContext],
    error : Pointer[Pointer[GError]]) Int;

external g_app_info_should_show(
    appinfo : Pointer[GAppInfo]) Int;

external g_app_info_set_as_default_for_type(
    appinfo : Pointer[GAppInfo],
    content_type : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_app_info_set_as_default_for_extension(
    appinfo : Pointer[GAppInfo],
    extension : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_app_info_add_supports_type(
    appinfo : Pointer[GAppInfo],
    content_type : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_app_info_can_remove_supports_type(
    appinfo : Pointer[GAppInfo]) Int;

external g_app_info_remove_supports_type(
    appinfo : Pointer[GAppInfo],
    content_type : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_app_info_can_delete(
    appinfo : Pointer[GAppInfo]) Int;

external g_app_info_delete(
    appinfo : Pointer[GAppInfo]) Int;

external g_app_info_get_all() Pointer[GList];

external g_app_info_get_all_for_type(
    content_type : Pointer[CChar]) Pointer[GList];

external g_app_info_reset_type_associations(
    content_type : Pointer[CChar]);

external g_app_info_get_default_for_type(
    content_type : Pointer[CChar],
    must_support_uris : Int) Pointer[GAppInfo];

external g_app_info_get_default_for_uri_scheme(
    uri_scheme : Pointer[CChar]) Pointer[GAppInfo];

external g_app_info_launch_default_for_uri(
    uri : Pointer[CChar],
    launch_context : Pointer[GAppLaunchContext],
    error : Pointer[Pointer[GError]]) Int;

record Struct__GAppLaunchContext (
    parent_instance : GObject,
    priv : Pointer[GAppLaunchContextPrivate],
);

record Struct__GAppLaunchContextClass (
    parent_class : GObjectClass,
    get_display : CCodePointer[(Pointer[Struct__GAppLaunchContext],OpaquePointer,Pointer[Struct__GList]),(Pointer[CChar])],
    get_startup_notify_id : CCodePointer[(Pointer[Struct__GAppLaunchContext],OpaquePointer,Pointer[Struct__GList]),(Pointer[CChar])],
    launch_failed : CCodePointer[(Pointer[Struct__GAppLaunchContext],Pointer[CChar]),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_app_launch_context_get_type() CULong;

external g_app_launch_context_new() Pointer[GAppLaunchContext];

external g_app_launch_context_get_display(
    context : Pointer[GAppLaunchContext],
    info : Pointer[GAppInfo],
    files : Pointer[GList]) Pointer[CChar];

external g_app_launch_context_get_startup_notify_id(
    context : Pointer[GAppLaunchContext],
    info : Pointer[GAppInfo],
    files : Pointer[GList]) Pointer[CChar];

external g_app_launch_context_launch_failed(
    context : Pointer[GAppLaunchContext],
    startup_notify_id : Pointer[CChar]);

alias GInitableIface = Struct__GInitableIface;

record Struct__GInitableIface (
    g_iface : GTypeInterface,
    init : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_initable_get_type() CULong;

external g_initable_init(
    initable : Pointer[GInitable],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_initable_new(
    object_type : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]],
    first_property_name : Pointer[CChar],
    ...) gpointer;

external g_initable_newv(
    object_type : CULong,
    n_parameters : UInt,
    parameters : Pointer[GParameter],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) gpointer;

external g_initable_new_valist(
    object_type : CULong,
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GObject];

alias GAsyncInitableIface = Struct__GAsyncInitableIface;

record Struct__GAsyncInitableIface (
    g_iface : GTypeInterface,
    init_async : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    init_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_async_initable_get_type() CULong;

external g_async_initable_init_async(
    initable : Pointer[GAsyncInitable],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_async_initable_init_finish(
    initable : Pointer[GAsyncInitable],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_async_initable_new_async(
    object_type : CULong,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer,
    first_property_name : Pointer[CChar],
    ...);

external g_async_initable_newv_async(
    object_type : CULong,
    n_parameters : UInt,
    parameters : Pointer[GParameter],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_async_initable_new_valist_async(
    object_type : CULong,
    first_property_name : Pointer[CChar],
    var_args : Pointer[__va_list_tag],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_async_initable_new_finish(
    initable : Pointer[GAsyncInitable],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GObject];

alias GAsyncResultIface = Struct__GAsyncResultIface;

record Struct__GAsyncResultIface (
    g_iface : GTypeInterface,
    get_user_data : CCodePointer[(OpaquePointer),(RawPointer)],
    get_source_object : CCodePointer[(OpaquePointer),(Pointer[Struct__GObject])],
);

external g_async_result_get_type() CULong;

external g_async_result_get_user_data(
    res : Pointer[GAsyncResult]) gpointer;

external g_async_result_get_source_object(
    res : Pointer[GAsyncResult]) Pointer[GObject];

alias GInputStreamClass = Struct__GInputStreamClass;

alias GInputStreamPrivate = Opaque;

record Struct__GInputStream (
    parent_instance : GObject,
    priv : Pointer[GInputStreamPrivate],
);

record Struct__GInputStreamClass (
    parent_class : GObjectClass,
    read_fn : CCodePointer[(Pointer[Struct__GInputStream],RawPointer,CULong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(CLong)],
    skip : CCodePointer[(Pointer[Struct__GInputStream],CULong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(CLong)],
    close_fn : CCodePointer[(Pointer[Struct__GInputStream],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    read_async : CCodePointer[(Pointer[Struct__GInputStream],RawPointer,CULong,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    read_finish : CCodePointer[(Pointer[Struct__GInputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(CLong)],
    skip_async : CCodePointer[(Pointer[Struct__GInputStream],CULong,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    skip_finish : CCodePointer[(Pointer[Struct__GInputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(CLong)],
    close_async : CCodePointer[(Pointer[Struct__GInputStream],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    close_finish : CCodePointer[(Pointer[Struct__GInputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_input_stream_get_type() CULong;

external g_input_stream_read(
    stream : Pointer[GInputStream],
    buffer : RawPointer,
    count : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_input_stream_read_all(
    stream : Pointer[GInputStream],
    buffer : RawPointer,
    count : CULong,
    bytes_read : Pointer[CULong],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_input_stream_skip(
    stream : Pointer[GInputStream],
    count : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_input_stream_close(
    stream : Pointer[GInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_input_stream_read_async(
    stream : Pointer[GInputStream],
    buffer : RawPointer,
    count : CULong,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_input_stream_read_finish(
    stream : Pointer[GInputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) CLong;

external g_input_stream_skip_async(
    stream : Pointer[GInputStream],
    count : CULong,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_input_stream_skip_finish(
    stream : Pointer[GInputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) CLong;

external g_input_stream_close_async(
    stream : Pointer[GInputStream],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_input_stream_close_finish(
    stream : Pointer[GInputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_input_stream_is_closed(
    stream : Pointer[GInputStream]) Int;

external g_input_stream_has_pending(
    stream : Pointer[GInputStream]) Int;

external g_input_stream_set_pending(
    stream : Pointer[GInputStream],
    error : Pointer[Pointer[GError]]) Int;

external g_input_stream_clear_pending(
    stream : Pointer[GInputStream]);

alias GFilterInputStreamClass = Struct__GFilterInputStreamClass;

record Struct__GFilterInputStream (
    parent_instance : GInputStream,
    base_stream : Pointer[GInputStream],
);

record Struct__GFilterInputStreamClass (
    parent_class : GInputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
);

external g_filter_input_stream_get_type() CULong;

external g_filter_input_stream_get_base_stream(
    stream : Pointer[GFilterInputStream]) Pointer[GInputStream];

external g_filter_input_stream_get_close_base_stream(
    stream : Pointer[GFilterInputStream]) Int;

external g_filter_input_stream_set_close_base_stream(
    stream : Pointer[GFilterInputStream],
    close_base : Int);

alias GBufferedInputStreamClass = Struct__GBufferedInputStreamClass;

alias GBufferedInputStreamPrivate = Opaque;

record Struct__GBufferedInputStream (
    parent_instance : GFilterInputStream,
    priv : Pointer[GBufferedInputStreamPrivate],
);

record Struct__GBufferedInputStreamClass (
    parent_class : GFilterInputStreamClass,
    fill : CCodePointer[(Pointer[Struct__GBufferedInputStream],CLong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(CLong)],
    fill_async : CCodePointer[(Pointer[Struct__GBufferedInputStream],CLong,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    fill_finish : CCodePointer[(Pointer[Struct__GBufferedInputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(CLong)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_buffered_input_stream_get_type() CULong;

external g_buffered_input_stream_new(
    base_stream : Pointer[GInputStream]) Pointer[GInputStream];

external g_buffered_input_stream_new_sized(
    base_stream : Pointer[GInputStream],
    size : CULong) Pointer[GInputStream];

external g_buffered_input_stream_get_buffer_size(
    stream : Pointer[GBufferedInputStream]) CULong;

external g_buffered_input_stream_set_buffer_size(
    stream : Pointer[GBufferedInputStream],
    size : CULong);

external g_buffered_input_stream_get_available(
    stream : Pointer[GBufferedInputStream]) CULong;

external g_buffered_input_stream_peek(
    stream : Pointer[GBufferedInputStream],
    buffer : RawPointer,
    offset : CULong,
    count : CULong) CULong;

external g_buffered_input_stream_peek_buffer(
    stream : Pointer[GBufferedInputStream],
    count : Pointer[CULong]) RawPointer;

external g_buffered_input_stream_fill(
    stream : Pointer[GBufferedInputStream],
    count : CLong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_buffered_input_stream_fill_async(
    stream : Pointer[GBufferedInputStream],
    count : CLong,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_buffered_input_stream_fill_finish(
    stream : Pointer[GBufferedInputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) CLong;

external g_buffered_input_stream_read_byte(
    stream : Pointer[GBufferedInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

alias GOutputStreamClass = Struct__GOutputStreamClass;

alias GOutputStreamPrivate = Opaque;

record Struct__GOutputStream (
    parent_instance : GObject,
    priv : Pointer[GOutputStreamPrivate],
);

record Struct__GOutputStreamClass (
    parent_class : GObjectClass,
    write_fn : CCodePointer[(Pointer[Struct__GOutputStream],RawPointer,CULong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(CLong)],
    splice : CCodePointer[(Pointer[Struct__GOutputStream],Pointer[Struct__GInputStream],Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(CLong)],
    flush : CCodePointer[(Pointer[Struct__GOutputStream],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    close_fn : CCodePointer[(Pointer[Struct__GOutputStream],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    write_async : CCodePointer[(Pointer[Struct__GOutputStream],RawPointer,CULong,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    write_finish : CCodePointer[(Pointer[Struct__GOutputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(CLong)],
    splice_async : CCodePointer[(Pointer[Struct__GOutputStream],Pointer[Struct__GInputStream],Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    splice_finish : CCodePointer[(Pointer[Struct__GOutputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(CLong)],
    flush_async : CCodePointer[(Pointer[Struct__GOutputStream],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    flush_finish : CCodePointer[(Pointer[Struct__GOutputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    close_async : CCodePointer[(Pointer[Struct__GOutputStream],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    close_finish : CCodePointer[(Pointer[Struct__GOutputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
    _g_reserved8 : CCodePointer[(),()],
);

external g_output_stream_get_type() CULong;

external g_output_stream_write(
    stream : Pointer[GOutputStream],
    buffer : RawPointer,
    count : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_output_stream_write_all(
    stream : Pointer[GOutputStream],
    buffer : RawPointer,
    count : CULong,
    bytes_written : Pointer[CULong],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_output_stream_splice(
    stream : Pointer[GOutputStream],
    source : Pointer[GInputStream],
    flags : GOutputStreamSpliceFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_output_stream_flush(
    stream : Pointer[GOutputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_output_stream_close(
    stream : Pointer[GOutputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_output_stream_write_async(
    stream : Pointer[GOutputStream],
    buffer : RawPointer,
    count : CULong,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_output_stream_write_finish(
    stream : Pointer[GOutputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) CLong;

external g_output_stream_splice_async(
    stream : Pointer[GOutputStream],
    source : Pointer[GInputStream],
    flags : GOutputStreamSpliceFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_output_stream_splice_finish(
    stream : Pointer[GOutputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) CLong;

external g_output_stream_flush_async(
    stream : Pointer[GOutputStream],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_output_stream_flush_finish(
    stream : Pointer[GOutputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_output_stream_close_async(
    stream : Pointer[GOutputStream],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_output_stream_close_finish(
    stream : Pointer[GOutputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_output_stream_is_closed(
    stream : Pointer[GOutputStream]) Int;

external g_output_stream_is_closing(
    stream : Pointer[GOutputStream]) Int;

external g_output_stream_has_pending(
    stream : Pointer[GOutputStream]) Int;

external g_output_stream_set_pending(
    stream : Pointer[GOutputStream],
    error : Pointer[Pointer[GError]]) Int;

external g_output_stream_clear_pending(
    stream : Pointer[GOutputStream]);

alias GFilterOutputStreamClass = Struct__GFilterOutputStreamClass;

record Struct__GFilterOutputStream (
    parent_instance : GOutputStream,
    base_stream : Pointer[GOutputStream],
);

record Struct__GFilterOutputStreamClass (
    parent_class : GOutputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
);

external g_filter_output_stream_get_type() CULong;

external g_filter_output_stream_get_base_stream(
    stream : Pointer[GFilterOutputStream]) Pointer[GOutputStream];

external g_filter_output_stream_get_close_base_stream(
    stream : Pointer[GFilterOutputStream]) Int;

external g_filter_output_stream_set_close_base_stream(
    stream : Pointer[GFilterOutputStream],
    close_base : Int);

alias GBufferedOutputStreamClass = Struct__GBufferedOutputStreamClass;

alias GBufferedOutputStreamPrivate = Opaque;

record Struct__GBufferedOutputStream (
    parent_instance : GFilterOutputStream,
    priv : Pointer[GBufferedOutputStreamPrivate],
);

record Struct__GBufferedOutputStreamClass (
    parent_class : GFilterOutputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
);

external g_buffered_output_stream_get_type() CULong;

external g_buffered_output_stream_new(
    base_stream : Pointer[GOutputStream]) Pointer[GOutputStream];

external g_buffered_output_stream_new_sized(
    base_stream : Pointer[GOutputStream],
    size : CULong) Pointer[GOutputStream];

external g_buffered_output_stream_get_buffer_size(
    stream : Pointer[GBufferedOutputStream]) CULong;

external g_buffered_output_stream_set_buffer_size(
    stream : Pointer[GBufferedOutputStream],
    size : CULong);

external g_buffered_output_stream_get_auto_grow(
    stream : Pointer[GBufferedOutputStream]) Int;

external g_buffered_output_stream_set_auto_grow(
    stream : Pointer[GBufferedOutputStream],
    auto_grow : Int);

alias GCancellableClass = Struct__GCancellableClass;

alias GCancellablePrivate = Opaque;

record Struct__GCancellable (
    parent_instance : GObject,
    priv : Pointer[GCancellablePrivate],
);

record Struct__GCancellableClass (
    parent_class : GObjectClass,
    cancelled : CCodePointer[(Pointer[Struct__GCancellable]),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_cancellable_get_type() CULong;

external g_cancellable_new() Pointer[GCancellable];

external g_cancellable_is_cancelled(
    cancellable : Pointer[GCancellable]) Int;

external g_cancellable_set_error_if_cancelled(
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_cancellable_get_fd(
    cancellable : Pointer[GCancellable]) Int;

external g_cancellable_make_pollfd(
    cancellable : Pointer[GCancellable],
    pollfd : Pointer[GPollFD]) Int;

external g_cancellable_release_fd(
    cancellable : Pointer[GCancellable]);

external g_cancellable_get_current() Pointer[GCancellable];

external g_cancellable_push_current(
    cancellable : Pointer[GCancellable]);

external g_cancellable_pop_current(
    cancellable : Pointer[GCancellable]);

external g_cancellable_reset(
    cancellable : Pointer[GCancellable]);

external g_cancellable_connect(
    cancellable : Pointer[GCancellable],
    callback : GCallback,
    data : gpointer,
    data_destroy_func : GDestroyNotify) CULong;

external g_cancellable_disconnect(
    cancellable : Pointer[GCancellable],
    handler_id : CULong);

external g_cancellable_cancel(
    cancellable : Pointer[GCancellable]);

alias GConverterIface = Struct__GConverterIface;

record Struct__GConverterIface (
    g_iface : GTypeInterface,
    convert : CCodePointer[(OpaquePointer,RawPointer,CULong,RawPointer,CULong,Int,Pointer[CULong],Pointer[CULong],Pointer[Pointer[Struct__GError]]),(Int)],
    reset : CCodePointer[(OpaquePointer),()],
);

external g_converter_get_type() CULong;

external g_converter_convert(
    converter : Pointer[GConverter],
    inbuf : RawPointer,
    inbuf_size : CULong,
    outbuf : RawPointer,
    outbuf_size : CULong,
    flags : GConverterFlags,
    bytes_read : Pointer[CULong],
    bytes_written : Pointer[CULong],
    error : Pointer[Pointer[GError]]) GConverterResult;

external g_converter_reset(
    converter : Pointer[GConverter]);

alias GCharsetConverterClass = Struct__GCharsetConverterClass;

record Struct__GCharsetConverterClass (
    parent_class : GObjectClass,
);

external g_charset_converter_get_type() CULong;

external g_charset_converter_new(
    to_charset : Pointer[CChar],
    from_charset : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GCharsetConverter];

external g_charset_converter_set_use_fallback(
    converter : Pointer[GCharsetConverter],
    use_fallback : Int);

external g_charset_converter_get_use_fallback(
    converter : Pointer[GCharsetConverter]) Int;

external g_charset_converter_get_num_fallbacks(
    converter : Pointer[GCharsetConverter]) UInt;

external g_content_type_equals(
    type1 : Pointer[CChar],
    type2 : Pointer[CChar]) Int;

external g_content_type_is_a(
    type : Pointer[CChar],
    supertype : Pointer[CChar]) Int;

external g_content_type_is_unknown(
    type : Pointer[CChar]) Int;

external g_content_type_get_description(
    type : Pointer[CChar]) Pointer[CChar];

external g_content_type_get_mime_type(
    type : Pointer[CChar]) Pointer[CChar];

external g_content_type_get_icon(
    type : Pointer[CChar]) Pointer[GIcon];

external g_content_type_can_be_executable(
    type : Pointer[CChar]) Int;

external g_content_type_from_mime_type(
    mime_type : Pointer[CChar]) Pointer[CChar];

external g_content_type_guess(
    filename : Pointer[CChar],
    data : Pointer[CUChar],
    data_size : CULong,
    result_uncertain : Pointer[Int]) Pointer[CChar];

external g_content_type_guess_for_tree(
    root : Pointer[GFile]) Pointer[Pointer[CChar]];

external g_content_types_get_registered() Pointer[GList];

alias GConverterInputStreamClass = Struct__GConverterInputStreamClass;

alias GConverterInputStreamPrivate = Opaque;

record Struct__GConverterInputStream (
    parent_instance : GFilterInputStream,
    priv : Pointer[GConverterInputStreamPrivate],
);

record Struct__GConverterInputStreamClass (
    parent_class : GFilterInputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_converter_input_stream_get_type() CULong;

external g_converter_input_stream_new(
    base_stream : Pointer[GInputStream],
    converter : Pointer[GConverter]) Pointer[GInputStream];

external g_converter_input_stream_get_converter(
    converter_stream : Pointer[GConverterInputStream]) Pointer[GConverter];

alias GConverterOutputStreamClass = Struct__GConverterOutputStreamClass;

alias GConverterOutputStreamPrivate = Opaque;

record Struct__GConverterOutputStream (
    parent_instance : GFilterOutputStream,
    priv : Pointer[GConverterOutputStreamPrivate],
);

record Struct__GConverterOutputStreamClass (
    parent_class : GFilterOutputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_converter_output_stream_get_type() CULong;

external g_converter_output_stream_new(
    base_stream : Pointer[GOutputStream],
    converter : Pointer[GConverter]) Pointer[GOutputStream];

external g_converter_output_stream_get_converter(
    converter_stream : Pointer[GConverterOutputStream]) Pointer[GConverter];

alias GCredentialsClass = Opaque;

external g_credentials_get_type() CULong;

external g_credentials_new() Pointer[GCredentials];

external g_credentials_to_string(
    credentials : Pointer[GCredentials]) Pointer[CChar];

external g_credentials_get_native(
    credentials : Pointer[GCredentials],
    native_type : GCredentialsType) gpointer;

external g_credentials_set_native(
    credentials : Pointer[GCredentials],
    native_type : GCredentialsType,
    native : gpointer);

external g_credentials_is_same_user(
    credentials : Pointer[GCredentials],
    other_credentials : Pointer[GCredentials],
    error : Pointer[Pointer[GError]]) Int;

external g_credentials_get_unix_user(
    credentials : Pointer[GCredentials],
    error : Pointer[Pointer[GError]]) UInt;

external g_credentials_set_unix_user(
    credentials : Pointer[GCredentials],
    uid : UInt,
    error : Pointer[Pointer[GError]]) Int;

alias GDataInputStreamClass = Struct__GDataInputStreamClass;

alias GDataInputStreamPrivate = Opaque;

record Struct__GDataInputStream (
    parent_instance : GBufferedInputStream,
    priv : Pointer[GDataInputStreamPrivate],
);

record Struct__GDataInputStreamClass (
    parent_class : GBufferedInputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_data_input_stream_get_type() CULong;

external g_data_input_stream_new(
    base_stream : Pointer[GInputStream]) Pointer[GDataInputStream];

external g_data_input_stream_set_byte_order(
    stream : Pointer[GDataInputStream],
    order : GDataStreamByteOrder);

external g_data_input_stream_get_byte_order(
    stream : Pointer[GDataInputStream]) GDataStreamByteOrder;

external g_data_input_stream_set_newline_type(
    stream : Pointer[GDataInputStream],
    type : GDataStreamNewlineType);

external g_data_input_stream_get_newline_type(
    stream : Pointer[GDataInputStream]) GDataStreamNewlineType;

external g_data_input_stream_read_byte(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CUChar;

external g_data_input_stream_read_int16(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Short;

external g_data_input_stream_read_uint16(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) UShort;

external g_data_input_stream_read_int32(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_input_stream_read_uint32(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) UInt;

external g_data_input_stream_read_int64(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_data_input_stream_read_uint64(
    stream : Pointer[GDataInputStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CULong;

external g_data_input_stream_read_line(
    stream : Pointer[GDataInputStream],
    length : Pointer[CULong],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_data_input_stream_read_line_async(
    stream : Pointer[GDataInputStream],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_data_input_stream_read_line_finish(
    stream : Pointer[GDataInputStream],
    result : Pointer[GAsyncResult],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_data_input_stream_read_until(
    stream : Pointer[GDataInputStream],
    stop_chars : Pointer[CChar],
    length : Pointer[CULong],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_data_input_stream_read_until_async(
    stream : Pointer[GDataInputStream],
    stop_chars : Pointer[CChar],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_data_input_stream_read_until_finish(
    stream : Pointer[GDataInputStream],
    result : Pointer[GAsyncResult],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_data_input_stream_read_upto(
    stream : Pointer[GDataInputStream],
    stop_chars : Pointer[CChar],
    stop_chars_len : CLong,
    length : Pointer[CULong],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_data_input_stream_read_upto_async(
    stream : Pointer[GDataInputStream],
    stop_chars : Pointer[CChar],
    stop_chars_len : CLong,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_data_input_stream_read_upto_finish(
    stream : Pointer[GDataInputStream],
    result : Pointer[GAsyncResult],
    length : Pointer[CULong],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

alias GDataOutputStream = Struct__GDataOutputStream;

alias GDataOutputStreamClass = Struct__GDataOutputStreamClass;

alias GDataOutputStreamPrivate = Opaque;

record Struct__GDataOutputStream (
    parent_instance : GFilterOutputStream,
    priv : Pointer[GDataOutputStreamPrivate],
);

record Struct__GDataOutputStreamClass (
    parent_class : GFilterOutputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_data_output_stream_get_type() CULong;

external g_data_output_stream_new(
    base_stream : Pointer[GOutputStream]) Pointer[GDataOutputStream];

external g_data_output_stream_set_byte_order(
    stream : Pointer[GDataOutputStream],
    order : GDataStreamByteOrder);

external g_data_output_stream_get_byte_order(
    stream : Pointer[GDataOutputStream]) GDataStreamByteOrder;

external g_data_output_stream_put_byte(
    stream : Pointer[GDataOutputStream],
    data : CUChar,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_int16(
    stream : Pointer[GDataOutputStream],
    data : Short,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_uint16(
    stream : Pointer[GDataOutputStream],
    data : UShort,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_int32(
    stream : Pointer[GDataOutputStream],
    data : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_uint32(
    stream : Pointer[GDataOutputStream],
    data : UInt,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_int64(
    stream : Pointer[GDataOutputStream],
    data : CLong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_uint64(
    stream : Pointer[GDataOutputStream],
    data : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_data_output_stream_put_string(
    stream : Pointer[GDataOutputStream],
    str : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_is_address(
    string : Pointer[CChar]) Int;

external g_dbus_is_supported_address(
    string : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_address_get_stream(
    address : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_address_get_stream_finish(
    res : Pointer[GAsyncResult],
    out_guid : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Pointer[GIOStream];

external g_dbus_address_get_stream_sync(
    address : Pointer[CChar],
    out_guid : Pointer[Pointer[CChar]],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GIOStream];

external g_dbus_address_get_for_bus_sync(
    bus_type : GBusType,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_dbus_auth_observer_get_type() CULong;

external g_dbus_auth_observer_new() Pointer[GDBusAuthObserver];

external g_dbus_auth_observer_authorize_authenticated_peer(
    observer : Pointer[GDBusAuthObserver],
    stream : Pointer[GIOStream],
    credentials : Pointer[GCredentials]) Int;

external g_dbus_connection_get_type() CULong;

external g_bus_get(
    bus_type : GBusType,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_bus_get_finish(
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GDBusConnection];

external g_bus_get_sync(
    bus_type : GBusType,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusConnection];

external g_dbus_connection_new(
    stream : Pointer[GIOStream],
    guid : Pointer[CChar],
    flags : GDBusConnectionFlags,
    observer : Pointer[GDBusAuthObserver],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_connection_new_finish(
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GDBusConnection];

external g_dbus_connection_new_sync(
    stream : Pointer[GIOStream],
    guid : Pointer[CChar],
    flags : GDBusConnectionFlags,
    observer : Pointer[GDBusAuthObserver],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusConnection];

external g_dbus_connection_new_for_address(
    address : Pointer[CChar],
    flags : GDBusConnectionFlags,
    observer : Pointer[GDBusAuthObserver],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_connection_new_for_address_finish(
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GDBusConnection];

external g_dbus_connection_new_for_address_sync(
    address : Pointer[CChar],
    flags : GDBusConnectionFlags,
    observer : Pointer[GDBusAuthObserver],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusConnection];

external g_dbus_connection_start_message_processing(
    connection : Pointer[GDBusConnection]);

external g_dbus_connection_is_closed(
    connection : Pointer[GDBusConnection]) Int;

external g_dbus_connection_get_stream(
    connection : Pointer[GDBusConnection]) Pointer[GIOStream];

external g_dbus_connection_get_guid(
    connection : Pointer[GDBusConnection]) Pointer[CChar];

external g_dbus_connection_get_unique_name(
    connection : Pointer[GDBusConnection]) Pointer[CChar];

external g_dbus_connection_get_peer_credentials(
    connection : Pointer[GDBusConnection]) Pointer[GCredentials];

external g_dbus_connection_get_exit_on_close(
    connection : Pointer[GDBusConnection]) Int;

external g_dbus_connection_set_exit_on_close(
    connection : Pointer[GDBusConnection],
    exit_on_close : Int);

external g_dbus_connection_get_capabilities(
    connection : Pointer[GDBusConnection]) GDBusCapabilityFlags;

external g_dbus_connection_close(
    connection : Pointer[GDBusConnection],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_connection_close_finish(
    connection : Pointer[GDBusConnection],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_connection_close_sync(
    connection : Pointer[GDBusConnection],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_connection_flush(
    connection : Pointer[GDBusConnection],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_connection_flush_finish(
    connection : Pointer[GDBusConnection],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_connection_flush_sync(
    connection : Pointer[GDBusConnection],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_connection_send_message(
    connection : Pointer[GDBusConnection],
    message : Pointer[GDBusMessage],
    flags : GDBusSendMessageFlags,
    out_serial : Pointer[UInt],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_connection_send_message_with_reply(
    connection : Pointer[GDBusConnection],
    message : Pointer[GDBusMessage],
    flags : GDBusSendMessageFlags,
    timeout_msec : Int,
    out_serial : Pointer[UInt],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_connection_send_message_with_reply_finish(
    connection : Pointer[GDBusConnection],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GDBusMessage];

external g_dbus_connection_send_message_with_reply_sync(
    connection : Pointer[GDBusConnection],
    message : Pointer[GDBusMessage],
    flags : GDBusSendMessageFlags,
    timeout_msec : Int,
    out_serial : Pointer[UInt],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusMessage];

external g_dbus_connection_emit_signal(
    connection : Pointer[GDBusConnection],
    destination_bus_name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    signal_name : Pointer[CChar],
    parameters : Pointer[GVariant],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_connection_call(
    connection : Pointer[GDBusConnection],
    bus_name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    method_name : Pointer[CChar],
    parameters : Pointer[GVariant],
    reply_type : Pointer[GVariantType],
    flags : GDBusCallFlags,
    timeout_msec : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_connection_call_finish(
    connection : Pointer[GDBusConnection],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GVariant];

external g_dbus_connection_call_sync(
    connection : Pointer[GDBusConnection],
    bus_name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    method_name : Pointer[CChar],
    parameters : Pointer[GVariant],
    reply_type : Pointer[GVariantType],
    flags : GDBusCallFlags,
    timeout_msec : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GVariant];

alias GDBusInterfaceMethodCallFunc = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[CChar],OpaquePointer,OpaquePointer,RawPointer),()];

alias GDBusInterfaceGetPropertyFunc = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[Pointer[Struct__GError]],RawPointer),(OpaquePointer)];

alias GDBusInterfaceSetPropertyFunc = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[CChar],OpaquePointer,Pointer[Pointer[Struct__GError]],RawPointer),(Int)];

record Struct__GDBusInterfaceVTable (
    method_call : GDBusInterfaceMethodCallFunc,
    get_property : GDBusInterfaceGetPropertyFunc,
    set_property : GDBusInterfaceSetPropertyFunc,
    padding : Array[gpointer,8],
);

external g_dbus_connection_register_object(
    connection : Pointer[GDBusConnection],
    object_path : Pointer[CChar],
    interface_info : Pointer[GDBusInterfaceInfo],
    vtable : Pointer[GDBusInterfaceVTable],
    user_data : gpointer,
    user_data_free_func : GDestroyNotify,
    error : Pointer[Pointer[GError]]) UInt;

external g_dbus_connection_unregister_object(
    connection : Pointer[GDBusConnection],
    registration_id : UInt) Int;

alias GDBusSubtreeEnumerateFunc = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],RawPointer),(Pointer[Pointer[CChar]])];

alias GDBusSubtreeIntrospectFunc = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar],RawPointer),(Pointer[Pointer[Struct__GDBusInterfaceInfo]])];

alias GDBusSubtreeDispatchFunc = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[RawPointer],RawPointer),(Pointer[Struct__GDBusInterfaceVTable])];

record Struct__GDBusSubtreeVTable (
    enumerate : GDBusSubtreeEnumerateFunc,
    introspect : GDBusSubtreeIntrospectFunc,
    dispatch : GDBusSubtreeDispatchFunc,
    padding : Array[gpointer,8],
);

external g_dbus_connection_register_subtree(
    connection : Pointer[GDBusConnection],
    object_path : Pointer[CChar],
    vtable : Pointer[GDBusSubtreeVTable],
    flags : GDBusSubtreeFlags,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify,
    error : Pointer[Pointer[GError]]) UInt;

external g_dbus_connection_unregister_subtree(
    connection : Pointer[GDBusConnection],
    registration_id : UInt) Int;

alias GDBusSignalCallback = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],Pointer[CChar],Pointer[CChar],OpaquePointer,RawPointer),()];

external g_dbus_connection_signal_subscribe(
    connection : Pointer[GDBusConnection],
    sender : Pointer[CChar],
    interface_name : Pointer[CChar],
    member : Pointer[CChar],
    object_path : Pointer[CChar],
    arg0 : Pointer[CChar],
    flags : GDBusSignalFlags,
    callback : GDBusSignalCallback,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify) UInt;

external g_dbus_connection_signal_unsubscribe(
    connection : Pointer[GDBusConnection],
    subscription_id : UInt);

alias GDBusMessageFilterFunction = CCodePointer[(OpaquePointer,OpaquePointer,Int,RawPointer),(OpaquePointer)];

external g_dbus_connection_add_filter(
    connection : Pointer[GDBusConnection],
    filter_function : GDBusMessageFilterFunction,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify) UInt;

external g_dbus_connection_remove_filter(
    connection : Pointer[GDBusConnection],
    filter_id : UInt);

external g_dbus_error_quark() UInt;

external g_dbus_error_is_remote_error(
    error : Pointer[GError]) Int;

external g_dbus_error_get_remote_error(
    error : Pointer[GError]) Pointer[CChar];

external g_dbus_error_strip_remote_error(
    error : Pointer[GError]) Int;

record Struct__GDBusErrorEntry (
    error_code : Int,
    dbus_error_name : Pointer[CChar],
);

external g_dbus_error_register_error(
    error_domain : UInt,
    error_code : Int,
    dbus_error_name : Pointer[CChar]) Int;

external g_dbus_error_unregister_error(
    error_domain : UInt,
    error_code : Int,
    dbus_error_name : Pointer[CChar]) Int;

external g_dbus_error_register_error_domain(
    error_domain_quark_name : Pointer[CChar],
    quark_volatile : Pointer[CULong],
    entries : Pointer[GDBusErrorEntry],
    num_entries : UInt);

external g_dbus_error_new_for_dbus_error(
    dbus_error_name : Pointer[CChar],
    dbus_error_message : Pointer[CChar]) Pointer[GError];

external g_dbus_error_set_dbus_error(
    error : Pointer[Pointer[GError]],
    dbus_error_name : Pointer[CChar],
    dbus_error_message : Pointer[CChar],
    format : Pointer[CChar],
    ...);

external g_dbus_error_set_dbus_error_valist(
    error : Pointer[Pointer[GError]],
    dbus_error_name : Pointer[CChar],
    dbus_error_message : Pointer[CChar],
    format : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external g_dbus_error_encode_gerror(
    error : Pointer[GError]) Pointer[CChar];

record Struct__GDBusAnnotationInfo (
    ref_count : Int,
    key : Pointer[CChar],
    value : Pointer[CChar],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusArgInfo (
    ref_count : Int,
    name : Pointer[CChar],
    signature : Pointer[CChar],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusMethodInfo (
    ref_count : Int,
    name : Pointer[CChar],
    in_args : Pointer[Pointer[GDBusArgInfo]],
    out_args : Pointer[Pointer[GDBusArgInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusSignalInfo (
    ref_count : Int,
    name : Pointer[CChar],
    args : Pointer[Pointer[GDBusArgInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusPropertyInfo (
    ref_count : Int,
    name : Pointer[CChar],
    signature : Pointer[CChar],
    flags : GDBusPropertyInfoFlags,
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusInterfaceInfo (
    ref_count : Int,
    name : Pointer[CChar],
    methods : Pointer[Pointer[GDBusMethodInfo]],
    signals : Pointer[Pointer[GDBusSignalInfo]],
    properties : Pointer[Pointer[GDBusPropertyInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusNodeInfo (
    ref_count : Int,
    path : Pointer[CChar],
    interfaces : Pointer[Pointer[GDBusInterfaceInfo]],
    nodes : Pointer[Pointer[GDBusNodeInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

external g_dbus_annotation_info_lookup(
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
    name : Pointer[CChar]) Pointer[CChar];

external g_dbus_interface_info_lookup_method(
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar]) Pointer[GDBusMethodInfo];

external g_dbus_interface_info_lookup_signal(
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar]) Pointer[GDBusSignalInfo];

external g_dbus_interface_info_lookup_property(
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar]) Pointer[GDBusPropertyInfo];

external g_dbus_interface_info_generate_xml(
    info : Pointer[GDBusInterfaceInfo],
    indent : UInt,
    string_builder : Pointer[GString]);

external g_dbus_node_info_new_for_xml(
    xml_data : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GDBusNodeInfo];

external g_dbus_node_info_lookup_interface(
    info : Pointer[GDBusNodeInfo],
    name : Pointer[CChar]) Pointer[GDBusInterfaceInfo];

external g_dbus_node_info_generate_xml(
    info : Pointer[GDBusNodeInfo],
    indent : UInt,
    string_builder : Pointer[GString]);

external g_dbus_node_info_ref(
    info : Pointer[GDBusNodeInfo]) Pointer[GDBusNodeInfo];

external g_dbus_interface_info_ref(
    info : Pointer[GDBusInterfaceInfo]) Pointer[GDBusInterfaceInfo];

external g_dbus_method_info_ref(
    info : Pointer[GDBusMethodInfo]) Pointer[GDBusMethodInfo];

external g_dbus_signal_info_ref(
    info : Pointer[GDBusSignalInfo]) Pointer[GDBusSignalInfo];

external g_dbus_property_info_ref(
    info : Pointer[GDBusPropertyInfo]) Pointer[GDBusPropertyInfo];

external g_dbus_arg_info_ref(
    info : Pointer[GDBusArgInfo]) Pointer[GDBusArgInfo];

external g_dbus_annotation_info_ref(
    info : Pointer[GDBusAnnotationInfo]) Pointer[GDBusAnnotationInfo];

external g_dbus_node_info_unref(
    info : Pointer[GDBusNodeInfo]);

external g_dbus_interface_info_unref(
    info : Pointer[GDBusInterfaceInfo]);

external g_dbus_method_info_unref(
    info : Pointer[GDBusMethodInfo]);

external g_dbus_signal_info_unref(
    info : Pointer[GDBusSignalInfo]);

external g_dbus_property_info_unref(
    info : Pointer[GDBusPropertyInfo]);

external g_dbus_arg_info_unref(
    info : Pointer[GDBusArgInfo]);

external g_dbus_annotation_info_unref(
    info : Pointer[GDBusAnnotationInfo]);

external g_dbus_node_info_get_type() CULong;

external g_dbus_interface_info_get_type() CULong;

external g_dbus_method_info_get_type() CULong;

external g_dbus_signal_info_get_type() CULong;

external g_dbus_property_info_get_type() CULong;

external g_dbus_arg_info_get_type() CULong;

external g_dbus_annotation_info_get_type() CULong;

external g_dbus_message_get_type() CULong;

external g_dbus_message_new() Pointer[GDBusMessage];

external g_dbus_message_new_signal(
    path : Pointer[CChar],
    interface_ : Pointer[CChar],
    signal : Pointer[CChar]) Pointer[GDBusMessage];

external g_dbus_message_new_method_call(
    name : Pointer[CChar],
    path : Pointer[CChar],
    interface_ : Pointer[CChar],
    method : Pointer[CChar]) Pointer[GDBusMessage];

external g_dbus_message_new_method_reply(
    method_call_message : Pointer[GDBusMessage]) Pointer[GDBusMessage];

external g_dbus_message_new_method_error(
    method_call_message : Pointer[GDBusMessage],
    error_name : Pointer[CChar],
    error_message_format : Pointer[CChar],
    ...) Pointer[GDBusMessage];

external g_dbus_message_new_method_error_valist(
    method_call_message : Pointer[GDBusMessage],
    error_name : Pointer[CChar],
    error_message_format : Pointer[CChar],
    var_args : Pointer[__va_list_tag]) Pointer[GDBusMessage];

external g_dbus_message_new_method_error_literal(
    method_call_message : Pointer[GDBusMessage],
    error_name : Pointer[CChar],
    error_message : Pointer[CChar]) Pointer[GDBusMessage];

external g_dbus_message_print(
    message : Pointer[GDBusMessage],
    indent : UInt) Pointer[CChar];

external g_dbus_message_get_locked(
    message : Pointer[GDBusMessage]) Int;

external g_dbus_message_lock(
    message : Pointer[GDBusMessage]);

external g_dbus_message_copy(
    message : Pointer[GDBusMessage],
    error : Pointer[Pointer[GError]]) Pointer[GDBusMessage];

external g_dbus_message_get_byte_order(
    message : Pointer[GDBusMessage]) GDBusMessageByteOrder;

external g_dbus_message_set_byte_order(
    message : Pointer[GDBusMessage],
    byte_order : GDBusMessageByteOrder);

external g_dbus_message_get_message_type(
    message : Pointer[GDBusMessage]) GDBusMessageType;

external g_dbus_message_set_message_type(
    message : Pointer[GDBusMessage],
    type : GDBusMessageType);

external g_dbus_message_get_flags(
    message : Pointer[GDBusMessage]) GDBusMessageFlags;

external g_dbus_message_set_flags(
    message : Pointer[GDBusMessage],
    flags : GDBusMessageFlags);

external g_dbus_message_get_serial(
    message : Pointer[GDBusMessage]) UInt;

external g_dbus_message_set_serial(
    message : Pointer[GDBusMessage],
    serial : UInt);

external g_dbus_message_get_header(
    message : Pointer[GDBusMessage],
    header_field : GDBusMessageHeaderField) Pointer[GVariant];

external g_dbus_message_set_header(
    message : Pointer[GDBusMessage],
    header_field : GDBusMessageHeaderField,
    value : Pointer[GVariant]);

external g_dbus_message_get_header_fields(
    message : Pointer[GDBusMessage]) Pointer[CUChar];

external g_dbus_message_get_body(
    message : Pointer[GDBusMessage]) Pointer[GVariant];

external g_dbus_message_set_body(
    message : Pointer[GDBusMessage],
    body : Pointer[GVariant]);

external g_dbus_message_get_unix_fd_list(
    message : Pointer[GDBusMessage]) Pointer[GUnixFDList];

external g_dbus_message_set_unix_fd_list(
    message : Pointer[GDBusMessage],
    fd_list : Pointer[GUnixFDList]);

external g_dbus_message_get_reply_serial(
    message : Pointer[GDBusMessage]) UInt;

external g_dbus_message_set_reply_serial(
    message : Pointer[GDBusMessage],
    value : UInt);

external g_dbus_message_get_interface(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_interface(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_member(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_member(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_path(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_path(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_sender(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_sender(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_destination(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_destination(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_error_name(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_error_name(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_signature(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_set_signature(
    message : Pointer[GDBusMessage],
    value : Pointer[CChar]);

external g_dbus_message_get_num_unix_fds(
    message : Pointer[GDBusMessage]) UInt;

external g_dbus_message_set_num_unix_fds(
    message : Pointer[GDBusMessage],
    value : UInt);

external g_dbus_message_get_arg0(
    message : Pointer[GDBusMessage]) Pointer[CChar];

external g_dbus_message_new_from_blob(
    blob : Pointer[CUChar],
    blob_len : CULong,
    capabilities : GDBusCapabilityFlags,
    error : Pointer[Pointer[GError]]) Pointer[GDBusMessage];

external g_dbus_message_bytes_needed(
    blob : Pointer[CUChar],
    blob_len : CULong,
    error : Pointer[Pointer[GError]]) CLong;

external g_dbus_message_to_blob(
    message : Pointer[GDBusMessage],
    out_size : Pointer[CULong],
    capabilities : GDBusCapabilityFlags,
    error : Pointer[Pointer[GError]]) Pointer[CUChar];

external g_dbus_message_to_gerror(
    message : Pointer[GDBusMessage],
    error : Pointer[Pointer[GError]]) Int;

external g_dbus_method_invocation_get_type() CULong;

external g_dbus_method_invocation_get_sender(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[CChar];

external g_dbus_method_invocation_get_object_path(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[CChar];

external g_dbus_method_invocation_get_interface_name(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[CChar];

external g_dbus_method_invocation_get_method_name(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[CChar];

external g_dbus_method_invocation_get_method_info(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[GDBusMethodInfo];

external g_dbus_method_invocation_get_connection(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[GDBusConnection];

external g_dbus_method_invocation_get_message(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[GDBusMessage];

external g_dbus_method_invocation_get_parameters(
    invocation : Pointer[GDBusMethodInvocation]) Pointer[GVariant];

external g_dbus_method_invocation_get_user_data(
    invocation : Pointer[GDBusMethodInvocation]) gpointer;

external g_dbus_method_invocation_return_value(
    invocation : Pointer[GDBusMethodInvocation],
    parameters : Pointer[GVariant]);

external g_dbus_method_invocation_return_error(
    invocation : Pointer[GDBusMethodInvocation],
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    ...);

external g_dbus_method_invocation_return_error_valist(
    invocation : Pointer[GDBusMethodInvocation],
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    var_args : Pointer[__va_list_tag]);

external g_dbus_method_invocation_return_error_literal(
    invocation : Pointer[GDBusMethodInvocation],
    domain : UInt,
    code : Int,
    message : Pointer[CChar]);

external g_dbus_method_invocation_return_gerror(
    invocation : Pointer[GDBusMethodInvocation],
    error : Pointer[GError]);

external g_dbus_method_invocation_return_dbus_error(
    invocation : Pointer[GDBusMethodInvocation],
    error_name : Pointer[CChar],
    error_message : Pointer[CChar]);

alias GBusAcquiredCallback = CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer),()];

alias GBusNameAcquiredCallback = CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer),()];

alias GBusNameLostCallback = CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer),()];

external g_bus_own_name(
    bus_type : GBusType,
    name : Pointer[CChar],
    flags : GBusNameOwnerFlags,
    bus_acquired_handler : GBusAcquiredCallback,
    name_acquired_handler : GBusNameAcquiredCallback,
    name_lost_handler : GBusNameLostCallback,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify) UInt;

external g_bus_own_name_on_connection(
    connection : Pointer[GDBusConnection],
    name : Pointer[CChar],
    flags : GBusNameOwnerFlags,
    name_acquired_handler : GBusNameAcquiredCallback,
    name_lost_handler : GBusNameLostCallback,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify) UInt;

external g_bus_own_name_with_closures(
    bus_type : GBusType,
    name : Pointer[CChar],
    flags : GBusNameOwnerFlags,
    bus_acquired_closure : Pointer[GClosure],
    name_acquired_closure : Pointer[GClosure],
    name_lost_closure : Pointer[GClosure]) UInt;

external g_bus_own_name_on_connection_with_closures(
    connection : Pointer[GDBusConnection],
    name : Pointer[CChar],
    flags : GBusNameOwnerFlags,
    name_acquired_closure : Pointer[GClosure],
    name_lost_closure : Pointer[GClosure]) UInt;

external g_bus_unown_name(
    owner_id : UInt);

alias GBusNameAppearedCallback = CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[CChar],RawPointer),()];

alias GBusNameVanishedCallback = CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer),()];

external g_bus_watch_name(
    bus_type : GBusType,
    name : Pointer[CChar],
    flags : GBusNameWatcherFlags,
    name_appeared_handler : GBusNameAppearedCallback,
    name_vanished_handler : GBusNameVanishedCallback,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify) UInt;

external g_bus_watch_name_on_connection(
    connection : Pointer[GDBusConnection],
    name : Pointer[CChar],
    flags : GBusNameWatcherFlags,
    name_appeared_handler : GBusNameAppearedCallback,
    name_vanished_handler : GBusNameVanishedCallback,
    user_data : gpointer,
    user_data_free_func : GDestroyNotify) UInt;

external g_bus_watch_name_with_closures(
    bus_type : GBusType,
    name : Pointer[CChar],
    flags : GBusNameWatcherFlags,
    name_appeared_closure : Pointer[GClosure],
    name_vanished_closure : Pointer[GClosure]) UInt;

external g_bus_watch_name_on_connection_with_closures(
    connection : Pointer[GDBusConnection],
    name : Pointer[CChar],
    flags : GBusNameWatcherFlags,
    name_appeared_closure : Pointer[GClosure],
    name_vanished_closure : Pointer[GClosure]) UInt;

external g_bus_unwatch_name(
    watcher_id : UInt);

alias GDBusProxyClass = Struct__GDBusProxyClass;

alias GDBusProxyPrivate = Opaque;

record Struct__GDBusProxy (
    parent_instance : GObject,
    priv : Pointer[GDBusProxyPrivate],
);

record Struct__GDBusProxyClass (
    parent_class : GObjectClass,
    g_properties_changed : CCodePointer[(Pointer[Struct__GDBusProxy],OpaquePointer,Pointer[Pointer[CChar]]),()],
    g_signal : CCodePointer[(Pointer[Struct__GDBusProxy],Pointer[CChar],Pointer[CChar],OpaquePointer),()],
    padding : Array[gpointer,32],
);

external g_dbus_proxy_get_type() CULong;

external g_dbus_proxy_new(
    connection : Pointer[GDBusConnection],
    flags : GDBusProxyFlags,
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_proxy_new_finish(
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GDBusProxy];

external g_dbus_proxy_new_sync(
    connection : Pointer[GDBusConnection],
    flags : GDBusProxyFlags,
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusProxy];

external g_dbus_proxy_new_for_bus(
    bus_type : GBusType,
    flags : GDBusProxyFlags,
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_proxy_new_for_bus_finish(
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GDBusProxy];

external g_dbus_proxy_new_for_bus_sync(
    bus_type : GBusType,
    flags : GDBusProxyFlags,
    info : Pointer[GDBusInterfaceInfo],
    name : Pointer[CChar],
    object_path : Pointer[CChar],
    interface_name : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusProxy];

external g_dbus_proxy_get_connection(
    proxy : Pointer[GDBusProxy]) Pointer[GDBusConnection];

external g_dbus_proxy_get_flags(
    proxy : Pointer[GDBusProxy]) GDBusProxyFlags;

external g_dbus_proxy_get_name(
    proxy : Pointer[GDBusProxy]) Pointer[CChar];

external g_dbus_proxy_get_name_owner(
    proxy : Pointer[GDBusProxy]) Pointer[CChar];

external g_dbus_proxy_get_object_path(
    proxy : Pointer[GDBusProxy]) Pointer[CChar];

external g_dbus_proxy_get_interface_name(
    proxy : Pointer[GDBusProxy]) Pointer[CChar];

external g_dbus_proxy_get_default_timeout(
    proxy : Pointer[GDBusProxy]) Int;

external g_dbus_proxy_set_default_timeout(
    proxy : Pointer[GDBusProxy],
    timeout_msec : Int);

external g_dbus_proxy_get_interface_info(
    proxy : Pointer[GDBusProxy]) Pointer[GDBusInterfaceInfo];

external g_dbus_proxy_set_interface_info(
    proxy : Pointer[GDBusProxy],
    info : Pointer[GDBusInterfaceInfo]);

external g_dbus_proxy_get_cached_property(
    proxy : Pointer[GDBusProxy],
    property_name : Pointer[CChar]) Pointer[GVariant];

external g_dbus_proxy_set_cached_property(
    proxy : Pointer[GDBusProxy],
    property_name : Pointer[CChar],
    value : Pointer[GVariant]);

external g_dbus_proxy_get_cached_property_names(
    proxy : Pointer[GDBusProxy]) Pointer[Pointer[CChar]];

external g_dbus_proxy_call(
    proxy : Pointer[GDBusProxy],
    method_name : Pointer[CChar],
    parameters : Pointer[GVariant],
    flags : GDBusCallFlags,
    timeout_msec : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_dbus_proxy_call_finish(
    proxy : Pointer[GDBusProxy],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GVariant];

external g_dbus_proxy_call_sync(
    proxy : Pointer[GDBusProxy],
    method_name : Pointer[CChar],
    parameters : Pointer[GVariant],
    flags : GDBusCallFlags,
    timeout_msec : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GVariant];

external g_dbus_server_get_type() CULong;

external g_dbus_server_new_sync(
    address : Pointer[CChar],
    flags : GDBusServerFlags,
    guid : Pointer[CChar],
    observer : Pointer[GDBusAuthObserver],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GDBusServer];

external g_dbus_server_get_client_address(
    server : Pointer[GDBusServer]) Pointer[CChar];

external g_dbus_server_get_guid(
    server : Pointer[GDBusServer]) Pointer[CChar];

external g_dbus_server_get_flags(
    server : Pointer[GDBusServer]) GDBusServerFlags;

external g_dbus_server_start(
    server : Pointer[GDBusServer]);

external g_dbus_server_stop(
    server : Pointer[GDBusServer]);

external g_dbus_server_is_active(
    server : Pointer[GDBusServer]) Int;

external g_dbus_is_guid(
    string : Pointer[CChar]) Int;

external g_dbus_generate_guid() Pointer[CChar];

external g_dbus_is_name(
    string : Pointer[CChar]) Int;

external g_dbus_is_unique_name(
    string : Pointer[CChar]) Int;

external g_dbus_is_member_name(
    string : Pointer[CChar]) Int;

external g_dbus_is_interface_name(
    string : Pointer[CChar]) Int;

alias GDriveIface = Struct__GDriveIface;

record Struct__GDriveIface (
    g_iface : GTypeInterface,
    changed : CCodePointer[(OpaquePointer),()],
    disconnected : CCodePointer[(OpaquePointer),()],
    eject_button : CCodePointer[(OpaquePointer),()],
    get_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_icon : CCodePointer[(OpaquePointer),(OpaquePointer)],
    has_volumes : CCodePointer[(OpaquePointer),(Int)],
    get_volumes : CCodePointer[(OpaquePointer),(Pointer[Struct__GList])],
    is_media_removable : CCodePointer[(OpaquePointer),(Int)],
    has_media : CCodePointer[(OpaquePointer),(Int)],
    is_media_check_automatic : CCodePointer[(OpaquePointer),(Int)],
    can_eject : CCodePointer[(OpaquePointer),(Int)],
    can_poll_for_media : CCodePointer[(OpaquePointer),(Int)],
    eject : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    poll_for_media : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    poll_for_media_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    get_identifier : CCodePointer[(OpaquePointer,Pointer[CChar]),(Pointer[CChar])],
    enumerate_identifiers : CCodePointer[(OpaquePointer),(Pointer[Pointer[CChar]])],
    get_start_stop_type : CCodePointer[(OpaquePointer),(Int)],
    can_start : CCodePointer[(OpaquePointer),(Int)],
    can_start_degraded : CCodePointer[(OpaquePointer),(Int)],
    start : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    start_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    can_stop : CCodePointer[(OpaquePointer),(Int)],
    stop : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    stop_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    stop_button : CCodePointer[(OpaquePointer),()],
    eject_with_operation : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_with_operation_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_drive_get_type() CULong;

external g_drive_get_name(
    drive : Pointer[GDrive]) Pointer[CChar];

external g_drive_get_icon(
    drive : Pointer[GDrive]) Pointer[GIcon];

external g_drive_has_volumes(
    drive : Pointer[GDrive]) Int;

external g_drive_get_volumes(
    drive : Pointer[GDrive]) Pointer[GList];

external g_drive_is_media_removable(
    drive : Pointer[GDrive]) Int;

external g_drive_has_media(
    drive : Pointer[GDrive]) Int;

external g_drive_is_media_check_automatic(
    drive : Pointer[GDrive]) Int;

external g_drive_can_poll_for_media(
    drive : Pointer[GDrive]) Int;

external g_drive_can_eject(
    drive : Pointer[GDrive]) Int;

external g_drive_eject(
    drive : Pointer[GDrive],
    flags : GMountUnmountFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_drive_eject_finish(
    drive : Pointer[GDrive],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_drive_poll_for_media(
    drive : Pointer[GDrive],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_drive_poll_for_media_finish(
    drive : Pointer[GDrive],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_drive_get_identifier(
    drive : Pointer[GDrive],
    kind : Pointer[CChar]) Pointer[CChar];

external g_drive_enumerate_identifiers(
    drive : Pointer[GDrive]) Pointer[Pointer[CChar]];

external g_drive_get_start_stop_type(
    drive : Pointer[GDrive]) GDriveStartStopType;

external g_drive_can_start(
    drive : Pointer[GDrive]) Int;

external g_drive_can_start_degraded(
    drive : Pointer[GDrive]) Int;

external g_drive_start(
    drive : Pointer[GDrive],
    flags : GDriveStartFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_drive_start_finish(
    drive : Pointer[GDrive],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_drive_can_stop(
    drive : Pointer[GDrive]) Int;

external g_drive_stop(
    drive : Pointer[GDrive],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_drive_stop_finish(
    drive : Pointer[GDrive],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_drive_eject_with_operation(
    drive : Pointer[GDrive],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_drive_eject_with_operation_finish(
    drive : Pointer[GDrive],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

alias GIconIface = Struct__GIconIface;

record Struct__GIconIface (
    g_iface : GTypeInterface,
    hash : CCodePointer[(OpaquePointer),(UInt)],
    equal : CCodePointer[(OpaquePointer,OpaquePointer),(Int)],
    to_tokens : CCodePointer[(OpaquePointer,Pointer[Struct__GPtrArray],Pointer[Int]),(Int)],
    from_tokens : CCodePointer[(Pointer[Pointer[CChar]],Int,Int,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
);

external g_icon_get_type() CULong;

external g_icon_hash(
    icon : gconstpointer) UInt;

external g_icon_equal(
    icon1 : Pointer[GIcon],
    icon2 : Pointer[GIcon]) Int;

external g_icon_to_string(
    icon : Pointer[GIcon]) Pointer[CChar];

external g_icon_new_for_string(
    str : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GIcon];

alias GEmblem = Opaque;

alias GEmblemClass = Opaque;

external g_emblem_get_type() CULong;

external g_emblem_new(
    icon : Pointer[GIcon]) Pointer[GEmblem];

external g_emblem_new_with_origin(
    icon : Pointer[GIcon],
    origin : GEmblemOrigin) Pointer[GEmblem];

external g_emblem_get_icon(
    emblem : Pointer[GEmblem]) Pointer[GIcon];

external g_emblem_get_origin(
    emblem : Pointer[GEmblem]) GEmblemOrigin;

alias GEmblemedIcon = Opaque;

alias GEmblemedIconClass = Opaque;

external g_emblemed_icon_get_type() CULong;

external g_emblemed_icon_new(
    icon : Pointer[GIcon],
    emblem : Pointer[GEmblem]) Pointer[GIcon];

external g_emblemed_icon_get_icon(
    emblemed : Pointer[GEmblemedIcon]) Pointer[GIcon];

external g_emblemed_icon_get_emblems(
    emblemed : Pointer[GEmblemedIcon]) Pointer[GList];

external g_emblemed_icon_add_emblem(
    emblemed : Pointer[GEmblemedIcon],
    emblem : Pointer[GEmblem]);

record Struct__GFileAttributeInfo (
    name : Pointer[CChar],
    type : GFileAttributeType,
    flags : GFileAttributeInfoFlags,
);

record Struct__GFileAttributeInfoList (
    infos : Pointer[GFileAttributeInfo],
    n_infos : Int,
);

external g_file_attribute_info_list_get_type() CULong;

external g_file_attribute_info_list_new() Pointer[GFileAttributeInfoList];

external g_file_attribute_info_list_ref(
    list : Pointer[GFileAttributeInfoList]) Pointer[GFileAttributeInfoList];

external g_file_attribute_info_list_unref(
    list : Pointer[GFileAttributeInfoList]);

external g_file_attribute_info_list_dup(
    list : Pointer[GFileAttributeInfoList]) Pointer[GFileAttributeInfoList];

external g_file_attribute_info_list_lookup(
    list : Pointer[GFileAttributeInfoList],
    name : Pointer[CChar]) Pointer[GFileAttributeInfo];

external g_file_attribute_info_list_add(
    list : Pointer[GFileAttributeInfoList],
    name : Pointer[CChar],
    type : GFileAttributeType,
    flags : GFileAttributeInfoFlags);

alias GFileEnumeratorClass = Struct__GFileEnumeratorClass;

alias GFileEnumeratorPrivate = Opaque;

record Struct__GFileEnumerator (
    parent_instance : GObject,
    priv : Pointer[GFileEnumeratorPrivate],
);

record Struct__GFileEnumeratorClass (
    parent_class : GObjectClass,
    next_file : CCodePointer[(Pointer[Struct__GFileEnumerator],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    close_fn : CCodePointer[(Pointer[Struct__GFileEnumerator],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    next_files_async : CCodePointer[(Pointer[Struct__GFileEnumerator],Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    next_files_finish : CCodePointer[(Pointer[Struct__GFileEnumerator],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GList])],
    close_async : CCodePointer[(Pointer[Struct__GFileEnumerator],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    close_finish : CCodePointer[(Pointer[Struct__GFileEnumerator],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
);

external g_file_enumerator_get_type() CULong;

external g_file_enumerator_next_file(
    enumerator : Pointer[GFileEnumerator],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_enumerator_close(
    enumerator : Pointer[GFileEnumerator],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_enumerator_next_files_async(
    enumerator : Pointer[GFileEnumerator],
    num_files : Int,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_enumerator_next_files_finish(
    enumerator : Pointer[GFileEnumerator],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GList];

external g_file_enumerator_close_async(
    enumerator : Pointer[GFileEnumerator],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_enumerator_close_finish(
    enumerator : Pointer[GFileEnumerator],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_enumerator_is_closed(
    enumerator : Pointer[GFileEnumerator]) Int;

external g_file_enumerator_has_pending(
    enumerator : Pointer[GFileEnumerator]) Int;

external g_file_enumerator_set_pending(
    enumerator : Pointer[GFileEnumerator],
    pending : Int);

external g_file_enumerator_get_container(
    enumerator : Pointer[GFileEnumerator]) Pointer[GFile];

alias GFileIface = Struct__GFileIface;

record Struct__GFileIface (
    g_iface : GTypeInterface,
    dup : CCodePointer[(OpaquePointer),(OpaquePointer)],
    hash : CCodePointer[(OpaquePointer),(UInt)],
    equal : CCodePointer[(OpaquePointer,OpaquePointer),(Int)],
    is_native : CCodePointer[(OpaquePointer),(Int)],
    has_uri_scheme : CCodePointer[(OpaquePointer,Pointer[CChar]),(Int)],
    get_uri_scheme : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_basename : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_path : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_uri : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_parse_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_parent : CCodePointer[(OpaquePointer),(OpaquePointer)],
    prefix_matches : CCodePointer[(OpaquePointer,OpaquePointer),(Int)],
    get_relative_path : CCodePointer[(OpaquePointer,OpaquePointer),(Pointer[CChar])],
    resolve_relative_path : CCodePointer[(OpaquePointer,Pointer[CChar]),(OpaquePointer)],
    get_child_for_display_name : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    enumerate_children : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileEnumerator])],
    enumerate_children_async : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    enumerate_children_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileEnumerator])],
    query_info : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_info_async : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    query_info_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_filesystem_info : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_filesystem_info_async : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    query_filesystem_info_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    find_enclosing_mount : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    find_enclosing_mount_async : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    find_enclosing_mount_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    set_display_name : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    set_display_name_async : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    set_display_name_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_settable_attributes : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileAttributeInfoList])],
    _query_settable_attributes_async : CCodePointer[(),()],
    _query_settable_attributes_finish : CCodePointer[(),()],
    query_writable_namespaces : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileAttributeInfoList])],
    _query_writable_namespaces_async : CCodePointer[(),()],
    _query_writable_namespaces_finish : CCodePointer[(),()],
    set_attribute : CCodePointer[(OpaquePointer,Pointer[CChar],Int,RawPointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    set_attributes_from_info : CCodePointer[(OpaquePointer,OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    set_attributes_async : CCodePointer[(OpaquePointer,OpaquePointer,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    set_attributes_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[OpaquePointer],Pointer[Pointer[Struct__GError]]),(Int)],
    read_fn : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileInputStream])],
    read_async : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    read_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileInputStream])],
    append_to : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileOutputStream])],
    append_to_async : CCodePointer[(OpaquePointer,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    append_to_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileOutputStream])],
    create : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileOutputStream])],
    create_async : CCodePointer[(OpaquePointer,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    create_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileOutputStream])],
    replace : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileOutputStream])],
    replace_async : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    replace_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileOutputStream])],
    delete_file : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    _delete_file_async : CCodePointer[(),()],
    _delete_file_finish : CCodePointer[(),()],
    trash : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    _trash_async : CCodePointer[(),()],
    _trash_finish : CCodePointer[(),()],
    make_directory : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    _make_directory_async : CCodePointer[(),()],
    _make_directory_finish : CCodePointer[(),()],
    make_symbolic_link : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    _make_symbolic_link_async : CCodePointer[(),()],
    _make_symbolic_link_finish : CCodePointer[(),()],
    copy : CCodePointer[(OpaquePointer,OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(CLong,CLong,RawPointer),()],RawPointer,Pointer[Pointer[Struct__GError]]),(Int)],
    copy_async : CCodePointer[(OpaquePointer,OpaquePointer,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(CLong,CLong,RawPointer),()],RawPointer,CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    copy_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    move : CCodePointer[(OpaquePointer,OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(CLong,CLong,RawPointer),()],RawPointer,Pointer[Pointer[Struct__GError]]),(Int)],
    _move_async : CCodePointer[(),()],
    _move_finish : CCodePointer[(),()],
    mount_mountable : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    mount_mountable_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    unmount_mountable : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    unmount_mountable_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    eject_mountable : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_mountable_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    mount_enclosing_volume : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    mount_enclosing_volume_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    monitor_dir : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileMonitor])],
    monitor_file : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileMonitor])],
    open_readwrite : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileIOStream])],
    open_readwrite_async : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    open_readwrite_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileIOStream])],
    create_readwrite : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileIOStream])],
    create_readwrite_async : CCodePointer[(OpaquePointer,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    create_readwrite_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileIOStream])],
    replace_readwrite : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileIOStream])],
    replace_readwrite_async : CCodePointer[(OpaquePointer,Pointer[CChar],Int,Int,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    replace_readwrite_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GFileIOStream])],
    start_mountable : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    start_mountable_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    stop_mountable : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    stop_mountable_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    supports_thread_contexts : Int,
    unmount_mountable_with_operation : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    unmount_mountable_with_operation_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    eject_mountable_with_operation : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_mountable_with_operation_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    poll_mountable : CCodePointer[(OpaquePointer,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    poll_mountable_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_file_get_type() CULong;

external g_file_new_for_path(
    path : Pointer[CChar]) Pointer[GFile];

external g_file_new_for_uri(
    uri : Pointer[CChar]) Pointer[GFile];

external g_file_new_for_commandline_arg(
    arg : Pointer[CChar]) Pointer[GFile];

external g_file_parse_name(
    parse_name : Pointer[CChar]) Pointer[GFile];

external g_file_dup(
    file : Pointer[GFile]) Pointer[GFile];

external g_file_hash(
    file : gconstpointer) UInt;

external g_file_equal(
    file1 : Pointer[GFile],
    file2 : Pointer[GFile]) Int;

external g_file_get_basename(
    file : Pointer[GFile]) Pointer[CChar];

external g_file_get_path(
    file : Pointer[GFile]) Pointer[CChar];

external g_file_get_uri(
    file : Pointer[GFile]) Pointer[CChar];

external g_file_get_parse_name(
    file : Pointer[GFile]) Pointer[CChar];

external g_file_get_parent(
    file : Pointer[GFile]) Pointer[GFile];

external g_file_has_parent(
    file : Pointer[GFile],
    parent : Pointer[GFile]) Int;

external g_file_get_child(
    file : Pointer[GFile],
    name : Pointer[CChar]) Pointer[GFile];

external g_file_get_child_for_display_name(
    file : Pointer[GFile],
    display_name : Pointer[CChar],
    error : Pointer[Pointer[GError]]) Pointer[GFile];

external g_file_has_prefix(
    file : Pointer[GFile],
    prefix : Pointer[GFile]) Int;

external g_file_get_relative_path(
    parent : Pointer[GFile],
    descendant : Pointer[GFile]) Pointer[CChar];

external g_file_resolve_relative_path(
    file : Pointer[GFile],
    relative_path : Pointer[CChar]) Pointer[GFile];

external g_file_is_native(
    file : Pointer[GFile]) Int;

external g_file_has_uri_scheme(
    file : Pointer[GFile],
    uri_scheme : Pointer[CChar]) Int;

external g_file_get_uri_scheme(
    file : Pointer[GFile]) Pointer[CChar];

external g_file_read(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInputStream];

external g_file_read_async(
    file : Pointer[GFile],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_read_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileInputStream];

external g_file_append_to(
    file : Pointer[GFile],
    flags : GFileCreateFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileOutputStream];

external g_file_create(
    file : Pointer[GFile],
    flags : GFileCreateFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileOutputStream];

external g_file_replace(
    file : Pointer[GFile],
    etag : Pointer[CChar],
    make_backup : Int,
    flags : GFileCreateFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileOutputStream];

external g_file_append_to_async(
    file : Pointer[GFile],
    flags : GFileCreateFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_append_to_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileOutputStream];

external g_file_create_async(
    file : Pointer[GFile],
    flags : GFileCreateFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_create_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileOutputStream];

external g_file_replace_async(
    file : Pointer[GFile],
    etag : Pointer[CChar],
    make_backup : Int,
    flags : GFileCreateFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_replace_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileOutputStream];

external g_file_open_readwrite(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileIOStream];

external g_file_open_readwrite_async(
    file : Pointer[GFile],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_open_readwrite_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileIOStream];

external g_file_create_readwrite(
    file : Pointer[GFile],
    flags : GFileCreateFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileIOStream];

external g_file_create_readwrite_async(
    file : Pointer[GFile],
    flags : GFileCreateFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_create_readwrite_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileIOStream];

external g_file_replace_readwrite(
    file : Pointer[GFile],
    etag : Pointer[CChar],
    make_backup : Int,
    flags : GFileCreateFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileIOStream];

external g_file_replace_readwrite_async(
    file : Pointer[GFile],
    etag : Pointer[CChar],
    make_backup : Int,
    flags : GFileCreateFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_replace_readwrite_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileIOStream];

external g_file_query_exists(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable]) Int;

external g_file_query_file_type(
    file : Pointer[GFile],
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable]) GFileType;

external g_file_query_info(
    file : Pointer[GFile],
    attributes : Pointer[CChar],
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_query_info_async(
    file : Pointer[GFile],
    attributes : Pointer[CChar],
    flags : GFileQueryInfoFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_query_info_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_query_filesystem_info(
    file : Pointer[GFile],
    attributes : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_query_filesystem_info_async(
    file : Pointer[GFile],
    attributes : Pointer[CChar],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_query_filesystem_info_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_find_enclosing_mount(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GMount];

external g_file_find_enclosing_mount_async(
    file : Pointer[GFile],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_find_enclosing_mount_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GMount];

external g_file_enumerate_children(
    file : Pointer[GFile],
    attributes : Pointer[CChar],
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileEnumerator];

external g_file_enumerate_children_async(
    file : Pointer[GFile],
    attributes : Pointer[CChar],
    flags : GFileQueryInfoFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_enumerate_children_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileEnumerator];

external g_file_set_display_name(
    file : Pointer[GFile],
    display_name : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFile];

external g_file_set_display_name_async(
    file : Pointer[GFile],
    display_name : Pointer[CChar],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_set_display_name_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFile];

external g_file_delete(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_trash(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_copy(
    source : Pointer[GFile],
    destination : Pointer[GFile],
    flags : GFileCopyFlags,
    cancellable : Pointer[GCancellable],
    progress_callback : GFileProgressCallback,
    progress_callback_data : gpointer,
    error : Pointer[Pointer[GError]]) Int;

external g_file_copy_async(
    source : Pointer[GFile],
    destination : Pointer[GFile],
    flags : GFileCopyFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    progress_callback : GFileProgressCallback,
    progress_callback_data : gpointer,
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_copy_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_move(
    source : Pointer[GFile],
    destination : Pointer[GFile],
    flags : GFileCopyFlags,
    cancellable : Pointer[GCancellable],
    progress_callback : GFileProgressCallback,
    progress_callback_data : gpointer,
    error : Pointer[Pointer[GError]]) Int;

external g_file_make_directory(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_make_directory_with_parents(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_make_symbolic_link(
    file : Pointer[GFile],
    symlink_value : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_query_settable_attributes(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileAttributeInfoList];

external g_file_query_writable_namespaces(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileAttributeInfoList];

external g_file_set_attribute(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    type : GFileAttributeType,
    value_p : gpointer,
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attributes_from_info(
    file : Pointer[GFile],
    info : Pointer[GFileInfo],
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attributes_async(
    file : Pointer[GFile],
    info : Pointer[GFileInfo],
    flags : GFileQueryInfoFlags,
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_set_attributes_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    info : Pointer[Pointer[GFileInfo]],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attribute_string(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    value : Pointer[CChar],
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attribute_byte_string(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    value : Pointer[CChar],
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attribute_uint32(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    value : UInt,
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attribute_int32(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    value : Int,
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attribute_uint64(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    value : CULong,
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_set_attribute_int64(
    file : Pointer[GFile],
    attribute : Pointer[CChar],
    value : CLong,
    flags : GFileQueryInfoFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_mount_enclosing_volume(
    location : Pointer[GFile],
    flags : GMountMountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_mount_enclosing_volume_finish(
    location : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_mount_mountable(
    file : Pointer[GFile],
    flags : GMountMountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_mount_mountable_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFile];

external g_file_unmount_mountable(
    file : Pointer[GFile],
    flags : GMountUnmountFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_unmount_mountable_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_unmount_mountable_with_operation(
    file : Pointer[GFile],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_unmount_mountable_with_operation_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_eject_mountable(
    file : Pointer[GFile],
    flags : GMountUnmountFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_eject_mountable_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_eject_mountable_with_operation(
    file : Pointer[GFile],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_eject_mountable_with_operation_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_copy_attributes(
    source : Pointer[GFile],
    destination : Pointer[GFile],
    flags : GFileCopyFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_monitor_directory(
    file : Pointer[GFile],
    flags : GFileMonitorFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileMonitor];

external g_file_monitor_file(
    file : Pointer[GFile],
    flags : GFileMonitorFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileMonitor];

external g_file_monitor(
    file : Pointer[GFile],
    flags : GFileMonitorFlags,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileMonitor];

external g_file_start_mountable(
    file : Pointer[GFile],
    flags : GDriveStartFlags,
    start_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_start_mountable_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_stop_mountable(
    file : Pointer[GFile],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_stop_mountable_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_poll_mountable(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_poll_mountable_finish(
    file : Pointer[GFile],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_file_query_default_handler(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GAppInfo];

external g_file_load_contents(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    contents : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    etag_out : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_file_load_contents_async(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_load_contents_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    contents : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    etag_out : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_file_load_partial_contents_async(
    file : Pointer[GFile],
    cancellable : Pointer[GCancellable],
    read_more_callback : GFileReadMoreCallback,
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_load_partial_contents_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    contents : Pointer[Pointer[CChar]],
    length : Pointer[CULong],
    etag_out : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_file_replace_contents(
    file : Pointer[GFile],
    contents : Pointer[CChar],
    length : CULong,
    etag : Pointer[CChar],
    make_backup : Int,
    flags : GFileCreateFlags,
    new_etag : Pointer[Pointer[CChar]],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_file_replace_contents_async(
    file : Pointer[GFile],
    contents : Pointer[CChar],
    length : CULong,
    etag : Pointer[CChar],
    make_backup : Int,
    flags : GFileCreateFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_replace_contents_finish(
    file : Pointer[GFile],
    res : Pointer[GAsyncResult],
    new_etag : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Int;

external g_file_supports_thread_contexts(
    file : Pointer[GFile]) Int;

alias GFileIconClass = Opaque;

external g_file_icon_get_type() CULong;

external g_file_icon_new(
    file : Pointer[GFile]) Pointer[GIcon];

external g_file_icon_get_file(
    icon : Pointer[GFileIcon]) Pointer[GFile];

alias GFileInfoClass = Opaque;

external g_file_info_get_type() CULong;

external g_file_info_new() Pointer[GFileInfo];

external g_file_info_dup(
    other : Pointer[GFileInfo]) Pointer[GFileInfo];

external g_file_info_copy_into(
    src_info : Pointer[GFileInfo],
    dest_info : Pointer[GFileInfo]);

external g_file_info_has_attribute(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Int;

external g_file_info_has_namespace(
    info : Pointer[GFileInfo],
    name_space : Pointer[CChar]) Int;

external g_file_info_list_attributes(
    info : Pointer[GFileInfo],
    name_space : Pointer[CChar]) Pointer[Pointer[CChar]];

external g_file_info_get_attribute_data(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    type : Pointer[GFileAttributeType],
    value_pp : Pointer[gpointer],
    status : Pointer[GFileAttributeStatus]) Int;

external g_file_info_get_attribute_type(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) GFileAttributeType;

external g_file_info_remove_attribute(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]);

external g_file_info_get_attribute_status(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) GFileAttributeStatus;

external g_file_info_set_attribute_status(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    status : GFileAttributeStatus) Int;

external g_file_info_get_attribute_as_string(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Pointer[CChar];

external g_file_info_get_attribute_string(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Pointer[CChar];

external g_file_info_get_attribute_byte_string(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Pointer[CChar];

external g_file_info_get_attribute_boolean(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Int;

external g_file_info_get_attribute_uint32(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) UInt;

external g_file_info_get_attribute_int32(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Int;

external g_file_info_get_attribute_uint64(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) CULong;

external g_file_info_get_attribute_int64(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) CLong;

external g_file_info_get_attribute_object(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Pointer[GObject];

external g_file_info_get_attribute_stringv(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar]) Pointer[Pointer[CChar]];

external g_file_info_set_attribute(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    type : GFileAttributeType,
    value_p : gpointer);

external g_file_info_set_attribute_string(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : Pointer[CChar]);

external g_file_info_set_attribute_byte_string(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : Pointer[CChar]);

external g_file_info_set_attribute_boolean(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : Int);

external g_file_info_set_attribute_uint32(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : UInt);

external g_file_info_set_attribute_int32(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : Int);

external g_file_info_set_attribute_uint64(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : CULong);

external g_file_info_set_attribute_int64(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : CLong);

external g_file_info_set_attribute_object(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : Pointer[GObject]);

external g_file_info_set_attribute_stringv(
    info : Pointer[GFileInfo],
    attribute : Pointer[CChar],
    attr_value : Pointer[Pointer[CChar]]);

external g_file_info_clear_status(
    info : Pointer[GFileInfo]);

external g_file_info_get_file_type(
    info : Pointer[GFileInfo]) GFileType;

external g_file_info_get_is_hidden(
    info : Pointer[GFileInfo]) Int;

external g_file_info_get_is_backup(
    info : Pointer[GFileInfo]) Int;

external g_file_info_get_is_symlink(
    info : Pointer[GFileInfo]) Int;

external g_file_info_get_name(
    info : Pointer[GFileInfo]) Pointer[CChar];

external g_file_info_get_display_name(
    info : Pointer[GFileInfo]) Pointer[CChar];

external g_file_info_get_edit_name(
    info : Pointer[GFileInfo]) Pointer[CChar];

external g_file_info_get_icon(
    info : Pointer[GFileInfo]) Pointer[GIcon];

external g_file_info_get_content_type(
    info : Pointer[GFileInfo]) Pointer[CChar];

external g_file_info_get_size(
    info : Pointer[GFileInfo]) CLong;

external g_file_info_get_modification_time(
    info : Pointer[GFileInfo],
    result : Pointer[GTimeVal]);

external g_file_info_get_symlink_target(
    info : Pointer[GFileInfo]) Pointer[CChar];

external g_file_info_get_etag(
    info : Pointer[GFileInfo]) Pointer[CChar];

external g_file_info_get_sort_order(
    info : Pointer[GFileInfo]) Int;

external g_file_info_set_attribute_mask(
    info : Pointer[GFileInfo],
    mask : Pointer[GFileAttributeMatcher]);

external g_file_info_unset_attribute_mask(
    info : Pointer[GFileInfo]);

external g_file_info_set_file_type(
    info : Pointer[GFileInfo],
    type : GFileType);

external g_file_info_set_is_hidden(
    info : Pointer[GFileInfo],
    is_hidden : Int);

external g_file_info_set_is_symlink(
    info : Pointer[GFileInfo],
    is_symlink : Int);

external g_file_info_set_name(
    info : Pointer[GFileInfo],
    name : Pointer[CChar]);

external g_file_info_set_display_name(
    info : Pointer[GFileInfo],
    display_name : Pointer[CChar]);

external g_file_info_set_edit_name(
    info : Pointer[GFileInfo],
    edit_name : Pointer[CChar]);

external g_file_info_set_icon(
    info : Pointer[GFileInfo],
    icon : Pointer[GIcon]);

external g_file_info_set_content_type(
    info : Pointer[GFileInfo],
    content_type : Pointer[CChar]);

external g_file_info_set_size(
    info : Pointer[GFileInfo],
    size : CLong);

external g_file_info_set_modification_time(
    info : Pointer[GFileInfo],
    mtime : Pointer[GTimeVal]);

external g_file_info_set_symlink_target(
    info : Pointer[GFileInfo],
    symlink_target : Pointer[CChar]);

external g_file_info_set_sort_order(
    info : Pointer[GFileInfo],
    sort_order : Int);

external g_file_attribute_matcher_get_type() CULong;

external g_file_attribute_matcher_new(
    attributes : Pointer[CChar]) Pointer[GFileAttributeMatcher];

external g_file_attribute_matcher_ref(
    matcher : Pointer[GFileAttributeMatcher]) Pointer[GFileAttributeMatcher];

external g_file_attribute_matcher_unref(
    matcher : Pointer[GFileAttributeMatcher]);

external g_file_attribute_matcher_matches(
    matcher : Pointer[GFileAttributeMatcher],
    attribute : Pointer[CChar]) Int;

external g_file_attribute_matcher_matches_only(
    matcher : Pointer[GFileAttributeMatcher],
    attribute : Pointer[CChar]) Int;

external g_file_attribute_matcher_enumerate_namespace(
    matcher : Pointer[GFileAttributeMatcher],
    ns : Pointer[CChar]) Int;

external g_file_attribute_matcher_enumerate_next(
    matcher : Pointer[GFileAttributeMatcher]) Pointer[CChar];

alias GFileInputStreamClass = Struct__GFileInputStreamClass;

alias GFileInputStreamPrivate = Opaque;

record Struct__GFileInputStream (
    parent_instance : GInputStream,
    priv : Pointer[GFileInputStreamPrivate],
);

record Struct__GFileInputStreamClass (
    parent_class : GInputStreamClass,
    tell : CCodePointer[(Pointer[Struct__GFileInputStream]),(CLong)],
    can_seek : CCodePointer[(Pointer[Struct__GFileInputStream]),(Int)],
    seek : CCodePointer[(Pointer[Struct__GFileInputStream],CLong,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    query_info : CCodePointer[(Pointer[Struct__GFileInputStream],Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_info_async : CCodePointer[(Pointer[Struct__GFileInputStream],Pointer[CChar],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    query_info_finish : CCodePointer[(Pointer[Struct__GFileInputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_file_input_stream_get_type() CULong;

external g_file_input_stream_query_info(
    stream : Pointer[GFileInputStream],
    attributes : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_input_stream_query_info_async(
    stream : Pointer[GFileInputStream],
    attributes : Pointer[CChar],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_input_stream_query_info_finish(
    stream : Pointer[GFileInputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_io_error_quark() UInt;

external g_io_error_from_errno(
    err_no : Int) GIOErrorEnum;

alias GIOStreamPrivate = Opaque;

alias GIOStreamClass = Struct__GIOStreamClass;

record Struct__GIOStream (
    parent_instance : GObject,
    priv : Pointer[GIOStreamPrivate],
);

record Struct__GIOStreamClass (
    parent_class : GObjectClass,
    get_input_stream : CCodePointer[(Pointer[Struct__GIOStream]),(Pointer[Struct__GInputStream])],
    get_output_stream : CCodePointer[(Pointer[Struct__GIOStream]),(Pointer[Struct__GOutputStream])],
    close_fn : CCodePointer[(Pointer[Struct__GIOStream],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    close_async : CCodePointer[(Pointer[Struct__GIOStream],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    close_finish : CCodePointer[(Pointer[Struct__GIOStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
    _g_reserved8 : CCodePointer[(),()],
    _g_reserved9 : CCodePointer[(),()],
    _g_reserved10 : CCodePointer[(),()],
);

external g_io_stream_get_type() CULong;

external g_io_stream_get_input_stream(
    stream : Pointer[GIOStream]) Pointer[GInputStream];

external g_io_stream_get_output_stream(
    stream : Pointer[GIOStream]) Pointer[GOutputStream];

external g_io_stream_close(
    stream : Pointer[GIOStream],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_io_stream_close_async(
    stream : Pointer[GIOStream],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_io_stream_close_finish(
    stream : Pointer[GIOStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_io_stream_is_closed(
    stream : Pointer[GIOStream]) Int;

external g_io_stream_has_pending(
    stream : Pointer[GIOStream]) Int;

external g_io_stream_set_pending(
    stream : Pointer[GIOStream],
    error : Pointer[Pointer[GError]]) Int;

external g_io_stream_clear_pending(
    stream : Pointer[GIOStream]);

alias GFileIOStreamClass = Struct__GFileIOStreamClass;

alias GFileIOStreamPrivate = Opaque;

record Struct__GFileIOStream (
    parent_instance : GIOStream,
    priv : Pointer[GFileIOStreamPrivate],
);

record Struct__GFileIOStreamClass (
    parent_class : GIOStreamClass,
    tell : CCodePointer[(Pointer[Struct__GFileIOStream]),(CLong)],
    can_seek : CCodePointer[(Pointer[Struct__GFileIOStream]),(Int)],
    seek : CCodePointer[(Pointer[Struct__GFileIOStream],CLong,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    can_truncate : CCodePointer[(Pointer[Struct__GFileIOStream]),(Int)],
    truncate_fn : CCodePointer[(Pointer[Struct__GFileIOStream],CLong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    query_info : CCodePointer[(Pointer[Struct__GFileIOStream],Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_info_async : CCodePointer[(Pointer[Struct__GFileIOStream],Pointer[CChar],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    query_info_finish : CCodePointer[(Pointer[Struct__GFileIOStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    get_etag : CCodePointer[(Pointer[Struct__GFileIOStream]),(Pointer[CChar])],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_file_io_stream_get_type() CULong;

external g_file_io_stream_query_info(
    stream : Pointer[GFileIOStream],
    attributes : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_io_stream_query_info_async(
    stream : Pointer[GFileIOStream],
    attributes : Pointer[CChar],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_io_stream_query_info_finish(
    stream : Pointer[GFileIOStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_io_stream_get_etag(
    stream : Pointer[GFileIOStream]) Pointer[CChar];

alias GFileMonitorClass = Struct__GFileMonitorClass;

alias GFileMonitorPrivate = Opaque;

record Struct__GFileMonitor (
    parent_instance : GObject,
    priv : Pointer[GFileMonitorPrivate],
);

record Struct__GFileMonitorClass (
    parent_class : GObjectClass,
    changed : CCodePointer[(Pointer[Struct__GFileMonitor],OpaquePointer,OpaquePointer,Int),()],
    cancel : CCodePointer[(Pointer[Struct__GFileMonitor]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_file_monitor_get_type() CULong;

external g_file_monitor_cancel(
    monitor : Pointer[GFileMonitor]) Int;

external g_file_monitor_is_cancelled(
    monitor : Pointer[GFileMonitor]) Int;

external g_file_monitor_set_rate_limit(
    monitor : Pointer[GFileMonitor],
    limit_msecs : Int);

external g_file_monitor_emit_event(
    monitor : Pointer[GFileMonitor],
    child : Pointer[GFile],
    other_file : Pointer[GFile],
    event_type : GFileMonitorEvent);

alias GFilenameCompleterClass = Struct__GFilenameCompleterClass;

record Struct__GFilenameCompleterClass (
    parent_class : GObjectClass,
    got_completion_data : CCodePointer[(OpaquePointer),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
);

external g_filename_completer_get_type() CULong;

external g_filename_completer_new() Pointer[GFilenameCompleter];

external g_filename_completer_get_completion_suffix(
    completer : Pointer[GFilenameCompleter],
    initial_text : Pointer[CChar]) Pointer[CChar];

external g_filename_completer_get_completions(
    completer : Pointer[GFilenameCompleter],
    initial_text : Pointer[CChar]) Pointer[Pointer[CChar]];

external g_filename_completer_set_dirs_only(
    completer : Pointer[GFilenameCompleter],
    dirs_only : Int);

alias GFileOutputStreamClass = Struct__GFileOutputStreamClass;

alias GFileOutputStreamPrivate = Opaque;

record Struct__GFileOutputStream (
    parent_instance : GOutputStream,
    priv : Pointer[GFileOutputStreamPrivate],
);

record Struct__GFileOutputStreamClass (
    parent_class : GOutputStreamClass,
    tell : CCodePointer[(Pointer[Struct__GFileOutputStream]),(CLong)],
    can_seek : CCodePointer[(Pointer[Struct__GFileOutputStream]),(Int)],
    seek : CCodePointer[(Pointer[Struct__GFileOutputStream],CLong,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    can_truncate : CCodePointer[(Pointer[Struct__GFileOutputStream]),(Int)],
    truncate_fn : CCodePointer[(Pointer[Struct__GFileOutputStream],CLong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    query_info : CCodePointer[(Pointer[Struct__GFileOutputStream],Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    query_info_async : CCodePointer[(Pointer[Struct__GFileOutputStream],Pointer[CChar],Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    query_info_finish : CCodePointer[(Pointer[Struct__GFileOutputStream],OpaquePointer,Pointer[Pointer[Struct__GError]]),(OpaquePointer)],
    get_etag : CCodePointer[(Pointer[Struct__GFileOutputStream]),(Pointer[CChar])],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_file_output_stream_get_type() CULong;

external g_file_output_stream_query_info(
    stream : Pointer[GFileOutputStream],
    attributes : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_output_stream_query_info_async(
    stream : Pointer[GFileOutputStream],
    attributes : Pointer[CChar],
    io_priority : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_file_output_stream_query_info_finish(
    stream : Pointer[GFileOutputStream],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GFileInfo];

external g_file_output_stream_get_etag(
    stream : Pointer[GFileOutputStream]) Pointer[CChar];

alias GInetAddressClass = Struct__GInetAddressClass;

alias GInetAddressPrivate = Opaque;

record Struct__GInetAddress (
    parent_instance : GObject,
    priv : Pointer[GInetAddressPrivate],
);

record Struct__GInetAddressClass (
    parent_class : GObjectClass,
    to_string : CCodePointer[(Pointer[Struct__GInetAddress]),(Pointer[CChar])],
    to_bytes : CCodePointer[(Pointer[Struct__GInetAddress]),(Pointer[CUChar])],
);

external g_inet_address_get_type() CULong;

external g_inet_address_new_from_string(
    string : Pointer[CChar]) Pointer[GInetAddress];

external g_inet_address_new_from_bytes(
    bytes : Pointer[CUChar],
    family : GSocketFamily) Pointer[GInetAddress];

external g_inet_address_new_loopback(
    family : GSocketFamily) Pointer[GInetAddress];

external g_inet_address_new_any(
    family : GSocketFamily) Pointer[GInetAddress];

external g_inet_address_to_string(
    address : Pointer[GInetAddress]) Pointer[CChar];

external g_inet_address_to_bytes(
    address : Pointer[GInetAddress]) Pointer[CUChar];

external g_inet_address_get_native_size(
    address : Pointer[GInetAddress]) CULong;

external g_inet_address_get_family(
    address : Pointer[GInetAddress]) GSocketFamily;

external g_inet_address_get_is_any(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_loopback(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_link_local(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_site_local(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_multicast(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_mc_global(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_mc_link_local(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_mc_node_local(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_mc_org_local(
    address : Pointer[GInetAddress]) Int;

external g_inet_address_get_is_mc_site_local(
    address : Pointer[GInetAddress]) Int;

alias GSocketAddressClass = Struct__GSocketAddressClass;

record Struct__GSocketAddress (
    parent_instance : GObject,
);

record Struct__GSocketAddressClass (
    parent_class : GObjectClass,
    get_family : CCodePointer[(Pointer[Struct__GSocketAddress]),(Int)],
    get_native_size : CCodePointer[(Pointer[Struct__GSocketAddress]),(CLong)],
    to_native : CCodePointer[(Pointer[Struct__GSocketAddress],RawPointer,CULong,Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_socket_address_get_type() CULong;

external g_socket_address_get_family(
    address : Pointer[GSocketAddress]) GSocketFamily;

external g_socket_address_new_from_native(
    native : gpointer,
    len : CULong) Pointer[GSocketAddress];

external g_socket_address_to_native(
    address : Pointer[GSocketAddress],
    dest : gpointer,
    destlen : CULong,
    error : Pointer[Pointer[GError]]) Int;

external g_socket_address_get_native_size(
    address : Pointer[GSocketAddress]) CLong;

alias GInetSocketAddressClass = Struct__GInetSocketAddressClass;

alias GInetSocketAddressPrivate = Opaque;

record Struct__GInetSocketAddress (
    parent_instance : GSocketAddress,
    priv : Pointer[GInetSocketAddressPrivate],
);

record Struct__GInetSocketAddressClass (
    parent_class : GSocketAddressClass,
);

external g_inet_socket_address_get_type() CULong;

external g_inet_socket_address_new(
    address : Pointer[GInetAddress],
    port : UShort) Pointer[GSocketAddress];

external g_inet_socket_address_get_address(
    address : Pointer[GInetSocketAddress]) Pointer[GInetAddress];

external g_inet_socket_address_get_port(
    address : Pointer[GInetSocketAddress]) UShort;

external g_app_info_create_flags_get_type() CULong;

external g_converter_flags_get_type() CULong;

external g_converter_result_get_type() CULong;

external g_data_stream_byte_order_get_type() CULong;

external g_data_stream_newline_type_get_type() CULong;

external g_file_attribute_type_get_type() CULong;

external g_file_attribute_info_flags_get_type() CULong;

external g_file_attribute_status_get_type() CULong;

external g_file_query_info_flags_get_type() CULong;

external g_file_create_flags_get_type() CULong;

external g_mount_mount_flags_get_type() CULong;

external g_mount_unmount_flags_get_type() CULong;

external g_drive_start_flags_get_type() CULong;

external g_drive_start_stop_type_get_type() CULong;

external g_file_copy_flags_get_type() CULong;

external g_file_monitor_flags_get_type() CULong;

external g_file_type_get_type() CULong;

external g_filesystem_preview_type_get_type() CULong;

external g_file_monitor_event_get_type() CULong;

external g_io_error_enum_get_type() CULong;

external g_ask_password_flags_get_type() CULong;

external g_password_save_get_type() CULong;

external g_mount_operation_result_get_type() CULong;

external g_output_stream_splice_flags_get_type() CULong;

external g_emblem_origin_get_type() CULong;

external g_resolver_error_get_type() CULong;

external g_socket_family_get_type() CULong;

external g_socket_type_get_type() CULong;

external g_socket_msg_flags_get_type() CULong;

external g_socket_protocol_get_type() CULong;

external g_zlib_compressor_format_get_type() CULong;

external g_unix_socket_address_type_get_type() CULong;

external g_bus_type_get_type() CULong;

external g_bus_name_owner_flags_get_type() CULong;

external g_bus_name_watcher_flags_get_type() CULong;

external g_dbus_proxy_flags_get_type() CULong;

external g_dbus_error_get_type() CULong;

external g_dbus_connection_flags_get_type() CULong;

external g_dbus_capability_flags_get_type() CULong;

external g_dbus_call_flags_get_type() CULong;

external g_dbus_message_type_get_type() CULong;

external g_dbus_message_flags_get_type() CULong;

external g_dbus_message_header_field_get_type() CULong;

external g_dbus_property_info_flags_get_type() CULong;

external g_dbus_subtree_flags_get_type() CULong;

external g_dbus_server_flags_get_type() CULong;

external g_dbus_signal_flags_get_type() CULong;

external g_dbus_send_message_flags_get_type() CULong;

external g_credentials_type_get_type() CULong;

external g_dbus_message_byte_order_get_type() CULong;

external g_settings_bind_flags_get_type() CULong;

alias GIOModuleClass = Opaque;

external g_io_module_get_type() CULong;

external g_io_module_new(
    filename : Pointer[CChar]) Pointer[GIOModule];

external g_io_modules_scan_all_in_directory(
    dirname : Pointer[CChar]);

external g_io_modules_load_all_in_directory(
    dirname : Pointer[CChar]) Pointer[GList];

external g_io_extension_point_register(
    name : Pointer[CChar]) Pointer[GIOExtensionPoint];

external g_io_extension_point_lookup(
    name : Pointer[CChar]) Pointer[GIOExtensionPoint];

external g_io_extension_point_set_required_type(
    extension_point : Pointer[GIOExtensionPoint],
    type : CULong);

external g_io_extension_point_get_required_type(
    extension_point : Pointer[GIOExtensionPoint]) CULong;

external g_io_extension_point_get_extensions(
    extension_point : Pointer[GIOExtensionPoint]) Pointer[GList];

external g_io_extension_point_get_extension_by_name(
    extension_point : Pointer[GIOExtensionPoint],
    name : Pointer[CChar]) Pointer[GIOExtension];

external g_io_extension_point_implement(
    extension_point_name : Pointer[CChar],
    type : CULong,
    extension_name : Pointer[CChar],
    priority : Int) Pointer[GIOExtension];

external g_io_extension_get_type(
    extension : Pointer[GIOExtension]) CULong;

external g_io_extension_get_name(
    extension : Pointer[GIOExtension]) Pointer[CChar];

external g_io_extension_get_priority(
    extension : Pointer[GIOExtension]) Int;

external g_io_extension_ref_class(
    extension : Pointer[GIOExtension]) Pointer[GTypeClass];

external g_io_module_load(
    module : Pointer[GIOModule]);

external g_io_module_unload(
    module : Pointer[GIOModule]);

external g_io_module_query() Pointer[Pointer[CChar]];

external g_io_scheduler_push_job(
    job_func : GIOSchedulerJobFunc,
    user_data : gpointer,
    notify : GDestroyNotify,
    io_priority : Int,
    cancellable : Pointer[GCancellable]);

external g_io_scheduler_cancel_all_jobs();

external g_io_scheduler_job_send_to_mainloop(
    job : Pointer[GIOSchedulerJob],
    func : GSourceFunc,
    user_data : gpointer,
    notify : GDestroyNotify) Int;

external g_io_scheduler_job_send_to_mainloop_async(
    job : Pointer[GIOSchedulerJob],
    func : GSourceFunc,
    user_data : gpointer,
    notify : GDestroyNotify);

alias GLoadableIconIface = Struct__GLoadableIconIface;

record Struct__GLoadableIconIface (
    g_iface : GTypeInterface,
    load : CCodePointer[(OpaquePointer,Int,Pointer[Pointer[CChar]],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GInputStream])],
    load_async : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    load_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[CChar]],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GInputStream])],
);

external g_loadable_icon_get_type() CULong;

external g_loadable_icon_load(
    icon : Pointer[GLoadableIcon],
    size : Int,
    type : Pointer[Pointer[CChar]],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GInputStream];

external g_loadable_icon_load_async(
    icon : Pointer[GLoadableIcon],
    size : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_loadable_icon_load_finish(
    icon : Pointer[GLoadableIcon],
    res : Pointer[GAsyncResult],
    type : Pointer[Pointer[CChar]],
    error : Pointer[Pointer[GError]]) Pointer[GInputStream];

alias GMemoryInputStreamClass = Struct__GMemoryInputStreamClass;

alias GMemoryInputStreamPrivate = Opaque;

record Struct__GMemoryInputStream (
    parent_instance : GInputStream,
    priv : Pointer[GMemoryInputStreamPrivate],
);

record Struct__GMemoryInputStreamClass (
    parent_class : GInputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

external g_memory_input_stream_get_type() CULong;

external g_memory_input_stream_new() Pointer[GInputStream];

external g_memory_input_stream_new_from_data(
    data : RawPointer,
    len : CLong,
    destroy : GDestroyNotify) Pointer[GInputStream];

external g_memory_input_stream_add_data(
    stream : Pointer[GMemoryInputStream],
    data : RawPointer,
    len : CLong,
    destroy : GDestroyNotify);

alias GMemoryOutputStreamClass = Struct__GMemoryOutputStreamClass;

alias GMemoryOutputStreamPrivate = Opaque;

record Struct__GMemoryOutputStream (
    parent_instance : GOutputStream,
    priv : Pointer[GMemoryOutputStreamPrivate],
);

record Struct__GMemoryOutputStreamClass (
    parent_class : GOutputStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

alias GReallocFunc = CCodePointer[(RawPointer,CULong),(RawPointer)];

external g_memory_output_stream_get_type() CULong;

external g_memory_output_stream_new(
    data : gpointer,
    size : CULong,
    realloc_function : GReallocFunc,
    destroy_function : GDestroyNotify) Pointer[GOutputStream];

external g_memory_output_stream_get_data(
    ostream : Pointer[GMemoryOutputStream]) gpointer;

external g_memory_output_stream_get_size(
    ostream : Pointer[GMemoryOutputStream]) CULong;

external g_memory_output_stream_get_data_size(
    ostream : Pointer[GMemoryOutputStream]) CULong;

external g_memory_output_stream_steal_data(
    ostream : Pointer[GMemoryOutputStream]) gpointer;

alias GMountIface = Struct__GMountIface;

record Struct__GMountIface (
    g_iface : GTypeInterface,
    changed : CCodePointer[(OpaquePointer),()],
    unmounted : CCodePointer[(OpaquePointer),()],
    get_root : CCodePointer[(OpaquePointer),(OpaquePointer)],
    get_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_icon : CCodePointer[(OpaquePointer),(OpaquePointer)],
    get_uuid : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_volume : CCodePointer[(OpaquePointer),(OpaquePointer)],
    get_drive : CCodePointer[(OpaquePointer),(OpaquePointer)],
    can_unmount : CCodePointer[(OpaquePointer),(Int)],
    can_eject : CCodePointer[(OpaquePointer),(Int)],
    unmount : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    unmount_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    eject : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    remount : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    remount_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    guess_content_type : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    guess_content_type_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Pointer[CChar]])],
    guess_content_type_sync : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Pointer[CChar]])],
    pre_unmount : CCodePointer[(OpaquePointer),()],
    unmount_with_operation : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    unmount_with_operation_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    eject_with_operation : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_with_operation_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    get_default_location : CCodePointer[(OpaquePointer),(OpaquePointer)],
);

external g_mount_get_type() CULong;

external g_mount_get_root(
    mount : Pointer[GMount]) Pointer[GFile];

external g_mount_get_default_location(
    mount : Pointer[GMount]) Pointer[GFile];

external g_mount_get_name(
    mount : Pointer[GMount]) Pointer[CChar];

external g_mount_get_icon(
    mount : Pointer[GMount]) Pointer[GIcon];

external g_mount_get_uuid(
    mount : Pointer[GMount]) Pointer[CChar];

external g_mount_get_volume(
    mount : Pointer[GMount]) Pointer[GVolume];

external g_mount_get_drive(
    mount : Pointer[GMount]) Pointer[GDrive];

external g_mount_can_unmount(
    mount : Pointer[GMount]) Int;

external g_mount_can_eject(
    mount : Pointer[GMount]) Int;

external g_mount_unmount(
    mount : Pointer[GMount],
    flags : GMountUnmountFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_mount_unmount_finish(
    mount : Pointer[GMount],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_mount_eject(
    mount : Pointer[GMount],
    flags : GMountUnmountFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_mount_eject_finish(
    mount : Pointer[GMount],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_mount_remount(
    mount : Pointer[GMount],
    flags : GMountMountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_mount_remount_finish(
    mount : Pointer[GMount],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_mount_guess_content_type(
    mount : Pointer[GMount],
    force_rescan : Int,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_mount_guess_content_type_finish(
    mount : Pointer[GMount],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_mount_guess_content_type_sync(
    mount : Pointer[GMount],
    force_rescan : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_mount_is_shadowed(
    mount : Pointer[GMount]) Int;

external g_mount_shadow(
    mount : Pointer[GMount]);

external g_mount_unshadow(
    mount : Pointer[GMount]);

external g_mount_unmount_with_operation(
    mount : Pointer[GMount],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_mount_unmount_with_operation_finish(
    mount : Pointer[GMount],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_mount_eject_with_operation(
    mount : Pointer[GMount],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_mount_eject_with_operation_finish(
    mount : Pointer[GMount],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

alias GMountOperationClass = Struct__GMountOperationClass;

alias GMountOperationPrivate = Opaque;

record Struct__GMountOperation (
    parent_instance : GObject,
    priv : Pointer[GMountOperationPrivate],
);

record Struct__GMountOperationClass (
    parent_class : GObjectClass,
    ask_password : CCodePointer[(Pointer[Struct__GMountOperation],Pointer[CChar],Pointer[CChar],Pointer[CChar],Int),()],
    ask_question : CCodePointer[(Pointer[Struct__GMountOperation],Pointer[CChar],Pointer[Pointer[CChar]]),()],
    reply : CCodePointer[(Pointer[Struct__GMountOperation],Int),()],
    aborted : CCodePointer[(Pointer[Struct__GMountOperation]),()],
    show_processes : CCodePointer[(Pointer[Struct__GMountOperation],Pointer[CChar],Pointer[Struct__GArray],Pointer[Pointer[CChar]]),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
    _g_reserved8 : CCodePointer[(),()],
    _g_reserved9 : CCodePointer[(),()],
    _g_reserved10 : CCodePointer[(),()],
);

external g_mount_operation_get_type() CULong;

external g_mount_operation_new() Pointer[GMountOperation];

external g_mount_operation_get_username(
    op : Pointer[GMountOperation]) Pointer[CChar];

external g_mount_operation_set_username(
    op : Pointer[GMountOperation],
    username : Pointer[CChar]);

external g_mount_operation_get_password(
    op : Pointer[GMountOperation]) Pointer[CChar];

external g_mount_operation_set_password(
    op : Pointer[GMountOperation],
    password : Pointer[CChar]);

external g_mount_operation_get_anonymous(
    op : Pointer[GMountOperation]) Int;

external g_mount_operation_set_anonymous(
    op : Pointer[GMountOperation],
    anonymous : Int);

external g_mount_operation_get_domain(
    op : Pointer[GMountOperation]) Pointer[CChar];

external g_mount_operation_set_domain(
    op : Pointer[GMountOperation],
    domain : Pointer[CChar]);

external g_mount_operation_get_password_save(
    op : Pointer[GMountOperation]) GPasswordSave;

external g_mount_operation_set_password_save(
    op : Pointer[GMountOperation],
    save : GPasswordSave);

external g_mount_operation_get_choice(
    op : Pointer[GMountOperation]) Int;

external g_mount_operation_set_choice(
    op : Pointer[GMountOperation],
    choice : Int);

external g_mount_operation_reply(
    op : Pointer[GMountOperation],
    result : GMountOperationResult);

alias GVolumeMonitorClass = Struct__GVolumeMonitorClass;

record Struct__GVolumeMonitor (
    parent_instance : GObject,
    priv : gpointer,
);

record Struct__GVolumeMonitorClass (
    parent_class : GObjectClass,
    volume_added : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    volume_removed : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    volume_changed : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    mount_added : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    mount_removed : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    mount_pre_unmount : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    mount_changed : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    drive_connected : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    drive_disconnected : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    drive_changed : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    is_supported : CCodePointer[(),(Int)],
    get_connected_drives : CCodePointer[(Pointer[Struct__GVolumeMonitor]),(Pointer[Struct__GList])],
    get_volumes : CCodePointer[(Pointer[Struct__GVolumeMonitor]),(Pointer[Struct__GList])],
    get_mounts : CCodePointer[(Pointer[Struct__GVolumeMonitor]),(Pointer[Struct__GList])],
    get_volume_for_uuid : CCodePointer[(Pointer[Struct__GVolumeMonitor],Pointer[CChar]),(OpaquePointer)],
    get_mount_for_uuid : CCodePointer[(Pointer[Struct__GVolumeMonitor],Pointer[CChar]),(OpaquePointer)],
    adopt_orphan_mount : CCodePointer[(OpaquePointer,Pointer[Struct__GVolumeMonitor]),(OpaquePointer)],
    drive_eject_button : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    drive_stop_button : CCodePointer[(Pointer[Struct__GVolumeMonitor],OpaquePointer),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
);

external g_volume_monitor_get_type() CULong;

external g_volume_monitor_get() Pointer[GVolumeMonitor];

external g_volume_monitor_get_connected_drives(
    volume_monitor : Pointer[GVolumeMonitor]) Pointer[GList];

external g_volume_monitor_get_volumes(
    volume_monitor : Pointer[GVolumeMonitor]) Pointer[GList];

external g_volume_monitor_get_mounts(
    volume_monitor : Pointer[GVolumeMonitor]) Pointer[GList];

external g_volume_monitor_get_volume_for_uuid(
    volume_monitor : Pointer[GVolumeMonitor],
    uuid : Pointer[CChar]) Pointer[GVolume];

external g_volume_monitor_get_mount_for_uuid(
    volume_monitor : Pointer[GVolumeMonitor],
    uuid : Pointer[CChar]) Pointer[GMount];

external g_volume_monitor_adopt_orphan_mount(
    mount : Pointer[GMount]) Pointer[GVolume];

alias GNativeVolumeMonitor = Struct__GNativeVolumeMonitor;

alias GNativeVolumeMonitorClass = Struct__GNativeVolumeMonitorClass;

record Struct__GNativeVolumeMonitor (
    parent_instance : GVolumeMonitor,
);

record Struct__GNativeVolumeMonitorClass (
    parent_class : GVolumeMonitorClass,
    get_mount_for_mount_path : CCodePointer[(Pointer[CChar],Pointer[Struct__GCancellable]),(OpaquePointer)],
);

external g_native_volume_monitor_get_type() CULong;

alias GNetworkAddressClass = Struct__GNetworkAddressClass;

alias GNetworkAddressPrivate = Opaque;

record Struct__GNetworkAddress (
    parent_instance : GObject,
    priv : Pointer[GNetworkAddressPrivate],
);

record Struct__GNetworkAddressClass (
    parent_class : GObjectClass,
);

external g_network_address_get_type() CULong;

external g_network_address_new(
    hostname : Pointer[CChar],
    port : UShort) Pointer[GSocketConnectable];

external g_network_address_parse(
    host_and_port : Pointer[CChar],
    default_port : UShort,
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnectable];

external g_network_address_parse_uri(
    uri : Pointer[CChar],
    default_port : UShort,
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnectable];

external g_network_address_get_hostname(
    addr : Pointer[GNetworkAddress]) Pointer[CChar];

external g_network_address_get_port(
    addr : Pointer[GNetworkAddress]) UShort;

external g_network_address_get_scheme(
    addr : Pointer[GNetworkAddress]) Pointer[CChar];

alias GNetworkServiceClass = Struct__GNetworkServiceClass;

alias GNetworkServicePrivate = Opaque;

record Struct__GNetworkService (
    parent_instance : GObject,
    priv : Pointer[GNetworkServicePrivate],
);

record Struct__GNetworkServiceClass (
    parent_class : GObjectClass,
);

external g_network_service_get_type() CULong;

external g_network_service_new(
    service : Pointer[CChar],
    protocol : Pointer[CChar],
    domain : Pointer[CChar]) Pointer[GSocketConnectable];

external g_network_service_get_service(
    srv : Pointer[GNetworkService]) Pointer[CChar];

external g_network_service_get_protocol(
    srv : Pointer[GNetworkService]) Pointer[CChar];

external g_network_service_get_domain(
    srv : Pointer[GNetworkService]) Pointer[CChar];

external g_network_service_get_scheme(
    srv : Pointer[GNetworkService]) Pointer[CChar];

external g_network_service_set_scheme(
    srv : Pointer[GNetworkService],
    scheme : Pointer[CChar]);

alias GPermissionPrivate = Opaque;

alias GPermissionClass = Struct__GPermissionClass;

record Struct__GPermission (
    parent_instance : GObject,
    priv : Pointer[GPermissionPrivate],
);

record Struct__GPermissionClass (
    parent_class : GObjectClass,
    acquire : CCodePointer[(Pointer[Struct__GPermission],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    acquire_async : CCodePointer[(Pointer[Struct__GPermission],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    acquire_finish : CCodePointer[(Pointer[Struct__GPermission],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    release : CCodePointer[(Pointer[Struct__GPermission],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    release_async : CCodePointer[(Pointer[Struct__GPermission],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    release_finish : CCodePointer[(Pointer[Struct__GPermission],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    reserved : Array[gpointer,16],
);

external g_permission_get_type() CULong;

external g_permission_acquire(
    permission : Pointer[GPermission],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_permission_acquire_async(
    permission : Pointer[GPermission],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_permission_acquire_finish(
    permission : Pointer[GPermission],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_permission_release(
    permission : Pointer[GPermission],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_permission_release_async(
    permission : Pointer[GPermission],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_permission_release_finish(
    permission : Pointer[GPermission],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_permission_get_allowed(
    permission : Pointer[GPermission]) Int;

external g_permission_get_can_acquire(
    permission : Pointer[GPermission]) Int;

external g_permission_get_can_release(
    permission : Pointer[GPermission]) Int;

external g_permission_impl_update(
    permission : Pointer[GPermission],
    allowed : Int,
    can_acquire : Int,
    can_release : Int);

alias GProxyInterface = Struct__GProxyInterface;

record Struct__GProxyInterface (
    g_iface : GTypeInterface,
    connect : CCodePointer[(OpaquePointer,Pointer[Struct__GIOStream],Pointer[Struct__GProxyAddress],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GIOStream])],
    connect_async : CCodePointer[(OpaquePointer,Pointer[Struct__GIOStream],Pointer[Struct__GProxyAddress],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    connect_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GIOStream])],
    supports_hostname : CCodePointer[(OpaquePointer),(Int)],
);

external g_proxy_get_type() CULong;

external g_proxy_get_default_for_protocol(
    protocol : Pointer[CChar]) Pointer[GProxy];

external g_proxy_connect(
    proxy : Pointer[GProxy],
    connection : Pointer[GIOStream],
    proxy_address : Pointer[GProxyAddress],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GIOStream];

external g_proxy_connect_async(
    proxy : Pointer[GProxy],
    connection : Pointer[GIOStream],
    proxy_address : Pointer[GProxyAddress],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_proxy_connect_finish(
    proxy : Pointer[GProxy],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GIOStream];

external g_proxy_supports_hostname(
    proxy : Pointer[GProxy]) Int;

alias GProxyAddressClass = Struct__GProxyAddressClass;

alias GProxyAddressPrivate = Opaque;

record Struct__GProxyAddress (
    parent_instance : GInetSocketAddress,
    priv : Pointer[GProxyAddressPrivate],
);

record Struct__GProxyAddressClass (
    parent_class : GInetSocketAddressClass,
);

external g_proxy_address_get_type() CULong;

external g_proxy_address_new(
    inetaddr : Pointer[GInetAddress],
    port : UShort,
    protocol : Pointer[CChar],
    dest_hostname : Pointer[CChar],
    dest_port : UShort,
    username : Pointer[CChar],
    password : Pointer[CChar]) Pointer[GSocketAddress];

external g_proxy_address_get_protocol(
    proxy : Pointer[GProxyAddress]) Pointer[CChar];

external g_proxy_address_get_destination_hostname(
    proxy : Pointer[GProxyAddress]) Pointer[CChar];

external g_proxy_address_get_destination_port(
    proxy : Pointer[GProxyAddress]) UShort;

external g_proxy_address_get_username(
    proxy : Pointer[GProxyAddress]) Pointer[CChar];

external g_proxy_address_get_password(
    proxy : Pointer[GProxyAddress]) Pointer[CChar];

alias GSocketAddressEnumeratorClass = Struct__GSocketAddressEnumeratorClass;

record Struct__GSocketAddressEnumerator (
    parent_instance : GObject,
);

record Struct__GSocketAddressEnumeratorClass (
    parent_class : GObjectClass,
    next : CCodePointer[(Pointer[Struct__GSocketAddressEnumerator],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GSocketAddress])],
    next_async : CCodePointer[(Pointer[Struct__GSocketAddressEnumerator],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    next_finish : CCodePointer[(Pointer[Struct__GSocketAddressEnumerator],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GSocketAddress])],
);

external g_socket_address_enumerator_get_type() CULong;

external g_socket_address_enumerator_next(
    enumerator : Pointer[GSocketAddressEnumerator],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocketAddress];

external g_socket_address_enumerator_next_async(
    enumerator : Pointer[GSocketAddressEnumerator],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_address_enumerator_next_finish(
    enumerator : Pointer[GSocketAddressEnumerator],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GSocketAddress];

alias GProxyAddressEnumeratorClass = Struct__GProxyAddressEnumeratorClass;

alias GProxyAddressEnumeratorPrivate = Opaque;

record Struct__GProxyAddressEnumerator (
    parent_instance : GSocketAddressEnumerator,
    priv : Pointer[GProxyAddressEnumeratorPrivate],
);

record Struct__GProxyAddressEnumeratorClass (
    parent_class : GSocketAddressEnumeratorClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
);

external g_proxy_address_enumerator_get_type() CULong;

alias GProxyResolverInterface = Struct__GProxyResolverInterface;

record Struct__GProxyResolverInterface (
    g_iface : GTypeInterface,
    is_supported : CCodePointer[(OpaquePointer),(Int)],
    lookup : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Pointer[CChar]])],
    lookup_async : CCodePointer[(OpaquePointer,Pointer[CChar],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    lookup_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Pointer[CChar]])],
);

external g_proxy_resolver_get_type() CULong;

external g_proxy_resolver_get_default() Pointer[GProxyResolver];

external g_proxy_resolver_is_supported(
    resolver : Pointer[GProxyResolver]) Int;

external g_proxy_resolver_lookup(
    resolver : Pointer[GProxyResolver],
    uri : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

external g_proxy_resolver_lookup_async(
    resolver : Pointer[GProxyResolver],
    uri : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_proxy_resolver_lookup_finish(
    resolver : Pointer[GProxyResolver],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[Pointer[CChar]];

alias GResolverPrivate = Opaque;

alias GResolverClass = Struct__GResolverClass;

record Struct__GResolver (
    parent_instance : GObject,
    priv : Pointer[GResolverPrivate],
);

record Struct__GResolverClass (
    parent_class : GObjectClass,
    reload : CCodePointer[(Pointer[Struct__GResolver]),()],
    lookup_by_name : CCodePointer[(Pointer[Struct__GResolver],Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GList])],
    lookup_by_name_async : CCodePointer[(Pointer[Struct__GResolver],Pointer[CChar],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    lookup_by_name_finish : CCodePointer[(Pointer[Struct__GResolver],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GList])],
    lookup_by_address : CCodePointer[(Pointer[Struct__GResolver],Pointer[Struct__GInetAddress],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[CChar])],
    lookup_by_address_async : CCodePointer[(Pointer[Struct__GResolver],Pointer[Struct__GInetAddress],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    lookup_by_address_finish : CCodePointer[(Pointer[Struct__GResolver],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[CChar])],
    lookup_service : CCodePointer[(Pointer[Struct__GResolver],Pointer[CChar],Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GList])],
    lookup_service_async : CCodePointer[(Pointer[Struct__GResolver],Pointer[CChar],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    lookup_service_finish : CCodePointer[(Pointer[Struct__GResolver],OpaquePointer,Pointer[Pointer[Struct__GError]]),(Pointer[Struct__GList])],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
);

external g_resolver_get_type() CULong;

external g_resolver_get_default() Pointer[GResolver];

external g_resolver_set_default(
    resolver : Pointer[GResolver]);

external g_resolver_lookup_by_name(
    resolver : Pointer[GResolver],
    hostname : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GList];

external g_resolver_lookup_by_name_async(
    resolver : Pointer[GResolver],
    hostname : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_resolver_lookup_by_name_finish(
    resolver : Pointer[GResolver],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GList];

external g_resolver_free_addresses(
    addresses : Pointer[GList]);

external g_resolver_lookup_by_address(
    resolver : Pointer[GResolver],
    address : Pointer[GInetAddress],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_resolver_lookup_by_address_async(
    resolver : Pointer[GResolver],
    address : Pointer[GInetAddress],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_resolver_lookup_by_address_finish(
    resolver : Pointer[GResolver],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[CChar];

external g_resolver_lookup_service(
    resolver : Pointer[GResolver],
    service : Pointer[CChar],
    protocol : Pointer[CChar],
    domain : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GList];

external g_resolver_lookup_service_async(
    resolver : Pointer[GResolver],
    service : Pointer[CChar],
    protocol : Pointer[CChar],
    domain : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_resolver_lookup_service_finish(
    resolver : Pointer[GResolver],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GList];

external g_resolver_free_targets(
    targets : Pointer[GList]);

external g_resolver_error_quark() UInt;

alias GSeekableIface = Struct__GSeekableIface;

record Struct__GSeekableIface (
    g_iface : GTypeInterface,
    tell : CCodePointer[(OpaquePointer),(CLong)],
    can_seek : CCodePointer[(OpaquePointer),(Int)],
    seek : CCodePointer[(OpaquePointer,CLong,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    can_truncate : CCodePointer[(OpaquePointer),(Int)],
    truncate_fn : CCodePointer[(OpaquePointer,CLong,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_seekable_get_type() CULong;

external g_seekable_tell(
    seekable : Pointer[GSeekable]) CLong;

external g_seekable_can_seek(
    seekable : Pointer[GSeekable]) Int;

external g_seekable_seek(
    seekable : Pointer[GSeekable],
    offset : CLong,
    type : GSeekType,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_seekable_can_truncate(
    seekable : Pointer[GSeekable]) Int;

external g_seekable_truncate(
    seekable : Pointer[GSeekable],
    offset : CLong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

alias GSettingsPrivate = Opaque;

alias GSettingsClass = Struct__GSettingsClass;

record Struct__GSettingsClass (
    parent_class : GObjectClass,
    writable_changed : CCodePointer[(Pointer[Struct__GSettings],Pointer[CChar]),()],
    changed : CCodePointer[(Pointer[Struct__GSettings],Pointer[CChar]),()],
    writable_change_event : CCodePointer[(Pointer[Struct__GSettings],UInt),(Int)],
    change_event : CCodePointer[(Pointer[Struct__GSettings],Pointer[UInt],Int),(Int)],
    padding : Array[gpointer,20],
);

record Struct__GSettings (
    parent_instance : GObject,
    priv : Pointer[GSettingsPrivate],
);

external g_settings_get_type() CULong;

external g_settings_list_schemas() Pointer[Pointer[CChar]];

external g_settings_new(
    schema : Pointer[CChar]) Pointer[GSettings];

external g_settings_new_with_path(
    schema : Pointer[CChar],
    path : Pointer[CChar]) Pointer[GSettings];

external g_settings_new_with_backend(
    schema : Pointer[CChar],
    backend : Pointer[GSettingsBackend]) Pointer[GSettings];

external g_settings_new_with_backend_and_path(
    schema : Pointer[CChar],
    backend : Pointer[GSettingsBackend],
    path : Pointer[CChar]) Pointer[GSettings];

external g_settings_list_children(
    settings : Pointer[GSettings]) Pointer[Pointer[CChar]];

external g_settings_list_keys(
    settings : Pointer[GSettings]) Pointer[Pointer[CChar]];

external g_settings_set_value(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Pointer[GVariant]) Int;

external g_settings_get_value(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Pointer[GVariant];

external g_settings_set(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    format : Pointer[CChar],
    ...) Int;

external g_settings_get(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    format : Pointer[CChar],
    ...);

external g_settings_reset(
    settings : Pointer[GSettings],
    key : Pointer[CChar]);

external g_settings_get_int(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Int;

external g_settings_set_int(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Int) Int;

external g_settings_get_string(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Pointer[CChar];

external g_settings_set_string(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Pointer[CChar]) Int;

external g_settings_get_boolean(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Int;

external g_settings_set_boolean(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Int) Int;

external g_settings_get_double(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Double;

external g_settings_set_double(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Double) Int;

external g_settings_get_strv(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Pointer[Pointer[CChar]];

external g_settings_set_strv(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Pointer[Pointer[CChar]]) Int;

external g_settings_get_enum(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) Int;

external g_settings_set_enum(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : Int) Int;

external g_settings_get_flags(
    settings : Pointer[GSettings],
    key : Pointer[CChar]) UInt;

external g_settings_set_flags(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    value : UInt) Int;

external g_settings_get_child(
    settings : Pointer[GSettings],
    name : Pointer[CChar]) Pointer[GSettings];

external g_settings_is_writable(
    settings : Pointer[GSettings],
    name : Pointer[CChar]) Int;

external g_settings_delay(
    settings : Pointer[GSettings]);

external g_settings_apply(
    settings : Pointer[GSettings]);

external g_settings_revert(
    settings : Pointer[GSettings]);

external g_settings_get_has_unapplied(
    settings : Pointer[GSettings]) Int;

external g_settings_sync();

alias GSettingsBindSetMapping = CCodePointer[(Pointer[Struct__GValue],OpaquePointer,RawPointer),(OpaquePointer)];

alias GSettingsBindGetMapping = CCodePointer[(Pointer[Struct__GValue],OpaquePointer,RawPointer),(Int)];

alias GSettingsGetMapping = CCodePointer[(OpaquePointer,Pointer[RawPointer],RawPointer),(Int)];

alias G_SETTINGS_BIND_DEFAULT = 0;
alias G_SETTINGS_BIND_GET = 1;
alias G_SETTINGS_BIND_SET = 2;
alias G_SETTINGS_BIND_NO_SENSITIVITY = 4;
alias G_SETTINGS_BIND_GET_NO_CHANGES = 8;
alias G_SETTINGS_BIND_INVERT_BOOLEAN = 16;

alias GSettingsBindFlags = Int;

external g_settings_bind(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    object : gpointer,
    property : Pointer[CChar],
    flags : GSettingsBindFlags);

external g_settings_bind_with_mapping(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    object : gpointer,
    property : Pointer[CChar],
    flags : GSettingsBindFlags,
    get_mapping : GSettingsBindGetMapping,
    set_mapping : GSettingsBindSetMapping,
    user_data : gpointer,
    destroy : GDestroyNotify);

external g_settings_bind_writable(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    object : gpointer,
    property : Pointer[CChar],
    inverted : Int);

external g_settings_unbind(
    object : gpointer,
    property : Pointer[CChar]);

external g_settings_get_mapped(
    settings : Pointer[GSettings],
    key : Pointer[CChar],
    mapping : GSettingsGetMapping,
    user_data : gpointer) gpointer;

alias GSimpleAsyncResultClass = Opaque;

external g_simple_async_result_get_type() CULong;

external g_simple_async_result_new(
    source_object : Pointer[GObject],
    callback : GAsyncReadyCallback,
    user_data : gpointer,
    source_tag : gpointer) Pointer[GSimpleAsyncResult];

external g_simple_async_result_new_error(
    source_object : Pointer[GObject],
    callback : GAsyncReadyCallback,
    user_data : gpointer,
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    ...) Pointer[GSimpleAsyncResult];

external g_simple_async_result_new_from_error(
    source_object : Pointer[GObject],
    callback : GAsyncReadyCallback,
    user_data : gpointer,
    error : Pointer[GError]) Pointer[GSimpleAsyncResult];

external g_simple_async_result_set_op_res_gpointer(
    simple : Pointer[GSimpleAsyncResult],
    op_res : gpointer,
    destroy_op_res : GDestroyNotify);

external g_simple_async_result_get_op_res_gpointer(
    simple : Pointer[GSimpleAsyncResult]) gpointer;

external g_simple_async_result_set_op_res_gssize(
    simple : Pointer[GSimpleAsyncResult],
    op_res : CLong);

external g_simple_async_result_get_op_res_gssize(
    simple : Pointer[GSimpleAsyncResult]) CLong;

external g_simple_async_result_set_op_res_gboolean(
    simple : Pointer[GSimpleAsyncResult],
    op_res : Int);

external g_simple_async_result_get_op_res_gboolean(
    simple : Pointer[GSimpleAsyncResult]) Int;

external g_simple_async_result_get_source_tag(
    simple : Pointer[GSimpleAsyncResult]) gpointer;

external g_simple_async_result_set_handle_cancellation(
    simple : Pointer[GSimpleAsyncResult],
    handle_cancellation : Int);

external g_simple_async_result_complete(
    simple : Pointer[GSimpleAsyncResult]);

external g_simple_async_result_complete_in_idle(
    simple : Pointer[GSimpleAsyncResult]);

external g_simple_async_result_run_in_thread(
    simple : Pointer[GSimpleAsyncResult],
    func : GSimpleAsyncThreadFunc,
    io_priority : Int,
    cancellable : Pointer[GCancellable]);

external g_simple_async_result_set_from_error(
    simple : Pointer[GSimpleAsyncResult],
    error : Pointer[GError]);

external g_simple_async_result_propagate_error(
    simple : Pointer[GSimpleAsyncResult],
    dest : Pointer[Pointer[GError]]) Int;

external g_simple_async_result_set_error(
    simple : Pointer[GSimpleAsyncResult],
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    ...);

external g_simple_async_result_set_error_va(
    simple : Pointer[GSimpleAsyncResult],
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    args : Pointer[__va_list_tag]);

external g_simple_async_result_is_valid(
    result : Pointer[GAsyncResult],
    source : Pointer[GObject],
    source_tag : gpointer) Int;

external g_simple_async_report_error_in_idle(
    object : Pointer[GObject],
    callback : GAsyncReadyCallback,
    user_data : gpointer,
    domain : UInt,
    code : Int,
    format : Pointer[CChar],
    ...);

external g_simple_async_report_gerror_in_idle(
    object : Pointer[GObject],
    callback : GAsyncReadyCallback,
    user_data : gpointer,
    error : Pointer[GError]);

external g_simple_permission_get_type() CULong;

external g_simple_permission_new(
    allowed : Int) Pointer[GPermission];

alias GSocketClientPrivate = Opaque;

alias GSocketClientClass = Struct__GSocketClientClass;

record Struct__GSocketClientClass (
    parent_class : GObjectClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

record Struct__GSocketClient (
    parent_instance : GObject,
    priv : Pointer[GSocketClientPrivate],
);

external g_socket_client_get_type() CULong;

external g_socket_client_new() Pointer[GSocketClient];

external g_socket_client_get_family(
    client : Pointer[GSocketClient]) GSocketFamily;

external g_socket_client_set_family(
    client : Pointer[GSocketClient],
    family : GSocketFamily);

external g_socket_client_get_socket_type(
    client : Pointer[GSocketClient]) GSocketType;

external g_socket_client_set_socket_type(
    client : Pointer[GSocketClient],
    type : GSocketType);

external g_socket_client_get_protocol(
    client : Pointer[GSocketClient]) GSocketProtocol;

external g_socket_client_set_protocol(
    client : Pointer[GSocketClient],
    protocol : GSocketProtocol);

external g_socket_client_get_local_address(
    client : Pointer[GSocketClient]) Pointer[GSocketAddress];

external g_socket_client_set_local_address(
    client : Pointer[GSocketClient],
    address : Pointer[GSocketAddress]);

external g_socket_client_get_timeout(
    client : Pointer[GSocketClient]) UInt;

external g_socket_client_set_timeout(
    client : Pointer[GSocketClient],
    timeout : UInt);

external g_socket_client_get_enable_proxy(
    client : Pointer[GSocketClient]) Int;

external g_socket_client_set_enable_proxy(
    client : Pointer[GSocketClient],
    enable : Int);

external g_socket_client_connect(
    client : Pointer[GSocketClient],
    connectable : Pointer[GSocketConnectable],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_to_host(
    client : Pointer[GSocketClient],
    host_and_port : Pointer[CChar],
    default_port : UShort,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_to_service(
    client : Pointer[GSocketClient],
    domain : Pointer[CChar],
    service : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_to_uri(
    client : Pointer[GSocketClient],
    uri : Pointer[CChar],
    default_port : UShort,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_async(
    client : Pointer[GSocketClient],
    connectable : Pointer[GSocketConnectable],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_client_connect_finish(
    client : Pointer[GSocketClient],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_to_host_async(
    client : Pointer[GSocketClient],
    host_and_port : Pointer[CChar],
    default_port : UShort,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_client_connect_to_host_finish(
    client : Pointer[GSocketClient],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_to_service_async(
    client : Pointer[GSocketClient],
    domain : Pointer[CChar],
    service : Pointer[CChar],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_client_connect_to_service_finish(
    client : Pointer[GSocketClient],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_connect_to_uri_async(
    client : Pointer[GSocketClient],
    uri : Pointer[CChar],
    default_port : UShort,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_client_connect_to_uri_finish(
    client : Pointer[GSocketClient],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_client_add_application_proxy(
    client : Pointer[GSocketClient],
    protocol : Pointer[CChar]);

alias GSocketConnectableIface = Struct__GSocketConnectableIface;

record Struct__GSocketConnectableIface (
    g_iface : GTypeInterface,
    enumerate : CCodePointer[(OpaquePointer),(Pointer[Struct__GSocketAddressEnumerator])],
    proxy_enumerate : CCodePointer[(OpaquePointer),(Pointer[Struct__GSocketAddressEnumerator])],
);

external g_socket_connectable_get_type() CULong;

external g_socket_connectable_enumerate(
    connectable : Pointer[GSocketConnectable]) Pointer[GSocketAddressEnumerator];

external g_socket_connectable_proxy_enumerate(
    connectable : Pointer[GSocketConnectable]) Pointer[GSocketAddressEnumerator];

alias GSocketPrivate = Opaque;

alias GSocketClass = Struct__GSocketClass;

record Struct__GSocketClass (
    parent_class : GObjectClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
    _g_reserved8 : CCodePointer[(),()],
    _g_reserved9 : CCodePointer[(),()],
    _g_reserved10 : CCodePointer[(),()],
);

record Struct__GSocket (
    parent_instance : GObject,
    priv : Pointer[GSocketPrivate],
);

external g_socket_get_type() CULong;

external g_socket_new(
    family : GSocketFamily,
    type : GSocketType,
    protocol : GSocketProtocol,
    error : Pointer[Pointer[GError]]) Pointer[GSocket];

external g_socket_new_from_fd(
    fd : Int,
    error : Pointer[Pointer[GError]]) Pointer[GSocket];

external g_socket_get_fd(
    socket : Pointer[GSocket]) Int;

external g_socket_get_family(
    socket : Pointer[GSocket]) GSocketFamily;

external g_socket_get_socket_type(
    socket : Pointer[GSocket]) GSocketType;

external g_socket_get_protocol(
    socket : Pointer[GSocket]) GSocketProtocol;

external g_socket_get_local_address(
    socket : Pointer[GSocket],
    error : Pointer[Pointer[GError]]) Pointer[GSocketAddress];

external g_socket_get_remote_address(
    socket : Pointer[GSocket],
    error : Pointer[Pointer[GError]]) Pointer[GSocketAddress];

external g_socket_set_blocking(
    socket : Pointer[GSocket],
    blocking : Int);

external g_socket_get_blocking(
    socket : Pointer[GSocket]) Int;

external g_socket_set_keepalive(
    socket : Pointer[GSocket],
    keepalive : Int);

external g_socket_get_keepalive(
    socket : Pointer[GSocket]) Int;

external g_socket_get_listen_backlog(
    socket : Pointer[GSocket]) Int;

external g_socket_set_listen_backlog(
    socket : Pointer[GSocket],
    backlog : Int);

external g_socket_get_timeout(
    socket : Pointer[GSocket]) UInt;

external g_socket_set_timeout(
    socket : Pointer[GSocket],
    timeout : UInt);

external g_socket_is_connected(
    socket : Pointer[GSocket]) Int;

external g_socket_bind(
    socket : Pointer[GSocket],
    address : Pointer[GSocketAddress],
    allow_reuse : Int,
    error : Pointer[Pointer[GError]]) Int;

external g_socket_connect(
    socket : Pointer[GSocket],
    address : Pointer[GSocketAddress],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_check_connect_result(
    socket : Pointer[GSocket],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_condition_check(
    socket : Pointer[GSocket],
    condition : GIOCondition) GIOCondition;

external g_socket_condition_wait(
    socket : Pointer[GSocket],
    condition : GIOCondition,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_accept(
    socket : Pointer[GSocket],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocket];

external g_socket_listen(
    socket : Pointer[GSocket],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_receive(
    socket : Pointer[GSocket],
    buffer : Pointer[CChar],
    size : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_receive_from(
    socket : Pointer[GSocket],
    address : Pointer[Pointer[GSocketAddress]],
    buffer : Pointer[CChar],
    size : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_send(
    socket : Pointer[GSocket],
    buffer : Pointer[CChar],
    size : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_send_to(
    socket : Pointer[GSocket],
    address : Pointer[GSocketAddress],
    buffer : Pointer[CChar],
    size : CULong,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_receive_message(
    socket : Pointer[GSocket],
    address : Pointer[Pointer[GSocketAddress]],
    vectors : Pointer[GInputVector],
    num_vectors : Int,
    messages : Pointer[Pointer[Pointer[GSocketControlMessage]]],
    num_messages : Pointer[Int],
    flags : Pointer[Int],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_send_message(
    socket : Pointer[GSocket],
    address : Pointer[GSocketAddress],
    vectors : Pointer[GOutputVector],
    num_vectors : Int,
    messages : Pointer[Pointer[GSocketControlMessage]],
    num_messages : Int,
    flags : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_close(
    socket : Pointer[GSocket],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_shutdown(
    socket : Pointer[GSocket],
    shutdown_read : Int,
    shutdown_write : Int,
    error : Pointer[Pointer[GError]]) Int;

external g_socket_is_closed(
    socket : Pointer[GSocket]) Int;

external g_socket_create_source(
    socket : Pointer[GSocket],
    condition : GIOCondition,
    cancellable : Pointer[GCancellable]) Pointer[GSource];

external g_socket_speaks_ipv4(
    socket : Pointer[GSocket]) Int;

external g_socket_get_credentials(
    socket : Pointer[GSocket],
    error : Pointer[Pointer[GError]]) Pointer[GCredentials];

external g_socket_receive_with_blocking(
    socket : Pointer[GSocket],
    buffer : Pointer[CChar],
    size : CULong,
    blocking : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

external g_socket_send_with_blocking(
    socket : Pointer[GSocket],
    buffer : Pointer[CChar],
    size : CULong,
    blocking : Int,
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) CLong;

alias GSocketConnectionPrivate = Opaque;

alias GSocketConnectionClass = Struct__GSocketConnectionClass;

record Struct__GSocketConnectionClass (
    parent_class : GIOStreamClass,
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
);

record Struct__GSocketConnection (
    parent_instance : GIOStream,
    priv : Pointer[GSocketConnectionPrivate],
);

external g_socket_connection_get_type() CULong;

external g_socket_connection_get_socket(
    connection : Pointer[GSocketConnection]) Pointer[GSocket];

external g_socket_connection_get_local_address(
    connection : Pointer[GSocketConnection],
    error : Pointer[Pointer[GError]]) Pointer[GSocketAddress];

external g_socket_connection_get_remote_address(
    connection : Pointer[GSocketConnection],
    error : Pointer[Pointer[GError]]) Pointer[GSocketAddress];

external g_socket_connection_factory_register_type(
    g_type : CULong,
    family : GSocketFamily,
    type : GSocketType,
    protocol : Int);

external g_socket_connection_factory_lookup_type(
    family : GSocketFamily,
    type : GSocketType,
    protocol_id : Int) CULong;

external g_socket_connection_factory_create_connection(
    socket : Pointer[GSocket]) Pointer[GSocketConnection];

alias GSocketControlMessagePrivate = Opaque;

alias GSocketControlMessageClass = Struct__GSocketControlMessageClass;

record Struct__GSocketControlMessageClass (
    parent_class : GObjectClass,
    get_size : CCodePointer[(Pointer[Struct__GSocketControlMessage]),(CULong)],
    get_level : CCodePointer[(Pointer[Struct__GSocketControlMessage]),(Int)],
    get_type : CCodePointer[(Pointer[Struct__GSocketControlMessage]),(Int)],
    serialize : CCodePointer[(Pointer[Struct__GSocketControlMessage],RawPointer),()],
    deserialize : CCodePointer[(Int,Int,CULong,RawPointer),(Pointer[Struct__GSocketControlMessage])],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

record Struct__GSocketControlMessage (
    parent_instance : GObject,
    priv : Pointer[GSocketControlMessagePrivate],
);

external g_socket_control_message_get_type() CULong;

external g_socket_control_message_get_size(
    message : Pointer[GSocketControlMessage]) CULong;

external g_socket_control_message_get_level(
    message : Pointer[GSocketControlMessage]) Int;

external g_socket_control_message_get_msg_type(
    message : Pointer[GSocketControlMessage]) Int;

external g_socket_control_message_serialize(
    message : Pointer[GSocketControlMessage],
    data : gpointer);

external g_socket_control_message_deserialize(
    level : Int,
    type : Int,
    size : CULong,
    data : gpointer) Pointer[GSocketControlMessage];

alias GSocketListenerPrivate = Opaque;

alias GSocketListenerClass = Struct__GSocketListenerClass;

record Struct__GSocketListenerClass (
    parent_class : GObjectClass,
    changed : CCodePointer[(Pointer[Struct__GSocketListener]),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
);

record Struct__GSocketListener (
    parent_instance : GObject,
    priv : Pointer[GSocketListenerPrivate],
);

external g_socket_listener_get_type() CULong;

external g_socket_listener_new() Pointer[GSocketListener];

external g_socket_listener_set_backlog(
    listener : Pointer[GSocketListener],
    listen_backlog : Int);

external g_socket_listener_add_socket(
    listener : Pointer[GSocketListener],
    socket : Pointer[GSocket],
    source_object : Pointer[GObject],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_listener_add_address(
    listener : Pointer[GSocketListener],
    address : Pointer[GSocketAddress],
    type : GSocketType,
    protocol : GSocketProtocol,
    source_object : Pointer[GObject],
    effective_address : Pointer[Pointer[GSocketAddress]],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_listener_add_inet_port(
    listener : Pointer[GSocketListener],
    port : UShort,
    source_object : Pointer[GObject],
    error : Pointer[Pointer[GError]]) Int;

external g_socket_listener_add_any_inet_port(
    listener : Pointer[GSocketListener],
    source_object : Pointer[GObject],
    error : Pointer[Pointer[GError]]) UShort;

external g_socket_listener_accept_socket(
    listener : Pointer[GSocketListener],
    source_object : Pointer[Pointer[GObject]],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocket];

external g_socket_listener_accept_socket_async(
    listener : Pointer[GSocketListener],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_listener_accept_socket_finish(
    listener : Pointer[GSocketListener],
    result : Pointer[GAsyncResult],
    source_object : Pointer[Pointer[GObject]],
    error : Pointer[Pointer[GError]]) Pointer[GSocket];

external g_socket_listener_accept(
    listener : Pointer[GSocketListener],
    source_object : Pointer[Pointer[GObject]],
    cancellable : Pointer[GCancellable],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_listener_accept_async(
    listener : Pointer[GSocketListener],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_socket_listener_accept_finish(
    listener : Pointer[GSocketListener],
    result : Pointer[GAsyncResult],
    source_object : Pointer[Pointer[GObject]],
    error : Pointer[Pointer[GError]]) Pointer[GSocketConnection];

external g_socket_listener_close(
    listener : Pointer[GSocketListener]);

alias GSocketServicePrivate = Opaque;

alias GSocketServiceClass = Struct__GSocketServiceClass;

record Struct__GSocketServiceClass (
    parent_class : GSocketListenerClass,
    incoming : CCodePointer[(Pointer[Struct__GSocketService],Pointer[Struct__GSocketConnection],Pointer[Struct__GObject]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
);

record Struct__GSocketService (
    parent_instance : GSocketListener,
    priv : Pointer[GSocketServicePrivate],
);

external g_socket_service_get_type() CULong;

external g_socket_service_new() Pointer[GSocketService];

external g_socket_service_start(
    service : Pointer[GSocketService]);

external g_socket_service_stop(
    service : Pointer[GSocketService]);

external g_socket_service_is_active(
    service : Pointer[GSocketService]) Int;

external g_srv_target_get_type() CULong;

external g_srv_target_new(
    hostname : Pointer[CChar],
    port : UShort,
    priority : UShort,
    weight : UShort) Pointer[GSrvTarget];

external g_srv_target_copy(
    target : Pointer[GSrvTarget]) Pointer[GSrvTarget];

external g_srv_target_free(
    target : Pointer[GSrvTarget]);

external g_srv_target_get_hostname(
    target : Pointer[GSrvTarget]) Pointer[CChar];

external g_srv_target_get_port(
    target : Pointer[GSrvTarget]) UShort;

external g_srv_target_get_priority(
    target : Pointer[GSrvTarget]) UShort;

external g_srv_target_get_weight(
    target : Pointer[GSrvTarget]) UShort;

external g_srv_target_list_sort(
    targets : Pointer[GList]) Pointer[GList];

alias GTcpConnectionPrivate = Opaque;

alias GTcpConnectionClass = Struct__GTcpConnectionClass;

record Struct__GTcpConnectionClass (
    parent_class : GSocketConnectionClass,
);

record Struct__GTcpConnection (
    parent_instance : GSocketConnection,
    priv : Pointer[GTcpConnectionPrivate],
);

external g_tcp_connection_get_type() CULong;

external g_tcp_connection_set_graceful_disconnect(
    connection : Pointer[GTcpConnection],
    graceful_disconnect : Int);

external g_tcp_connection_get_graceful_disconnect(
    connection : Pointer[GTcpConnection]) Int;

alias GThemedIconClass = Opaque;

external g_themed_icon_get_type() CULong;

external g_themed_icon_new(
    iconname : Pointer[CChar]) Pointer[GIcon];

external g_themed_icon_new_with_default_fallbacks(
    iconname : Pointer[CChar]) Pointer[GIcon];

external g_themed_icon_new_from_names(
    iconnames : Pointer[Pointer[CChar]],
    len : Int) Pointer[GIcon];

external g_themed_icon_prepend_name(
    icon : Pointer[GThemedIcon],
    iconname : Pointer[CChar]);

external g_themed_icon_append_name(
    icon : Pointer[GThemedIcon],
    iconname : Pointer[CChar]);

external g_themed_icon_get_names(
    icon : Pointer[GThemedIcon]) Pointer[Pointer[CChar]];

alias GThreadedSocketServicePrivate = Opaque;

alias GThreadedSocketServiceClass = Struct__GThreadedSocketServiceClass;

record Struct__GThreadedSocketServiceClass (
    parent_class : GSocketServiceClass,
    run : CCodePointer[(Pointer[Struct__GThreadedSocketService],Pointer[Struct__GSocketConnection],Pointer[Struct__GObject]),(Int)],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
);

record Struct__GThreadedSocketService (
    parent_instance : GSocketService,
    priv : Pointer[GThreadedSocketServicePrivate],
);

external g_threaded_socket_service_get_type() CULong;

external g_threaded_socket_service_new(
    max_threads : Int) Pointer[GSocketService];

alias GVfsClass = Struct__GVfsClass;

record Struct__GVfs (
    parent_instance : GObject,
);

record Struct__GVfsClass (
    parent_class : GObjectClass,
    is_active : CCodePointer[(Pointer[Struct__GVfs]),(Int)],
    get_file_for_path : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar]),(OpaquePointer)],
    get_file_for_uri : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar]),(OpaquePointer)],
    get_supported_uri_schemes : CCodePointer[(Pointer[Struct__GVfs]),(Pointer[Pointer[CChar]])],
    parse_name : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar]),(OpaquePointer)],
    local_file_add_info : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar],CULong,OpaquePointer,OpaquePointer,Pointer[Struct__GCancellable],Pointer[RawPointer],Pointer[CCodePointer[(RawPointer),()]]),()],
    add_writable_namespaces : CCodePointer[(Pointer[Struct__GVfs],Pointer[Struct__GFileAttributeInfoList]),()],
    local_file_set_attributes : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar],OpaquePointer,Int,Pointer[Struct__GCancellable],Pointer[Pointer[Struct__GError]]),(Int)],
    local_file_removed : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar]),()],
    local_file_moved : CCodePointer[(Pointer[Struct__GVfs],Pointer[CChar],Pointer[CChar]),()],
    _g_reserved1 : CCodePointer[(),()],
    _g_reserved2 : CCodePointer[(),()],
    _g_reserved3 : CCodePointer[(),()],
    _g_reserved4 : CCodePointer[(),()],
    _g_reserved5 : CCodePointer[(),()],
    _g_reserved6 : CCodePointer[(),()],
    _g_reserved7 : CCodePointer[(),()],
);

external g_vfs_get_type() CULong;

external g_vfs_is_active(
    vfs : Pointer[GVfs]) Int;

external g_vfs_get_file_for_path(
    vfs : Pointer[GVfs],
    path : Pointer[CChar]) Pointer[GFile];

external g_vfs_get_file_for_uri(
    vfs : Pointer[GVfs],
    uri : Pointer[CChar]) Pointer[GFile];

external g_vfs_get_supported_uri_schemes(
    vfs : Pointer[GVfs]) Pointer[Pointer[CChar]];

external g_vfs_parse_name(
    vfs : Pointer[GVfs],
    parse_name : Pointer[CChar]) Pointer[GFile];

external g_vfs_get_default() Pointer[GVfs];

external g_vfs_get_local() Pointer[GVfs];

alias GVolumeIface = Struct__GVolumeIface;

record Struct__GVolumeIface (
    g_iface : GTypeInterface,
    changed : CCodePointer[(OpaquePointer),()],
    removed : CCodePointer[(OpaquePointer),()],
    get_name : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_icon : CCodePointer[(OpaquePointer),(OpaquePointer)],
    get_uuid : CCodePointer[(OpaquePointer),(Pointer[CChar])],
    get_drive : CCodePointer[(OpaquePointer),(OpaquePointer)],
    get_mount : CCodePointer[(OpaquePointer),(OpaquePointer)],
    can_mount : CCodePointer[(OpaquePointer),(Int)],
    can_eject : CCodePointer[(OpaquePointer),(Int)],
    mount_fn : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    mount_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    eject : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
    get_identifier : CCodePointer[(OpaquePointer,Pointer[CChar]),(Pointer[CChar])],
    enumerate_identifiers : CCodePointer[(OpaquePointer),(Pointer[Pointer[CChar]])],
    should_automount : CCodePointer[(OpaquePointer),(Int)],
    get_activation_root : CCodePointer[(OpaquePointer),(OpaquePointer)],
    eject_with_operation : CCodePointer[(OpaquePointer,Int,Pointer[Struct__GMountOperation],Pointer[Struct__GCancellable],CCodePointer[(Pointer[Struct__GObject],OpaquePointer,RawPointer),()],RawPointer),()],
    eject_with_operation_finish : CCodePointer[(OpaquePointer,OpaquePointer,Pointer[Pointer[Struct__GError]]),(Int)],
);

external g_volume_get_type() CULong;

external g_volume_get_name(
    volume : Pointer[GVolume]) Pointer[CChar];

external g_volume_get_icon(
    volume : Pointer[GVolume]) Pointer[GIcon];

external g_volume_get_uuid(
    volume : Pointer[GVolume]) Pointer[CChar];

external g_volume_get_drive(
    volume : Pointer[GVolume]) Pointer[GDrive];

external g_volume_get_mount(
    volume : Pointer[GVolume]) Pointer[GMount];

external g_volume_can_mount(
    volume : Pointer[GVolume]) Int;

external g_volume_can_eject(
    volume : Pointer[GVolume]) Int;

external g_volume_should_automount(
    volume : Pointer[GVolume]) Int;

external g_volume_mount(
    volume : Pointer[GVolume],
    flags : GMountMountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_volume_mount_finish(
    volume : Pointer[GVolume],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_volume_eject(
    volume : Pointer[GVolume],
    flags : GMountUnmountFlags,
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_volume_eject_finish(
    volume : Pointer[GVolume],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

external g_volume_get_identifier(
    volume : Pointer[GVolume],
    kind : Pointer[CChar]) Pointer[CChar];

external g_volume_enumerate_identifiers(
    volume : Pointer[GVolume]) Pointer[Pointer[CChar]];

external g_volume_get_activation_root(
    volume : Pointer[GVolume]) Pointer[GFile];

external g_volume_eject_with_operation(
    volume : Pointer[GVolume],
    flags : GMountUnmountFlags,
    mount_operation : Pointer[GMountOperation],
    cancellable : Pointer[GCancellable],
    callback : GAsyncReadyCallback,
    user_data : gpointer);

external g_volume_eject_with_operation_finish(
    volume : Pointer[GVolume],
    result : Pointer[GAsyncResult],
    error : Pointer[Pointer[GError]]) Int;

alias GZlibCompressorClass = Struct__GZlibCompressorClass;

record Struct__GZlibCompressorClass (
    parent_class : GObjectClass,
);

external g_zlib_compressor_get_type() CULong;

external g_zlib_compressor_new(
    format : GZlibCompressorFormat,
    level : Int) Pointer[GZlibCompressor];

external g_zlib_compressor_get_file_info(
    compressor : Pointer[GZlibCompressor]) Pointer[GFileInfo];

external g_zlib_compressor_set_file_info(
    compressor : Pointer[GZlibCompressor],
    file_info : Pointer[GFileInfo]);

alias GZlibDecompressorClass = Struct__GZlibDecompressorClass;

record Struct__GZlibDecompressorClass (
    parent_class : GObjectClass,
);

external g_zlib_decompressor_get_type() CULong;

external g_zlib_decompressor_new(
    format : GZlibCompressorFormat) Pointer[GZlibDecompressor];

external g_zlib_decompressor_get_file_info(
    decompressor : Pointer[GZlibDecompressor]) Pointer[GFileInfo];
