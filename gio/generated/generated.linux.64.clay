/* automatically generated by clay-bindgen */
import glib.generated.*;
import gobject.generated.*;

alias GIOChannel = Struct__GIOChannel;

alias GIOFuncs = Struct__GIOFuncs;

alias Enum_Unnamed1 = UInt;
alias G_IO_ERROR_NONE = UInt(0);
alias G_IO_ERROR_AGAIN = UInt(1);
alias G_IO_ERROR_INVAL = UInt(2);
alias G_IO_ERROR_UNKNOWN = UInt(3);

alias GIOError = UInt;

alias Enum_Unnamed2 = UInt;
alias G_IO_CHANNEL_ERROR_FBIG = UInt(0);
alias G_IO_CHANNEL_ERROR_INVAL = UInt(1);
alias G_IO_CHANNEL_ERROR_IO = UInt(2);
alias G_IO_CHANNEL_ERROR_ISDIR = UInt(3);
alias G_IO_CHANNEL_ERROR_NOSPC = UInt(4);
alias G_IO_CHANNEL_ERROR_NXIO = UInt(5);
alias G_IO_CHANNEL_ERROR_OVERFLOW = UInt(6);
alias G_IO_CHANNEL_ERROR_PIPE = UInt(7);
alias G_IO_CHANNEL_ERROR_FAILED = UInt(8);

alias GIOChannelError = UInt;

alias Enum_Unnamed3 = UInt;
alias G_IO_STATUS_ERROR = UInt(0);
alias G_IO_STATUS_NORMAL = UInt(1);
alias G_IO_STATUS_EOF = UInt(2);
alias G_IO_STATUS_AGAIN = UInt(3);

alias GIOStatus = UInt;

alias Enum_Unnamed4 = UInt;
alias G_SEEK_CUR = UInt(0);
alias G_SEEK_SET = UInt(1);
alias G_SEEK_END = UInt(2);

alias GSeekType = UInt;

alias Enum_Unnamed5 = UInt;
alias G_IO_IN = UInt(1);
alias G_IO_OUT = UInt(4);
alias G_IO_PRI = UInt(2);
alias G_IO_ERR = UInt(8);
alias G_IO_HUP = UInt(16);
alias G_IO_NVAL = UInt(32);

alias GIOCondition = UInt;

alias Enum_Unnamed6 = UInt;
alias G_IO_FLAG_APPEND = UInt(1);
alias G_IO_FLAG_NONBLOCK = UInt(2);
alias G_IO_FLAG_IS_READABLE = UInt(4);
alias G_IO_FLAG_IS_WRITEABLE = UInt(8);
alias G_IO_FLAG_IS_SEEKABLE = UInt(16);
alias G_IO_FLAG_MASK = UInt(31);
alias G_IO_FLAG_GET_MASK = UInt(31);
alias G_IO_FLAG_SET_MASK = UInt(3);

alias GIOFlags = UInt;

record Struct__GIOChannel (
    ref_count : gint,
    funcs : Pointer[GIOFuncs],
    encoding : Pointer[gchar],
    read_cd : GIConv,
    write_cd : GIConv,
    line_term : Pointer[gchar],
    line_term_len : guint,
    buf_size : gsize,
    read_buf : Pointer[GString],
    encoded_read_buf : Pointer[GString],
    write_buf : Pointer[GString],
    partial_write_buf : Array[gchar, 6],
    use_buffer : guint,
    do_encode : guint,
    close_on_unref : guint,
    is_readable : guint,
    is_writeable : guint,
    is_seekable : guint,
    reserved1 : gpointer,
    reserved2 : gpointer,
);

alias GIOFunc = CCodePointer[[Pointer[GIOChannel], GIOCondition, gpointer],[gboolean]];

record Struct__GIOFuncs (
    io_read : CCodePointer[[Pointer[GIOChannel], Pointer[gchar], gsize, Pointer[gsize], Pointer[Pointer[GError]]],[GIOStatus]],
    io_write : CCodePointer[[Pointer[GIOChannel], Pointer[gchar], gsize, Pointer[gsize], Pointer[Pointer[GError]]],[GIOStatus]],
    io_seek : CCodePointer[[Pointer[GIOChannel], gint64, GSeekType, Pointer[Pointer[GError]]],[GIOStatus]],
    io_close : CCodePointer[[Pointer[GIOChannel], Pointer[Pointer[GError]]],[GIOStatus]],
    io_create_watch : CCodePointer[[Pointer[GIOChannel], GIOCondition],[Pointer[GSource]]],
    io_free : CCodePointer[[Pointer[GIOChannel]],[]],
    io_set_flags : CCodePointer[[Pointer[GIOChannel], GIOFlags, Pointer[Pointer[GError]]],[GIOStatus]],
    io_get_flags : CCodePointer[[Pointer[GIOChannel]],[GIOFlags]],
);

external (cdecl) g_io_channel_init(arg0:Pointer[GIOChannel]) : ;

external (cdecl) g_io_channel_ref(arg0:Pointer[GIOChannel]) : Pointer[GIOChannel];

external (cdecl) g_io_channel_unref(arg0:Pointer[GIOChannel]) : ;

external (cdecl) g_io_channel_read(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[gsize]) : GIOError;

external (cdecl) g_io_channel_write(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[gsize]) : GIOError;

external (cdecl) g_io_channel_seek(arg0:Pointer[GIOChannel], arg1:gint64, arg2:GSeekType) : GIOError;

external (cdecl) g_io_channel_close(arg0:Pointer[GIOChannel]) : ;

external (cdecl) g_io_channel_shutdown(arg0:Pointer[GIOChannel], arg1:gboolean, arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_add_watch_full(arg0:Pointer[GIOChannel], arg1:gint, arg2:GIOCondition, arg3:GIOFunc, arg4:gpointer, arg5:GDestroyNotify) : guint;

external (cdecl) g_io_create_watch(arg0:Pointer[GIOChannel], arg1:GIOCondition) : Pointer[GSource];

external (cdecl) g_io_add_watch(arg0:Pointer[GIOChannel], arg1:GIOCondition, arg2:GIOFunc, arg3:gpointer) : guint;

external (cdecl) g_io_channel_set_buffer_size(arg0:Pointer[GIOChannel], arg1:gsize) : ;

external (cdecl) g_io_channel_get_buffer_size(arg0:Pointer[GIOChannel]) : gsize;

external (cdecl) g_io_channel_get_buffer_condition(arg0:Pointer[GIOChannel]) : GIOCondition;

external (cdecl) g_io_channel_set_flags(arg0:Pointer[GIOChannel], arg1:GIOFlags, arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_get_flags(arg0:Pointer[GIOChannel]) : GIOFlags;

external (cdecl) g_io_channel_set_line_term(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gint) : ;

external (cdecl) g_io_channel_get_line_term(arg0:Pointer[GIOChannel], arg1:Pointer[gint]) : Pointer[gchar];

external (cdecl) g_io_channel_set_buffered(arg0:Pointer[GIOChannel], arg1:gboolean) : ;

external (cdecl) g_io_channel_get_buffered(arg0:Pointer[GIOChannel]) : gboolean;

external (cdecl) g_io_channel_set_encoding(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_get_encoding(arg0:Pointer[GIOChannel]) : Pointer[gchar];

external (cdecl) g_io_channel_set_close_on_unref(arg0:Pointer[GIOChannel], arg1:gboolean) : ;

external (cdecl) g_io_channel_get_close_on_unref(arg0:Pointer[GIOChannel]) : gboolean;

external (cdecl) g_io_channel_flush(arg0:Pointer[GIOChannel], arg1:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_line(arg0:Pointer[GIOChannel], arg1:Pointer[Pointer[gchar]], arg2:Pointer[gsize], arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_line_string(arg0:Pointer[GIOChannel], arg1:Pointer[GString], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_to_end(arg0:Pointer[GIOChannel], arg1:Pointer[Pointer[gchar]], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_chars(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_read_unichar(arg0:Pointer[GIOChannel], arg1:Pointer[gunichar], arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_write_chars(arg0:Pointer[GIOChannel], arg1:Pointer[gchar], arg2:gssize, arg3:Pointer[gsize], arg4:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_write_unichar(arg0:Pointer[GIOChannel], arg1:gunichar, arg2:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_seek_position(arg0:Pointer[GIOChannel], arg1:gint64, arg2:GSeekType, arg3:Pointer[Pointer[GError]]) : GIOStatus;

external (cdecl) g_io_channel_new_file(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GIOChannel];

external (cdecl) g_io_channel_error_quark() : GQuark;

external (cdecl) g_io_channel_error_from_errno(arg0:gint) : GIOChannelError;

external (cdecl) g_io_channel_unix_new(arg0:Int) : Pointer[GIOChannel];

external (cdecl) g_io_channel_unix_get_fd(arg0:Pointer[GIOChannel]) : gint;

external g_io_watch_funcs : GSourceFuncs;

alias Enum_Unnamed7 = UInt;
alias G_APP_INFO_CREATE_NONE = UInt(0);
alias G_APP_INFO_CREATE_NEEDS_TERMINAL = UInt(1);
alias G_APP_INFO_CREATE_SUPPORTS_URIS = UInt(2);
alias G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = UInt(4);

alias GAppInfoCreateFlags = UInt;

alias Enum_Unnamed8 = UInt;
alias G_CONVERTER_NO_FLAGS = UInt(0);
alias G_CONVERTER_INPUT_AT_END = UInt(1);
alias G_CONVERTER_FLUSH = UInt(2);

alias GConverterFlags = UInt;

alias Enum_Unnamed9 = UInt;
alias G_CONVERTER_ERROR = UInt(0);
alias G_CONVERTER_CONVERTED = UInt(1);
alias G_CONVERTER_FINISHED = UInt(2);
alias G_CONVERTER_FLUSHED = UInt(3);

alias GConverterResult = UInt;

alias Enum_Unnamed10 = UInt;
alias G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = UInt(0);
alias G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = UInt(1);
alias G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = UInt(2);

alias GDataStreamByteOrder = UInt;

alias Enum_Unnamed11 = UInt;
alias G_DATA_STREAM_NEWLINE_TYPE_LF = UInt(0);
alias G_DATA_STREAM_NEWLINE_TYPE_CR = UInt(1);
alias G_DATA_STREAM_NEWLINE_TYPE_CR_LF = UInt(2);
alias G_DATA_STREAM_NEWLINE_TYPE_ANY = UInt(3);

alias GDataStreamNewlineType = UInt;

alias Enum_Unnamed12 = UInt;
alias G_FILE_ATTRIBUTE_TYPE_INVALID = UInt(0);
alias G_FILE_ATTRIBUTE_TYPE_STRING = UInt(1);
alias G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = UInt(2);
alias G_FILE_ATTRIBUTE_TYPE_BOOLEAN = UInt(3);
alias G_FILE_ATTRIBUTE_TYPE_UINT32 = UInt(4);
alias G_FILE_ATTRIBUTE_TYPE_INT32 = UInt(5);
alias G_FILE_ATTRIBUTE_TYPE_UINT64 = UInt(6);
alias G_FILE_ATTRIBUTE_TYPE_INT64 = UInt(7);
alias G_FILE_ATTRIBUTE_TYPE_OBJECT = UInt(8);
alias G_FILE_ATTRIBUTE_TYPE_STRINGV = UInt(9);

alias GFileAttributeType = UInt;

alias Enum_Unnamed13 = UInt;
alias G_FILE_ATTRIBUTE_INFO_NONE = UInt(0);
alias G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = UInt(1);
alias G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = UInt(2);

alias GFileAttributeInfoFlags = UInt;

alias Enum_Unnamed14 = UInt;
alias G_FILE_ATTRIBUTE_STATUS_UNSET = UInt(0);
alias G_FILE_ATTRIBUTE_STATUS_SET = UInt(1);
alias G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = UInt(2);

alias GFileAttributeStatus = UInt;

alias Enum_Unnamed15 = UInt;
alias G_FILE_QUERY_INFO_NONE = UInt(0);
alias G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = UInt(1);

alias GFileQueryInfoFlags = UInt;

alias Enum_Unnamed16 = UInt;
alias G_FILE_CREATE_NONE = UInt(0);
alias G_FILE_CREATE_PRIVATE = UInt(1);
alias G_FILE_CREATE_REPLACE_DESTINATION = UInt(2);

alias GFileCreateFlags = UInt;

alias Enum_Unnamed17 = UInt;
alias G_MOUNT_MOUNT_NONE = UInt(0);

alias GMountMountFlags = UInt;

alias Enum_Unnamed18 = UInt;
alias G_MOUNT_UNMOUNT_NONE = UInt(0);
alias G_MOUNT_UNMOUNT_FORCE = UInt(1);

alias GMountUnmountFlags = UInt;

alias Enum_Unnamed19 = UInt;
alias G_DRIVE_START_NONE = UInt(0);

alias GDriveStartFlags = UInt;

alias Enum_Unnamed20 = UInt;
alias G_DRIVE_START_STOP_TYPE_UNKNOWN = UInt(0);
alias G_DRIVE_START_STOP_TYPE_SHUTDOWN = UInt(1);
alias G_DRIVE_START_STOP_TYPE_NETWORK = UInt(2);
alias G_DRIVE_START_STOP_TYPE_MULTIDISK = UInt(3);
alias G_DRIVE_START_STOP_TYPE_PASSWORD = UInt(4);

alias GDriveStartStopType = UInt;

alias Enum_Unnamed21 = UInt;
alias G_FILE_COPY_NONE = UInt(0);
alias G_FILE_COPY_OVERWRITE = UInt(1);
alias G_FILE_COPY_BACKUP = UInt(2);
alias G_FILE_COPY_NOFOLLOW_SYMLINKS = UInt(4);
alias G_FILE_COPY_ALL_METADATA = UInt(8);
alias G_FILE_COPY_NO_FALLBACK_FOR_MOVE = UInt(16);
alias G_FILE_COPY_TARGET_DEFAULT_PERMS = UInt(32);

alias GFileCopyFlags = UInt;

alias Enum_Unnamed22 = UInt;
alias G_FILE_MONITOR_NONE = UInt(0);
alias G_FILE_MONITOR_WATCH_MOUNTS = UInt(1);
alias G_FILE_MONITOR_SEND_MOVED = UInt(2);

alias GFileMonitorFlags = UInt;

alias Enum_Unnamed23 = UInt;
alias G_FILE_TYPE_UNKNOWN = UInt(0);
alias G_FILE_TYPE_REGULAR = UInt(1);
alias G_FILE_TYPE_DIRECTORY = UInt(2);
alias G_FILE_TYPE_SYMBOLIC_LINK = UInt(3);
alias G_FILE_TYPE_SPECIAL = UInt(4);
alias G_FILE_TYPE_SHORTCUT = UInt(5);
alias G_FILE_TYPE_MOUNTABLE = UInt(6);

alias GFileType = UInt;

alias Enum_Unnamed24 = UInt;
alias G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = UInt(0);
alias G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = UInt(1);
alias G_FILESYSTEM_PREVIEW_TYPE_NEVER = UInt(2);

alias GFilesystemPreviewType = UInt;

alias Enum_Unnamed25 = UInt;
alias G_FILE_MONITOR_EVENT_CHANGED = UInt(0);
alias G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = UInt(1);
alias G_FILE_MONITOR_EVENT_DELETED = UInt(2);
alias G_FILE_MONITOR_EVENT_CREATED = UInt(3);
alias G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = UInt(4);
alias G_FILE_MONITOR_EVENT_PRE_UNMOUNT = UInt(5);
alias G_FILE_MONITOR_EVENT_UNMOUNTED = UInt(6);
alias G_FILE_MONITOR_EVENT_MOVED = UInt(7);

alias GFileMonitorEvent = UInt;

alias Enum_Unnamed26 = UInt;
alias G_IO_ERROR_FAILED = UInt(0);
alias G_IO_ERROR_NOT_FOUND = UInt(1);
alias G_IO_ERROR_EXISTS = UInt(2);
alias G_IO_ERROR_IS_DIRECTORY = UInt(3);
alias G_IO_ERROR_NOT_DIRECTORY = UInt(4);
alias G_IO_ERROR_NOT_EMPTY = UInt(5);
alias G_IO_ERROR_NOT_REGULAR_FILE = UInt(6);
alias G_IO_ERROR_NOT_SYMBOLIC_LINK = UInt(7);
alias G_IO_ERROR_NOT_MOUNTABLE_FILE = UInt(8);
alias G_IO_ERROR_FILENAME_TOO_LONG = UInt(9);
alias G_IO_ERROR_INVALID_FILENAME = UInt(10);
alias G_IO_ERROR_TOO_MANY_LINKS = UInt(11);
alias G_IO_ERROR_NO_SPACE = UInt(12);
alias G_IO_ERROR_INVALID_ARGUMENT = UInt(13);
alias G_IO_ERROR_PERMISSION_DENIED = UInt(14);
alias G_IO_ERROR_NOT_SUPPORTED = UInt(15);
alias G_IO_ERROR_NOT_MOUNTED = UInt(16);
alias G_IO_ERROR_ALREADY_MOUNTED = UInt(17);
alias G_IO_ERROR_CLOSED = UInt(18);
alias G_IO_ERROR_CANCELLED = UInt(19);
alias G_IO_ERROR_PENDING = UInt(20);
alias G_IO_ERROR_READ_ONLY = UInt(21);
alias G_IO_ERROR_CANT_CREATE_BACKUP = UInt(22);
alias G_IO_ERROR_WRONG_ETAG = UInt(23);
alias G_IO_ERROR_TIMED_OUT = UInt(24);
alias G_IO_ERROR_WOULD_RECURSE = UInt(25);
alias G_IO_ERROR_BUSY = UInt(26);
alias G_IO_ERROR_WOULD_BLOCK = UInt(27);
alias G_IO_ERROR_HOST_NOT_FOUND = UInt(28);
alias G_IO_ERROR_WOULD_MERGE = UInt(29);
alias G_IO_ERROR_FAILED_HANDLED = UInt(30);
alias G_IO_ERROR_TOO_MANY_OPEN_FILES = UInt(31);
alias G_IO_ERROR_NOT_INITIALIZED = UInt(32);
alias G_IO_ERROR_ADDRESS_IN_USE = UInt(33);
alias G_IO_ERROR_PARTIAL_INPUT = UInt(34);
alias G_IO_ERROR_INVALID_DATA = UInt(35);
alias G_IO_ERROR_DBUS_ERROR = UInt(36);
alias G_IO_ERROR_HOST_UNREACHABLE = UInt(37);
alias G_IO_ERROR_NETWORK_UNREACHABLE = UInt(38);
alias G_IO_ERROR_CONNECTION_REFUSED = UInt(39);
alias G_IO_ERROR_PROXY_FAILED = UInt(40);
alias G_IO_ERROR_PROXY_AUTH_FAILED = UInt(41);
alias G_IO_ERROR_PROXY_NEED_AUTH = UInt(42);
alias G_IO_ERROR_PROXY_NOT_ALLOWED = UInt(43);

alias GIOErrorEnum = UInt;

alias Enum_Unnamed27 = UInt;
alias G_ASK_PASSWORD_NEED_PASSWORD = UInt(1);
alias G_ASK_PASSWORD_NEED_USERNAME = UInt(2);
alias G_ASK_PASSWORD_NEED_DOMAIN = UInt(4);
alias G_ASK_PASSWORD_SAVING_SUPPORTED = UInt(8);
alias G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = UInt(16);

alias GAskPasswordFlags = UInt;

alias Enum_Unnamed28 = UInt;
alias G_PASSWORD_SAVE_NEVER = UInt(0);
alias G_PASSWORD_SAVE_FOR_SESSION = UInt(1);
alias G_PASSWORD_SAVE_PERMANENTLY = UInt(2);

alias GPasswordSave = UInt;

alias Enum_Unnamed29 = UInt;
alias G_MOUNT_OPERATION_HANDLED = UInt(0);
alias G_MOUNT_OPERATION_ABORTED = UInt(1);
alias G_MOUNT_OPERATION_UNHANDLED = UInt(2);

alias GMountOperationResult = UInt;

alias Enum_Unnamed30 = UInt;
alias G_OUTPUT_STREAM_SPLICE_NONE = UInt(0);
alias G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = UInt(1);
alias G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = UInt(2);

alias GOutputStreamSpliceFlags = UInt;

alias Enum_Unnamed31 = UInt;
alias G_IO_STREAM_SPLICE_NONE = UInt(0);
alias G_IO_STREAM_SPLICE_CLOSE_STREAM1 = UInt(1);
alias G_IO_STREAM_SPLICE_CLOSE_STREAM2 = UInt(2);
alias G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = UInt(4);

alias GIOStreamSpliceFlags = UInt;

alias Enum_Unnamed32 = UInt;
alias G_EMBLEM_ORIGIN_UNKNOWN = UInt(0);
alias G_EMBLEM_ORIGIN_DEVICE = UInt(1);
alias G_EMBLEM_ORIGIN_LIVEMETADATA = UInt(2);
alias G_EMBLEM_ORIGIN_TAG = UInt(3);

alias GEmblemOrigin = UInt;

alias Enum_Unnamed33 = UInt;
alias G_RESOLVER_ERROR_NOT_FOUND = UInt(0);
alias G_RESOLVER_ERROR_TEMPORARY_FAILURE = UInt(1);
alias G_RESOLVER_ERROR_INTERNAL = UInt(2);

alias GResolverError = UInt;

alias Enum_Unnamed34 = UInt;
alias G_SOCKET_FAMILY_INVALID = UInt(0);
alias G_SOCKET_FAMILY_UNIX = UInt(1);
alias G_SOCKET_FAMILY_IPV4 = UInt(2);
alias G_SOCKET_FAMILY_IPV6 = UInt(10);

alias GSocketFamily = UInt;

alias Enum_Unnamed35 = UInt;
alias G_SOCKET_TYPE_INVALID = UInt(0);
alias G_SOCKET_TYPE_STREAM = UInt(1);
alias G_SOCKET_TYPE_DATAGRAM = UInt(2);
alias G_SOCKET_TYPE_SEQPACKET = UInt(3);

alias GSocketType = UInt;

alias Enum_Unnamed36 = UInt;
alias G_SOCKET_MSG_NONE = UInt(0);
alias G_SOCKET_MSG_OOB = UInt(1);
alias G_SOCKET_MSG_PEEK = UInt(2);
alias G_SOCKET_MSG_DONTROUTE = UInt(4);

alias GSocketMsgFlags = UInt;

alias Enum_Unnamed37 = Int;
alias G_SOCKET_PROTOCOL_UNKNOWN = Int(-1);
alias G_SOCKET_PROTOCOL_DEFAULT = Int(0);
alias G_SOCKET_PROTOCOL_TCP = Int(6);
alias G_SOCKET_PROTOCOL_UDP = Int(17);
alias G_SOCKET_PROTOCOL_SCTP = Int(132);

alias GSocketProtocol = Int;

alias Enum_Unnamed38 = UInt;
alias G_ZLIB_COMPRESSOR_FORMAT_ZLIB = UInt(0);
alias G_ZLIB_COMPRESSOR_FORMAT_GZIP = UInt(1);
alias G_ZLIB_COMPRESSOR_FORMAT_RAW = UInt(2);

alias GZlibCompressorFormat = UInt;

alias Enum_Unnamed39 = UInt;
alias G_UNIX_SOCKET_ADDRESS_INVALID = UInt(0);
alias G_UNIX_SOCKET_ADDRESS_ANONYMOUS = UInt(1);
alias G_UNIX_SOCKET_ADDRESS_PATH = UInt(2);
alias G_UNIX_SOCKET_ADDRESS_ABSTRACT = UInt(3);
alias G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = UInt(4);

alias GUnixSocketAddressType = UInt;

alias Enum_Unnamed40 = Int;
alias G_BUS_TYPE_STARTER = Int(-1);
alias G_BUS_TYPE_NONE = Int(0);
alias G_BUS_TYPE_SYSTEM = Int(1);
alias G_BUS_TYPE_SESSION = Int(2);

alias GBusType = Int;

alias Enum_Unnamed41 = UInt;
alias G_BUS_NAME_OWNER_FLAGS_NONE = UInt(0);
alias G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = UInt(1);
alias G_BUS_NAME_OWNER_FLAGS_REPLACE = UInt(2);

alias GBusNameOwnerFlags = UInt;

alias Enum_Unnamed42 = UInt;
alias G_BUS_NAME_WATCHER_FLAGS_NONE = UInt(0);
alias G_BUS_NAME_WATCHER_FLAGS_AUTO_START = UInt(1);

alias GBusNameWatcherFlags = UInt;

alias Enum_Unnamed43 = UInt;
alias G_DBUS_PROXY_FLAGS_NONE = UInt(0);
alias G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = UInt(1);
alias G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = UInt(2);
alias G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = UInt(4);

alias GDBusProxyFlags = UInt;

alias Enum_Unnamed44 = UInt;
alias G_DBUS_ERROR_FAILED = UInt(0);
alias G_DBUS_ERROR_NO_MEMORY = UInt(1);
alias G_DBUS_ERROR_SERVICE_UNKNOWN = UInt(2);
alias G_DBUS_ERROR_NAME_HAS_NO_OWNER = UInt(3);
alias G_DBUS_ERROR_NO_REPLY = UInt(4);
alias G_DBUS_ERROR_IO_ERROR = UInt(5);
alias G_DBUS_ERROR_BAD_ADDRESS = UInt(6);
alias G_DBUS_ERROR_NOT_SUPPORTED = UInt(7);
alias G_DBUS_ERROR_LIMITS_EXCEEDED = UInt(8);
alias G_DBUS_ERROR_ACCESS_DENIED = UInt(9);
alias G_DBUS_ERROR_AUTH_FAILED = UInt(10);
alias G_DBUS_ERROR_NO_SERVER = UInt(11);
alias G_DBUS_ERROR_TIMEOUT = UInt(12);
alias G_DBUS_ERROR_NO_NETWORK = UInt(13);
alias G_DBUS_ERROR_ADDRESS_IN_USE = UInt(14);
alias G_DBUS_ERROR_DISCONNECTED = UInt(15);
alias G_DBUS_ERROR_INVALID_ARGS = UInt(16);
alias G_DBUS_ERROR_FILE_NOT_FOUND = UInt(17);
alias G_DBUS_ERROR_FILE_EXISTS = UInt(18);
alias G_DBUS_ERROR_UNKNOWN_METHOD = UInt(19);
alias G_DBUS_ERROR_TIMED_OUT = UInt(20);
alias G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = UInt(21);
alias G_DBUS_ERROR_MATCH_RULE_INVALID = UInt(22);
alias G_DBUS_ERROR_SPAWN_EXEC_FAILED = UInt(23);
alias G_DBUS_ERROR_SPAWN_FORK_FAILED = UInt(24);
alias G_DBUS_ERROR_SPAWN_CHILD_EXITED = UInt(25);
alias G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = UInt(26);
alias G_DBUS_ERROR_SPAWN_FAILED = UInt(27);
alias G_DBUS_ERROR_SPAWN_SETUP_FAILED = UInt(28);
alias G_DBUS_ERROR_SPAWN_CONFIG_INVALID = UInt(29);
alias G_DBUS_ERROR_SPAWN_SERVICE_INVALID = UInt(30);
alias G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = UInt(31);
alias G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = UInt(32);
alias G_DBUS_ERROR_SPAWN_FILE_INVALID = UInt(33);
alias G_DBUS_ERROR_SPAWN_NO_MEMORY = UInt(34);
alias G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = UInt(35);
alias G_DBUS_ERROR_INVALID_SIGNATURE = UInt(36);
alias G_DBUS_ERROR_INVALID_FILE_CONTENT = UInt(37);
alias G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = UInt(38);
alias G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = UInt(39);
alias G_DBUS_ERROR_OBJECT_PATH_IN_USE = UInt(40);

alias GDBusError = UInt;

alias Enum_Unnamed45 = UInt;
alias G_DBUS_CONNECTION_FLAGS_NONE = UInt(0);
alias G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = UInt(1);
alias G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = UInt(2);
alias G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = UInt(4);
alias G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = UInt(8);
alias G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = UInt(16);

alias GDBusConnectionFlags = UInt;

alias Enum_Unnamed46 = UInt;
alias G_DBUS_CAPABILITY_FLAGS_NONE = UInt(0);
alias G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = UInt(1);

alias GDBusCapabilityFlags = UInt;

alias Enum_Unnamed47 = UInt;
alias G_DBUS_CALL_FLAGS_NONE = UInt(0);
alias G_DBUS_CALL_FLAGS_NO_AUTO_START = UInt(1);

alias GDBusCallFlags = UInt;

alias Enum_Unnamed48 = UInt;
alias G_DBUS_MESSAGE_TYPE_INVALID = UInt(0);
alias G_DBUS_MESSAGE_TYPE_METHOD_CALL = UInt(1);
alias G_DBUS_MESSAGE_TYPE_METHOD_RETURN = UInt(2);
alias G_DBUS_MESSAGE_TYPE_ERROR = UInt(3);
alias G_DBUS_MESSAGE_TYPE_SIGNAL = UInt(4);

alias GDBusMessageType = UInt;

alias Enum_Unnamed49 = UInt;
alias G_DBUS_MESSAGE_FLAGS_NONE = UInt(0);
alias G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = UInt(1);
alias G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = UInt(2);

alias GDBusMessageFlags = UInt;

alias Enum_Unnamed50 = UInt;
alias G_DBUS_MESSAGE_HEADER_FIELD_INVALID = UInt(0);
alias G_DBUS_MESSAGE_HEADER_FIELD_PATH = UInt(1);
alias G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = UInt(2);
alias G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = UInt(3);
alias G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = UInt(4);
alias G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = UInt(5);
alias G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = UInt(6);
alias G_DBUS_MESSAGE_HEADER_FIELD_SENDER = UInt(7);
alias G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = UInt(8);
alias G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = UInt(9);

alias GDBusMessageHeaderField = UInt;

alias Enum_Unnamed51 = UInt;
alias G_DBUS_PROPERTY_INFO_FLAGS_NONE = UInt(0);
alias G_DBUS_PROPERTY_INFO_FLAGS_READABLE = UInt(1);
alias G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = UInt(2);

alias GDBusPropertyInfoFlags = UInt;

alias Enum_Unnamed52 = UInt;
alias G_DBUS_SUBTREE_FLAGS_NONE = UInt(0);
alias G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = UInt(1);

alias GDBusSubtreeFlags = UInt;

alias Enum_Unnamed53 = UInt;
alias G_DBUS_SERVER_FLAGS_NONE = UInt(0);
alias G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = UInt(1);
alias G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = UInt(2);

alias GDBusServerFlags = UInt;

alias Enum_Unnamed54 = UInt;
alias G_DBUS_SIGNAL_FLAGS_NONE = UInt(0);
alias G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = UInt(1);

alias GDBusSignalFlags = UInt;

alias Enum_Unnamed55 = UInt;
alias G_DBUS_SEND_MESSAGE_FLAGS_NONE = UInt(0);
alias G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = UInt(1);

alias GDBusSendMessageFlags = UInt;

alias Enum_Unnamed56 = UInt;
alias G_CREDENTIALS_TYPE_INVALID = UInt(0);
alias G_CREDENTIALS_TYPE_LINUX_UCRED = UInt(1);
alias G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = UInt(2);
alias G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = UInt(3);

alias GCredentialsType = UInt;

alias Enum_Unnamed57 = UInt;
alias G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = UInt(66);
alias G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = UInt(108);

alias GDBusMessageByteOrder = UInt;

alias Enum_Unnamed58 = UInt;
alias G_APPLICATION_FLAGS_NONE = UInt(0);
alias G_APPLICATION_IS_SERVICE = UInt(1);
alias G_APPLICATION_IS_LAUNCHER = UInt(2);
alias G_APPLICATION_HANDLES_OPEN = UInt(4);
alias G_APPLICATION_HANDLES_COMMAND_LINE = UInt(8);
alias G_APPLICATION_SEND_ENVIRONMENT = UInt(16);
alias G_APPLICATION_NON_UNIQUE = UInt(32);

alias GApplicationFlags = UInt;

alias Enum_Unnamed59 = UInt;
alias G_TLS_ERROR_UNAVAILABLE = UInt(0);
alias G_TLS_ERROR_MISC = UInt(1);
alias G_TLS_ERROR_BAD_CERTIFICATE = UInt(2);
alias G_TLS_ERROR_NOT_TLS = UInt(3);
alias G_TLS_ERROR_HANDSHAKE = UInt(4);
alias G_TLS_ERROR_CERTIFICATE_REQUIRED = UInt(5);
alias G_TLS_ERROR_EOF = UInt(6);

alias GTlsError = UInt;

alias Enum_Unnamed60 = UInt;
alias G_TLS_CERTIFICATE_UNKNOWN_CA = UInt(1);
alias G_TLS_CERTIFICATE_BAD_IDENTITY = UInt(2);
alias G_TLS_CERTIFICATE_NOT_ACTIVATED = UInt(4);
alias G_TLS_CERTIFICATE_EXPIRED = UInt(8);
alias G_TLS_CERTIFICATE_REVOKED = UInt(16);
alias G_TLS_CERTIFICATE_INSECURE = UInt(32);
alias G_TLS_CERTIFICATE_GENERIC_ERROR = UInt(64);
alias G_TLS_CERTIFICATE_VALIDATE_ALL = UInt(127);

alias GTlsCertificateFlags = UInt;

alias Enum_Unnamed61 = UInt;
alias G_TLS_AUTHENTICATION_NONE = UInt(0);
alias G_TLS_AUTHENTICATION_REQUESTED = UInt(1);
alias G_TLS_AUTHENTICATION_REQUIRED = UInt(2);

alias GTlsAuthenticationMode = UInt;

alias Enum_Unnamed62 = UInt;
alias G_TLS_REHANDSHAKE_NEVER = UInt(0);
alias G_TLS_REHANDSHAKE_SAFELY = UInt(1);
alias G_TLS_REHANDSHAKE_UNSAFELY = UInt(2);

alias GTlsRehandshakeMode = UInt;

alias Enum__GTlsPasswordFlags = UInt;
alias G_TLS_PASSWORD_NONE = UInt(0);
alias G_TLS_PASSWORD_RETRY = UInt(2);
alias G_TLS_PASSWORD_MANY_TRIES = UInt(4);
alias G_TLS_PASSWORD_FINAL_TRY = UInt(8);

alias GTlsPasswordFlags = UInt;

alias Enum_Unnamed63 = UInt;
alias G_TLS_INTERACTION_UNHANDLED = UInt(0);
alias G_TLS_INTERACTION_HANDLED = UInt(1);
alias G_TLS_INTERACTION_FAILED = UInt(2);

alias GTlsInteractionResult = UInt;

alias Enum_Unnamed64 = UInt;
alias G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = UInt(0);
alias G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = UInt(1);

alias GDBusInterfaceSkeletonFlags = UInt;

alias Enum_Unnamed65 = UInt;
alias G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = UInt(0);
alias G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = UInt(1);

alias GDBusObjectManagerClientFlags = UInt;

alias Enum_Unnamed66 = UInt;
alias G_TLS_DATABASE_VERIFY_NONE = UInt(0);

alias GTlsDatabaseVerifyFlags = UInt;

alias Enum_Unnamed67 = UInt;
alias G_TLS_DATABASE_LOOKUP_NONE = UInt(0);
alias G_TLS_DATABASE_LOOKUP_KEYPAIR = UInt(1);

alias GTlsDatabaseLookupFlags = UInt;

alias Enum_Unnamed68 = UInt;
alias G_IO_MODULE_SCOPE_NONE = UInt(0);
alias G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = UInt(1);

alias GIOModuleScopeFlags = UInt;

alias GAppLaunchContext = Struct__GAppLaunchContext;

alias Struct__GAppInfo = Opaque;

alias GAppInfo = Struct__GAppInfo;

alias Struct__GAsyncResult = Opaque;

alias GAsyncResult = Struct__GAsyncResult;

alias Struct__GAsyncInitable = Opaque;

alias GAsyncInitable = Struct__GAsyncInitable;

alias GBufferedInputStream = Struct__GBufferedInputStream;

alias GBufferedOutputStream = Struct__GBufferedOutputStream;

alias GCancellable = Struct__GCancellable;

alias Struct__GCharsetConverter = Opaque;

alias GCharsetConverter = Struct__GCharsetConverter;

alias Struct__GConverter = Opaque;

alias GConverter = Struct__GConverter;

alias GConverterInputStream = Struct__GConverterInputStream;

alias GConverterOutputStream = Struct__GConverterOutputStream;

alias GDataInputStream = Struct__GDataInputStream;

alias Struct__GSimplePermission = Opaque;

alias GSimplePermission = Struct__GSimplePermission;

alias Struct__GZlibCompressor = Opaque;

alias GZlibCompressor = Struct__GZlibCompressor;

alias Struct__GZlibDecompressor = Opaque;

alias GZlibDecompressor = Struct__GZlibDecompressor;

alias GSimpleActionGroup = Struct__GSimpleActionGroup;

alias Struct__GActionGroup = Opaque;

alias GActionGroup = Struct__GActionGroup;

alias Struct__GSimpleAction = Opaque;

alias GSimpleAction = Struct__GSimpleAction;

alias Struct__GAction = Opaque;

alias GAction = Struct__GAction;

alias GApplication = Struct__GApplication;

alias GApplicationCommandLine = Struct__GApplicationCommandLine;

alias Struct__GSettingsBackend = Opaque;

alias GSettingsBackend = Struct__GSettingsBackend;

alias GSettings = Struct__GSettings;

alias GPermission = Struct__GPermission;

alias Struct__GDrive = Opaque;

alias GDrive = Struct__GDrive;

alias GFileEnumerator = Struct__GFileEnumerator;

alias GFileMonitor = Struct__GFileMonitor;

alias GFilterInputStream = Struct__GFilterInputStream;

alias GFilterOutputStream = Struct__GFilterOutputStream;

alias Struct__GFile = Opaque;

alias GFile = Struct__GFile;

alias Struct__GFileInfo = Opaque;

alias GFileInfo = Struct__GFileInfo;

alias Struct__GFileAttributeMatcher = Opaque;

alias GFileAttributeMatcher = Struct__GFileAttributeMatcher;

alias GFileAttributeInfo = Struct__GFileAttributeInfo;

alias GFileAttributeInfoList = Struct__GFileAttributeInfoList;

alias Struct__GFileDescriptorBased = Opaque;

alias GFileDescriptorBased = Struct__GFileDescriptorBased;

alias GFileInputStream = Struct__GFileInputStream;

alias GFileOutputStream = Struct__GFileOutputStream;

alias GFileIOStream = Struct__GFileIOStream;

alias Struct__GFileIcon = Opaque;

alias GFileIcon = Struct__GFileIcon;

alias Struct__GFilenameCompleter = Opaque;

alias GFilenameCompleter = Struct__GFilenameCompleter;

alias Struct__GIcon = Opaque;

alias GIcon = Struct__GIcon;

alias GInetAddress = Struct__GInetAddress;

alias GInetSocketAddress = Struct__GInetSocketAddress;

alias GInputStream = Struct__GInputStream;

alias Struct__GInitable = Opaque;

alias GInitable = Struct__GInitable;

alias Struct__GIOModule = Opaque;

alias GIOModule = Struct__GIOModule;

alias Struct__GIOExtensionPoint = Opaque;

alias GIOExtensionPoint = Struct__GIOExtensionPoint;

alias Struct__GIOExtension = Opaque;

alias GIOExtension = Struct__GIOExtension;

alias Struct__GIOSchedulerJob = Opaque;

alias GIOSchedulerJob = Struct__GIOSchedulerJob;

alias Struct__GIOStreamAdapter = Opaque;

alias GIOStreamAdapter = Struct__GIOStreamAdapter;

alias Struct__GLoadableIcon = Opaque;

alias GLoadableIcon = Struct__GLoadableIcon;

alias GMemoryInputStream = Struct__GMemoryInputStream;

alias GMemoryOutputStream = Struct__GMemoryOutputStream;

alias Struct__GMount = Opaque;

alias GMount = Struct__GMount;

alias GMountOperation = Struct__GMountOperation;

alias GNetworkAddress = Struct__GNetworkAddress;

alias GNetworkService = Struct__GNetworkService;

alias GOutputStream = Struct__GOutputStream;

alias GIOStream = Struct__GIOStream;

alias Struct__GPollableInputStream = Opaque;

alias GPollableInputStream = Struct__GPollableInputStream;

alias Struct__GPollableOutputStream = Opaque;

alias GPollableOutputStream = Struct__GPollableOutputStream;

alias GResolver = Struct__GResolver;

alias Struct__GSeekable = Opaque;

alias GSeekable = Struct__GSeekable;

alias Struct__GSimpleAsyncResult = Opaque;

alias GSimpleAsyncResult = Struct__GSimpleAsyncResult;

alias GSocket = Struct__GSocket;

alias GSocketControlMessage = Struct__GSocketControlMessage;

alias GSocketClient = Struct__GSocketClient;

alias GSocketConnection = Struct__GSocketConnection;

alias GSocketListener = Struct__GSocketListener;

alias GSocketService = Struct__GSocketService;

alias GSocketAddress = Struct__GSocketAddress;

alias GSocketAddressEnumerator = Struct__GSocketAddressEnumerator;

alias Struct__GSocketConnectable = Opaque;

alias GSocketConnectable = Struct__GSocketConnectable;

alias Struct__GSrvTarget = Opaque;

alias GSrvTarget = Struct__GSrvTarget;

alias GTcpConnection = Struct__GTcpConnection;

alias GTcpWrapperConnection = Struct__GTcpWrapperConnection;

alias GThreadedSocketService = Struct__GThreadedSocketService;

alias Struct__GThemedIcon = Opaque;

alias GThemedIcon = Struct__GThemedIcon;

alias GTlsCertificate = Struct__GTlsCertificate;

alias Struct__GTlsClientConnection = Opaque;

alias GTlsClientConnection = Struct__GTlsClientConnection;

alias GTlsConnection = Struct__GTlsConnection;

alias GTlsDatabase = Struct__GTlsDatabase;

alias Struct__GTlsFileDatabase = Opaque;

alias GTlsFileDatabase = Struct__GTlsFileDatabase;

alias GTlsInteraction = Struct__GTlsInteraction;

alias GTlsPassword = Struct__GTlsPassword;

alias Struct__GTlsServerConnection = Opaque;

alias GTlsServerConnection = Struct__GTlsServerConnection;

alias GVfs = Struct__GVfs;

alias Struct__GProxyResolver = Opaque;

alias GProxyResolver = Struct__GProxyResolver;

alias Struct__GProxy = Opaque;

alias GProxy = Struct__GProxy;

alias GProxyAddress = Struct__GProxyAddress;

alias GProxyAddressEnumerator = Struct__GProxyAddressEnumerator;

alias Struct__GVolume = Opaque;

alias GVolume = Struct__GVolume;

alias GVolumeMonitor = Struct__GVolumeMonitor;

alias GAsyncReadyCallback = CCodePointer[[Pointer[GObject], Pointer[GAsyncResult], gpointer],[]];

alias GFileProgressCallback = CCodePointer[[goffset, goffset, gpointer],[]];

alias GFileReadMoreCallback = CCodePointer[[Pointer[CChar], goffset, gpointer],[gboolean]];

alias GIOSchedulerJobFunc = CCodePointer[[Pointer[GIOSchedulerJob], Pointer[GCancellable], gpointer],[gboolean]];

alias GSimpleAsyncThreadFunc = CCodePointer[[Pointer[GSimpleAsyncResult], Pointer[GObject], Pointer[GCancellable]],[]];

alias GSocketSourceFunc = CCodePointer[[Pointer[GSocket], GIOCondition, gpointer],[gboolean]];

alias GInputVector = Struct__GInputVector;

record Struct__GInputVector (
    buffer : gpointer,
    size : gsize,
);

alias GOutputVector = Struct__GOutputVector;

record Struct__GOutputVector (
    buffer : gconstpointer,
    size : gsize,
);

alias Struct__GCredentials = Opaque;

alias GCredentials = Struct__GCredentials;

alias Struct__GUnixCredentialsMessage = Opaque;

alias GUnixCredentialsMessage = Struct__GUnixCredentialsMessage;

alias Struct__GUnixFDList = Opaque;

alias GUnixFDList = Struct__GUnixFDList;

alias Struct__GDBusMessage = Opaque;

alias GDBusMessage = Struct__GDBusMessage;

alias Struct__GDBusConnection = Opaque;

alias GDBusConnection = Struct__GDBusConnection;

alias GDBusProxy = Struct__GDBusProxy;

alias Struct__GDBusMethodInvocation = Opaque;

alias GDBusMethodInvocation = Struct__GDBusMethodInvocation;

alias Struct__GDBusServer = Opaque;

alias GDBusServer = Struct__GDBusServer;

alias Struct__GDBusAuthObserver = Opaque;

alias GDBusAuthObserver = Struct__GDBusAuthObserver;

alias GDBusErrorEntry = Struct__GDBusErrorEntry;

alias GDBusInterfaceVTable = Struct__GDBusInterfaceVTable;

alias GDBusSubtreeVTable = Struct__GDBusSubtreeVTable;

alias GDBusAnnotationInfo = Struct__GDBusAnnotationInfo;

alias GDBusArgInfo = Struct__GDBusArgInfo;

alias GDBusMethodInfo = Struct__GDBusMethodInfo;

alias GDBusSignalInfo = Struct__GDBusSignalInfo;

alias GDBusPropertyInfo = Struct__GDBusPropertyInfo;

alias GDBusInterfaceInfo = Struct__GDBusInterfaceInfo;

alias GDBusNodeInfo = Struct__GDBusNodeInfo;

alias GCancellableSourceFunc = CCodePointer[[Pointer[GCancellable], gpointer],[gboolean]];

alias GPollableSourceFunc = CCodePointer[[Pointer[GObject], gpointer],[gboolean]];

alias Struct__GDBusInterface = Opaque;

alias GDBusInterface = Struct__GDBusInterface;

alias GDBusInterfaceSkeleton = Struct__GDBusInterfaceSkeleton;

alias Struct__GDBusObject = Opaque;

alias GDBusObject = Struct__GDBusObject;

alias GDBusObjectSkeleton = Struct__GDBusObjectSkeleton;

alias GDBusObjectProxy = Struct__GDBusObjectProxy;

alias Struct__GDBusObjectManager = Opaque;

alias GDBusObjectManager = Struct__GDBusObjectManager;

alias GDBusObjectManagerClient = Struct__GDBusObjectManagerClient;

alias GDBusObjectManagerServer = Struct__GDBusObjectManagerServer;

alias GDBusProxyTypeFunc = CCodePointer[[Pointer[GDBusObjectManagerClient], Pointer[gchar], Pointer[gchar], gpointer],[GType]];

alias GAppLaunchContextClass = Struct__GAppLaunchContextClass;

alias Struct__GAppLaunchContextPrivate = Opaque;

alias GAppLaunchContextPrivate = Struct__GAppLaunchContextPrivate;

alias GAppInfoIface = Struct__GAppInfoIface;

record Struct__GAppInfoIface (
    g_iface : GTypeInterface,
    dup : CCodePointer[[Pointer[GAppInfo]],[Pointer[GAppInfo]]],
    equal : CCodePointer[[Pointer[GAppInfo], Pointer[GAppInfo]],[gboolean]],
    get_id : CCodePointer[[Pointer[GAppInfo]],[Pointer[CChar]]],
    get_name : CCodePointer[[Pointer[GAppInfo]],[Pointer[CChar]]],
    get_description : CCodePointer[[Pointer[GAppInfo]],[Pointer[CChar]]],
    get_executable : CCodePointer[[Pointer[GAppInfo]],[Pointer[CChar]]],
    get_icon : CCodePointer[[Pointer[GAppInfo]],[Pointer[GIcon]]],
    launch : CCodePointer[[Pointer[GAppInfo], Pointer[GList], Pointer[GAppLaunchContext], Pointer[Pointer[GError]]],[gboolean]],
    supports_uris : CCodePointer[[Pointer[GAppInfo]],[gboolean]],
    supports_files : CCodePointer[[Pointer[GAppInfo]],[gboolean]],
    launch_uris : CCodePointer[[Pointer[GAppInfo], Pointer[GList], Pointer[GAppLaunchContext], Pointer[Pointer[GError]]],[gboolean]],
    should_show : CCodePointer[[Pointer[GAppInfo]],[gboolean]],
    set_as_default_for_type : CCodePointer[[Pointer[GAppInfo], Pointer[CChar], Pointer[Pointer[GError]]],[gboolean]],
    set_as_default_for_extension : CCodePointer[[Pointer[GAppInfo], Pointer[CChar], Pointer[Pointer[GError]]],[gboolean]],
    add_supports_type : CCodePointer[[Pointer[GAppInfo], Pointer[CChar], Pointer[Pointer[GError]]],[gboolean]],
    can_remove_supports_type : CCodePointer[[Pointer[GAppInfo]],[gboolean]],
    remove_supports_type : CCodePointer[[Pointer[GAppInfo], Pointer[CChar], Pointer[Pointer[GError]]],[gboolean]],
    can_delete : CCodePointer[[Pointer[GAppInfo]],[gboolean]],
    do_delete : CCodePointer[[Pointer[GAppInfo]],[gboolean]],
    get_commandline : CCodePointer[[Pointer[GAppInfo]],[Pointer[CChar]]],
    get_display_name : CCodePointer[[Pointer[GAppInfo]],[Pointer[CChar]]],
    set_as_last_used_for_type : CCodePointer[[Pointer[GAppInfo], Pointer[CChar], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_app_info_get_type() : GType;

external (cdecl) g_app_info_create_from_commandline(arg0:Pointer[CChar], arg1:Pointer[CChar], arg2:GAppInfoCreateFlags, arg3:Pointer[Pointer[GError]]) : Pointer[GAppInfo];

external (cdecl) g_app_info_dup(arg0:Pointer[GAppInfo]) : Pointer[GAppInfo];

external (cdecl) g_app_info_equal(arg0:Pointer[GAppInfo], arg1:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_get_id(arg0:Pointer[GAppInfo]) : Pointer[CChar];

external (cdecl) g_app_info_get_name(arg0:Pointer[GAppInfo]) : Pointer[CChar];

external (cdecl) g_app_info_get_display_name(arg0:Pointer[GAppInfo]) : Pointer[CChar];

external (cdecl) g_app_info_get_description(arg0:Pointer[GAppInfo]) : Pointer[CChar];

external (cdecl) g_app_info_get_executable(arg0:Pointer[GAppInfo]) : Pointer[CChar];

external (cdecl) g_app_info_get_commandline(arg0:Pointer[GAppInfo]) : Pointer[CChar];

external (cdecl) g_app_info_get_icon(arg0:Pointer[GAppInfo]) : Pointer[GIcon];

external (cdecl) g_app_info_launch(arg0:Pointer[GAppInfo], arg1:Pointer[GList], arg2:Pointer[GAppLaunchContext], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_supports_uris(arg0:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_supports_files(arg0:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_launch_uris(arg0:Pointer[GAppInfo], arg1:Pointer[GList], arg2:Pointer[GAppLaunchContext], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_should_show(arg0:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_set_as_default_for_type(arg0:Pointer[GAppInfo], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_set_as_default_for_extension(arg0:Pointer[GAppInfo], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_add_supports_type(arg0:Pointer[GAppInfo], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_can_remove_supports_type(arg0:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_remove_supports_type(arg0:Pointer[GAppInfo], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_can_delete(arg0:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_delete(arg0:Pointer[GAppInfo]) : gboolean;

external (cdecl) g_app_info_set_as_last_used_for_type(arg0:Pointer[GAppInfo], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_app_info_get_all() : Pointer[GList];

external (cdecl) g_app_info_get_all_for_type(arg0:Pointer[CChar]) : Pointer[GList];

external (cdecl) g_app_info_get_recommended_for_type(arg0:Pointer[gchar]) : Pointer[GList];

external (cdecl) g_app_info_get_fallback_for_type(arg0:Pointer[gchar]) : Pointer[GList];

external (cdecl) g_app_info_reset_type_associations(arg0:Pointer[CChar]) : ;

external (cdecl) g_app_info_get_default_for_type(arg0:Pointer[CChar], arg1:gboolean) : Pointer[GAppInfo];

external (cdecl) g_app_info_get_default_for_uri_scheme(arg0:Pointer[CChar]) : Pointer[GAppInfo];

external (cdecl) g_app_info_launch_default_for_uri(arg0:Pointer[CChar], arg1:Pointer[GAppLaunchContext], arg2:Pointer[Pointer[GError]]) : gboolean;

record Struct__GAppLaunchContext (
    parent_instance : GObject,
    priv : Pointer[GAppLaunchContextPrivate],
);

record Struct__GAppLaunchContextClass (
    parent_class : GObjectClass,
    get_display : CCodePointer[[Pointer[GAppLaunchContext], Pointer[GAppInfo], Pointer[GList]],[Pointer[CChar]]],
    get_startup_notify_id : CCodePointer[[Pointer[GAppLaunchContext], Pointer[GAppInfo], Pointer[GList]],[Pointer[CChar]]],
    launch_failed : CCodePointer[[Pointer[GAppLaunchContext], Pointer[CChar]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_app_launch_context_get_type() : GType;

external (cdecl) g_app_launch_context_new() : Pointer[GAppLaunchContext];

external (cdecl) g_app_launch_context_get_display(arg0:Pointer[GAppLaunchContext], arg1:Pointer[GAppInfo], arg2:Pointer[GList]) : Pointer[CChar];

external (cdecl) g_app_launch_context_get_startup_notify_id(arg0:Pointer[GAppLaunchContext], arg1:Pointer[GAppInfo], arg2:Pointer[GList]) : Pointer[CChar];

external (cdecl) g_app_launch_context_launch_failed(arg0:Pointer[GAppLaunchContext], arg1:Pointer[CChar]) : ;

alias GActionInterface = Struct__GActionInterface;

record Struct__GActionInterface (
    g_iface : GTypeInterface,
    get_name : CCodePointer[[Pointer[GAction]],[Pointer[gchar]]],
    get_parameter_type : CCodePointer[[Pointer[GAction]],[Pointer[GVariantType]]],
    get_state_type : CCodePointer[[Pointer[GAction]],[Pointer[GVariantType]]],
    get_state_hint : CCodePointer[[Pointer[GAction]],[Pointer[GVariant]]],
    get_enabled : CCodePointer[[Pointer[GAction]],[gboolean]],
    get_state : CCodePointer[[Pointer[GAction]],[Pointer[GVariant]]],
    change_state : CCodePointer[[Pointer[GAction], Pointer[GVariant]],[]],
    activate : CCodePointer[[Pointer[GAction], Pointer[GVariant]],[]],
);

external (cdecl) g_action_get_type() : GType;

external (cdecl) g_action_get_name(arg0:Pointer[GAction]) : Pointer[gchar];

external (cdecl) g_action_get_parameter_type(arg0:Pointer[GAction]) : Pointer[GVariantType];

external (cdecl) g_action_get_state_type(arg0:Pointer[GAction]) : Pointer[GVariantType];

external (cdecl) g_action_get_state_hint(arg0:Pointer[GAction]) : Pointer[GVariant];

external (cdecl) g_action_get_enabled(arg0:Pointer[GAction]) : gboolean;

external (cdecl) g_action_get_state(arg0:Pointer[GAction]) : Pointer[GVariant];

external (cdecl) g_action_change_state(arg0:Pointer[GAction], arg1:Pointer[GVariant]) : ;

external (cdecl) g_action_activate(arg0:Pointer[GAction], arg1:Pointer[GVariant]) : ;

external (cdecl) g_simple_action_get_type() : GType;

external (cdecl) g_simple_action_new(arg0:Pointer[gchar], arg1:Pointer[GVariantType]) : Pointer[GSimpleAction];

external (cdecl) g_simple_action_new_stateful(arg0:Pointer[gchar], arg1:Pointer[GVariantType], arg2:Pointer[GVariant]) : Pointer[GSimpleAction];

external (cdecl) g_simple_action_set_enabled(arg0:Pointer[GSimpleAction], arg1:gboolean) : ;

external (cdecl) g_simple_action_set_state(arg0:Pointer[GSimpleAction], arg1:Pointer[GVariant]) : ;

alias GActionGroupInterface = Struct__GActionGroupInterface;

record Struct__GActionGroupInterface (
    g_iface : GTypeInterface,
    has_action : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[gboolean]],
    list_actions : CCodePointer[[Pointer[GActionGroup]],[Pointer[Pointer[gchar]]]],
    get_action_enabled : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[gboolean]],
    get_action_parameter_type : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[Pointer[GVariantType]]],
    get_action_state_type : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[Pointer[GVariantType]]],
    get_action_state_hint : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[Pointer[GVariant]]],
    get_action_state : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[Pointer[GVariant]]],
    change_action_state : CCodePointer[[Pointer[GActionGroup], Pointer[gchar], Pointer[GVariant]],[]],
    activate_action : CCodePointer[[Pointer[GActionGroup], Pointer[gchar], Pointer[GVariant]],[]],
    action_added : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[]],
    action_removed : CCodePointer[[Pointer[GActionGroup], Pointer[gchar]],[]],
    action_enabled_changed : CCodePointer[[Pointer[GActionGroup], Pointer[gchar], gboolean],[]],
    action_state_changed : CCodePointer[[Pointer[GActionGroup], Pointer[gchar], Pointer[GVariant]],[]],
);

external (cdecl) g_action_group_get_type() : GType;

external (cdecl) g_action_group_has_action(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_action_group_list_actions(arg0:Pointer[GActionGroup]) : Pointer[Pointer[gchar]];

external (cdecl) g_action_group_get_action_parameter_type(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : Pointer[GVariantType];

external (cdecl) g_action_group_get_action_state_type(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : Pointer[GVariantType];

external (cdecl) g_action_group_get_action_state_hint(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_action_group_get_action_enabled(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_action_group_get_action_state(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_action_group_change_action_state(arg0:Pointer[GActionGroup], arg1:Pointer[gchar], arg2:Pointer[GVariant]) : ;

external (cdecl) g_action_group_activate_action(arg0:Pointer[GActionGroup], arg1:Pointer[gchar], arg2:Pointer[GVariant]) : ;

external (cdecl) g_action_group_action_added(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : ;

external (cdecl) g_action_group_action_removed(arg0:Pointer[GActionGroup], arg1:Pointer[gchar]) : ;

external (cdecl) g_action_group_action_enabled_changed(arg0:Pointer[GActionGroup], arg1:Pointer[gchar], arg2:gboolean) : ;

external (cdecl) g_action_group_action_state_changed(arg0:Pointer[GActionGroup], arg1:Pointer[gchar], arg2:Pointer[GVariant]) : ;

alias Struct__GSimpleActionGroupPrivate = Opaque;

alias GSimpleActionGroupPrivate = Struct__GSimpleActionGroupPrivate;

alias GSimpleActionGroupClass = Struct__GSimpleActionGroupClass;

alias GActionEntry = Struct__GActionEntry;

record Struct__GSimpleActionGroup (
    parent_instance : GObject,
    priv : Pointer[GSimpleActionGroupPrivate],
);

record Struct__GSimpleActionGroupClass (
    parent_class : GObjectClass,
    padding : Array[gpointer, 12],
);

external (cdecl) g_simple_action_group_get_type() : GType;

external (cdecl) g_simple_action_group_new() : Pointer[GSimpleActionGroup];

external (cdecl) g_simple_action_group_lookup(arg0:Pointer[GSimpleActionGroup], arg1:Pointer[gchar]) : Pointer[GAction];

external (cdecl) g_simple_action_group_insert(arg0:Pointer[GSimpleActionGroup], arg1:Pointer[GAction]) : ;

external (cdecl) g_simple_action_group_remove(arg0:Pointer[GSimpleActionGroup], arg1:Pointer[gchar]) : ;

record Struct__GActionEntry (
    name : Pointer[gchar],
    activate : CCodePointer[[Pointer[GSimpleAction], Pointer[GVariant], gpointer],[]],
    parameter_type : Pointer[gchar],
    state : Pointer[gchar],
    change_state : CCodePointer[[Pointer[GSimpleAction], Pointer[GVariant], gpointer],[]],
    padding : Array[gsize, 3],
);

external (cdecl) g_simple_action_group_add_entries(arg0:Pointer[GSimpleActionGroup], arg1:Pointer[GActionEntry], arg2:gint, arg3:gpointer) : ;

alias Struct__GApplicationPrivate = Opaque;

alias GApplicationPrivate = Struct__GApplicationPrivate;

alias GApplicationClass = Struct__GApplicationClass;

record Struct__GApplication (
    parent_instance : GObject,
    priv : Pointer[GApplicationPrivate],
);

record Struct__GApplicationClass (
    parent_class : GObjectClass,
    startup : CCodePointer[[Pointer[GApplication]],[]],
    activate : CCodePointer[[Pointer[GApplication]],[]],
    open : CCodePointer[[Pointer[GApplication], Pointer[Pointer[GFile]], gint, Pointer[gchar]],[]],
    command_line : CCodePointer[[Pointer[GApplication], Pointer[GApplicationCommandLine]],[Int]],
    local_command_line : CCodePointer[[Pointer[GApplication], Pointer[Pointer[Pointer[gchar]]], Pointer[Int]],[gboolean]],
    before_emit : CCodePointer[[Pointer[GApplication], Pointer[GVariant]],[]],
    after_emit : CCodePointer[[Pointer[GApplication], Pointer[GVariant]],[]],
    add_platform_data : CCodePointer[[Pointer[GApplication], Pointer[GVariantBuilder]],[]],
    quit_mainloop : CCodePointer[[Pointer[GApplication]],[]],
    run_mainloop : CCodePointer[[Pointer[GApplication]],[]],
    padding : Array[gpointer, 12],
);

external (cdecl) g_application_get_type() : GType;

external (cdecl) g_application_id_is_valid(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_application_new(arg0:Pointer[gchar], arg1:GApplicationFlags) : Pointer[GApplication];

external (cdecl) g_application_get_application_id(arg0:Pointer[GApplication]) : Pointer[gchar];

external (cdecl) g_application_set_application_id(arg0:Pointer[GApplication], arg1:Pointer[gchar]) : ;

external (cdecl) g_application_get_inactivity_timeout(arg0:Pointer[GApplication]) : guint;

external (cdecl) g_application_set_inactivity_timeout(arg0:Pointer[GApplication], arg1:guint) : ;

external (cdecl) g_application_get_flags(arg0:Pointer[GApplication]) : GApplicationFlags;

external (cdecl) g_application_set_flags(arg0:Pointer[GApplication], arg1:GApplicationFlags) : ;

external (cdecl) g_application_set_action_group(arg0:Pointer[GApplication], arg1:Pointer[GActionGroup]) : ;

external (cdecl) g_application_get_is_registered(arg0:Pointer[GApplication]) : gboolean;

external (cdecl) g_application_get_is_remote(arg0:Pointer[GApplication]) : gboolean;

external (cdecl) g_application_register(arg0:Pointer[GApplication], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_application_hold(arg0:Pointer[GApplication]) : ;

external (cdecl) g_application_release(arg0:Pointer[GApplication]) : ;

external (cdecl) g_application_activate(arg0:Pointer[GApplication]) : ;

external (cdecl) g_application_open(arg0:Pointer[GApplication], arg1:Pointer[Pointer[GFile]], arg2:gint, arg3:Pointer[gchar]) : ;

external (cdecl) g_application_run(arg0:Pointer[GApplication], arg1:Int, arg2:Pointer[Pointer[CChar]]) : Int;

alias Struct__GApplicationCommandLinePrivate = Opaque;

alias GApplicationCommandLinePrivate = Struct__GApplicationCommandLinePrivate;

alias GApplicationCommandLineClass = Struct__GApplicationCommandLineClass;

record Struct__GApplicationCommandLine (
    parent_instance : GObject,
    priv : Pointer[GApplicationCommandLinePrivate],
);

record Struct__GApplicationCommandLineClass (
    parent_class : GObjectClass,
    print_literal : CCodePointer[[Pointer[GApplicationCommandLine], Pointer[gchar]],[]],
    printerr_literal : CCodePointer[[Pointer[GApplicationCommandLine], Pointer[gchar]],[]],
    padding : Array[gpointer, 12],
);

external (cdecl) g_application_command_line_get_type() : GType;

external (cdecl) g_application_command_line_get_arguments(arg0:Pointer[GApplicationCommandLine], arg1:Pointer[Int]) : Pointer[Pointer[gchar]];

external (cdecl) g_application_command_line_get_environ(arg0:Pointer[GApplicationCommandLine]) : Pointer[Pointer[gchar]];

external (cdecl) g_application_command_line_getenv(arg0:Pointer[GApplicationCommandLine], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_application_command_line_get_cwd(arg0:Pointer[GApplicationCommandLine]) : Pointer[gchar];

external (cdecl) g_application_command_line_get_is_remote(arg0:Pointer[GApplicationCommandLine]) : gboolean;

external (cdecl) g_application_command_line_print(arg0:Pointer[GApplicationCommandLine], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_application_command_line_printerr(arg0:Pointer[GApplicationCommandLine], arg1:Pointer[gchar], ..) : ;

external (cdecl) g_application_command_line_get_exit_status(arg0:Pointer[GApplicationCommandLine]) : Int;

external (cdecl) g_application_command_line_set_exit_status(arg0:Pointer[GApplicationCommandLine], arg1:Int) : ;

external (cdecl) g_application_command_line_get_platform_data(arg0:Pointer[GApplicationCommandLine]) : Pointer[GVariant];

alias GInitableIface = Struct__GInitableIface;

record Struct__GInitableIface (
    g_iface : GTypeInterface,
    init : CCodePointer[[Pointer[GInitable], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_initable_get_type() : GType;

external (cdecl) g_initable_init(arg0:Pointer[GInitable], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_initable_new(arg0:GType, arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]], arg3:Pointer[gchar], ..) : gpointer;

external (cdecl) g_initable_newv(arg0:GType, arg1:guint, arg2:Pointer[GParameter], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gpointer;

external (cdecl) g_initable_new_valist(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[__va_list_tag], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GObject];

alias GAsyncInitableIface = Struct__GAsyncInitableIface;

record Struct__GAsyncInitableIface (
    g_iface : GTypeInterface,
    init_async : CCodePointer[[Pointer[GAsyncInitable], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    init_finish : CCodePointer[[Pointer[GAsyncInitable], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_async_initable_get_type() : GType;

external (cdecl) g_async_initable_init_async(arg0:Pointer[GAsyncInitable], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_async_initable_init_finish(arg0:Pointer[GAsyncInitable], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_async_initable_new_async(arg0:GType, arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer, arg5:Pointer[gchar], ..) : ;

external (cdecl) g_async_initable_newv_async(arg0:GType, arg1:guint, arg2:Pointer[GParameter], arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_async_initable_new_valist_async(arg0:GType, arg1:Pointer[gchar], arg2:Pointer[__va_list_tag], arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_async_initable_new_finish(arg0:Pointer[GAsyncInitable], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GObject];

alias GAsyncResultIface = Struct__GAsyncResultIface;

record Struct__GAsyncResultIface (
    g_iface : GTypeInterface,
    get_user_data : CCodePointer[[Pointer[GAsyncResult]],[gpointer]],
    get_source_object : CCodePointer[[Pointer[GAsyncResult]],[Pointer[GObject]]],
);

external (cdecl) g_async_result_get_type() : GType;

external (cdecl) g_async_result_get_user_data(arg0:Pointer[GAsyncResult]) : gpointer;

external (cdecl) g_async_result_get_source_object(arg0:Pointer[GAsyncResult]) : Pointer[GObject];

alias GInputStreamClass = Struct__GInputStreamClass;

alias Struct__GInputStreamPrivate = Opaque;

alias GInputStreamPrivate = Struct__GInputStreamPrivate;

record Struct__GInputStream (
    parent_instance : GObject,
    priv : Pointer[GInputStreamPrivate],
);

record Struct__GInputStreamClass (
    parent_class : GObjectClass,
    read_fn : CCodePointer[[Pointer[GInputStream], OpaquePointer, gsize, Pointer[GCancellable], Pointer[Pointer[GError]]],[gssize]],
    skip : CCodePointer[[Pointer[GInputStream], gsize, Pointer[GCancellable], Pointer[Pointer[GError]]],[gssize]],
    close_fn : CCodePointer[[Pointer[GInputStream], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    read_async : CCodePointer[[Pointer[GInputStream], OpaquePointer, gsize, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    read_finish : CCodePointer[[Pointer[GInputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gssize]],
    skip_async : CCodePointer[[Pointer[GInputStream], gsize, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    skip_finish : CCodePointer[[Pointer[GInputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gssize]],
    close_async : CCodePointer[[Pointer[GInputStream], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    close_finish : CCodePointer[[Pointer[GInputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_input_stream_get_type() : GType;

external (cdecl) g_input_stream_read(arg0:Pointer[GInputStream], arg1:OpaquePointer, arg2:gsize, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_input_stream_read_all(arg0:Pointer[GInputStream], arg1:OpaquePointer, arg2:gsize, arg3:Pointer[gsize], arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_input_stream_skip(arg0:Pointer[GInputStream], arg1:gsize, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_input_stream_close(arg0:Pointer[GInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_input_stream_read_async(arg0:Pointer[GInputStream], arg1:OpaquePointer, arg2:gsize, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_input_stream_read_finish(arg0:Pointer[GInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_input_stream_skip_async(arg0:Pointer[GInputStream], arg1:gsize, arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_input_stream_skip_finish(arg0:Pointer[GInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_input_stream_close_async(arg0:Pointer[GInputStream], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_input_stream_close_finish(arg0:Pointer[GInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_input_stream_is_closed(arg0:Pointer[GInputStream]) : gboolean;

external (cdecl) g_input_stream_has_pending(arg0:Pointer[GInputStream]) : gboolean;

external (cdecl) g_input_stream_set_pending(arg0:Pointer[GInputStream], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_input_stream_clear_pending(arg0:Pointer[GInputStream]) : ;

alias GFilterInputStreamClass = Struct__GFilterInputStreamClass;

record Struct__GFilterInputStream (
    parent_instance : GInputStream,
    base_stream : Pointer[GInputStream],
);

record Struct__GFilterInputStreamClass (
    parent_class : GInputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
);

external (cdecl) g_filter_input_stream_get_type() : GType;

external (cdecl) g_filter_input_stream_get_base_stream(arg0:Pointer[GFilterInputStream]) : Pointer[GInputStream];

external (cdecl) g_filter_input_stream_get_close_base_stream(arg0:Pointer[GFilterInputStream]) : gboolean;

external (cdecl) g_filter_input_stream_set_close_base_stream(arg0:Pointer[GFilterInputStream], arg1:gboolean) : ;

alias GBufferedInputStreamClass = Struct__GBufferedInputStreamClass;

alias Struct__GBufferedInputStreamPrivate = Opaque;

alias GBufferedInputStreamPrivate = Struct__GBufferedInputStreamPrivate;

record Struct__GBufferedInputStream (
    parent_instance : GFilterInputStream,
    priv : Pointer[GBufferedInputStreamPrivate],
);

record Struct__GBufferedInputStreamClass (
    parent_class : GFilterInputStreamClass,
    fill : CCodePointer[[Pointer[GBufferedInputStream], gssize, Pointer[GCancellable], Pointer[Pointer[GError]]],[gssize]],
    fill_async : CCodePointer[[Pointer[GBufferedInputStream], gssize, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    fill_finish : CCodePointer[[Pointer[GBufferedInputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gssize]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_buffered_input_stream_get_type() : GType;

external (cdecl) g_buffered_input_stream_new(arg0:Pointer[GInputStream]) : Pointer[GInputStream];

external (cdecl) g_buffered_input_stream_new_sized(arg0:Pointer[GInputStream], arg1:gsize) : Pointer[GInputStream];

external (cdecl) g_buffered_input_stream_get_buffer_size(arg0:Pointer[GBufferedInputStream]) : gsize;

external (cdecl) g_buffered_input_stream_set_buffer_size(arg0:Pointer[GBufferedInputStream], arg1:gsize) : ;

external (cdecl) g_buffered_input_stream_get_available(arg0:Pointer[GBufferedInputStream]) : gsize;

external (cdecl) g_buffered_input_stream_peek(arg0:Pointer[GBufferedInputStream], arg1:OpaquePointer, arg2:gsize, arg3:gsize) : gsize;

external (cdecl) g_buffered_input_stream_peek_buffer(arg0:Pointer[GBufferedInputStream], arg1:Pointer[gsize]) : OpaquePointer;

external (cdecl) g_buffered_input_stream_fill(arg0:Pointer[GBufferedInputStream], arg1:gssize, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_buffered_input_stream_fill_async(arg0:Pointer[GBufferedInputStream], arg1:gssize, arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_buffered_input_stream_fill_finish(arg0:Pointer[GBufferedInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_buffered_input_stream_read_byte(arg0:Pointer[GBufferedInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Int;

alias GOutputStreamClass = Struct__GOutputStreamClass;

alias Struct__GOutputStreamPrivate = Opaque;

alias GOutputStreamPrivate = Struct__GOutputStreamPrivate;

record Struct__GOutputStream (
    parent_instance : GObject,
    priv : Pointer[GOutputStreamPrivate],
);

record Struct__GOutputStreamClass (
    parent_class : GObjectClass,
    write_fn : CCodePointer[[Pointer[GOutputStream], OpaquePointer, gsize, Pointer[GCancellable], Pointer[Pointer[GError]]],[gssize]],
    splice : CCodePointer[[Pointer[GOutputStream], Pointer[GInputStream], GOutputStreamSpliceFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[gssize]],
    flush : CCodePointer[[Pointer[GOutputStream], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    close_fn : CCodePointer[[Pointer[GOutputStream], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    write_async : CCodePointer[[Pointer[GOutputStream], OpaquePointer, gsize, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    write_finish : CCodePointer[[Pointer[GOutputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gssize]],
    splice_async : CCodePointer[[Pointer[GOutputStream], Pointer[GInputStream], GOutputStreamSpliceFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    splice_finish : CCodePointer[[Pointer[GOutputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gssize]],
    flush_async : CCodePointer[[Pointer[GOutputStream], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    flush_finish : CCodePointer[[Pointer[GOutputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    close_async : CCodePointer[[Pointer[GOutputStream], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    close_finish : CCodePointer[[Pointer[GOutputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
    _g_reserved8 : CCodePointer[[],[]],
);

external (cdecl) g_output_stream_get_type() : GType;

external (cdecl) g_output_stream_write(arg0:Pointer[GOutputStream], arg1:OpaquePointer, arg2:gsize, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_output_stream_write_all(arg0:Pointer[GOutputStream], arg1:OpaquePointer, arg2:gsize, arg3:Pointer[gsize], arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_output_stream_splice(arg0:Pointer[GOutputStream], arg1:Pointer[GInputStream], arg2:GOutputStreamSpliceFlags, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_output_stream_flush(arg0:Pointer[GOutputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_output_stream_close(arg0:Pointer[GOutputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_output_stream_write_async(arg0:Pointer[GOutputStream], arg1:OpaquePointer, arg2:gsize, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_output_stream_write_finish(arg0:Pointer[GOutputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_output_stream_splice_async(arg0:Pointer[GOutputStream], arg1:Pointer[GInputStream], arg2:GOutputStreamSpliceFlags, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_output_stream_splice_finish(arg0:Pointer[GOutputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_output_stream_flush_async(arg0:Pointer[GOutputStream], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_output_stream_flush_finish(arg0:Pointer[GOutputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_output_stream_close_async(arg0:Pointer[GOutputStream], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_output_stream_close_finish(arg0:Pointer[GOutputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_output_stream_is_closed(arg0:Pointer[GOutputStream]) : gboolean;

external (cdecl) g_output_stream_is_closing(arg0:Pointer[GOutputStream]) : gboolean;

external (cdecl) g_output_stream_has_pending(arg0:Pointer[GOutputStream]) : gboolean;

external (cdecl) g_output_stream_set_pending(arg0:Pointer[GOutputStream], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_output_stream_clear_pending(arg0:Pointer[GOutputStream]) : ;

alias GFilterOutputStreamClass = Struct__GFilterOutputStreamClass;

record Struct__GFilterOutputStream (
    parent_instance : GOutputStream,
    base_stream : Pointer[GOutputStream],
);

record Struct__GFilterOutputStreamClass (
    parent_class : GOutputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
);

external (cdecl) g_filter_output_stream_get_type() : GType;

external (cdecl) g_filter_output_stream_get_base_stream(arg0:Pointer[GFilterOutputStream]) : Pointer[GOutputStream];

external (cdecl) g_filter_output_stream_get_close_base_stream(arg0:Pointer[GFilterOutputStream]) : gboolean;

external (cdecl) g_filter_output_stream_set_close_base_stream(arg0:Pointer[GFilterOutputStream], arg1:gboolean) : ;

alias GBufferedOutputStreamClass = Struct__GBufferedOutputStreamClass;

alias Struct__GBufferedOutputStreamPrivate = Opaque;

alias GBufferedOutputStreamPrivate = Struct__GBufferedOutputStreamPrivate;

record Struct__GBufferedOutputStream (
    parent_instance : GFilterOutputStream,
    priv : Pointer[GBufferedOutputStreamPrivate],
);

record Struct__GBufferedOutputStreamClass (
    parent_class : GFilterOutputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
);

external (cdecl) g_buffered_output_stream_get_type() : GType;

external (cdecl) g_buffered_output_stream_new(arg0:Pointer[GOutputStream]) : Pointer[GOutputStream];

external (cdecl) g_buffered_output_stream_new_sized(arg0:Pointer[GOutputStream], arg1:gsize) : Pointer[GOutputStream];

external (cdecl) g_buffered_output_stream_get_buffer_size(arg0:Pointer[GBufferedOutputStream]) : gsize;

external (cdecl) g_buffered_output_stream_set_buffer_size(arg0:Pointer[GBufferedOutputStream], arg1:gsize) : ;

external (cdecl) g_buffered_output_stream_get_auto_grow(arg0:Pointer[GBufferedOutputStream]) : gboolean;

external (cdecl) g_buffered_output_stream_set_auto_grow(arg0:Pointer[GBufferedOutputStream], arg1:gboolean) : ;

alias GCancellableClass = Struct__GCancellableClass;

alias Struct__GCancellablePrivate = Opaque;

alias GCancellablePrivate = Struct__GCancellablePrivate;

record Struct__GCancellable (
    parent_instance : GObject,
    priv : Pointer[GCancellablePrivate],
);

record Struct__GCancellableClass (
    parent_class : GObjectClass,
    cancelled : CCodePointer[[Pointer[GCancellable]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_cancellable_get_type() : GType;

external (cdecl) g_cancellable_new() : Pointer[GCancellable];

external (cdecl) g_cancellable_is_cancelled(arg0:Pointer[GCancellable]) : gboolean;

external (cdecl) g_cancellable_set_error_if_cancelled(arg0:Pointer[GCancellable], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_cancellable_get_fd(arg0:Pointer[GCancellable]) : Int;

external (cdecl) g_cancellable_make_pollfd(arg0:Pointer[GCancellable], arg1:Pointer[GPollFD]) : gboolean;

external (cdecl) g_cancellable_release_fd(arg0:Pointer[GCancellable]) : ;

external (cdecl) g_cancellable_source_new(arg0:Pointer[GCancellable]) : Pointer[GSource];

external (cdecl) g_cancellable_get_current() : Pointer[GCancellable];

external (cdecl) g_cancellable_push_current(arg0:Pointer[GCancellable]) : ;

external (cdecl) g_cancellable_pop_current(arg0:Pointer[GCancellable]) : ;

external (cdecl) g_cancellable_reset(arg0:Pointer[GCancellable]) : ;

external (cdecl) g_cancellable_connect(arg0:Pointer[GCancellable], arg1:GCallback, arg2:gpointer, arg3:GDestroyNotify) : gulong;

external (cdecl) g_cancellable_disconnect(arg0:Pointer[GCancellable], arg1:gulong) : ;

external (cdecl) g_cancellable_cancel(arg0:Pointer[GCancellable]) : ;

alias GConverterIface = Struct__GConverterIface;

record Struct__GConverterIface (
    g_iface : GTypeInterface,
    convert : CCodePointer[[Pointer[GConverter], OpaquePointer, gsize, OpaquePointer, gsize, GConverterFlags, Pointer[gsize], Pointer[gsize], Pointer[Pointer[GError]]],[GConverterResult]],
    reset : CCodePointer[[Pointer[GConverter]],[]],
);

external (cdecl) g_converter_get_type() : GType;

external (cdecl) g_converter_convert(arg0:Pointer[GConverter], arg1:OpaquePointer, arg2:gsize, arg3:OpaquePointer, arg4:gsize, arg5:GConverterFlags, arg6:Pointer[gsize], arg7:Pointer[gsize], arg8:Pointer[Pointer[GError]]) : GConverterResult;

external (cdecl) g_converter_reset(arg0:Pointer[GConverter]) : ;

alias GCharsetConverterClass = Struct__GCharsetConverterClass;

record Struct__GCharsetConverterClass (
    parent_class : GObjectClass,
);

external (cdecl) g_charset_converter_get_type() : GType;

external (cdecl) g_charset_converter_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GCharsetConverter];

external (cdecl) g_charset_converter_set_use_fallback(arg0:Pointer[GCharsetConverter], arg1:gboolean) : ;

external (cdecl) g_charset_converter_get_use_fallback(arg0:Pointer[GCharsetConverter]) : gboolean;

external (cdecl) g_charset_converter_get_num_fallbacks(arg0:Pointer[GCharsetConverter]) : guint;

external (cdecl) g_content_type_equals(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_content_type_is_a(arg0:Pointer[gchar], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_content_type_is_unknown(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_content_type_get_description(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_content_type_get_mime_type(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_content_type_get_icon(arg0:Pointer[gchar]) : Pointer[GIcon];

external (cdecl) g_content_type_can_be_executable(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_content_type_from_mime_type(arg0:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_content_type_guess(arg0:Pointer[gchar], arg1:Pointer[guchar], arg2:gsize, arg3:Pointer[gboolean]) : Pointer[gchar];

external (cdecl) g_content_type_guess_for_tree(arg0:Pointer[GFile]) : Pointer[Pointer[gchar]];

external (cdecl) g_content_types_get_registered() : Pointer[GList];

alias GConverterInputStreamClass = Struct__GConverterInputStreamClass;

alias Struct__GConverterInputStreamPrivate = Opaque;

alias GConverterInputStreamPrivate = Struct__GConverterInputStreamPrivate;

record Struct__GConverterInputStream (
    parent_instance : GFilterInputStream,
    priv : Pointer[GConverterInputStreamPrivate],
);

record Struct__GConverterInputStreamClass (
    parent_class : GFilterInputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_converter_input_stream_get_type() : GType;

external (cdecl) g_converter_input_stream_new(arg0:Pointer[GInputStream], arg1:Pointer[GConverter]) : Pointer[GInputStream];

external (cdecl) g_converter_input_stream_get_converter(arg0:Pointer[GConverterInputStream]) : Pointer[GConverter];

alias GConverterOutputStreamClass = Struct__GConverterOutputStreamClass;

alias Struct__GConverterOutputStreamPrivate = Opaque;

alias GConverterOutputStreamPrivate = Struct__GConverterOutputStreamPrivate;

record Struct__GConverterOutputStream (
    parent_instance : GFilterOutputStream,
    priv : Pointer[GConverterOutputStreamPrivate],
);

record Struct__GConverterOutputStreamClass (
    parent_class : GFilterOutputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_converter_output_stream_get_type() : GType;

external (cdecl) g_converter_output_stream_new(arg0:Pointer[GOutputStream], arg1:Pointer[GConverter]) : Pointer[GOutputStream];

external (cdecl) g_converter_output_stream_get_converter(arg0:Pointer[GConverterOutputStream]) : Pointer[GConverter];

alias Struct__GCredentialsClass = Opaque;

alias GCredentialsClass = Struct__GCredentialsClass;

external (cdecl) g_credentials_get_type() : GType;

external (cdecl) g_credentials_new() : Pointer[GCredentials];

external (cdecl) g_credentials_to_string(arg0:Pointer[GCredentials]) : Pointer[gchar];

external (cdecl) g_credentials_get_native(arg0:Pointer[GCredentials], arg1:GCredentialsType) : gpointer;

external (cdecl) g_credentials_set_native(arg0:Pointer[GCredentials], arg1:GCredentialsType, arg2:gpointer) : ;

external (cdecl) g_credentials_is_same_user(arg0:Pointer[GCredentials], arg1:Pointer[GCredentials], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_credentials_get_unix_user(arg0:Pointer[GCredentials], arg1:Pointer[Pointer[GError]]) : uid_t;

external (cdecl) g_credentials_set_unix_user(arg0:Pointer[GCredentials], arg1:uid_t, arg2:Pointer[Pointer[GError]]) : gboolean;

alias GDataInputStreamClass = Struct__GDataInputStreamClass;

alias Struct__GDataInputStreamPrivate = Opaque;

alias GDataInputStreamPrivate = Struct__GDataInputStreamPrivate;

record Struct__GDataInputStream (
    parent_instance : GBufferedInputStream,
    priv : Pointer[GDataInputStreamPrivate],
);

record Struct__GDataInputStreamClass (
    parent_class : GBufferedInputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_data_input_stream_get_type() : GType;

external (cdecl) g_data_input_stream_new(arg0:Pointer[GInputStream]) : Pointer[GDataInputStream];

external (cdecl) g_data_input_stream_set_byte_order(arg0:Pointer[GDataInputStream], arg1:GDataStreamByteOrder) : ;

external (cdecl) g_data_input_stream_get_byte_order(arg0:Pointer[GDataInputStream]) : GDataStreamByteOrder;

external (cdecl) g_data_input_stream_set_newline_type(arg0:Pointer[GDataInputStream], arg1:GDataStreamNewlineType) : ;

external (cdecl) g_data_input_stream_get_newline_type(arg0:Pointer[GDataInputStream]) : GDataStreamNewlineType;

external (cdecl) g_data_input_stream_read_byte(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : guchar;

external (cdecl) g_data_input_stream_read_int16(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gint16;

external (cdecl) g_data_input_stream_read_uint16(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : guint16;

external (cdecl) g_data_input_stream_read_int32(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gint32;

external (cdecl) g_data_input_stream_read_uint32(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : guint32;

external (cdecl) g_data_input_stream_read_int64(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gint64;

external (cdecl) g_data_input_stream_read_uint64(arg0:Pointer[GDataInputStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : guint64;

external (cdecl) g_data_input_stream_read_line(arg0:Pointer[GDataInputStream], arg1:Pointer[gsize], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_line_utf8(arg0:Pointer[GDataInputStream], arg1:Pointer[gsize], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_line_async(arg0:Pointer[GDataInputStream], arg1:gint, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_data_input_stream_read_line_finish(arg0:Pointer[GDataInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_line_finish_utf8(arg0:Pointer[GDataInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_until(arg0:Pointer[GDataInputStream], arg1:Pointer[gchar], arg2:Pointer[gsize], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_until_async(arg0:Pointer[GDataInputStream], arg1:Pointer[gchar], arg2:gint, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_data_input_stream_read_until_finish(arg0:Pointer[GDataInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_upto(arg0:Pointer[GDataInputStream], arg1:Pointer[gchar], arg2:gssize, arg3:Pointer[gsize], arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[CChar];

external (cdecl) g_data_input_stream_read_upto_async(arg0:Pointer[GDataInputStream], arg1:Pointer[gchar], arg2:gssize, arg3:gint, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_data_input_stream_read_upto_finish(arg0:Pointer[GDataInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[gsize], arg3:Pointer[Pointer[GError]]) : Pointer[CChar];

alias GDataOutputStream = Struct__GDataOutputStream;

alias GDataOutputStreamClass = Struct__GDataOutputStreamClass;

alias Struct__GDataOutputStreamPrivate = Opaque;

alias GDataOutputStreamPrivate = Struct__GDataOutputStreamPrivate;

record Struct__GDataOutputStream (
    parent_instance : GFilterOutputStream,
    priv : Pointer[GDataOutputStreamPrivate],
);

record Struct__GDataOutputStreamClass (
    parent_class : GFilterOutputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_data_output_stream_get_type() : GType;

external (cdecl) g_data_output_stream_new(arg0:Pointer[GOutputStream]) : Pointer[GDataOutputStream];

external (cdecl) g_data_output_stream_set_byte_order(arg0:Pointer[GDataOutputStream], arg1:GDataStreamByteOrder) : ;

external (cdecl) g_data_output_stream_get_byte_order(arg0:Pointer[GDataOutputStream]) : GDataStreamByteOrder;

external (cdecl) g_data_output_stream_put_byte(arg0:Pointer[GDataOutputStream], arg1:guchar, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_int16(arg0:Pointer[GDataOutputStream], arg1:gint16, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_uint16(arg0:Pointer[GDataOutputStream], arg1:guint16, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_int32(arg0:Pointer[GDataOutputStream], arg1:gint32, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_uint32(arg0:Pointer[GDataOutputStream], arg1:guint32, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_int64(arg0:Pointer[GDataOutputStream], arg1:gint64, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_uint64(arg0:Pointer[GDataOutputStream], arg1:guint64, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_data_output_stream_put_string(arg0:Pointer[GDataOutputStream], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_is_address(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_is_supported_address(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_address_get_stream(arg0:Pointer[gchar], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_dbus_address_get_stream_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[gchar]], arg2:Pointer[Pointer[GError]]) : Pointer[GIOStream];

external (cdecl) g_dbus_address_get_stream_sync(arg0:Pointer[gchar], arg1:Pointer[Pointer[gchar]], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GIOStream];

external (cdecl) g_dbus_address_get_for_bus_sync(arg0:GBusType, arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_dbus_auth_observer_get_type() : GType;

external (cdecl) g_dbus_auth_observer_new() : Pointer[GDBusAuthObserver];

external (cdecl) g_dbus_auth_observer_authorize_authenticated_peer(arg0:Pointer[GDBusAuthObserver], arg1:Pointer[GIOStream], arg2:Pointer[GCredentials]) : gboolean;

external (cdecl) g_dbus_connection_get_type() : GType;

external (cdecl) g_bus_get(arg0:GBusType, arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_bus_get_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusConnection];

external (cdecl) g_bus_get_sync(arg0:GBusType, arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_connection_new(arg0:Pointer[GIOStream], arg1:Pointer[gchar], arg2:GDBusConnectionFlags, arg3:Pointer[GDBusAuthObserver], arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_dbus_connection_new_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_connection_new_sync(arg0:Pointer[GIOStream], arg1:Pointer[gchar], arg2:GDBusConnectionFlags, arg3:Pointer[GDBusAuthObserver], arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_connection_new_for_address(arg0:Pointer[gchar], arg1:GDBusConnectionFlags, arg2:Pointer[GDBusAuthObserver], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_dbus_connection_new_for_address_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_connection_new_for_address_sync(arg0:Pointer[gchar], arg1:GDBusConnectionFlags, arg2:Pointer[GDBusAuthObserver], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_connection_start_message_processing(arg0:Pointer[GDBusConnection]) : ;

external (cdecl) g_dbus_connection_is_closed(arg0:Pointer[GDBusConnection]) : gboolean;

external (cdecl) g_dbus_connection_get_stream(arg0:Pointer[GDBusConnection]) : Pointer[GIOStream];

external (cdecl) g_dbus_connection_get_guid(arg0:Pointer[GDBusConnection]) : Pointer[gchar];

external (cdecl) g_dbus_connection_get_unique_name(arg0:Pointer[GDBusConnection]) : Pointer[gchar];

external (cdecl) g_dbus_connection_get_peer_credentials(arg0:Pointer[GDBusConnection]) : Pointer[GCredentials];

external (cdecl) g_dbus_connection_get_exit_on_close(arg0:Pointer[GDBusConnection]) : gboolean;

external (cdecl) g_dbus_connection_set_exit_on_close(arg0:Pointer[GDBusConnection], arg1:gboolean) : ;

external (cdecl) g_dbus_connection_get_capabilities(arg0:Pointer[GDBusConnection]) : GDBusCapabilityFlags;

external (cdecl) g_dbus_connection_close(arg0:Pointer[GDBusConnection], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_dbus_connection_close_finish(arg0:Pointer[GDBusConnection], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_connection_close_sync(arg0:Pointer[GDBusConnection], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_connection_flush(arg0:Pointer[GDBusConnection], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_dbus_connection_flush_finish(arg0:Pointer[GDBusConnection], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_connection_flush_sync(arg0:Pointer[GDBusConnection], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_connection_send_message(arg0:Pointer[GDBusConnection], arg1:Pointer[GDBusMessage], arg2:GDBusSendMessageFlags, arg3:Pointer[guint32], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_connection_send_message_with_reply(arg0:Pointer[GDBusConnection], arg1:Pointer[GDBusMessage], arg2:GDBusSendMessageFlags, arg3:gint, arg4:Pointer[guint32], arg5:Pointer[GCancellable], arg6:GAsyncReadyCallback, arg7:gpointer) : ;

external (cdecl) g_dbus_connection_send_message_with_reply_finish(arg0:Pointer[GDBusConnection], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_connection_send_message_with_reply_sync(arg0:Pointer[GDBusConnection], arg1:Pointer[GDBusMessage], arg2:GDBusSendMessageFlags, arg3:gint, arg4:Pointer[guint32], arg5:Pointer[GCancellable], arg6:Pointer[Pointer[GError]]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_connection_emit_signal(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[GVariant], arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_connection_call(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[GVariant], arg6:Pointer[GVariantType], arg7:GDBusCallFlags, arg8:gint, arg9:Pointer[GCancellable], arg10:GAsyncReadyCallback, arg11:gpointer) : ;

external (cdecl) g_dbus_connection_call_finish(arg0:Pointer[GDBusConnection], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_connection_call_sync(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[GVariant], arg6:Pointer[GVariantType], arg7:GDBusCallFlags, arg8:gint, arg9:Pointer[GCancellable], arg10:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_connection_call_with_unix_fd_list(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[GVariant], arg6:Pointer[GVariantType], arg7:GDBusCallFlags, arg8:gint, arg9:Pointer[GUnixFDList], arg10:Pointer[GCancellable], arg11:GAsyncReadyCallback, arg12:gpointer) : ;

external (cdecl) g_dbus_connection_call_with_unix_fd_list_finish(arg0:Pointer[GDBusConnection], arg1:Pointer[Pointer[GUnixFDList]], arg2:Pointer[GAsyncResult], arg3:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_connection_call_with_unix_fd_list_sync(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[GVariant], arg6:Pointer[GVariantType], arg7:GDBusCallFlags, arg8:gint, arg9:Pointer[GUnixFDList], arg10:Pointer[Pointer[GUnixFDList]], arg11:Pointer[GCancellable], arg12:Pointer[Pointer[GError]]) : Pointer[GVariant];

alias GDBusInterfaceMethodCallFunc = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[GVariant], Pointer[GDBusMethodInvocation], gpointer],[]];

alias GDBusInterfaceGetPropertyFunc = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[Pointer[GError]], gpointer],[Pointer[GVariant]]];

alias GDBusInterfaceSetPropertyFunc = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[GVariant], Pointer[Pointer[GError]], gpointer],[gboolean]];

record Struct__GDBusInterfaceVTable (
    method_call : GDBusInterfaceMethodCallFunc,
    get_property : GDBusInterfaceGetPropertyFunc,
    set_property : GDBusInterfaceSetPropertyFunc,
    padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_connection_register_object(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[GDBusInterfaceInfo], arg3:Pointer[GDBusInterfaceVTable], arg4:gpointer, arg5:GDestroyNotify, arg6:Pointer[Pointer[GError]]) : guint;

external (cdecl) g_dbus_connection_unregister_object(arg0:Pointer[GDBusConnection], arg1:guint) : gboolean;

alias GDBusSubtreeEnumerateFunc = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], gpointer],[Pointer[Pointer[gchar]]]];

alias GDBusSubtreeIntrospectFunc = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], Pointer[gchar], gpointer],[Pointer[Pointer[GDBusInterfaceInfo]]]];

alias GDBusSubtreeDispatchFunc = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[gpointer], gpointer],[Pointer[GDBusInterfaceVTable]]];

record Struct__GDBusSubtreeVTable (
    enumerate : GDBusSubtreeEnumerateFunc,
    introspect : GDBusSubtreeIntrospectFunc,
    dispatch : GDBusSubtreeDispatchFunc,
    padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_connection_register_subtree(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[GDBusSubtreeVTable], arg3:GDBusSubtreeFlags, arg4:gpointer, arg5:GDestroyNotify, arg6:Pointer[Pointer[GError]]) : guint;

external (cdecl) g_dbus_connection_unregister_subtree(arg0:Pointer[GDBusConnection], arg1:guint) : gboolean;

alias GDBusSignalCallback = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[gchar], Pointer[GVariant], gpointer],[]];

external (cdecl) g_dbus_connection_signal_subscribe(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:GDBusSignalFlags, arg7:GDBusSignalCallback, arg8:gpointer, arg9:GDestroyNotify) : guint;

external (cdecl) g_dbus_connection_signal_unsubscribe(arg0:Pointer[GDBusConnection], arg1:guint) : ;

alias GDBusMessageFilterFunction = CCodePointer[[Pointer[GDBusConnection], Pointer[GDBusMessage], gboolean, gpointer],[Pointer[GDBusMessage]]];

external (cdecl) g_dbus_connection_add_filter(arg0:Pointer[GDBusConnection], arg1:GDBusMessageFilterFunction, arg2:gpointer, arg3:GDestroyNotify) : guint;

external (cdecl) g_dbus_connection_remove_filter(arg0:Pointer[GDBusConnection], arg1:guint) : ;

external (cdecl) g_dbus_error_quark() : GQuark;

external (cdecl) g_dbus_error_is_remote_error(arg0:Pointer[GError]) : gboolean;

external (cdecl) g_dbus_error_get_remote_error(arg0:Pointer[GError]) : Pointer[gchar];

external (cdecl) g_dbus_error_strip_remote_error(arg0:Pointer[GError]) : gboolean;

record Struct__GDBusErrorEntry (
    error_code : gint,
    dbus_error_name : Pointer[gchar],
);

external (cdecl) g_dbus_error_register_error(arg0:GQuark, arg1:gint, arg2:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_error_unregister_error(arg0:GQuark, arg1:gint, arg2:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_error_register_error_domain(arg0:Pointer[gchar], arg1:Pointer[gsize], arg2:Pointer[GDBusErrorEntry], arg3:guint) : ;

external (cdecl) g_dbus_error_new_for_dbus_error(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[GError];

external (cdecl) g_dbus_error_set_dbus_error(arg0:Pointer[Pointer[GError]], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], ..) : ;

external (cdecl) g_dbus_error_set_dbus_error_valist(arg0:Pointer[Pointer[GError]], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[__va_list_tag]) : ;

external (cdecl) g_dbus_error_encode_gerror(arg0:Pointer[GError]) : Pointer[gchar];

record Struct__GDBusAnnotationInfo (
    ref_count : gint,
    key : Pointer[gchar],
    value : Pointer[gchar],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusArgInfo (
    ref_count : gint,
    name : Pointer[gchar],
    signature : Pointer[gchar],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusMethodInfo (
    ref_count : gint,
    name : Pointer[gchar],
    in_args : Pointer[Pointer[GDBusArgInfo]],
    out_args : Pointer[Pointer[GDBusArgInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusSignalInfo (
    ref_count : gint,
    name : Pointer[gchar],
    args : Pointer[Pointer[GDBusArgInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusPropertyInfo (
    ref_count : gint,
    name : Pointer[gchar],
    signature : Pointer[gchar],
    flags : GDBusPropertyInfoFlags,
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusInterfaceInfo (
    ref_count : gint,
    name : Pointer[gchar],
    methods : Pointer[Pointer[GDBusMethodInfo]],
    signals : Pointer[Pointer[GDBusSignalInfo]],
    properties : Pointer[Pointer[GDBusPropertyInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

record Struct__GDBusNodeInfo (
    ref_count : gint,
    path : Pointer[gchar],
    interfaces : Pointer[Pointer[GDBusInterfaceInfo]],
    nodes : Pointer[Pointer[GDBusNodeInfo]],
    annotations : Pointer[Pointer[GDBusAnnotationInfo]],
);

external (cdecl) g_dbus_annotation_info_lookup(arg0:Pointer[Pointer[GDBusAnnotationInfo]], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_dbus_interface_info_lookup_method(arg0:Pointer[GDBusInterfaceInfo], arg1:Pointer[gchar]) : Pointer[GDBusMethodInfo];

external (cdecl) g_dbus_interface_info_lookup_signal(arg0:Pointer[GDBusInterfaceInfo], arg1:Pointer[gchar]) : Pointer[GDBusSignalInfo];

external (cdecl) g_dbus_interface_info_lookup_property(arg0:Pointer[GDBusInterfaceInfo], arg1:Pointer[gchar]) : Pointer[GDBusPropertyInfo];

external (cdecl) g_dbus_interface_info_cache_build(arg0:Pointer[GDBusInterfaceInfo]) : ;

external (cdecl) g_dbus_interface_info_cache_release(arg0:Pointer[GDBusInterfaceInfo]) : ;

external (cdecl) g_dbus_interface_info_generate_xml(arg0:Pointer[GDBusInterfaceInfo], arg1:guint, arg2:Pointer[GString]) : ;

external (cdecl) g_dbus_node_info_new_for_xml(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusNodeInfo];

external (cdecl) g_dbus_node_info_lookup_interface(arg0:Pointer[GDBusNodeInfo], arg1:Pointer[gchar]) : Pointer[GDBusInterfaceInfo];

external (cdecl) g_dbus_node_info_generate_xml(arg0:Pointer[GDBusNodeInfo], arg1:guint, arg2:Pointer[GString]) : ;

external (cdecl) g_dbus_node_info_ref(arg0:Pointer[GDBusNodeInfo]) : Pointer[GDBusNodeInfo];

external (cdecl) g_dbus_interface_info_ref(arg0:Pointer[GDBusInterfaceInfo]) : Pointer[GDBusInterfaceInfo];

external (cdecl) g_dbus_method_info_ref(arg0:Pointer[GDBusMethodInfo]) : Pointer[GDBusMethodInfo];

external (cdecl) g_dbus_signal_info_ref(arg0:Pointer[GDBusSignalInfo]) : Pointer[GDBusSignalInfo];

external (cdecl) g_dbus_property_info_ref(arg0:Pointer[GDBusPropertyInfo]) : Pointer[GDBusPropertyInfo];

external (cdecl) g_dbus_arg_info_ref(arg0:Pointer[GDBusArgInfo]) : Pointer[GDBusArgInfo];

external (cdecl) g_dbus_annotation_info_ref(arg0:Pointer[GDBusAnnotationInfo]) : Pointer[GDBusAnnotationInfo];

external (cdecl) g_dbus_node_info_unref(arg0:Pointer[GDBusNodeInfo]) : ;

external (cdecl) g_dbus_interface_info_unref(arg0:Pointer[GDBusInterfaceInfo]) : ;

external (cdecl) g_dbus_method_info_unref(arg0:Pointer[GDBusMethodInfo]) : ;

external (cdecl) g_dbus_signal_info_unref(arg0:Pointer[GDBusSignalInfo]) : ;

external (cdecl) g_dbus_property_info_unref(arg0:Pointer[GDBusPropertyInfo]) : ;

external (cdecl) g_dbus_arg_info_unref(arg0:Pointer[GDBusArgInfo]) : ;

external (cdecl) g_dbus_annotation_info_unref(arg0:Pointer[GDBusAnnotationInfo]) : ;

external (cdecl) g_dbus_node_info_get_type() : GType;

external (cdecl) g_dbus_interface_info_get_type() : GType;

external (cdecl) g_dbus_method_info_get_type() : GType;

external (cdecl) g_dbus_signal_info_get_type() : GType;

external (cdecl) g_dbus_property_info_get_type() : GType;

external (cdecl) g_dbus_arg_info_get_type() : GType;

external (cdecl) g_dbus_annotation_info_get_type() : GType;

external (cdecl) g_dbus_message_get_type() : GType;

external (cdecl) g_dbus_message_new() : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_new_signal(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_new_method_call(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_new_method_reply(arg0:Pointer[GDBusMessage]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_new_method_error(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar], arg2:Pointer[gchar], ..) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_new_method_error_valist(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[__va_list_tag]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_new_method_error_literal(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_print(arg0:Pointer[GDBusMessage], arg1:guint) : Pointer[gchar];

external (cdecl) g_dbus_message_get_locked(arg0:Pointer[GDBusMessage]) : gboolean;

external (cdecl) g_dbus_message_lock(arg0:Pointer[GDBusMessage]) : ;

external (cdecl) g_dbus_message_copy(arg0:Pointer[GDBusMessage], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_get_byte_order(arg0:Pointer[GDBusMessage]) : GDBusMessageByteOrder;

external (cdecl) g_dbus_message_set_byte_order(arg0:Pointer[GDBusMessage], arg1:GDBusMessageByteOrder) : ;

external (cdecl) g_dbus_message_get_message_type(arg0:Pointer[GDBusMessage]) : GDBusMessageType;

external (cdecl) g_dbus_message_set_message_type(arg0:Pointer[GDBusMessage], arg1:GDBusMessageType) : ;

external (cdecl) g_dbus_message_get_flags(arg0:Pointer[GDBusMessage]) : GDBusMessageFlags;

external (cdecl) g_dbus_message_set_flags(arg0:Pointer[GDBusMessage], arg1:GDBusMessageFlags) : ;

external (cdecl) g_dbus_message_get_serial(arg0:Pointer[GDBusMessage]) : guint32;

external (cdecl) g_dbus_message_set_serial(arg0:Pointer[GDBusMessage], arg1:guint32) : ;

external (cdecl) g_dbus_message_get_header(arg0:Pointer[GDBusMessage], arg1:GDBusMessageHeaderField) : Pointer[GVariant];

external (cdecl) g_dbus_message_set_header(arg0:Pointer[GDBusMessage], arg1:GDBusMessageHeaderField, arg2:Pointer[GVariant]) : ;

external (cdecl) g_dbus_message_get_header_fields(arg0:Pointer[GDBusMessage]) : Pointer[guchar];

external (cdecl) g_dbus_message_get_body(arg0:Pointer[GDBusMessage]) : Pointer[GVariant];

external (cdecl) g_dbus_message_set_body(arg0:Pointer[GDBusMessage], arg1:Pointer[GVariant]) : ;

external (cdecl) g_dbus_message_get_unix_fd_list(arg0:Pointer[GDBusMessage]) : Pointer[GUnixFDList];

external (cdecl) g_dbus_message_set_unix_fd_list(arg0:Pointer[GDBusMessage], arg1:Pointer[GUnixFDList]) : ;

external (cdecl) g_dbus_message_get_reply_serial(arg0:Pointer[GDBusMessage]) : guint32;

external (cdecl) g_dbus_message_set_reply_serial(arg0:Pointer[GDBusMessage], arg1:guint32) : ;

external (cdecl) g_dbus_message_get_interface(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_interface(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_member(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_member(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_path(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_path(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_sender(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_sender(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_destination(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_destination(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_error_name(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_error_name(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_signature(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_set_signature(arg0:Pointer[GDBusMessage], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_message_get_num_unix_fds(arg0:Pointer[GDBusMessage]) : guint32;

external (cdecl) g_dbus_message_set_num_unix_fds(arg0:Pointer[GDBusMessage], arg1:guint32) : ;

external (cdecl) g_dbus_message_get_arg0(arg0:Pointer[GDBusMessage]) : Pointer[gchar];

external (cdecl) g_dbus_message_new_from_blob(arg0:Pointer[guchar], arg1:gsize, arg2:GDBusCapabilityFlags, arg3:Pointer[Pointer[GError]]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_message_bytes_needed(arg0:Pointer[guchar], arg1:gsize, arg2:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_dbus_message_to_blob(arg0:Pointer[GDBusMessage], arg1:Pointer[gsize], arg2:GDBusCapabilityFlags, arg3:Pointer[Pointer[GError]]) : Pointer[guchar];

external (cdecl) g_dbus_message_to_gerror(arg0:Pointer[GDBusMessage], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_method_invocation_get_type() : GType;

external (cdecl) g_dbus_method_invocation_get_sender(arg0:Pointer[GDBusMethodInvocation]) : Pointer[gchar];

external (cdecl) g_dbus_method_invocation_get_object_path(arg0:Pointer[GDBusMethodInvocation]) : Pointer[gchar];

external (cdecl) g_dbus_method_invocation_get_interface_name(arg0:Pointer[GDBusMethodInvocation]) : Pointer[gchar];

external (cdecl) g_dbus_method_invocation_get_method_name(arg0:Pointer[GDBusMethodInvocation]) : Pointer[gchar];

external (cdecl) g_dbus_method_invocation_get_method_info(arg0:Pointer[GDBusMethodInvocation]) : Pointer[GDBusMethodInfo];

external (cdecl) g_dbus_method_invocation_get_connection(arg0:Pointer[GDBusMethodInvocation]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_method_invocation_get_message(arg0:Pointer[GDBusMethodInvocation]) : Pointer[GDBusMessage];

external (cdecl) g_dbus_method_invocation_get_parameters(arg0:Pointer[GDBusMethodInvocation]) : Pointer[GVariant];

external (cdecl) g_dbus_method_invocation_get_user_data(arg0:Pointer[GDBusMethodInvocation]) : gpointer;

external (cdecl) g_dbus_method_invocation_return_value(arg0:Pointer[GDBusMethodInvocation], arg1:Pointer[GVariant]) : ;

external (cdecl) g_dbus_method_invocation_return_value_with_unix_fd_list(arg0:Pointer[GDBusMethodInvocation], arg1:Pointer[GVariant], arg2:Pointer[GUnixFDList]) : ;

external (cdecl) g_dbus_method_invocation_return_error(arg0:Pointer[GDBusMethodInvocation], arg1:GQuark, arg2:gint, arg3:Pointer[gchar], ..) : ;

external (cdecl) g_dbus_method_invocation_return_error_valist(arg0:Pointer[GDBusMethodInvocation], arg1:GQuark, arg2:gint, arg3:Pointer[gchar], arg4:Pointer[__va_list_tag]) : ;

external (cdecl) g_dbus_method_invocation_return_error_literal(arg0:Pointer[GDBusMethodInvocation], arg1:GQuark, arg2:gint, arg3:Pointer[gchar]) : ;

external (cdecl) g_dbus_method_invocation_return_gerror(arg0:Pointer[GDBusMethodInvocation], arg1:Pointer[GError]) : ;

external (cdecl) g_dbus_method_invocation_take_error(arg0:Pointer[GDBusMethodInvocation], arg1:Pointer[GError]) : ;

external (cdecl) g_dbus_method_invocation_return_dbus_error(arg0:Pointer[GDBusMethodInvocation], arg1:Pointer[gchar], arg2:Pointer[gchar]) : ;

alias GBusAcquiredCallback = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], gpointer],[]];

alias GBusNameAcquiredCallback = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], gpointer],[]];

alias GBusNameLostCallback = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], gpointer],[]];

external (cdecl) g_bus_own_name(arg0:GBusType, arg1:Pointer[gchar], arg2:GBusNameOwnerFlags, arg3:GBusAcquiredCallback, arg4:GBusNameAcquiredCallback, arg5:GBusNameLostCallback, arg6:gpointer, arg7:GDestroyNotify) : guint;

external (cdecl) g_bus_own_name_on_connection(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:GBusNameOwnerFlags, arg3:GBusNameAcquiredCallback, arg4:GBusNameLostCallback, arg5:gpointer, arg6:GDestroyNotify) : guint;

external (cdecl) g_bus_own_name_with_closures(arg0:GBusType, arg1:Pointer[gchar], arg2:GBusNameOwnerFlags, arg3:Pointer[GClosure], arg4:Pointer[GClosure], arg5:Pointer[GClosure]) : guint;

external (cdecl) g_bus_own_name_on_connection_with_closures(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:GBusNameOwnerFlags, arg3:Pointer[GClosure], arg4:Pointer[GClosure]) : guint;

external (cdecl) g_bus_unown_name(arg0:guint) : ;

alias GBusNameAppearedCallback = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], Pointer[gchar], gpointer],[]];

alias GBusNameVanishedCallback = CCodePointer[[Pointer[GDBusConnection], Pointer[gchar], gpointer],[]];

external (cdecl) g_bus_watch_name(arg0:GBusType, arg1:Pointer[gchar], arg2:GBusNameWatcherFlags, arg3:GBusNameAppearedCallback, arg4:GBusNameVanishedCallback, arg5:gpointer, arg6:GDestroyNotify) : guint;

external (cdecl) g_bus_watch_name_on_connection(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:GBusNameWatcherFlags, arg3:GBusNameAppearedCallback, arg4:GBusNameVanishedCallback, arg5:gpointer, arg6:GDestroyNotify) : guint;

external (cdecl) g_bus_watch_name_with_closures(arg0:GBusType, arg1:Pointer[gchar], arg2:GBusNameWatcherFlags, arg3:Pointer[GClosure], arg4:Pointer[GClosure]) : guint;

external (cdecl) g_bus_watch_name_on_connection_with_closures(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar], arg2:GBusNameWatcherFlags, arg3:Pointer[GClosure], arg4:Pointer[GClosure]) : guint;

external (cdecl) g_bus_unwatch_name(arg0:guint) : ;

alias GDBusProxyClass = Struct__GDBusProxyClass;

alias Struct__GDBusProxyPrivate = Opaque;

alias GDBusProxyPrivate = Struct__GDBusProxyPrivate;

record Struct__GDBusProxy (
    parent_instance : GObject,
    priv : Pointer[GDBusProxyPrivate],
);

record Struct__GDBusProxyClass (
    parent_class : GObjectClass,
    g_properties_changed : CCodePointer[[Pointer[GDBusProxy], Pointer[GVariant], Pointer[Pointer[gchar]]],[]],
    g_signal : CCodePointer[[Pointer[GDBusProxy], Pointer[gchar], Pointer[gchar], Pointer[GVariant]],[]],
    padding : Array[gpointer, 32],
);

external (cdecl) g_dbus_proxy_get_type() : GType;

external (cdecl) g_dbus_proxy_new(arg0:Pointer[GDBusConnection], arg1:GDBusProxyFlags, arg2:Pointer[GDBusInterfaceInfo], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:Pointer[GCancellable], arg7:GAsyncReadyCallback, arg8:gpointer) : ;

external (cdecl) g_dbus_proxy_new_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusProxy];

external (cdecl) g_dbus_proxy_new_sync(arg0:Pointer[GDBusConnection], arg1:GDBusProxyFlags, arg2:Pointer[GDBusInterfaceInfo], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:Pointer[GCancellable], arg7:Pointer[Pointer[GError]]) : Pointer[GDBusProxy];

external (cdecl) g_dbus_proxy_new_for_bus(arg0:GBusType, arg1:GDBusProxyFlags, arg2:Pointer[GDBusInterfaceInfo], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:Pointer[GCancellable], arg7:GAsyncReadyCallback, arg8:gpointer) : ;

external (cdecl) g_dbus_proxy_new_for_bus_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusProxy];

external (cdecl) g_dbus_proxy_new_for_bus_sync(arg0:GBusType, arg1:GDBusProxyFlags, arg2:Pointer[GDBusInterfaceInfo], arg3:Pointer[gchar], arg4:Pointer[gchar], arg5:Pointer[gchar], arg6:Pointer[GCancellable], arg7:Pointer[Pointer[GError]]) : Pointer[GDBusProxy];

external (cdecl) g_dbus_proxy_get_connection(arg0:Pointer[GDBusProxy]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_proxy_get_flags(arg0:Pointer[GDBusProxy]) : GDBusProxyFlags;

external (cdecl) g_dbus_proxy_get_name(arg0:Pointer[GDBusProxy]) : Pointer[gchar];

external (cdecl) g_dbus_proxy_get_name_owner(arg0:Pointer[GDBusProxy]) : Pointer[gchar];

external (cdecl) g_dbus_proxy_get_object_path(arg0:Pointer[GDBusProxy]) : Pointer[gchar];

external (cdecl) g_dbus_proxy_get_interface_name(arg0:Pointer[GDBusProxy]) : Pointer[gchar];

external (cdecl) g_dbus_proxy_get_default_timeout(arg0:Pointer[GDBusProxy]) : gint;

external (cdecl) g_dbus_proxy_set_default_timeout(arg0:Pointer[GDBusProxy], arg1:gint) : ;

external (cdecl) g_dbus_proxy_get_interface_info(arg0:Pointer[GDBusProxy]) : Pointer[GDBusInterfaceInfo];

external (cdecl) g_dbus_proxy_set_interface_info(arg0:Pointer[GDBusProxy], arg1:Pointer[GDBusInterfaceInfo]) : ;

external (cdecl) g_dbus_proxy_get_cached_property(arg0:Pointer[GDBusProxy], arg1:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_dbus_proxy_set_cached_property(arg0:Pointer[GDBusProxy], arg1:Pointer[gchar], arg2:Pointer[GVariant]) : ;

external (cdecl) g_dbus_proxy_get_cached_property_names(arg0:Pointer[GDBusProxy]) : Pointer[Pointer[gchar]];

external (cdecl) g_dbus_proxy_call(arg0:Pointer[GDBusProxy], arg1:Pointer[gchar], arg2:Pointer[GVariant], arg3:GDBusCallFlags, arg4:gint, arg5:Pointer[GCancellable], arg6:GAsyncReadyCallback, arg7:gpointer) : ;

external (cdecl) g_dbus_proxy_call_finish(arg0:Pointer[GDBusProxy], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_proxy_call_sync(arg0:Pointer[GDBusProxy], arg1:Pointer[gchar], arg2:Pointer[GVariant], arg3:GDBusCallFlags, arg4:gint, arg5:Pointer[GCancellable], arg6:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_proxy_call_with_unix_fd_list(arg0:Pointer[GDBusProxy], arg1:Pointer[gchar], arg2:Pointer[GVariant], arg3:GDBusCallFlags, arg4:gint, arg5:Pointer[GUnixFDList], arg6:Pointer[GCancellable], arg7:GAsyncReadyCallback, arg8:gpointer) : ;

external (cdecl) g_dbus_proxy_call_with_unix_fd_list_finish(arg0:Pointer[GDBusProxy], arg1:Pointer[Pointer[GUnixFDList]], arg2:Pointer[GAsyncResult], arg3:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_proxy_call_with_unix_fd_list_sync(arg0:Pointer[GDBusProxy], arg1:Pointer[gchar], arg2:Pointer[GVariant], arg3:GDBusCallFlags, arg4:gint, arg5:Pointer[GUnixFDList], arg6:Pointer[Pointer[GUnixFDList]], arg7:Pointer[GCancellable], arg8:Pointer[Pointer[GError]]) : Pointer[GVariant];

external (cdecl) g_dbus_server_get_type() : GType;

external (cdecl) g_dbus_server_new_sync(arg0:Pointer[gchar], arg1:GDBusServerFlags, arg2:Pointer[gchar], arg3:Pointer[GDBusAuthObserver], arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GDBusServer];

external (cdecl) g_dbus_server_get_client_address(arg0:Pointer[GDBusServer]) : Pointer[gchar];

external (cdecl) g_dbus_server_get_guid(arg0:Pointer[GDBusServer]) : Pointer[gchar];

external (cdecl) g_dbus_server_get_flags(arg0:Pointer[GDBusServer]) : GDBusServerFlags;

external (cdecl) g_dbus_server_start(arg0:Pointer[GDBusServer]) : ;

external (cdecl) g_dbus_server_stop(arg0:Pointer[GDBusServer]) : ;

external (cdecl) g_dbus_server_is_active(arg0:Pointer[GDBusServer]) : gboolean;

external (cdecl) g_dbus_is_guid(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_generate_guid() : Pointer[gchar];

external (cdecl) g_dbus_is_name(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_is_unique_name(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_is_member_name(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_is_interface_name(arg0:Pointer[gchar]) : gboolean;

external (cdecl) g_dbus_gvariant_to_gvalue(arg0:Pointer[GVariant], arg1:Pointer[GValue]) : ;

external (cdecl) g_dbus_gvalue_to_gvariant(arg0:Pointer[GValue], arg1:Pointer[GVariantType]) : Pointer[GVariant];

alias GDriveIface = Struct__GDriveIface;

record Struct__GDriveIface (
    g_iface : GTypeInterface,
    changed : CCodePointer[[Pointer[GDrive]],[]],
    disconnected : CCodePointer[[Pointer[GDrive]],[]],
    eject_button : CCodePointer[[Pointer[GDrive]],[]],
    get_name : CCodePointer[[Pointer[GDrive]],[Pointer[CChar]]],
    get_icon : CCodePointer[[Pointer[GDrive]],[Pointer[GIcon]]],
    has_volumes : CCodePointer[[Pointer[GDrive]],[gboolean]],
    get_volumes : CCodePointer[[Pointer[GDrive]],[Pointer[GList]]],
    is_media_removable : CCodePointer[[Pointer[GDrive]],[gboolean]],
    has_media : CCodePointer[[Pointer[GDrive]],[gboolean]],
    is_media_check_automatic : CCodePointer[[Pointer[GDrive]],[gboolean]],
    can_eject : CCodePointer[[Pointer[GDrive]],[gboolean]],
    can_poll_for_media : CCodePointer[[Pointer[GDrive]],[gboolean]],
    eject : CCodePointer[[Pointer[GDrive], GMountUnmountFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_finish : CCodePointer[[Pointer[GDrive], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    poll_for_media : CCodePointer[[Pointer[GDrive], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    poll_for_media_finish : CCodePointer[[Pointer[GDrive], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    get_identifier : CCodePointer[[Pointer[GDrive], Pointer[CChar]],[Pointer[CChar]]],
    enumerate_identifiers : CCodePointer[[Pointer[GDrive]],[Pointer[Pointer[CChar]]]],
    get_start_stop_type : CCodePointer[[Pointer[GDrive]],[GDriveStartStopType]],
    can_start : CCodePointer[[Pointer[GDrive]],[gboolean]],
    can_start_degraded : CCodePointer[[Pointer[GDrive]],[gboolean]],
    start : CCodePointer[[Pointer[GDrive], GDriveStartFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    start_finish : CCodePointer[[Pointer[GDrive], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    can_stop : CCodePointer[[Pointer[GDrive]],[gboolean]],
    stop : CCodePointer[[Pointer[GDrive], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    stop_finish : CCodePointer[[Pointer[GDrive], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    stop_button : CCodePointer[[Pointer[GDrive]],[]],
    eject_with_operation : CCodePointer[[Pointer[GDrive], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_with_operation_finish : CCodePointer[[Pointer[GDrive], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_drive_get_type() : GType;

external (cdecl) g_drive_get_name(arg0:Pointer[GDrive]) : Pointer[CChar];

external (cdecl) g_drive_get_icon(arg0:Pointer[GDrive]) : Pointer[GIcon];

external (cdecl) g_drive_has_volumes(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_get_volumes(arg0:Pointer[GDrive]) : Pointer[GList];

external (cdecl) g_drive_is_media_removable(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_has_media(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_is_media_check_automatic(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_can_poll_for_media(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_can_eject(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_eject(arg0:Pointer[GDrive], arg1:GMountUnmountFlags, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_drive_eject_finish(arg0:Pointer[GDrive], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_drive_poll_for_media(arg0:Pointer[GDrive], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_drive_poll_for_media_finish(arg0:Pointer[GDrive], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_drive_get_identifier(arg0:Pointer[GDrive], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_drive_enumerate_identifiers(arg0:Pointer[GDrive]) : Pointer[Pointer[CChar]];

external (cdecl) g_drive_get_start_stop_type(arg0:Pointer[GDrive]) : GDriveStartStopType;

external (cdecl) g_drive_can_start(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_can_start_degraded(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_start(arg0:Pointer[GDrive], arg1:GDriveStartFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_drive_start_finish(arg0:Pointer[GDrive], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_drive_can_stop(arg0:Pointer[GDrive]) : gboolean;

external (cdecl) g_drive_stop(arg0:Pointer[GDrive], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_drive_stop_finish(arg0:Pointer[GDrive], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_drive_eject_with_operation(arg0:Pointer[GDrive], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_drive_eject_with_operation_finish(arg0:Pointer[GDrive], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

alias GIconIface = Struct__GIconIface;

record Struct__GIconIface (
    g_iface : GTypeInterface,
    hash : CCodePointer[[Pointer[GIcon]],[guint]],
    equal : CCodePointer[[Pointer[GIcon], Pointer[GIcon]],[gboolean]],
    to_tokens : CCodePointer[[Pointer[GIcon], Pointer[GPtrArray], Pointer[gint]],[gboolean]],
    from_tokens : CCodePointer[[Pointer[Pointer[gchar]], gint, gint, Pointer[Pointer[GError]]],[Pointer[GIcon]]],
);

external (cdecl) g_icon_get_type() : GType;

external (cdecl) g_icon_hash(arg0:gconstpointer) : guint;

external (cdecl) g_icon_equal(arg0:Pointer[GIcon], arg1:Pointer[GIcon]) : gboolean;

external (cdecl) g_icon_to_string(arg0:Pointer[GIcon]) : Pointer[gchar];

external (cdecl) g_icon_new_for_string(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GIcon];

alias Struct__GEmblem = Opaque;

alias GEmblem = Struct__GEmblem;

alias Struct__GEmblemClass = Opaque;

alias GEmblemClass = Struct__GEmblemClass;

external (cdecl) g_emblem_get_type() : GType;

external (cdecl) g_emblem_new(arg0:Pointer[GIcon]) : Pointer[GEmblem];

external (cdecl) g_emblem_new_with_origin(arg0:Pointer[GIcon], arg1:GEmblemOrigin) : Pointer[GEmblem];

external (cdecl) g_emblem_get_icon(arg0:Pointer[GEmblem]) : Pointer[GIcon];

external (cdecl) g_emblem_get_origin(arg0:Pointer[GEmblem]) : GEmblemOrigin;

alias GEmblemedIcon = Struct__GEmblemedIcon;

alias GEmblemedIconClass = Struct__GEmblemedIconClass;

alias Struct__GEmblemedIconPrivate = Opaque;

alias GEmblemedIconPrivate = Struct__GEmblemedIconPrivate;

record Struct__GEmblemedIcon (
    parent_instance : GObject,
    priv : Pointer[GEmblemedIconPrivate],
);

record Struct__GEmblemedIconClass (
    parent_class : GObjectClass,
);

external (cdecl) g_emblemed_icon_get_type() : GType;

external (cdecl) g_emblemed_icon_new(arg0:Pointer[GIcon], arg1:Pointer[GEmblem]) : Pointer[GIcon];

external (cdecl) g_emblemed_icon_get_icon(arg0:Pointer[GEmblemedIcon]) : Pointer[GIcon];

external (cdecl) g_emblemed_icon_get_emblems(arg0:Pointer[GEmblemedIcon]) : Pointer[GList];

external (cdecl) g_emblemed_icon_add_emblem(arg0:Pointer[GEmblemedIcon], arg1:Pointer[GEmblem]) : ;

external (cdecl) g_emblemed_icon_clear_emblems(arg0:Pointer[GEmblemedIcon]) : ;

record Struct__GFileAttributeInfo (
    name : Pointer[CChar],
    type : GFileAttributeType,
    flags : GFileAttributeInfoFlags,
);

record Struct__GFileAttributeInfoList (
    infos : Pointer[GFileAttributeInfo],
    n_infos : Int,
);

external (cdecl) g_file_attribute_info_list_get_type() : GType;

external (cdecl) g_file_attribute_info_list_new() : Pointer[GFileAttributeInfoList];

external (cdecl) g_file_attribute_info_list_ref(arg0:Pointer[GFileAttributeInfoList]) : Pointer[GFileAttributeInfoList];

external (cdecl) g_file_attribute_info_list_unref(arg0:Pointer[GFileAttributeInfoList]) : ;

external (cdecl) g_file_attribute_info_list_dup(arg0:Pointer[GFileAttributeInfoList]) : Pointer[GFileAttributeInfoList];

external (cdecl) g_file_attribute_info_list_lookup(arg0:Pointer[GFileAttributeInfoList], arg1:Pointer[CChar]) : Pointer[GFileAttributeInfo];

external (cdecl) g_file_attribute_info_list_add(arg0:Pointer[GFileAttributeInfoList], arg1:Pointer[CChar], arg2:GFileAttributeType, arg3:GFileAttributeInfoFlags) : ;

alias GFileEnumeratorClass = Struct__GFileEnumeratorClass;

alias Struct__GFileEnumeratorPrivate = Opaque;

alias GFileEnumeratorPrivate = Struct__GFileEnumeratorPrivate;

record Struct__GFileEnumerator (
    parent_instance : GObject,
    priv : Pointer[GFileEnumeratorPrivate],
);

record Struct__GFileEnumeratorClass (
    parent_class : GObjectClass,
    next_file : CCodePointer[[Pointer[GFileEnumerator], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    close_fn : CCodePointer[[Pointer[GFileEnumerator], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    next_files_async : CCodePointer[[Pointer[GFileEnumerator], Int, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    next_files_finish : CCodePointer[[Pointer[GFileEnumerator], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GList]]],
    close_async : CCodePointer[[Pointer[GFileEnumerator], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    close_finish : CCodePointer[[Pointer[GFileEnumerator], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
);

external (cdecl) g_file_enumerator_get_type() : GType;

external (cdecl) g_file_enumerator_next_file(arg0:Pointer[GFileEnumerator], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_enumerator_close(arg0:Pointer[GFileEnumerator], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_enumerator_next_files_async(arg0:Pointer[GFileEnumerator], arg1:Int, arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_enumerator_next_files_finish(arg0:Pointer[GFileEnumerator], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_file_enumerator_close_async(arg0:Pointer[GFileEnumerator], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_enumerator_close_finish(arg0:Pointer[GFileEnumerator], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_enumerator_is_closed(arg0:Pointer[GFileEnumerator]) : gboolean;

external (cdecl) g_file_enumerator_has_pending(arg0:Pointer[GFileEnumerator]) : gboolean;

external (cdecl) g_file_enumerator_set_pending(arg0:Pointer[GFileEnumerator], arg1:gboolean) : ;

external (cdecl) g_file_enumerator_get_container(arg0:Pointer[GFileEnumerator]) : Pointer[GFile];

alias GFileIface = Struct__GFileIface;

record Struct__GFileIface (
    g_iface : GTypeInterface,
    dup : CCodePointer[[Pointer[GFile]],[Pointer[GFile]]],
    hash : CCodePointer[[Pointer[GFile]],[guint]],
    equal : CCodePointer[[Pointer[GFile], Pointer[GFile]],[gboolean]],
    is_native : CCodePointer[[Pointer[GFile]],[gboolean]],
    has_uri_scheme : CCodePointer[[Pointer[GFile], Pointer[CChar]],[gboolean]],
    get_uri_scheme : CCodePointer[[Pointer[GFile]],[Pointer[CChar]]],
    get_basename : CCodePointer[[Pointer[GFile]],[Pointer[CChar]]],
    get_path : CCodePointer[[Pointer[GFile]],[Pointer[CChar]]],
    get_uri : CCodePointer[[Pointer[GFile]],[Pointer[CChar]]],
    get_parse_name : CCodePointer[[Pointer[GFile]],[Pointer[CChar]]],
    get_parent : CCodePointer[[Pointer[GFile]],[Pointer[GFile]]],
    prefix_matches : CCodePointer[[Pointer[GFile], Pointer[GFile]],[gboolean]],
    get_relative_path : CCodePointer[[Pointer[GFile], Pointer[GFile]],[Pointer[CChar]]],
    resolve_relative_path : CCodePointer[[Pointer[GFile], Pointer[CChar]],[Pointer[GFile]]],
    get_child_for_display_name : CCodePointer[[Pointer[GFile], Pointer[CChar], Pointer[Pointer[GError]]],[Pointer[GFile]]],
    enumerate_children : CCodePointer[[Pointer[GFile], Pointer[CChar], GFileQueryInfoFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileEnumerator]]],
    enumerate_children_async : CCodePointer[[Pointer[GFile], Pointer[CChar], GFileQueryInfoFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    enumerate_children_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileEnumerator]]],
    query_info : CCodePointer[[Pointer[GFile], Pointer[CChar], GFileQueryInfoFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    query_info_async : CCodePointer[[Pointer[GFile], Pointer[CChar], GFileQueryInfoFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    query_info_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    query_filesystem_info : CCodePointer[[Pointer[GFile], Pointer[CChar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    query_filesystem_info_async : CCodePointer[[Pointer[GFile], Pointer[CChar], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    query_filesystem_info_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    find_enclosing_mount : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GMount]]],
    find_enclosing_mount_async : CCodePointer[[Pointer[GFile], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    find_enclosing_mount_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GMount]]],
    set_display_name : CCodePointer[[Pointer[GFile], Pointer[CChar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFile]]],
    set_display_name_async : CCodePointer[[Pointer[GFile], Pointer[CChar], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    set_display_name_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFile]]],
    query_settable_attributes : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileAttributeInfoList]]],
    _query_settable_attributes_async : CCodePointer[[],[]],
    _query_settable_attributes_finish : CCodePointer[[],[]],
    query_writable_namespaces : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileAttributeInfoList]]],
    _query_writable_namespaces_async : CCodePointer[[],[]],
    _query_writable_namespaces_finish : CCodePointer[[],[]],
    set_attribute : CCodePointer[[Pointer[GFile], Pointer[CChar], GFileAttributeType, gpointer, GFileQueryInfoFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    set_attributes_from_info : CCodePointer[[Pointer[GFile], Pointer[GFileInfo], GFileQueryInfoFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    set_attributes_async : CCodePointer[[Pointer[GFile], Pointer[GFileInfo], GFileQueryInfoFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    set_attributes_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GFileInfo]], Pointer[Pointer[GError]]],[gboolean]],
    read_fn : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInputStream]]],
    read_async : CCodePointer[[Pointer[GFile], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    read_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileInputStream]]],
    append_to : CCodePointer[[Pointer[GFile], GFileCreateFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileOutputStream]]],
    append_to_async : CCodePointer[[Pointer[GFile], GFileCreateFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    append_to_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileOutputStream]]],
    create : CCodePointer[[Pointer[GFile], GFileCreateFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileOutputStream]]],
    create_async : CCodePointer[[Pointer[GFile], GFileCreateFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    create_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileOutputStream]]],
    replace : CCodePointer[[Pointer[GFile], Pointer[CChar], gboolean, GFileCreateFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileOutputStream]]],
    replace_async : CCodePointer[[Pointer[GFile], Pointer[CChar], gboolean, GFileCreateFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    replace_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileOutputStream]]],
    delete_file : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    _delete_file_async : CCodePointer[[],[]],
    _delete_file_finish : CCodePointer[[],[]],
    trash : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    _trash_async : CCodePointer[[],[]],
    _trash_finish : CCodePointer[[],[]],
    make_directory : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    _make_directory_async : CCodePointer[[],[]],
    _make_directory_finish : CCodePointer[[],[]],
    make_symbolic_link : CCodePointer[[Pointer[GFile], Pointer[CChar], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    _make_symbolic_link_async : CCodePointer[[],[]],
    _make_symbolic_link_finish : CCodePointer[[],[]],
    copy : CCodePointer[[Pointer[GFile], Pointer[GFile], GFileCopyFlags, Pointer[GCancellable], GFileProgressCallback, gpointer, Pointer[Pointer[GError]]],[gboolean]],
    copy_async : CCodePointer[[Pointer[GFile], Pointer[GFile], GFileCopyFlags, Int, Pointer[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer],[]],
    copy_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    move : CCodePointer[[Pointer[GFile], Pointer[GFile], GFileCopyFlags, Pointer[GCancellable], GFileProgressCallback, gpointer, Pointer[Pointer[GError]]],[gboolean]],
    _move_async : CCodePointer[[],[]],
    _move_finish : CCodePointer[[],[]],
    mount_mountable : CCodePointer[[Pointer[GFile], GMountMountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    mount_mountable_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFile]]],
    unmount_mountable : CCodePointer[[Pointer[GFile], GMountUnmountFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    unmount_mountable_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    eject_mountable : CCodePointer[[Pointer[GFile], GMountUnmountFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_mountable_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    mount_enclosing_volume : CCodePointer[[Pointer[GFile], GMountMountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    mount_enclosing_volume_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    monitor_dir : CCodePointer[[Pointer[GFile], GFileMonitorFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileMonitor]]],
    monitor_file : CCodePointer[[Pointer[GFile], GFileMonitorFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileMonitor]]],
    open_readwrite : CCodePointer[[Pointer[GFile], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileIOStream]]],
    open_readwrite_async : CCodePointer[[Pointer[GFile], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    open_readwrite_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileIOStream]]],
    create_readwrite : CCodePointer[[Pointer[GFile], GFileCreateFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileIOStream]]],
    create_readwrite_async : CCodePointer[[Pointer[GFile], GFileCreateFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    create_readwrite_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileIOStream]]],
    replace_readwrite : CCodePointer[[Pointer[GFile], Pointer[CChar], gboolean, GFileCreateFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileIOStream]]],
    replace_readwrite_async : CCodePointer[[Pointer[GFile], Pointer[CChar], gboolean, GFileCreateFlags, Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    replace_readwrite_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileIOStream]]],
    start_mountable : CCodePointer[[Pointer[GFile], GDriveStartFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    start_mountable_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    stop_mountable : CCodePointer[[Pointer[GFile], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    stop_mountable_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    supports_thread_contexts : gboolean,
    unmount_mountable_with_operation : CCodePointer[[Pointer[GFile], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    unmount_mountable_with_operation_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    eject_mountable_with_operation : CCodePointer[[Pointer[GFile], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_mountable_with_operation_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    poll_mountable : CCodePointer[[Pointer[GFile], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    poll_mountable_finish : CCodePointer[[Pointer[GFile], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_file_get_type() : GType;

external (cdecl) g_file_new_for_path(arg0:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_file_new_for_uri(arg0:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_file_new_for_commandline_arg(arg0:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_file_parse_name(arg0:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_file_dup(arg0:Pointer[GFile]) : Pointer[GFile];

external (cdecl) g_file_hash(arg0:gconstpointer) : guint;

external (cdecl) g_file_equal(arg0:Pointer[GFile], arg1:Pointer[GFile]) : gboolean;

external (cdecl) g_file_get_basename(arg0:Pointer[GFile]) : Pointer[CChar];

external (cdecl) g_file_get_path(arg0:Pointer[GFile]) : Pointer[CChar];

external (cdecl) g_file_get_uri(arg0:Pointer[GFile]) : Pointer[CChar];

external (cdecl) g_file_get_parse_name(arg0:Pointer[GFile]) : Pointer[CChar];

external (cdecl) g_file_get_parent(arg0:Pointer[GFile]) : Pointer[GFile];

external (cdecl) g_file_has_parent(arg0:Pointer[GFile], arg1:Pointer[GFile]) : gboolean;

external (cdecl) g_file_get_child(arg0:Pointer[GFile], arg1:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_file_get_child_for_display_name(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Pointer[Pointer[GError]]) : Pointer[GFile];

external (cdecl) g_file_has_prefix(arg0:Pointer[GFile], arg1:Pointer[GFile]) : gboolean;

external (cdecl) g_file_get_relative_path(arg0:Pointer[GFile], arg1:Pointer[GFile]) : Pointer[CChar];

external (cdecl) g_file_resolve_relative_path(arg0:Pointer[GFile], arg1:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_file_is_native(arg0:Pointer[GFile]) : gboolean;

external (cdecl) g_file_has_uri_scheme(arg0:Pointer[GFile], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_get_uri_scheme(arg0:Pointer[GFile]) : Pointer[CChar];

external (cdecl) g_file_read(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInputStream];

external (cdecl) g_file_read_async(arg0:Pointer[GFile], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_read_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInputStream];

external (cdecl) g_file_append_to(arg0:Pointer[GFile], arg1:GFileCreateFlags, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileOutputStream];

external (cdecl) g_file_create(arg0:Pointer[GFile], arg1:GFileCreateFlags, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileOutputStream];

external (cdecl) g_file_replace(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gboolean, arg3:GFileCreateFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GFileOutputStream];

external (cdecl) g_file_append_to_async(arg0:Pointer[GFile], arg1:GFileCreateFlags, arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_append_to_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileOutputStream];

external (cdecl) g_file_create_async(arg0:Pointer[GFile], arg1:GFileCreateFlags, arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_create_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileOutputStream];

external (cdecl) g_file_replace_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gboolean, arg3:GFileCreateFlags, arg4:Int, arg5:Pointer[GCancellable], arg6:GAsyncReadyCallback, arg7:gpointer) : ;

external (cdecl) g_file_replace_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileOutputStream];

external (cdecl) g_file_open_readwrite(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GFileIOStream];

external (cdecl) g_file_open_readwrite_async(arg0:Pointer[GFile], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_open_readwrite_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileIOStream];

external (cdecl) g_file_create_readwrite(arg0:Pointer[GFile], arg1:GFileCreateFlags, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileIOStream];

external (cdecl) g_file_create_readwrite_async(arg0:Pointer[GFile], arg1:GFileCreateFlags, arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_create_readwrite_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileIOStream];

external (cdecl) g_file_replace_readwrite(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gboolean, arg3:GFileCreateFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GFileIOStream];

external (cdecl) g_file_replace_readwrite_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gboolean, arg3:GFileCreateFlags, arg4:Int, arg5:Pointer[GCancellable], arg6:GAsyncReadyCallback, arg7:gpointer) : ;

external (cdecl) g_file_replace_readwrite_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileIOStream];

external (cdecl) g_file_query_exists(arg0:Pointer[GFile], arg1:Pointer[GCancellable]) : gboolean;

external (cdecl) g_file_query_file_type(arg0:Pointer[GFile], arg1:GFileQueryInfoFlags, arg2:Pointer[GCancellable]) : GFileType;

external (cdecl) g_file_query_info(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:GFileQueryInfoFlags, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_query_info_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:GFileQueryInfoFlags, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_file_query_info_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_query_filesystem_info(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_query_filesystem_info_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_query_filesystem_info_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_find_enclosing_mount(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GMount];

external (cdecl) g_file_find_enclosing_mount_async(arg0:Pointer[GFile], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_find_enclosing_mount_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GMount];

external (cdecl) g_file_enumerate_children(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:GFileQueryInfoFlags, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GFileEnumerator];

external (cdecl) g_file_enumerate_children_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:GFileQueryInfoFlags, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_file_enumerate_children_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileEnumerator];

external (cdecl) g_file_set_display_name(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFile];

external (cdecl) g_file_set_display_name_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_set_display_name_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFile];

external (cdecl) g_file_delete(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_trash(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_copy(arg0:Pointer[GFile], arg1:Pointer[GFile], arg2:GFileCopyFlags, arg3:Pointer[GCancellable], arg4:GFileProgressCallback, arg5:gpointer, arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_copy_async(arg0:Pointer[GFile], arg1:Pointer[GFile], arg2:GFileCopyFlags, arg3:Int, arg4:Pointer[GCancellable], arg5:GFileProgressCallback, arg6:gpointer, arg7:GAsyncReadyCallback, arg8:gpointer) : ;

external (cdecl) g_file_copy_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_move(arg0:Pointer[GFile], arg1:Pointer[GFile], arg2:GFileCopyFlags, arg3:Pointer[GCancellable], arg4:GFileProgressCallback, arg5:gpointer, arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_make_directory(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_make_directory_with_parents(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_make_symbolic_link(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_query_settable_attributes(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GFileAttributeInfoList];

external (cdecl) g_file_query_writable_namespaces(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GFileAttributeInfoList];

external (cdecl) g_file_set_attribute(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:GFileAttributeType, arg3:gpointer, arg4:GFileQueryInfoFlags, arg5:Pointer[GCancellable], arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attributes_from_info(arg0:Pointer[GFile], arg1:Pointer[GFileInfo], arg2:GFileQueryInfoFlags, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attributes_async(arg0:Pointer[GFile], arg1:Pointer[GFileInfo], arg2:GFileQueryInfoFlags, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_file_set_attributes_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GFileInfo]], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attribute_string(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:GFileQueryInfoFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attribute_byte_string(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:Pointer[CChar], arg3:GFileQueryInfoFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attribute_uint32(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:guint32, arg3:GFileQueryInfoFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attribute_int32(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gint32, arg3:GFileQueryInfoFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attribute_uint64(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:guint64, arg3:GFileQueryInfoFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_set_attribute_int64(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gint64, arg3:GFileQueryInfoFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_mount_enclosing_volume(arg0:Pointer[GFile], arg1:GMountMountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_mount_enclosing_volume_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_mount_mountable(arg0:Pointer[GFile], arg1:GMountMountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_mount_mountable_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFile];

external (cdecl) g_file_unmount_mountable(arg0:Pointer[GFile], arg1:GMountUnmountFlags, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_unmount_mountable_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_unmount_mountable_with_operation(arg0:Pointer[GFile], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_unmount_mountable_with_operation_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_eject_mountable(arg0:Pointer[GFile], arg1:GMountUnmountFlags, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_eject_mountable_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_eject_mountable_with_operation(arg0:Pointer[GFile], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_eject_mountable_with_operation_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_copy_attributes(arg0:Pointer[GFile], arg1:Pointer[GFile], arg2:GFileCopyFlags, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_monitor_directory(arg0:Pointer[GFile], arg1:GFileMonitorFlags, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileMonitor];

external (cdecl) g_file_monitor_file(arg0:Pointer[GFile], arg1:GFileMonitorFlags, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileMonitor];

external (cdecl) g_file_monitor(arg0:Pointer[GFile], arg1:GFileMonitorFlags, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileMonitor];

external (cdecl) g_file_start_mountable(arg0:Pointer[GFile], arg1:GDriveStartFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_start_mountable_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_stop_mountable(arg0:Pointer[GFile], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_stop_mountable_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_poll_mountable(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_file_poll_mountable_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_query_default_handler(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GAppInfo];

external (cdecl) g_file_load_contents(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[CChar]], arg3:Pointer[gsize], arg4:Pointer[Pointer[CChar]], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_load_contents_async(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_file_load_contents_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[CChar]], arg3:Pointer[gsize], arg4:Pointer[Pointer[CChar]], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_load_partial_contents_async(arg0:Pointer[GFile], arg1:Pointer[GCancellable], arg2:GFileReadMoreCallback, arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_file_load_partial_contents_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[CChar]], arg3:Pointer[gsize], arg4:Pointer[Pointer[CChar]], arg5:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_replace_contents(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gsize, arg3:Pointer[CChar], arg4:gboolean, arg5:GFileCreateFlags, arg6:Pointer[Pointer[CChar]], arg7:Pointer[GCancellable], arg8:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_replace_contents_async(arg0:Pointer[GFile], arg1:Pointer[CChar], arg2:gsize, arg3:Pointer[CChar], arg4:gboolean, arg5:GFileCreateFlags, arg6:Pointer[GCancellable], arg7:GAsyncReadyCallback, arg8:gpointer) : ;

external (cdecl) g_file_replace_contents_finish(arg0:Pointer[GFile], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[CChar]], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_file_supports_thread_contexts(arg0:Pointer[GFile]) : gboolean;

alias Struct__GFileIconClass = Opaque;

alias GFileIconClass = Struct__GFileIconClass;

external (cdecl) g_file_icon_get_type() : GType;

external (cdecl) g_file_icon_new(arg0:Pointer[GFile]) : Pointer[GIcon];

external (cdecl) g_file_icon_get_file(arg0:Pointer[GFileIcon]) : Pointer[GFile];

alias Struct__GFileInfoClass = Opaque;

alias GFileInfoClass = Struct__GFileInfoClass;

external (cdecl) g_file_info_get_type() : GType;

external (cdecl) g_file_info_new() : Pointer[GFileInfo];

external (cdecl) g_file_info_dup(arg0:Pointer[GFileInfo]) : Pointer[GFileInfo];

external (cdecl) g_file_info_copy_into(arg0:Pointer[GFileInfo], arg1:Pointer[GFileInfo]) : ;

external (cdecl) g_file_info_has_attribute(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_info_has_namespace(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_info_list_attributes(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : Pointer[Pointer[CChar]];

external (cdecl) g_file_info_get_attribute_data(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:Pointer[GFileAttributeType], arg3:Pointer[gpointer], arg4:Pointer[GFileAttributeStatus]) : gboolean;

external (cdecl) g_file_info_get_attribute_type(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : GFileAttributeType;

external (cdecl) g_file_info_remove_attribute(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : ;

external (cdecl) g_file_info_get_attribute_status(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : GFileAttributeStatus;

external (cdecl) g_file_info_set_attribute_status(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:GFileAttributeStatus) : gboolean;

external (cdecl) g_file_info_get_attribute_as_string(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_file_info_get_attribute_string(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_file_info_get_attribute_byte_string(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_file_info_get_attribute_boolean(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_info_get_attribute_uint32(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : guint32;

external (cdecl) g_file_info_get_attribute_int32(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : gint32;

external (cdecl) g_file_info_get_attribute_uint64(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : guint64;

external (cdecl) g_file_info_get_attribute_int64(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : gint64;

external (cdecl) g_file_info_get_attribute_object(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : Pointer[GObject];

external (cdecl) g_file_info_get_attribute_stringv(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : Pointer[Pointer[CChar]];

external (cdecl) g_file_info_set_attribute(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:GFileAttributeType, arg3:gpointer) : ;

external (cdecl) g_file_info_set_attribute_string(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_attribute_byte_string(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_attribute_boolean(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:gboolean) : ;

external (cdecl) g_file_info_set_attribute_uint32(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:guint32) : ;

external (cdecl) g_file_info_set_attribute_int32(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:gint32) : ;

external (cdecl) g_file_info_set_attribute_uint64(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:guint64) : ;

external (cdecl) g_file_info_set_attribute_int64(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:gint64) : ;

external (cdecl) g_file_info_set_attribute_object(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:Pointer[GObject]) : ;

external (cdecl) g_file_info_set_attribute_stringv(arg0:Pointer[GFileInfo], arg1:Pointer[CChar], arg2:Pointer[Pointer[CChar]]) : ;

external (cdecl) g_file_info_clear_status(arg0:Pointer[GFileInfo]) : ;

external (cdecl) g_file_info_get_file_type(arg0:Pointer[GFileInfo]) : GFileType;

external (cdecl) g_file_info_get_is_hidden(arg0:Pointer[GFileInfo]) : gboolean;

external (cdecl) g_file_info_get_is_backup(arg0:Pointer[GFileInfo]) : gboolean;

external (cdecl) g_file_info_get_is_symlink(arg0:Pointer[GFileInfo]) : gboolean;

external (cdecl) g_file_info_get_name(arg0:Pointer[GFileInfo]) : Pointer[CChar];

external (cdecl) g_file_info_get_display_name(arg0:Pointer[GFileInfo]) : Pointer[CChar];

external (cdecl) g_file_info_get_edit_name(arg0:Pointer[GFileInfo]) : Pointer[CChar];

external (cdecl) g_file_info_get_icon(arg0:Pointer[GFileInfo]) : Pointer[GIcon];

external (cdecl) g_file_info_get_content_type(arg0:Pointer[GFileInfo]) : Pointer[CChar];

external (cdecl) g_file_info_get_size(arg0:Pointer[GFileInfo]) : goffset;

external (cdecl) g_file_info_get_modification_time(arg0:Pointer[GFileInfo], arg1:Pointer[GTimeVal]) : ;

external (cdecl) g_file_info_get_symlink_target(arg0:Pointer[GFileInfo]) : Pointer[CChar];

external (cdecl) g_file_info_get_etag(arg0:Pointer[GFileInfo]) : Pointer[CChar];

external (cdecl) g_file_info_get_sort_order(arg0:Pointer[GFileInfo]) : gint32;

external (cdecl) g_file_info_set_attribute_mask(arg0:Pointer[GFileInfo], arg1:Pointer[GFileAttributeMatcher]) : ;

external (cdecl) g_file_info_unset_attribute_mask(arg0:Pointer[GFileInfo]) : ;

external (cdecl) g_file_info_set_file_type(arg0:Pointer[GFileInfo], arg1:GFileType) : ;

external (cdecl) g_file_info_set_is_hidden(arg0:Pointer[GFileInfo], arg1:gboolean) : ;

external (cdecl) g_file_info_set_is_symlink(arg0:Pointer[GFileInfo], arg1:gboolean) : ;

external (cdecl) g_file_info_set_name(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_display_name(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_edit_name(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_icon(arg0:Pointer[GFileInfo], arg1:Pointer[GIcon]) : ;

external (cdecl) g_file_info_set_content_type(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_size(arg0:Pointer[GFileInfo], arg1:goffset) : ;

external (cdecl) g_file_info_set_modification_time(arg0:Pointer[GFileInfo], arg1:Pointer[GTimeVal]) : ;

external (cdecl) g_file_info_set_symlink_target(arg0:Pointer[GFileInfo], arg1:Pointer[CChar]) : ;

external (cdecl) g_file_info_set_sort_order(arg0:Pointer[GFileInfo], arg1:gint32) : ;

external (cdecl) g_file_attribute_matcher_get_type() : GType;

external (cdecl) g_file_attribute_matcher_new(arg0:Pointer[CChar]) : Pointer[GFileAttributeMatcher];

external (cdecl) g_file_attribute_matcher_ref(arg0:Pointer[GFileAttributeMatcher]) : Pointer[GFileAttributeMatcher];

external (cdecl) g_file_attribute_matcher_unref(arg0:Pointer[GFileAttributeMatcher]) : ;

external (cdecl) g_file_attribute_matcher_matches(arg0:Pointer[GFileAttributeMatcher], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_attribute_matcher_matches_only(arg0:Pointer[GFileAttributeMatcher], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_attribute_matcher_enumerate_namespace(arg0:Pointer[GFileAttributeMatcher], arg1:Pointer[CChar]) : gboolean;

external (cdecl) g_file_attribute_matcher_enumerate_next(arg0:Pointer[GFileAttributeMatcher]) : Pointer[CChar];

alias GFileInputStreamClass = Struct__GFileInputStreamClass;

alias Struct__GFileInputStreamPrivate = Opaque;

alias GFileInputStreamPrivate = Struct__GFileInputStreamPrivate;

record Struct__GFileInputStream (
    parent_instance : GInputStream,
    priv : Pointer[GFileInputStreamPrivate],
);

record Struct__GFileInputStreamClass (
    parent_class : GInputStreamClass,
    tell : CCodePointer[[Pointer[GFileInputStream]],[goffset]],
    can_seek : CCodePointer[[Pointer[GFileInputStream]],[gboolean]],
    seek : CCodePointer[[Pointer[GFileInputStream], goffset, GSeekType, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    query_info : CCodePointer[[Pointer[GFileInputStream], Pointer[CChar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    query_info_async : CCodePointer[[Pointer[GFileInputStream], Pointer[CChar], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    query_info_finish : CCodePointer[[Pointer[GFileInputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_file_input_stream_get_type() : GType;

external (cdecl) g_file_input_stream_query_info(arg0:Pointer[GFileInputStream], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_input_stream_query_info_async(arg0:Pointer[GFileInputStream], arg1:Pointer[CChar], arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_input_stream_query_info_finish(arg0:Pointer[GFileInputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_io_error_quark() : GQuark;

external (cdecl) g_io_error_from_errno(arg0:gint) : GIOErrorEnum;

alias Struct__GIOStreamPrivate = Opaque;

alias GIOStreamPrivate = Struct__GIOStreamPrivate;

alias GIOStreamClass = Struct__GIOStreamClass;

record Struct__GIOStream (
    parent_instance : GObject,
    priv : Pointer[GIOStreamPrivate],
);

record Struct__GIOStreamClass (
    parent_class : GObjectClass,
    get_input_stream : CCodePointer[[Pointer[GIOStream]],[Pointer[GInputStream]]],
    get_output_stream : CCodePointer[[Pointer[GIOStream]],[Pointer[GOutputStream]]],
    close_fn : CCodePointer[[Pointer[GIOStream], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    close_async : CCodePointer[[Pointer[GIOStream], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    close_finish : CCodePointer[[Pointer[GIOStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
    _g_reserved8 : CCodePointer[[],[]],
    _g_reserved9 : CCodePointer[[],[]],
    _g_reserved10 : CCodePointer[[],[]],
);

external (cdecl) g_io_stream_get_type() : GType;

external (cdecl) g_io_stream_get_input_stream(arg0:Pointer[GIOStream]) : Pointer[GInputStream];

external (cdecl) g_io_stream_get_output_stream(arg0:Pointer[GIOStream]) : Pointer[GOutputStream];

external (cdecl) g_io_stream_splice_async(arg0:Pointer[GIOStream], arg1:Pointer[GIOStream], arg2:GIOStreamSpliceFlags, arg3:Int, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_io_stream_splice_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_io_stream_close(arg0:Pointer[GIOStream], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_io_stream_close_async(arg0:Pointer[GIOStream], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_io_stream_close_finish(arg0:Pointer[GIOStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_io_stream_is_closed(arg0:Pointer[GIOStream]) : gboolean;

external (cdecl) g_io_stream_has_pending(arg0:Pointer[GIOStream]) : gboolean;

external (cdecl) g_io_stream_set_pending(arg0:Pointer[GIOStream], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_io_stream_clear_pending(arg0:Pointer[GIOStream]) : ;

alias GFileIOStreamClass = Struct__GFileIOStreamClass;

alias Struct__GFileIOStreamPrivate = Opaque;

alias GFileIOStreamPrivate = Struct__GFileIOStreamPrivate;

record Struct__GFileIOStream (
    parent_instance : GIOStream,
    priv : Pointer[GFileIOStreamPrivate],
);

record Struct__GFileIOStreamClass (
    parent_class : GIOStreamClass,
    tell : CCodePointer[[Pointer[GFileIOStream]],[goffset]],
    can_seek : CCodePointer[[Pointer[GFileIOStream]],[gboolean]],
    seek : CCodePointer[[Pointer[GFileIOStream], goffset, GSeekType, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    can_truncate : CCodePointer[[Pointer[GFileIOStream]],[gboolean]],
    truncate_fn : CCodePointer[[Pointer[GFileIOStream], goffset, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    query_info : CCodePointer[[Pointer[GFileIOStream], Pointer[CChar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    query_info_async : CCodePointer[[Pointer[GFileIOStream], Pointer[CChar], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    query_info_finish : CCodePointer[[Pointer[GFileIOStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    get_etag : CCodePointer[[Pointer[GFileIOStream]],[Pointer[CChar]]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_file_io_stream_get_type() : GType;

external (cdecl) g_file_io_stream_query_info(arg0:Pointer[GFileIOStream], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_io_stream_query_info_async(arg0:Pointer[GFileIOStream], arg1:Pointer[CChar], arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_io_stream_query_info_finish(arg0:Pointer[GFileIOStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_io_stream_get_etag(arg0:Pointer[GFileIOStream]) : Pointer[CChar];

alias GFileMonitorClass = Struct__GFileMonitorClass;

alias Struct__GFileMonitorPrivate = Opaque;

alias GFileMonitorPrivate = Struct__GFileMonitorPrivate;

record Struct__GFileMonitor (
    parent_instance : GObject,
    priv : Pointer[GFileMonitorPrivate],
);

record Struct__GFileMonitorClass (
    parent_class : GObjectClass,
    changed : CCodePointer[[Pointer[GFileMonitor], Pointer[GFile], Pointer[GFile], GFileMonitorEvent],[]],
    cancel : CCodePointer[[Pointer[GFileMonitor]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_file_monitor_get_type() : GType;

external (cdecl) g_file_monitor_cancel(arg0:Pointer[GFileMonitor]) : gboolean;

external (cdecl) g_file_monitor_is_cancelled(arg0:Pointer[GFileMonitor]) : gboolean;

external (cdecl) g_file_monitor_set_rate_limit(arg0:Pointer[GFileMonitor], arg1:gint) : ;

external (cdecl) g_file_monitor_emit_event(arg0:Pointer[GFileMonitor], arg1:Pointer[GFile], arg2:Pointer[GFile], arg3:GFileMonitorEvent) : ;

alias GFilenameCompleterClass = Struct__GFilenameCompleterClass;

record Struct__GFilenameCompleterClass (
    parent_class : GObjectClass,
    got_completion_data : CCodePointer[[Pointer[GFilenameCompleter]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
);

external (cdecl) g_filename_completer_get_type() : GType;

external (cdecl) g_filename_completer_new() : Pointer[GFilenameCompleter];

external (cdecl) g_filename_completer_get_completion_suffix(arg0:Pointer[GFilenameCompleter], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_filename_completer_get_completions(arg0:Pointer[GFilenameCompleter], arg1:Pointer[CChar]) : Pointer[Pointer[CChar]];

external (cdecl) g_filename_completer_set_dirs_only(arg0:Pointer[GFilenameCompleter], arg1:gboolean) : ;

alias GFileOutputStreamClass = Struct__GFileOutputStreamClass;

alias Struct__GFileOutputStreamPrivate = Opaque;

alias GFileOutputStreamPrivate = Struct__GFileOutputStreamPrivate;

record Struct__GFileOutputStream (
    parent_instance : GOutputStream,
    priv : Pointer[GFileOutputStreamPrivate],
);

record Struct__GFileOutputStreamClass (
    parent_class : GOutputStreamClass,
    tell : CCodePointer[[Pointer[GFileOutputStream]],[goffset]],
    can_seek : CCodePointer[[Pointer[GFileOutputStream]],[gboolean]],
    seek : CCodePointer[[Pointer[GFileOutputStream], goffset, GSeekType, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    can_truncate : CCodePointer[[Pointer[GFileOutputStream]],[gboolean]],
    truncate_fn : CCodePointer[[Pointer[GFileOutputStream], goffset, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    query_info : CCodePointer[[Pointer[GFileOutputStream], Pointer[CChar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    query_info_async : CCodePointer[[Pointer[GFileOutputStream], Pointer[CChar], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    query_info_finish : CCodePointer[[Pointer[GFileOutputStream], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GFileInfo]]],
    get_etag : CCodePointer[[Pointer[GFileOutputStream]],[Pointer[CChar]]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_file_output_stream_get_type() : GType;

external (cdecl) g_file_output_stream_query_info(arg0:Pointer[GFileOutputStream], arg1:Pointer[CChar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_output_stream_query_info_async(arg0:Pointer[GFileOutputStream], arg1:Pointer[CChar], arg2:Int, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_file_output_stream_query_info_finish(arg0:Pointer[GFileOutputStream], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GFileInfo];

external (cdecl) g_file_output_stream_get_etag(arg0:Pointer[GFileOutputStream]) : Pointer[CChar];

alias GInetAddressClass = Struct__GInetAddressClass;

alias Struct__GInetAddressPrivate = Opaque;

alias GInetAddressPrivate = Struct__GInetAddressPrivate;

record Struct__GInetAddress (
    parent_instance : GObject,
    priv : Pointer[GInetAddressPrivate],
);

record Struct__GInetAddressClass (
    parent_class : GObjectClass,
    to_string : CCodePointer[[Pointer[GInetAddress]],[Pointer[gchar]]],
    to_bytes : CCodePointer[[Pointer[GInetAddress]],[Pointer[guint8]]],
);

external (cdecl) g_inet_address_get_type() : GType;

external (cdecl) g_inet_address_new_from_string(arg0:Pointer[gchar]) : Pointer[GInetAddress];

external (cdecl) g_inet_address_new_from_bytes(arg0:Pointer[guint8], arg1:GSocketFamily) : Pointer[GInetAddress];

external (cdecl) g_inet_address_new_loopback(arg0:GSocketFamily) : Pointer[GInetAddress];

external (cdecl) g_inet_address_new_any(arg0:GSocketFamily) : Pointer[GInetAddress];

external (cdecl) g_inet_address_equal(arg0:Pointer[GInetAddress], arg1:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_to_string(arg0:Pointer[GInetAddress]) : Pointer[gchar];

external (cdecl) g_inet_address_to_bytes(arg0:Pointer[GInetAddress]) : Pointer[guint8];

external (cdecl) g_inet_address_get_native_size(arg0:Pointer[GInetAddress]) : gsize;

external (cdecl) g_inet_address_get_family(arg0:Pointer[GInetAddress]) : GSocketFamily;

external (cdecl) g_inet_address_get_is_any(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_loopback(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_link_local(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_site_local(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_multicast(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_mc_global(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_mc_link_local(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_mc_node_local(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_mc_org_local(arg0:Pointer[GInetAddress]) : gboolean;

external (cdecl) g_inet_address_get_is_mc_site_local(arg0:Pointer[GInetAddress]) : gboolean;

alias GSocketAddressClass = Struct__GSocketAddressClass;

record Struct__GSocketAddress (
    parent_instance : GObject,
);

record Struct__GSocketAddressClass (
    parent_class : GObjectClass,
    get_family : CCodePointer[[Pointer[GSocketAddress]],[GSocketFamily]],
    get_native_size : CCodePointer[[Pointer[GSocketAddress]],[gssize]],
    to_native : CCodePointer[[Pointer[GSocketAddress], gpointer, gsize, Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_socket_address_get_type() : GType;

external (cdecl) g_socket_address_get_family(arg0:Pointer[GSocketAddress]) : GSocketFamily;

external (cdecl) g_socket_address_new_from_native(arg0:gpointer, arg1:gsize) : Pointer[GSocketAddress];

external (cdecl) g_socket_address_to_native(arg0:Pointer[GSocketAddress], arg1:gpointer, arg2:gsize, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_address_get_native_size(arg0:Pointer[GSocketAddress]) : gssize;

alias GInetSocketAddressClass = Struct__GInetSocketAddressClass;

alias Struct__GInetSocketAddressPrivate = Opaque;

alias GInetSocketAddressPrivate = Struct__GInetSocketAddressPrivate;

record Struct__GInetSocketAddress (
    parent_instance : GSocketAddress,
    priv : Pointer[GInetSocketAddressPrivate],
);

record Struct__GInetSocketAddressClass (
    parent_class : GSocketAddressClass,
);

external (cdecl) g_inet_socket_address_get_type() : GType;

external (cdecl) g_inet_socket_address_new(arg0:Pointer[GInetAddress], arg1:guint16) : Pointer[GSocketAddress];

external (cdecl) g_inet_socket_address_get_address(arg0:Pointer[GInetSocketAddress]) : Pointer[GInetAddress];

external (cdecl) g_inet_socket_address_get_port(arg0:Pointer[GInetSocketAddress]) : guint16;

external (cdecl) g_app_info_create_flags_get_type() : GType;

external (cdecl) g_converter_flags_get_type() : GType;

external (cdecl) g_converter_result_get_type() : GType;

external (cdecl) g_data_stream_byte_order_get_type() : GType;

external (cdecl) g_data_stream_newline_type_get_type() : GType;

external (cdecl) g_file_attribute_type_get_type() : GType;

external (cdecl) g_file_attribute_info_flags_get_type() : GType;

external (cdecl) g_file_attribute_status_get_type() : GType;

external (cdecl) g_file_query_info_flags_get_type() : GType;

external (cdecl) g_file_create_flags_get_type() : GType;

external (cdecl) g_mount_mount_flags_get_type() : GType;

external (cdecl) g_mount_unmount_flags_get_type() : GType;

external (cdecl) g_drive_start_flags_get_type() : GType;

external (cdecl) g_drive_start_stop_type_get_type() : GType;

external (cdecl) g_file_copy_flags_get_type() : GType;

external (cdecl) g_file_monitor_flags_get_type() : GType;

external (cdecl) g_file_type_get_type() : GType;

external (cdecl) g_filesystem_preview_type_get_type() : GType;

external (cdecl) g_file_monitor_event_get_type() : GType;

external (cdecl) g_io_error_enum_get_type() : GType;

external (cdecl) g_ask_password_flags_get_type() : GType;

external (cdecl) g_password_save_get_type() : GType;

external (cdecl) g_mount_operation_result_get_type() : GType;

external (cdecl) g_output_stream_splice_flags_get_type() : GType;

external (cdecl) g_io_stream_splice_flags_get_type() : GType;

external (cdecl) g_emblem_origin_get_type() : GType;

external (cdecl) g_resolver_error_get_type() : GType;

external (cdecl) g_socket_family_get_type() : GType;

external (cdecl) g_socket_type_get_type() : GType;

external (cdecl) g_socket_msg_flags_get_type() : GType;

external (cdecl) g_socket_protocol_get_type() : GType;

external (cdecl) g_zlib_compressor_format_get_type() : GType;

external (cdecl) g_unix_socket_address_type_get_type() : GType;

external (cdecl) g_bus_type_get_type() : GType;

external (cdecl) g_bus_name_owner_flags_get_type() : GType;

external (cdecl) g_bus_name_watcher_flags_get_type() : GType;

external (cdecl) g_dbus_proxy_flags_get_type() : GType;

external (cdecl) g_dbus_error_get_type() : GType;

external (cdecl) g_dbus_connection_flags_get_type() : GType;

external (cdecl) g_dbus_capability_flags_get_type() : GType;

external (cdecl) g_dbus_call_flags_get_type() : GType;

external (cdecl) g_dbus_message_type_get_type() : GType;

external (cdecl) g_dbus_message_flags_get_type() : GType;

external (cdecl) g_dbus_message_header_field_get_type() : GType;

external (cdecl) g_dbus_property_info_flags_get_type() : GType;

external (cdecl) g_dbus_subtree_flags_get_type() : GType;

external (cdecl) g_dbus_server_flags_get_type() : GType;

external (cdecl) g_dbus_signal_flags_get_type() : GType;

external (cdecl) g_dbus_send_message_flags_get_type() : GType;

external (cdecl) g_credentials_type_get_type() : GType;

external (cdecl) g_dbus_message_byte_order_get_type() : GType;

external (cdecl) g_application_flags_get_type() : GType;

external (cdecl) g_tls_error_get_type() : GType;

external (cdecl) g_tls_certificate_flags_get_type() : GType;

external (cdecl) g_tls_authentication_mode_get_type() : GType;

external (cdecl) g_tls_rehandshake_mode_get_type() : GType;

external (cdecl) g_tls_password_flags_get_type() : GType;

external (cdecl) g_tls_interaction_result_get_type() : GType;

external (cdecl) g_dbus_interface_skeleton_flags_get_type() : GType;

external (cdecl) g_dbus_object_manager_client_flags_get_type() : GType;

external (cdecl) g_tls_database_verify_flags_get_type() : GType;

external (cdecl) g_tls_database_lookup_flags_get_type() : GType;

external (cdecl) g_io_module_scope_flags_get_type() : GType;

external (cdecl) g_settings_bind_flags_get_type() : GType;

alias Struct__GIOModuleScope = Opaque;

alias GIOModuleScope = Struct__GIOModuleScope;

external (cdecl) g_io_module_scope_new(arg0:GIOModuleScopeFlags) : Pointer[GIOModuleScope];

external (cdecl) g_io_module_scope_free(arg0:Pointer[GIOModuleScope]) : ;

external (cdecl) g_io_module_scope_block(arg0:Pointer[GIOModuleScope], arg1:Pointer[gchar]) : ;

alias Struct__GIOModuleClass = Opaque;

alias GIOModuleClass = Struct__GIOModuleClass;

external (cdecl) g_io_module_get_type() : GType;

external (cdecl) g_io_module_new(arg0:Pointer[gchar]) : Pointer[GIOModule];

external (cdecl) g_io_modules_scan_all_in_directory(arg0:Pointer[CChar]) : ;

external (cdecl) g_io_modules_load_all_in_directory(arg0:Pointer[gchar]) : Pointer[GList];

external (cdecl) g_io_modules_scan_all_in_directory_with_scope(arg0:Pointer[gchar], arg1:Pointer[GIOModuleScope]) : ;

external (cdecl) g_io_modules_load_all_in_directory_with_scope(arg0:Pointer[gchar], arg1:Pointer[GIOModuleScope]) : Pointer[GList];

external (cdecl) g_io_extension_point_register(arg0:Pointer[CChar]) : Pointer[GIOExtensionPoint];

external (cdecl) g_io_extension_point_lookup(arg0:Pointer[CChar]) : Pointer[GIOExtensionPoint];

external (cdecl) g_io_extension_point_set_required_type(arg0:Pointer[GIOExtensionPoint], arg1:GType) : ;

external (cdecl) g_io_extension_point_get_required_type(arg0:Pointer[GIOExtensionPoint]) : GType;

external (cdecl) g_io_extension_point_get_extensions(arg0:Pointer[GIOExtensionPoint]) : Pointer[GList];

external (cdecl) g_io_extension_point_get_extension_by_name(arg0:Pointer[GIOExtensionPoint], arg1:Pointer[CChar]) : Pointer[GIOExtension];

external (cdecl) g_io_extension_point_implement(arg0:Pointer[CChar], arg1:GType, arg2:Pointer[CChar], arg3:gint) : Pointer[GIOExtension];

external (cdecl) g_io_extension_get_type(arg0:Pointer[GIOExtension]) : GType;

external (cdecl) g_io_extension_get_name(arg0:Pointer[GIOExtension]) : Pointer[CChar];

external (cdecl) g_io_extension_get_priority(arg0:Pointer[GIOExtension]) : gint;

external (cdecl) g_io_extension_ref_class(arg0:Pointer[GIOExtension]) : Pointer[GTypeClass];

external (cdecl) g_io_module_load(arg0:Pointer[GIOModule]) : ;

external (cdecl) g_io_module_unload(arg0:Pointer[GIOModule]) : ;

external (cdecl) g_io_module_query() : Pointer[Pointer[CChar]];

external (cdecl) g_io_scheduler_push_job(arg0:GIOSchedulerJobFunc, arg1:gpointer, arg2:GDestroyNotify, arg3:gint, arg4:Pointer[GCancellable]) : ;

external (cdecl) g_io_scheduler_cancel_all_jobs() : ;

external (cdecl) g_io_scheduler_job_send_to_mainloop(arg0:Pointer[GIOSchedulerJob], arg1:GSourceFunc, arg2:gpointer, arg3:GDestroyNotify) : gboolean;

external (cdecl) g_io_scheduler_job_send_to_mainloop_async(arg0:Pointer[GIOSchedulerJob], arg1:GSourceFunc, arg2:gpointer, arg3:GDestroyNotify) : ;

alias GLoadableIconIface = Struct__GLoadableIconIface;

record Struct__GLoadableIconIface (
    g_iface : GTypeInterface,
    load : CCodePointer[[Pointer[GLoadableIcon], Int, Pointer[Pointer[CChar]], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GInputStream]]],
    load_async : CCodePointer[[Pointer[GLoadableIcon], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    load_finish : CCodePointer[[Pointer[GLoadableIcon], Pointer[GAsyncResult], Pointer[Pointer[CChar]], Pointer[Pointer[GError]]],[Pointer[GInputStream]]],
);

external (cdecl) g_loadable_icon_get_type() : GType;

external (cdecl) g_loadable_icon_load(arg0:Pointer[GLoadableIcon], arg1:Int, arg2:Pointer[Pointer[CChar]], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GInputStream];

external (cdecl) g_loadable_icon_load_async(arg0:Pointer[GLoadableIcon], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_loadable_icon_load_finish(arg0:Pointer[GLoadableIcon], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[CChar]], arg3:Pointer[Pointer[GError]]) : Pointer[GInputStream];

alias GMemoryInputStreamClass = Struct__GMemoryInputStreamClass;

alias Struct__GMemoryInputStreamPrivate = Opaque;

alias GMemoryInputStreamPrivate = Struct__GMemoryInputStreamPrivate;

record Struct__GMemoryInputStream (
    parent_instance : GInputStream,
    priv : Pointer[GMemoryInputStreamPrivate],
);

record Struct__GMemoryInputStreamClass (
    parent_class : GInputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

external (cdecl) g_memory_input_stream_get_type() : GType;

external (cdecl) g_memory_input_stream_new() : Pointer[GInputStream];

external (cdecl) g_memory_input_stream_new_from_data(arg0:OpaquePointer, arg1:gssize, arg2:GDestroyNotify) : Pointer[GInputStream];

external (cdecl) g_memory_input_stream_add_data(arg0:Pointer[GMemoryInputStream], arg1:OpaquePointer, arg2:gssize, arg3:GDestroyNotify) : ;

alias GMemoryOutputStreamClass = Struct__GMemoryOutputStreamClass;

alias Struct__GMemoryOutputStreamPrivate = Opaque;

alias GMemoryOutputStreamPrivate = Struct__GMemoryOutputStreamPrivate;

record Struct__GMemoryOutputStream (
    parent_instance : GOutputStream,
    priv : Pointer[GMemoryOutputStreamPrivate],
);

record Struct__GMemoryOutputStreamClass (
    parent_class : GOutputStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

alias GReallocFunc = CCodePointer[[gpointer, gsize],[gpointer]];

external (cdecl) g_memory_output_stream_get_type() : GType;

external (cdecl) g_memory_output_stream_new(arg0:gpointer, arg1:gsize, arg2:GReallocFunc, arg3:GDestroyNotify) : Pointer[GOutputStream];

external (cdecl) g_memory_output_stream_get_data(arg0:Pointer[GMemoryOutputStream]) : gpointer;

external (cdecl) g_memory_output_stream_get_size(arg0:Pointer[GMemoryOutputStream]) : gsize;

external (cdecl) g_memory_output_stream_get_data_size(arg0:Pointer[GMemoryOutputStream]) : gsize;

external (cdecl) g_memory_output_stream_steal_data(arg0:Pointer[GMemoryOutputStream]) : gpointer;

alias GMountIface = Struct__GMountIface;

record Struct__GMountIface (
    g_iface : GTypeInterface,
    changed : CCodePointer[[Pointer[GMount]],[]],
    unmounted : CCodePointer[[Pointer[GMount]],[]],
    get_root : CCodePointer[[Pointer[GMount]],[Pointer[GFile]]],
    get_name : CCodePointer[[Pointer[GMount]],[Pointer[CChar]]],
    get_icon : CCodePointer[[Pointer[GMount]],[Pointer[GIcon]]],
    get_uuid : CCodePointer[[Pointer[GMount]],[Pointer[CChar]]],
    get_volume : CCodePointer[[Pointer[GMount]],[Pointer[GVolume]]],
    get_drive : CCodePointer[[Pointer[GMount]],[Pointer[GDrive]]],
    can_unmount : CCodePointer[[Pointer[GMount]],[gboolean]],
    can_eject : CCodePointer[[Pointer[GMount]],[gboolean]],
    unmount : CCodePointer[[Pointer[GMount], GMountUnmountFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    unmount_finish : CCodePointer[[Pointer[GMount], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    eject : CCodePointer[[Pointer[GMount], GMountUnmountFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_finish : CCodePointer[[Pointer[GMount], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    remount : CCodePointer[[Pointer[GMount], GMountMountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    remount_finish : CCodePointer[[Pointer[GMount], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    guess_content_type : CCodePointer[[Pointer[GMount], gboolean, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    guess_content_type_finish : CCodePointer[[Pointer[GMount], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[Pointer[gchar]]]],
    guess_content_type_sync : CCodePointer[[Pointer[GMount], gboolean, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[Pointer[gchar]]]],
    pre_unmount : CCodePointer[[Pointer[GMount]],[]],
    unmount_with_operation : CCodePointer[[Pointer[GMount], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    unmount_with_operation_finish : CCodePointer[[Pointer[GMount], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    eject_with_operation : CCodePointer[[Pointer[GMount], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_with_operation_finish : CCodePointer[[Pointer[GMount], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    get_default_location : CCodePointer[[Pointer[GMount]],[Pointer[GFile]]],
);

external (cdecl) g_mount_get_type() : GType;

external (cdecl) g_mount_get_root(arg0:Pointer[GMount]) : Pointer[GFile];

external (cdecl) g_mount_get_default_location(arg0:Pointer[GMount]) : Pointer[GFile];

external (cdecl) g_mount_get_name(arg0:Pointer[GMount]) : Pointer[CChar];

external (cdecl) g_mount_get_icon(arg0:Pointer[GMount]) : Pointer[GIcon];

external (cdecl) g_mount_get_uuid(arg0:Pointer[GMount]) : Pointer[CChar];

external (cdecl) g_mount_get_volume(arg0:Pointer[GMount]) : Pointer[GVolume];

external (cdecl) g_mount_get_drive(arg0:Pointer[GMount]) : Pointer[GDrive];

external (cdecl) g_mount_can_unmount(arg0:Pointer[GMount]) : gboolean;

external (cdecl) g_mount_can_eject(arg0:Pointer[GMount]) : gboolean;

external (cdecl) g_mount_unmount(arg0:Pointer[GMount], arg1:GMountUnmountFlags, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_mount_unmount_finish(arg0:Pointer[GMount], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_mount_eject(arg0:Pointer[GMount], arg1:GMountUnmountFlags, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_mount_eject_finish(arg0:Pointer[GMount], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_mount_remount(arg0:Pointer[GMount], arg1:GMountMountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_mount_remount_finish(arg0:Pointer[GMount], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_mount_guess_content_type(arg0:Pointer[GMount], arg1:gboolean, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_mount_guess_content_type_finish(arg0:Pointer[GMount], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_mount_guess_content_type_sync(arg0:Pointer[GMount], arg1:gboolean, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_mount_is_shadowed(arg0:Pointer[GMount]) : gboolean;

external (cdecl) g_mount_shadow(arg0:Pointer[GMount]) : ;

external (cdecl) g_mount_unshadow(arg0:Pointer[GMount]) : ;

external (cdecl) g_mount_unmount_with_operation(arg0:Pointer[GMount], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_mount_unmount_with_operation_finish(arg0:Pointer[GMount], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_mount_eject_with_operation(arg0:Pointer[GMount], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_mount_eject_with_operation_finish(arg0:Pointer[GMount], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

alias GMountOperationClass = Struct__GMountOperationClass;

alias Struct__GMountOperationPrivate = Opaque;

alias GMountOperationPrivate = Struct__GMountOperationPrivate;

record Struct__GMountOperation (
    parent_instance : GObject,
    priv : Pointer[GMountOperationPrivate],
);

record Struct__GMountOperationClass (
    parent_class : GObjectClass,
    ask_password : CCodePointer[[Pointer[GMountOperation], Pointer[CChar], Pointer[CChar], Pointer[CChar], GAskPasswordFlags],[]],
    ask_question : CCodePointer[[Pointer[GMountOperation], Pointer[CChar], Pointer[Pointer[CChar]]],[]],
    reply : CCodePointer[[Pointer[GMountOperation], GMountOperationResult],[]],
    aborted : CCodePointer[[Pointer[GMountOperation]],[]],
    show_processes : CCodePointer[[Pointer[GMountOperation], Pointer[gchar], Pointer[GArray], Pointer[Pointer[gchar]]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
    _g_reserved8 : CCodePointer[[],[]],
    _g_reserved9 : CCodePointer[[],[]],
    _g_reserved10 : CCodePointer[[],[]],
);

external (cdecl) g_mount_operation_get_type() : GType;

external (cdecl) g_mount_operation_new() : Pointer[GMountOperation];

external (cdecl) g_mount_operation_get_username(arg0:Pointer[GMountOperation]) : Pointer[CChar];

external (cdecl) g_mount_operation_set_username(arg0:Pointer[GMountOperation], arg1:Pointer[CChar]) : ;

external (cdecl) g_mount_operation_get_password(arg0:Pointer[GMountOperation]) : Pointer[CChar];

external (cdecl) g_mount_operation_set_password(arg0:Pointer[GMountOperation], arg1:Pointer[CChar]) : ;

external (cdecl) g_mount_operation_get_anonymous(arg0:Pointer[GMountOperation]) : gboolean;

external (cdecl) g_mount_operation_set_anonymous(arg0:Pointer[GMountOperation], arg1:gboolean) : ;

external (cdecl) g_mount_operation_get_domain(arg0:Pointer[GMountOperation]) : Pointer[CChar];

external (cdecl) g_mount_operation_set_domain(arg0:Pointer[GMountOperation], arg1:Pointer[CChar]) : ;

external (cdecl) g_mount_operation_get_password_save(arg0:Pointer[GMountOperation]) : GPasswordSave;

external (cdecl) g_mount_operation_set_password_save(arg0:Pointer[GMountOperation], arg1:GPasswordSave) : ;

external (cdecl) g_mount_operation_get_choice(arg0:Pointer[GMountOperation]) : Int;

external (cdecl) g_mount_operation_set_choice(arg0:Pointer[GMountOperation], arg1:Int) : ;

external (cdecl) g_mount_operation_reply(arg0:Pointer[GMountOperation], arg1:GMountOperationResult) : ;

alias GVolumeMonitorClass = Struct__GVolumeMonitorClass;

record Struct__GVolumeMonitor (
    parent_instance : GObject,
    priv : gpointer,
);

record Struct__GVolumeMonitorClass (
    parent_class : GObjectClass,
    volume_added : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GVolume]],[]],
    volume_removed : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GVolume]],[]],
    volume_changed : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GVolume]],[]],
    mount_added : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GMount]],[]],
    mount_removed : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GMount]],[]],
    mount_pre_unmount : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GMount]],[]],
    mount_changed : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GMount]],[]],
    drive_connected : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GDrive]],[]],
    drive_disconnected : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GDrive]],[]],
    drive_changed : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GDrive]],[]],
    is_supported : CCodePointer[[],[gboolean]],
    get_connected_drives : CCodePointer[[Pointer[GVolumeMonitor]],[Pointer[GList]]],
    get_volumes : CCodePointer[[Pointer[GVolumeMonitor]],[Pointer[GList]]],
    get_mounts : CCodePointer[[Pointer[GVolumeMonitor]],[Pointer[GList]]],
    get_volume_for_uuid : CCodePointer[[Pointer[GVolumeMonitor], Pointer[CChar]],[Pointer[GVolume]]],
    get_mount_for_uuid : CCodePointer[[Pointer[GVolumeMonitor], Pointer[CChar]],[Pointer[GMount]]],
    adopt_orphan_mount : CCodePointer[[Pointer[GMount], Pointer[GVolumeMonitor]],[Pointer[GVolume]]],
    drive_eject_button : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GDrive]],[]],
    drive_stop_button : CCodePointer[[Pointer[GVolumeMonitor], Pointer[GDrive]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
);

external (cdecl) g_volume_monitor_get_type() : GType;

external (cdecl) g_volume_monitor_get() : Pointer[GVolumeMonitor];

external (cdecl) g_volume_monitor_get_connected_drives(arg0:Pointer[GVolumeMonitor]) : Pointer[GList];

external (cdecl) g_volume_monitor_get_volumes(arg0:Pointer[GVolumeMonitor]) : Pointer[GList];

external (cdecl) g_volume_monitor_get_mounts(arg0:Pointer[GVolumeMonitor]) : Pointer[GList];

external (cdecl) g_volume_monitor_get_volume_for_uuid(arg0:Pointer[GVolumeMonitor], arg1:Pointer[CChar]) : Pointer[GVolume];

external (cdecl) g_volume_monitor_get_mount_for_uuid(arg0:Pointer[GVolumeMonitor], arg1:Pointer[CChar]) : Pointer[GMount];

external (cdecl) g_volume_monitor_adopt_orphan_mount(arg0:Pointer[GMount]) : Pointer[GVolume];

alias GNativeVolumeMonitor = Struct__GNativeVolumeMonitor;

alias GNativeVolumeMonitorClass = Struct__GNativeVolumeMonitorClass;

record Struct__GNativeVolumeMonitor (
    parent_instance : GVolumeMonitor,
);

record Struct__GNativeVolumeMonitorClass (
    parent_class : GVolumeMonitorClass,
    get_mount_for_mount_path : CCodePointer[[Pointer[CChar], Pointer[GCancellable]],[Pointer[GMount]]],
);

external (cdecl) g_native_volume_monitor_get_type() : GType;

alias GNetworkAddressClass = Struct__GNetworkAddressClass;

alias Struct__GNetworkAddressPrivate = Opaque;

alias GNetworkAddressPrivate = Struct__GNetworkAddressPrivate;

record Struct__GNetworkAddress (
    parent_instance : GObject,
    priv : Pointer[GNetworkAddressPrivate],
);

record Struct__GNetworkAddressClass (
    parent_class : GObjectClass,
);

external (cdecl) g_network_address_get_type() : GType;

external (cdecl) g_network_address_new(arg0:Pointer[gchar], arg1:guint16) : Pointer[GSocketConnectable];

external (cdecl) g_network_address_parse(arg0:Pointer[gchar], arg1:guint16, arg2:Pointer[Pointer[GError]]) : Pointer[GSocketConnectable];

external (cdecl) g_network_address_parse_uri(arg0:Pointer[gchar], arg1:guint16, arg2:Pointer[Pointer[GError]]) : Pointer[GSocketConnectable];

external (cdecl) g_network_address_get_hostname(arg0:Pointer[GNetworkAddress]) : Pointer[gchar];

external (cdecl) g_network_address_get_port(arg0:Pointer[GNetworkAddress]) : guint16;

external (cdecl) g_network_address_get_scheme(arg0:Pointer[GNetworkAddress]) : Pointer[gchar];

alias GNetworkServiceClass = Struct__GNetworkServiceClass;

alias Struct__GNetworkServicePrivate = Opaque;

alias GNetworkServicePrivate = Struct__GNetworkServicePrivate;

record Struct__GNetworkService (
    parent_instance : GObject,
    priv : Pointer[GNetworkServicePrivate],
);

record Struct__GNetworkServiceClass (
    parent_class : GObjectClass,
);

external (cdecl) g_network_service_get_type() : GType;

external (cdecl) g_network_service_new(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[GSocketConnectable];

external (cdecl) g_network_service_get_service(arg0:Pointer[GNetworkService]) : Pointer[gchar];

external (cdecl) g_network_service_get_protocol(arg0:Pointer[GNetworkService]) : Pointer[gchar];

external (cdecl) g_network_service_get_domain(arg0:Pointer[GNetworkService]) : Pointer[gchar];

external (cdecl) g_network_service_get_scheme(arg0:Pointer[GNetworkService]) : Pointer[gchar];

external (cdecl) g_network_service_set_scheme(arg0:Pointer[GNetworkService], arg1:Pointer[gchar]) : ;

alias Struct__GPermissionPrivate = Opaque;

alias GPermissionPrivate = Struct__GPermissionPrivate;

alias GPermissionClass = Struct__GPermissionClass;

record Struct__GPermission (
    parent_instance : GObject,
    priv : Pointer[GPermissionPrivate],
);

record Struct__GPermissionClass (
    parent_class : GObjectClass,
    acquire : CCodePointer[[Pointer[GPermission], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    acquire_async : CCodePointer[[Pointer[GPermission], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    acquire_finish : CCodePointer[[Pointer[GPermission], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    release : CCodePointer[[Pointer[GPermission], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    release_async : CCodePointer[[Pointer[GPermission], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    release_finish : CCodePointer[[Pointer[GPermission], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    reserved : Array[gpointer, 16],
);

external (cdecl) g_permission_get_type() : GType;

external (cdecl) g_permission_acquire(arg0:Pointer[GPermission], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_permission_acquire_async(arg0:Pointer[GPermission], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_permission_acquire_finish(arg0:Pointer[GPermission], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_permission_release(arg0:Pointer[GPermission], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_permission_release_async(arg0:Pointer[GPermission], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_permission_release_finish(arg0:Pointer[GPermission], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_permission_get_allowed(arg0:Pointer[GPermission]) : gboolean;

external (cdecl) g_permission_get_can_acquire(arg0:Pointer[GPermission]) : gboolean;

external (cdecl) g_permission_get_can_release(arg0:Pointer[GPermission]) : gboolean;

external (cdecl) g_permission_impl_update(arg0:Pointer[GPermission], arg1:gboolean, arg2:gboolean, arg3:gboolean) : ;

alias GPollableInputStreamInterface = Struct__GPollableInputStreamInterface;

record Struct__GPollableInputStreamInterface (
    g_iface : GTypeInterface,
    can_poll : CCodePointer[[Pointer[GPollableInputStream]],[gboolean]],
    is_readable : CCodePointer[[Pointer[GPollableInputStream]],[gboolean]],
    create_source : CCodePointer[[Pointer[GPollableInputStream], Pointer[GCancellable]],[Pointer[GSource]]],
    read_nonblocking : CCodePointer[[Pointer[GPollableInputStream], OpaquePointer, gsize, Pointer[Pointer[GError]]],[gssize]],
);

external (cdecl) g_pollable_input_stream_get_type() : GType;

external (cdecl) g_pollable_input_stream_can_poll(arg0:Pointer[GPollableInputStream]) : gboolean;

external (cdecl) g_pollable_input_stream_is_readable(arg0:Pointer[GPollableInputStream]) : gboolean;

external (cdecl) g_pollable_input_stream_create_source(arg0:Pointer[GPollableInputStream], arg1:Pointer[GCancellable]) : Pointer[GSource];

external (cdecl) g_pollable_input_stream_read_nonblocking(arg0:Pointer[GPollableInputStream], arg1:OpaquePointer, arg2:gsize, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_pollable_source_new(arg0:Pointer[GObject]) : Pointer[GSource];

alias GPollableOutputStreamInterface = Struct__GPollableOutputStreamInterface;

record Struct__GPollableOutputStreamInterface (
    g_iface : GTypeInterface,
    can_poll : CCodePointer[[Pointer[GPollableOutputStream]],[gboolean]],
    is_writable : CCodePointer[[Pointer[GPollableOutputStream]],[gboolean]],
    create_source : CCodePointer[[Pointer[GPollableOutputStream], Pointer[GCancellable]],[Pointer[GSource]]],
    write_nonblocking : CCodePointer[[Pointer[GPollableOutputStream], OpaquePointer, gsize, Pointer[Pointer[GError]]],[gssize]],
);

external (cdecl) g_pollable_output_stream_get_type() : GType;

external (cdecl) g_pollable_output_stream_can_poll(arg0:Pointer[GPollableOutputStream]) : gboolean;

external (cdecl) g_pollable_output_stream_is_writable(arg0:Pointer[GPollableOutputStream]) : gboolean;

external (cdecl) g_pollable_output_stream_create_source(arg0:Pointer[GPollableOutputStream], arg1:Pointer[GCancellable]) : Pointer[GSource];

external (cdecl) g_pollable_output_stream_write_nonblocking(arg0:Pointer[GPollableOutputStream], arg1:OpaquePointer, arg2:gsize, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

alias GProxyInterface = Struct__GProxyInterface;

record Struct__GProxyInterface (
    g_iface : GTypeInterface,
    connect : CCodePointer[[Pointer[GProxy], Pointer[GIOStream], Pointer[GProxyAddress], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GIOStream]]],
    connect_async : CCodePointer[[Pointer[GProxy], Pointer[GIOStream], Pointer[GProxyAddress], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    connect_finish : CCodePointer[[Pointer[GProxy], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GIOStream]]],
    supports_hostname : CCodePointer[[Pointer[GProxy]],[gboolean]],
);

external (cdecl) g_proxy_get_type() : GType;

external (cdecl) g_proxy_get_default_for_protocol(arg0:Pointer[gchar]) : Pointer[GProxy];

external (cdecl) g_proxy_connect(arg0:Pointer[GProxy], arg1:Pointer[GIOStream], arg2:Pointer[GProxyAddress], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GIOStream];

external (cdecl) g_proxy_connect_async(arg0:Pointer[GProxy], arg1:Pointer[GIOStream], arg2:Pointer[GProxyAddress], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_proxy_connect_finish(arg0:Pointer[GProxy], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GIOStream];

external (cdecl) g_proxy_supports_hostname(arg0:Pointer[GProxy]) : gboolean;

alias GProxyAddressClass = Struct__GProxyAddressClass;

alias Struct__GProxyAddressPrivate = Opaque;

alias GProxyAddressPrivate = Struct__GProxyAddressPrivate;

record Struct__GProxyAddress (
    parent_instance : GInetSocketAddress,
    priv : Pointer[GProxyAddressPrivate],
);

record Struct__GProxyAddressClass (
    parent_class : GInetSocketAddressClass,
);

external (cdecl) g_proxy_address_get_type() : GType;

external (cdecl) g_proxy_address_new(arg0:Pointer[GInetAddress], arg1:guint16, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:guint16, arg5:Pointer[gchar], arg6:Pointer[gchar]) : Pointer[GSocketAddress];

external (cdecl) g_proxy_address_get_protocol(arg0:Pointer[GProxyAddress]) : Pointer[gchar];

external (cdecl) g_proxy_address_get_destination_hostname(arg0:Pointer[GProxyAddress]) : Pointer[gchar];

external (cdecl) g_proxy_address_get_destination_port(arg0:Pointer[GProxyAddress]) : guint16;

external (cdecl) g_proxy_address_get_username(arg0:Pointer[GProxyAddress]) : Pointer[gchar];

external (cdecl) g_proxy_address_get_password(arg0:Pointer[GProxyAddress]) : Pointer[gchar];

alias GSocketAddressEnumeratorClass = Struct__GSocketAddressEnumeratorClass;

record Struct__GSocketAddressEnumerator (
    parent_instance : GObject,
);

record Struct__GSocketAddressEnumeratorClass (
    parent_class : GObjectClass,
    next : CCodePointer[[Pointer[GSocketAddressEnumerator], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GSocketAddress]]],
    next_async : CCodePointer[[Pointer[GSocketAddressEnumerator], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    next_finish : CCodePointer[[Pointer[GSocketAddressEnumerator], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GSocketAddress]]],
);

external (cdecl) g_socket_address_enumerator_get_type() : GType;

external (cdecl) g_socket_address_enumerator_next(arg0:Pointer[GSocketAddressEnumerator], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GSocketAddress];

external (cdecl) g_socket_address_enumerator_next_async(arg0:Pointer[GSocketAddressEnumerator], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_socket_address_enumerator_next_finish(arg0:Pointer[GSocketAddressEnumerator], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GSocketAddress];

alias GProxyAddressEnumeratorClass = Struct__GProxyAddressEnumeratorClass;

alias Struct__GProxyAddressEnumeratorPrivate = Opaque;

alias GProxyAddressEnumeratorPrivate = Struct__GProxyAddressEnumeratorPrivate;

record Struct__GProxyAddressEnumerator (
    parent_instance : GSocketAddressEnumerator,
    priv : Pointer[GProxyAddressEnumeratorPrivate],
);

record Struct__GProxyAddressEnumeratorClass (
    parent_class : GSocketAddressEnumeratorClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
);

external (cdecl) g_proxy_address_enumerator_get_type() : GType;

alias GProxyResolverInterface = Struct__GProxyResolverInterface;

record Struct__GProxyResolverInterface (
    g_iface : GTypeInterface,
    is_supported : CCodePointer[[Pointer[GProxyResolver]],[gboolean]],
    lookup : CCodePointer[[Pointer[GProxyResolver], Pointer[gchar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[Pointer[gchar]]]],
    lookup_async : CCodePointer[[Pointer[GProxyResolver], Pointer[gchar], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_finish : CCodePointer[[Pointer[GProxyResolver], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[Pointer[gchar]]]],
);

external (cdecl) g_proxy_resolver_get_type() : GType;

external (cdecl) g_proxy_resolver_get_default() : Pointer[GProxyResolver];

external (cdecl) g_proxy_resolver_is_supported(arg0:Pointer[GProxyResolver]) : gboolean;

external (cdecl) g_proxy_resolver_lookup(arg0:Pointer[GProxyResolver], arg1:Pointer[gchar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

external (cdecl) g_proxy_resolver_lookup_async(arg0:Pointer[GProxyResolver], arg1:Pointer[gchar], arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_proxy_resolver_lookup_finish(arg0:Pointer[GProxyResolver], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[Pointer[gchar]];

alias Struct__GResolverPrivate = Opaque;

alias GResolverPrivate = Struct__GResolverPrivate;

alias GResolverClass = Struct__GResolverClass;

record Struct__GResolver (
    parent_instance : GObject,
    priv : Pointer[GResolverPrivate],
);

record Struct__GResolverClass (
    parent_class : GObjectClass,
    reload : CCodePointer[[Pointer[GResolver]],[]],
    lookup_by_name : CCodePointer[[Pointer[GResolver], Pointer[gchar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GList]]],
    lookup_by_name_async : CCodePointer[[Pointer[GResolver], Pointer[gchar], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_by_name_finish : CCodePointer[[Pointer[GResolver], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GList]]],
    lookup_by_address : CCodePointer[[Pointer[GResolver], Pointer[GInetAddress], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[gchar]]],
    lookup_by_address_async : CCodePointer[[Pointer[GResolver], Pointer[GInetAddress], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_by_address_finish : CCodePointer[[Pointer[GResolver], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[gchar]]],
    lookup_service : CCodePointer[[Pointer[GResolver], Pointer[gchar], Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GList]]],
    lookup_service_async : CCodePointer[[Pointer[GResolver], Pointer[gchar], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_service_finish : CCodePointer[[Pointer[GResolver], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GList]]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
);

external (cdecl) g_resolver_get_type() : GType;

external (cdecl) g_resolver_get_default() : Pointer[GResolver];

external (cdecl) g_resolver_set_default(arg0:Pointer[GResolver]) : ;

external (cdecl) g_resolver_lookup_by_name(arg0:Pointer[GResolver], arg1:Pointer[gchar], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_resolver_lookup_by_name_async(arg0:Pointer[GResolver], arg1:Pointer[gchar], arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_resolver_lookup_by_name_finish(arg0:Pointer[GResolver], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_resolver_free_addresses(arg0:Pointer[GList]) : ;

external (cdecl) g_resolver_lookup_by_address(arg0:Pointer[GResolver], arg1:Pointer[GInetAddress], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_resolver_lookup_by_address_async(arg0:Pointer[GResolver], arg1:Pointer[GInetAddress], arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_resolver_lookup_by_address_finish(arg0:Pointer[GResolver], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[gchar];

external (cdecl) g_resolver_lookup_service(arg0:Pointer[GResolver], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_resolver_lookup_service_async(arg0:Pointer[GResolver], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_resolver_lookup_service_finish(arg0:Pointer[GResolver], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_resolver_free_targets(arg0:Pointer[GList]) : ;

external (cdecl) g_resolver_error_quark() : GQuark;

alias GSeekableIface = Struct__GSeekableIface;

record Struct__GSeekableIface (
    g_iface : GTypeInterface,
    tell : CCodePointer[[Pointer[GSeekable]],[goffset]],
    can_seek : CCodePointer[[Pointer[GSeekable]],[gboolean]],
    seek : CCodePointer[[Pointer[GSeekable], goffset, GSeekType, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    can_truncate : CCodePointer[[Pointer[GSeekable]],[gboolean]],
    truncate_fn : CCodePointer[[Pointer[GSeekable], goffset, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_seekable_get_type() : GType;

external (cdecl) g_seekable_tell(arg0:Pointer[GSeekable]) : goffset;

external (cdecl) g_seekable_can_seek(arg0:Pointer[GSeekable]) : gboolean;

external (cdecl) g_seekable_seek(arg0:Pointer[GSeekable], arg1:goffset, arg2:GSeekType, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_seekable_can_truncate(arg0:Pointer[GSeekable]) : gboolean;

external (cdecl) g_seekable_truncate(arg0:Pointer[GSeekable], arg1:goffset, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

alias Struct__GSettingsPrivate = Opaque;

alias GSettingsPrivate = Struct__GSettingsPrivate;

alias GSettingsClass = Struct__GSettingsClass;

record Struct__GSettingsClass (
    parent_class : GObjectClass,
    writable_changed : CCodePointer[[Pointer[GSettings], Pointer[gchar]],[]],
    changed : CCodePointer[[Pointer[GSettings], Pointer[gchar]],[]],
    writable_change_event : CCodePointer[[Pointer[GSettings], GQuark],[gboolean]],
    change_event : CCodePointer[[Pointer[GSettings], Pointer[GQuark], gint],[gboolean]],
    padding : Array[gpointer, 20],
);

record Struct__GSettings (
    parent_instance : GObject,
    priv : Pointer[GSettingsPrivate],
);

external (cdecl) g_settings_get_type() : GType;

external (cdecl) g_settings_list_schemas() : Pointer[Pointer[gchar]];

external (cdecl) g_settings_list_relocatable_schemas() : Pointer[Pointer[gchar]];

external (cdecl) g_settings_new(arg0:Pointer[gchar]) : Pointer[GSettings];

external (cdecl) g_settings_new_with_path(arg0:Pointer[gchar], arg1:Pointer[gchar]) : Pointer[GSettings];

external (cdecl) g_settings_new_with_backend(arg0:Pointer[gchar], arg1:Pointer[GSettingsBackend]) : Pointer[GSettings];

external (cdecl) g_settings_new_with_backend_and_path(arg0:Pointer[gchar], arg1:Pointer[GSettingsBackend], arg2:Pointer[gchar]) : Pointer[GSettings];

external (cdecl) g_settings_list_children(arg0:Pointer[GSettings]) : Pointer[Pointer[gchar]];

external (cdecl) g_settings_list_keys(arg0:Pointer[GSettings]) : Pointer[Pointer[gchar]];

external (cdecl) g_settings_get_range(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_settings_range_check(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:Pointer[GVariant]) : gboolean;

external (cdecl) g_settings_set_value(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:Pointer[GVariant]) : gboolean;

external (cdecl) g_settings_get_value(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : Pointer[GVariant];

external (cdecl) g_settings_set(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:Pointer[gchar], ..) : gboolean;

external (cdecl) g_settings_get(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:Pointer[gchar], ..) : ;

external (cdecl) g_settings_reset(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : ;

external (cdecl) g_settings_get_int(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : gint;

external (cdecl) g_settings_set_int(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gint) : gboolean;

external (cdecl) g_settings_get_uint(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : guint;

external (cdecl) g_settings_set_uint(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:guint) : gboolean;

external (cdecl) g_settings_get_string(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : Pointer[gchar];

external (cdecl) g_settings_set_string(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:Pointer[gchar]) : gboolean;

external (cdecl) g_settings_get_boolean(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_settings_set_boolean(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gboolean) : gboolean;

external (cdecl) g_settings_get_double(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : gdouble;

external (cdecl) g_settings_set_double(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gdouble) : gboolean;

external (cdecl) g_settings_get_strv(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : Pointer[Pointer[gchar]];

external (cdecl) g_settings_set_strv(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:Pointer[Pointer[gchar]]) : gboolean;

external (cdecl) g_settings_get_enum(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : gint;

external (cdecl) g_settings_set_enum(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gint) : gboolean;

external (cdecl) g_settings_get_flags(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : guint;

external (cdecl) g_settings_set_flags(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:guint) : gboolean;

external (cdecl) g_settings_get_child(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : Pointer[GSettings];

external (cdecl) g_settings_is_writable(arg0:Pointer[GSettings], arg1:Pointer[gchar]) : gboolean;

external (cdecl) g_settings_delay(arg0:Pointer[GSettings]) : ;

external (cdecl) g_settings_apply(arg0:Pointer[GSettings]) : ;

external (cdecl) g_settings_revert(arg0:Pointer[GSettings]) : ;

external (cdecl) g_settings_get_has_unapplied(arg0:Pointer[GSettings]) : gboolean;

external (cdecl) g_settings_sync() : ;

alias GSettingsBindSetMapping = CCodePointer[[Pointer[GValue], Pointer[GVariantType], gpointer],[Pointer[GVariant]]];

alias GSettingsBindGetMapping = CCodePointer[[Pointer[GValue], Pointer[GVariant], gpointer],[gboolean]];

alias GSettingsGetMapping = CCodePointer[[Pointer[GVariant], Pointer[gpointer], gpointer],[gboolean]];

alias Enum_Unnamed69 = UInt;
alias G_SETTINGS_BIND_DEFAULT = UInt(0);
alias G_SETTINGS_BIND_GET = UInt(1);
alias G_SETTINGS_BIND_SET = UInt(2);
alias G_SETTINGS_BIND_NO_SENSITIVITY = UInt(4);
alias G_SETTINGS_BIND_GET_NO_CHANGES = UInt(8);
alias G_SETTINGS_BIND_INVERT_BOOLEAN = UInt(16);

alias GSettingsBindFlags = UInt;

external (cdecl) g_settings_bind(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gpointer, arg3:Pointer[gchar], arg4:GSettingsBindFlags) : ;

external (cdecl) g_settings_bind_with_mapping(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gpointer, arg3:Pointer[gchar], arg4:GSettingsBindFlags, arg5:GSettingsBindGetMapping, arg6:GSettingsBindSetMapping, arg7:gpointer, arg8:GDestroyNotify) : ;

external (cdecl) g_settings_bind_writable(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:gpointer, arg3:Pointer[gchar], arg4:gboolean) : ;

external (cdecl) g_settings_unbind(arg0:gpointer, arg1:Pointer[gchar]) : ;

external (cdecl) g_settings_get_mapped(arg0:Pointer[GSettings], arg1:Pointer[gchar], arg2:GSettingsGetMapping, arg3:gpointer) : gpointer;

alias Struct__GSimpleAsyncResultClass = Opaque;

alias GSimpleAsyncResultClass = Struct__GSimpleAsyncResultClass;

external (cdecl) g_simple_async_result_get_type() : GType;

external (cdecl) g_simple_async_result_new(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:gpointer) : Pointer[GSimpleAsyncResult];

external (cdecl) g_simple_async_result_new_error(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:GQuark, arg4:gint, arg5:Pointer[CChar], ..) : Pointer[GSimpleAsyncResult];

external (cdecl) g_simple_async_result_new_from_error(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:Pointer[GError]) : Pointer[GSimpleAsyncResult];

external (cdecl) g_simple_async_result_new_take_error(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:Pointer[GError]) : Pointer[GSimpleAsyncResult];

external (cdecl) g_simple_async_result_set_op_res_gpointer(arg0:Pointer[GSimpleAsyncResult], arg1:gpointer, arg2:GDestroyNotify) : ;

external (cdecl) g_simple_async_result_get_op_res_gpointer(arg0:Pointer[GSimpleAsyncResult]) : gpointer;

external (cdecl) g_simple_async_result_set_op_res_gssize(arg0:Pointer[GSimpleAsyncResult], arg1:gssize) : ;

external (cdecl) g_simple_async_result_get_op_res_gssize(arg0:Pointer[GSimpleAsyncResult]) : gssize;

external (cdecl) g_simple_async_result_set_op_res_gboolean(arg0:Pointer[GSimpleAsyncResult], arg1:gboolean) : ;

external (cdecl) g_simple_async_result_get_op_res_gboolean(arg0:Pointer[GSimpleAsyncResult]) : gboolean;

external (cdecl) g_simple_async_result_get_source_tag(arg0:Pointer[GSimpleAsyncResult]) : gpointer;

external (cdecl) g_simple_async_result_set_handle_cancellation(arg0:Pointer[GSimpleAsyncResult], arg1:gboolean) : ;

external (cdecl) g_simple_async_result_complete(arg0:Pointer[GSimpleAsyncResult]) : ;

external (cdecl) g_simple_async_result_complete_in_idle(arg0:Pointer[GSimpleAsyncResult]) : ;

external (cdecl) g_simple_async_result_run_in_thread(arg0:Pointer[GSimpleAsyncResult], arg1:GSimpleAsyncThreadFunc, arg2:Int, arg3:Pointer[GCancellable]) : ;

external (cdecl) g_simple_async_result_set_from_error(arg0:Pointer[GSimpleAsyncResult], arg1:Pointer[GError]) : ;

external (cdecl) g_simple_async_result_take_error(arg0:Pointer[GSimpleAsyncResult], arg1:Pointer[GError]) : ;

external (cdecl) g_simple_async_result_propagate_error(arg0:Pointer[GSimpleAsyncResult], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_simple_async_result_set_error(arg0:Pointer[GSimpleAsyncResult], arg1:GQuark, arg2:gint, arg3:Pointer[CChar], ..) : ;

external (cdecl) g_simple_async_result_set_error_va(arg0:Pointer[GSimpleAsyncResult], arg1:GQuark, arg2:gint, arg3:Pointer[CChar], arg4:Pointer[__va_list_tag]) : ;

external (cdecl) g_simple_async_result_is_valid(arg0:Pointer[GAsyncResult], arg1:Pointer[GObject], arg2:gpointer) : gboolean;

external (cdecl) g_simple_async_report_error_in_idle(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:GQuark, arg4:gint, arg5:Pointer[CChar], ..) : ;

external (cdecl) g_simple_async_report_gerror_in_idle(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:Pointer[GError]) : ;

external (cdecl) g_simple_async_report_take_gerror_in_idle(arg0:Pointer[GObject], arg1:GAsyncReadyCallback, arg2:gpointer, arg3:Pointer[GError]) : ;

external (cdecl) g_simple_permission_get_type() : GType;

external (cdecl) g_simple_permission_new(arg0:gboolean) : Pointer[GPermission];

alias Struct__GSocketClientPrivate = Opaque;

alias GSocketClientPrivate = Struct__GSocketClientPrivate;

alias GSocketClientClass = Struct__GSocketClientClass;

record Struct__GSocketClientClass (
    parent_class : GObjectClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

record Struct__GSocketClient (
    parent_instance : GObject,
    priv : Pointer[GSocketClientPrivate],
);

external (cdecl) g_socket_client_get_type() : GType;

external (cdecl) g_socket_client_new() : Pointer[GSocketClient];

external (cdecl) g_socket_client_get_family(arg0:Pointer[GSocketClient]) : GSocketFamily;

external (cdecl) g_socket_client_set_family(arg0:Pointer[GSocketClient], arg1:GSocketFamily) : ;

external (cdecl) g_socket_client_get_socket_type(arg0:Pointer[GSocketClient]) : GSocketType;

external (cdecl) g_socket_client_set_socket_type(arg0:Pointer[GSocketClient], arg1:GSocketType) : ;

external (cdecl) g_socket_client_get_protocol(arg0:Pointer[GSocketClient]) : GSocketProtocol;

external (cdecl) g_socket_client_set_protocol(arg0:Pointer[GSocketClient], arg1:GSocketProtocol) : ;

external (cdecl) g_socket_client_get_local_address(arg0:Pointer[GSocketClient]) : Pointer[GSocketAddress];

external (cdecl) g_socket_client_set_local_address(arg0:Pointer[GSocketClient], arg1:Pointer[GSocketAddress]) : ;

external (cdecl) g_socket_client_get_timeout(arg0:Pointer[GSocketClient]) : guint;

external (cdecl) g_socket_client_set_timeout(arg0:Pointer[GSocketClient], arg1:guint) : ;

external (cdecl) g_socket_client_get_enable_proxy(arg0:Pointer[GSocketClient]) : gboolean;

external (cdecl) g_socket_client_set_enable_proxy(arg0:Pointer[GSocketClient], arg1:gboolean) : ;

external (cdecl) g_socket_client_get_tls(arg0:Pointer[GSocketClient]) : gboolean;

external (cdecl) g_socket_client_set_tls(arg0:Pointer[GSocketClient], arg1:gboolean) : ;

external (cdecl) g_socket_client_get_tls_validation_flags(arg0:Pointer[GSocketClient]) : GTlsCertificateFlags;

external (cdecl) g_socket_client_set_tls_validation_flags(arg0:Pointer[GSocketClient], arg1:GTlsCertificateFlags) : ;

external (cdecl) g_socket_client_connect(arg0:Pointer[GSocketClient], arg1:Pointer[GSocketConnectable], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_to_host(arg0:Pointer[GSocketClient], arg1:Pointer[gchar], arg2:guint16, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_to_service(arg0:Pointer[GSocketClient], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_to_uri(arg0:Pointer[GSocketClient], arg1:Pointer[gchar], arg2:guint16, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_async(arg0:Pointer[GSocketClient], arg1:Pointer[GSocketConnectable], arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_socket_client_connect_finish(arg0:Pointer[GSocketClient], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_to_host_async(arg0:Pointer[GSocketClient], arg1:Pointer[gchar], arg2:guint16, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_socket_client_connect_to_host_finish(arg0:Pointer[GSocketClient], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_to_service_async(arg0:Pointer[GSocketClient], arg1:Pointer[gchar], arg2:Pointer[gchar], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_socket_client_connect_to_service_finish(arg0:Pointer[GSocketClient], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_connect_to_uri_async(arg0:Pointer[GSocketClient], arg1:Pointer[gchar], arg2:guint16, arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_socket_client_connect_to_uri_finish(arg0:Pointer[GSocketClient], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_client_add_application_proxy(arg0:Pointer[GSocketClient], arg1:Pointer[gchar]) : ;

alias GSocketConnectableIface = Struct__GSocketConnectableIface;

record Struct__GSocketConnectableIface (
    g_iface : GTypeInterface,
    enumerate : CCodePointer[[Pointer[GSocketConnectable]],[Pointer[GSocketAddressEnumerator]]],
    proxy_enumerate : CCodePointer[[Pointer[GSocketConnectable]],[Pointer[GSocketAddressEnumerator]]],
);

external (cdecl) g_socket_connectable_get_type() : GType;

external (cdecl) g_socket_connectable_enumerate(arg0:Pointer[GSocketConnectable]) : Pointer[GSocketAddressEnumerator];

external (cdecl) g_socket_connectable_proxy_enumerate(arg0:Pointer[GSocketConnectable]) : Pointer[GSocketAddressEnumerator];

alias Struct__GSocketPrivate = Opaque;

alias GSocketPrivate = Struct__GSocketPrivate;

alias GSocketClass = Struct__GSocketClass;

record Struct__GSocketClass (
    parent_class : GObjectClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
    _g_reserved8 : CCodePointer[[],[]],
    _g_reserved9 : CCodePointer[[],[]],
    _g_reserved10 : CCodePointer[[],[]],
);

record Struct__GSocket (
    parent_instance : GObject,
    priv : Pointer[GSocketPrivate],
);

external (cdecl) g_socket_get_type() : GType;

external (cdecl) g_socket_new(arg0:GSocketFamily, arg1:GSocketType, arg2:GSocketProtocol, arg3:Pointer[Pointer[GError]]) : Pointer[GSocket];

external (cdecl) g_socket_new_from_fd(arg0:gint, arg1:Pointer[Pointer[GError]]) : Pointer[GSocket];

external (cdecl) g_socket_get_fd(arg0:Pointer[GSocket]) : Int;

external (cdecl) g_socket_get_family(arg0:Pointer[GSocket]) : GSocketFamily;

external (cdecl) g_socket_get_socket_type(arg0:Pointer[GSocket]) : GSocketType;

external (cdecl) g_socket_get_protocol(arg0:Pointer[GSocket]) : GSocketProtocol;

external (cdecl) g_socket_get_local_address(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GError]]) : Pointer[GSocketAddress];

external (cdecl) g_socket_get_remote_address(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GError]]) : Pointer[GSocketAddress];

external (cdecl) g_socket_set_blocking(arg0:Pointer[GSocket], arg1:gboolean) : ;

external (cdecl) g_socket_get_blocking(arg0:Pointer[GSocket]) : gboolean;

external (cdecl) g_socket_set_keepalive(arg0:Pointer[GSocket], arg1:gboolean) : ;

external (cdecl) g_socket_get_keepalive(arg0:Pointer[GSocket]) : gboolean;

external (cdecl) g_socket_get_listen_backlog(arg0:Pointer[GSocket]) : gint;

external (cdecl) g_socket_set_listen_backlog(arg0:Pointer[GSocket], arg1:gint) : ;

external (cdecl) g_socket_get_timeout(arg0:Pointer[GSocket]) : guint;

external (cdecl) g_socket_set_timeout(arg0:Pointer[GSocket], arg1:guint) : ;

external (cdecl) g_socket_is_connected(arg0:Pointer[GSocket]) : gboolean;

external (cdecl) g_socket_bind(arg0:Pointer[GSocket], arg1:Pointer[GSocketAddress], arg2:gboolean, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_connect(arg0:Pointer[GSocket], arg1:Pointer[GSocketAddress], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_check_connect_result(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_condition_check(arg0:Pointer[GSocket], arg1:GIOCondition) : GIOCondition;

external (cdecl) g_socket_condition_wait(arg0:Pointer[GSocket], arg1:GIOCondition, arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_accept(arg0:Pointer[GSocket], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : Pointer[GSocket];

external (cdecl) g_socket_listen(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_receive(arg0:Pointer[GSocket], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_receive_from(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GSocketAddress]], arg2:Pointer[gchar], arg3:gsize, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_send(arg0:Pointer[GSocket], arg1:Pointer[gchar], arg2:gsize, arg3:Pointer[GCancellable], arg4:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_send_to(arg0:Pointer[GSocket], arg1:Pointer[GSocketAddress], arg2:Pointer[gchar], arg3:gsize, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_receive_message(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GSocketAddress]], arg2:Pointer[GInputVector], arg3:gint, arg4:Pointer[Pointer[Pointer[GSocketControlMessage]]], arg5:Pointer[gint], arg6:Pointer[gint], arg7:Pointer[GCancellable], arg8:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_send_message(arg0:Pointer[GSocket], arg1:Pointer[GSocketAddress], arg2:Pointer[GOutputVector], arg3:gint, arg4:Pointer[Pointer[GSocketControlMessage]], arg5:gint, arg6:gint, arg7:Pointer[GCancellable], arg8:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_close(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_shutdown(arg0:Pointer[GSocket], arg1:gboolean, arg2:gboolean, arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_is_closed(arg0:Pointer[GSocket]) : gboolean;

external (cdecl) g_socket_create_source(arg0:Pointer[GSocket], arg1:GIOCondition, arg2:Pointer[GCancellable]) : Pointer[GSource];

external (cdecl) g_socket_speaks_ipv4(arg0:Pointer[GSocket]) : gboolean;

external (cdecl) g_socket_get_credentials(arg0:Pointer[GSocket], arg1:Pointer[Pointer[GError]]) : Pointer[GCredentials];

external (cdecl) g_socket_receive_with_blocking(arg0:Pointer[GSocket], arg1:Pointer[gchar], arg2:gsize, arg3:gboolean, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gssize;

external (cdecl) g_socket_send_with_blocking(arg0:Pointer[GSocket], arg1:Pointer[gchar], arg2:gsize, arg3:gboolean, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : gssize;

alias Struct__GSocketConnectionPrivate = Opaque;

alias GSocketConnectionPrivate = Struct__GSocketConnectionPrivate;

alias GSocketConnectionClass = Struct__GSocketConnectionClass;

record Struct__GSocketConnectionClass (
    parent_class : GIOStreamClass,
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
);

record Struct__GSocketConnection (
    parent_instance : GIOStream,
    priv : Pointer[GSocketConnectionPrivate],
);

external (cdecl) g_socket_connection_get_type() : GType;

external (cdecl) g_socket_connection_get_socket(arg0:Pointer[GSocketConnection]) : Pointer[GSocket];

external (cdecl) g_socket_connection_get_local_address(arg0:Pointer[GSocketConnection], arg1:Pointer[Pointer[GError]]) : Pointer[GSocketAddress];

external (cdecl) g_socket_connection_get_remote_address(arg0:Pointer[GSocketConnection], arg1:Pointer[Pointer[GError]]) : Pointer[GSocketAddress];

external (cdecl) g_socket_connection_factory_register_type(arg0:GType, arg1:GSocketFamily, arg2:GSocketType, arg3:gint) : ;

external (cdecl) g_socket_connection_factory_lookup_type(arg0:GSocketFamily, arg1:GSocketType, arg2:gint) : GType;

external (cdecl) g_socket_connection_factory_create_connection(arg0:Pointer[GSocket]) : Pointer[GSocketConnection];

alias Struct__GSocketControlMessagePrivate = Opaque;

alias GSocketControlMessagePrivate = Struct__GSocketControlMessagePrivate;

alias GSocketControlMessageClass = Struct__GSocketControlMessageClass;

record Struct__GSocketControlMessageClass (
    parent_class : GObjectClass,
    get_size : CCodePointer[[Pointer[GSocketControlMessage]],[gsize]],
    get_level : CCodePointer[[Pointer[GSocketControlMessage]],[Int]],
    get_type : CCodePointer[[Pointer[GSocketControlMessage]],[Int]],
    serialize : CCodePointer[[Pointer[GSocketControlMessage], gpointer],[]],
    deserialize : CCodePointer[[Int, Int, gsize, gpointer],[Pointer[GSocketControlMessage]]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

record Struct__GSocketControlMessage (
    parent_instance : GObject,
    priv : Pointer[GSocketControlMessagePrivate],
);

external (cdecl) g_socket_control_message_get_type() : GType;

external (cdecl) g_socket_control_message_get_size(arg0:Pointer[GSocketControlMessage]) : gsize;

external (cdecl) g_socket_control_message_get_level(arg0:Pointer[GSocketControlMessage]) : Int;

external (cdecl) g_socket_control_message_get_msg_type(arg0:Pointer[GSocketControlMessage]) : Int;

external (cdecl) g_socket_control_message_serialize(arg0:Pointer[GSocketControlMessage], arg1:gpointer) : ;

external (cdecl) g_socket_control_message_deserialize(arg0:Int, arg1:Int, arg2:gsize, arg3:gpointer) : Pointer[GSocketControlMessage];

alias Struct__GSocketListenerPrivate = Opaque;

alias GSocketListenerPrivate = Struct__GSocketListenerPrivate;

alias GSocketListenerClass = Struct__GSocketListenerClass;

record Struct__GSocketListenerClass (
    parent_class : GObjectClass,
    changed : CCodePointer[[Pointer[GSocketListener]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
);

record Struct__GSocketListener (
    parent_instance : GObject,
    priv : Pointer[GSocketListenerPrivate],
);

external (cdecl) g_socket_listener_get_type() : GType;

external (cdecl) g_socket_listener_new() : Pointer[GSocketListener];

external (cdecl) g_socket_listener_set_backlog(arg0:Pointer[GSocketListener], arg1:Int) : ;

external (cdecl) g_socket_listener_add_socket(arg0:Pointer[GSocketListener], arg1:Pointer[GSocket], arg2:Pointer[GObject], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_listener_add_address(arg0:Pointer[GSocketListener], arg1:Pointer[GSocketAddress], arg2:GSocketType, arg3:GSocketProtocol, arg4:Pointer[GObject], arg5:Pointer[Pointer[GSocketAddress]], arg6:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_listener_add_inet_port(arg0:Pointer[GSocketListener], arg1:guint16, arg2:Pointer[GObject], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_socket_listener_add_any_inet_port(arg0:Pointer[GSocketListener], arg1:Pointer[GObject], arg2:Pointer[Pointer[GError]]) : guint16;

external (cdecl) g_socket_listener_accept_socket(arg0:Pointer[GSocketListener], arg1:Pointer[Pointer[GObject]], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GSocket];

external (cdecl) g_socket_listener_accept_socket_async(arg0:Pointer[GSocketListener], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_socket_listener_accept_socket_finish(arg0:Pointer[GSocketListener], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GObject]], arg3:Pointer[Pointer[GError]]) : Pointer[GSocket];

external (cdecl) g_socket_listener_accept(arg0:Pointer[GSocketListener], arg1:Pointer[Pointer[GObject]], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_listener_accept_async(arg0:Pointer[GSocketListener], arg1:Pointer[GCancellable], arg2:GAsyncReadyCallback, arg3:gpointer) : ;

external (cdecl) g_socket_listener_accept_finish(arg0:Pointer[GSocketListener], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GObject]], arg3:Pointer[Pointer[GError]]) : Pointer[GSocketConnection];

external (cdecl) g_socket_listener_close(arg0:Pointer[GSocketListener]) : ;

alias Struct__GSocketServicePrivate = Opaque;

alias GSocketServicePrivate = Struct__GSocketServicePrivate;

alias GSocketServiceClass = Struct__GSocketServiceClass;

record Struct__GSocketServiceClass (
    parent_class : GSocketListenerClass,
    incoming : CCodePointer[[Pointer[GSocketService], Pointer[GSocketConnection], Pointer[GObject]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
);

record Struct__GSocketService (
    parent_instance : GSocketListener,
    priv : Pointer[GSocketServicePrivate],
);

external (cdecl) g_socket_service_get_type() : GType;

external (cdecl) g_socket_service_new() : Pointer[GSocketService];

external (cdecl) g_socket_service_start(arg0:Pointer[GSocketService]) : ;

external (cdecl) g_socket_service_stop(arg0:Pointer[GSocketService]) : ;

external (cdecl) g_socket_service_is_active(arg0:Pointer[GSocketService]) : gboolean;

external (cdecl) g_srv_target_get_type() : GType;

external (cdecl) g_srv_target_new(arg0:Pointer[gchar], arg1:guint16, arg2:guint16, arg3:guint16) : Pointer[GSrvTarget];

external (cdecl) g_srv_target_copy(arg0:Pointer[GSrvTarget]) : Pointer[GSrvTarget];

external (cdecl) g_srv_target_free(arg0:Pointer[GSrvTarget]) : ;

external (cdecl) g_srv_target_get_hostname(arg0:Pointer[GSrvTarget]) : Pointer[gchar];

external (cdecl) g_srv_target_get_port(arg0:Pointer[GSrvTarget]) : guint16;

external (cdecl) g_srv_target_get_priority(arg0:Pointer[GSrvTarget]) : guint16;

external (cdecl) g_srv_target_get_weight(arg0:Pointer[GSrvTarget]) : guint16;

external (cdecl) g_srv_target_list_sort(arg0:Pointer[GList]) : Pointer[GList];

alias Struct__GTcpConnectionPrivate = Opaque;

alias GTcpConnectionPrivate = Struct__GTcpConnectionPrivate;

alias GTcpConnectionClass = Struct__GTcpConnectionClass;

record Struct__GTcpConnectionClass (
    parent_class : GSocketConnectionClass,
);

record Struct__GTcpConnection (
    parent_instance : GSocketConnection,
    priv : Pointer[GTcpConnectionPrivate],
);

external (cdecl) g_tcp_connection_get_type() : GType;

external (cdecl) g_tcp_connection_set_graceful_disconnect(arg0:Pointer[GTcpConnection], arg1:gboolean) : ;

external (cdecl) g_tcp_connection_get_graceful_disconnect(arg0:Pointer[GTcpConnection]) : gboolean;

alias Struct__GTcpWrapperConnectionPrivate = Opaque;

alias GTcpWrapperConnectionPrivate = Struct__GTcpWrapperConnectionPrivate;

alias GTcpWrapperConnectionClass = Struct__GTcpWrapperConnectionClass;

record Struct__GTcpWrapperConnectionClass (
    parent_class : GTcpConnectionClass,
);

record Struct__GTcpWrapperConnection (
    parent_instance : GTcpConnection,
    priv : Pointer[GTcpWrapperConnectionPrivate],
);

external (cdecl) g_tcp_wrapper_connection_get_type() : GType;

external (cdecl) g_tcp_wrapper_connection_new(arg0:Pointer[GIOStream], arg1:Pointer[GSocket]) : Pointer[GSocketConnection];

external (cdecl) g_tcp_wrapper_connection_get_base_io_stream(arg0:Pointer[GTcpWrapperConnection]) : Pointer[GIOStream];

alias Struct__GThemedIconClass = Opaque;

alias GThemedIconClass = Struct__GThemedIconClass;

external (cdecl) g_themed_icon_get_type() : GType;

external (cdecl) g_themed_icon_new(arg0:Pointer[CChar]) : Pointer[GIcon];

external (cdecl) g_themed_icon_new_with_default_fallbacks(arg0:Pointer[CChar]) : Pointer[GIcon];

external (cdecl) g_themed_icon_new_from_names(arg0:Pointer[Pointer[CChar]], arg1:Int) : Pointer[GIcon];

external (cdecl) g_themed_icon_prepend_name(arg0:Pointer[GThemedIcon], arg1:Pointer[CChar]) : ;

external (cdecl) g_themed_icon_append_name(arg0:Pointer[GThemedIcon], arg1:Pointer[CChar]) : ;

external (cdecl) g_themed_icon_get_names(arg0:Pointer[GThemedIcon]) : Pointer[Pointer[gchar]];

alias Struct__GThreadedSocketServicePrivate = Opaque;

alias GThreadedSocketServicePrivate = Struct__GThreadedSocketServicePrivate;

alias GThreadedSocketServiceClass = Struct__GThreadedSocketServiceClass;

record Struct__GThreadedSocketServiceClass (
    parent_class : GSocketServiceClass,
    run : CCodePointer[[Pointer[GThreadedSocketService], Pointer[GSocketConnection], Pointer[GObject]],[gboolean]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
);

record Struct__GThreadedSocketService (
    parent_instance : GSocketService,
    priv : Pointer[GThreadedSocketServicePrivate],
);

external (cdecl) g_threaded_socket_service_get_type() : GType;

external (cdecl) g_threaded_socket_service_new(arg0:Int) : Pointer[GSocketService];

alias Struct__GTlsBackend = Opaque;

alias GTlsBackend = Struct__GTlsBackend;

alias GTlsBackendInterface = Struct__GTlsBackendInterface;

record Struct__GTlsBackendInterface (
    g_iface : GTypeInterface,
    supports_tls : CCodePointer[[Pointer[GTlsBackend]],[gboolean]],
    get_certificate_type : CCodePointer[[],[GType]],
    get_client_connection_type : CCodePointer[[],[GType]],
    get_server_connection_type : CCodePointer[[],[GType]],
    get_file_database_type : CCodePointer[[],[GType]],
    get_default_database : CCodePointer[[Pointer[GTlsBackend]],[Pointer[GTlsDatabase]]],
);

external (cdecl) g_tls_backend_get_type() : GType;

external (cdecl) g_tls_backend_get_default() : Pointer[GTlsBackend];

external (cdecl) g_tls_backend_get_default_database(arg0:Pointer[GTlsBackend]) : Pointer[GTlsDatabase];

external (cdecl) g_tls_backend_supports_tls(arg0:Pointer[GTlsBackend]) : gboolean;

external (cdecl) g_tls_backend_get_certificate_type(arg0:Pointer[GTlsBackend]) : GType;

external (cdecl) g_tls_backend_get_client_connection_type(arg0:Pointer[GTlsBackend]) : GType;

external (cdecl) g_tls_backend_get_server_connection_type(arg0:Pointer[GTlsBackend]) : GType;

external (cdecl) g_tls_backend_get_file_database_type(arg0:Pointer[GTlsBackend]) : GType;

alias GTlsCertificateClass = Struct__GTlsCertificateClass;

alias Struct__GTlsCertificatePrivate = Opaque;

alias GTlsCertificatePrivate = Struct__GTlsCertificatePrivate;

record Struct__GTlsCertificate (
    parent_instance : GObject,
    priv : Pointer[GTlsCertificatePrivate],
);

record Struct__GTlsCertificateClass (
    parent_class : GObjectClass,
    verify : CCodePointer[[Pointer[GTlsCertificate], Pointer[GSocketConnectable], Pointer[GTlsCertificate]],[GTlsCertificateFlags]],
    padding : Array[gpointer, 8],
);

external (cdecl) g_tls_certificate_get_type() : GType;

external (cdecl) g_tls_certificate_new_from_pem(arg0:Pointer[gchar], arg1:gssize, arg2:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_certificate_new_from_file(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_certificate_new_from_files(arg0:Pointer[gchar], arg1:Pointer[gchar], arg2:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_certificate_list_new_from_file(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_tls_certificate_get_issuer(arg0:Pointer[GTlsCertificate]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_certificate_verify(arg0:Pointer[GTlsCertificate], arg1:Pointer[GSocketConnectable], arg2:Pointer[GTlsCertificate]) : GTlsCertificateFlags;

alias GTlsConnectionClass = Struct__GTlsConnectionClass;

alias Struct__GTlsConnectionPrivate = Opaque;

alias GTlsConnectionPrivate = Struct__GTlsConnectionPrivate;

record Struct__GTlsConnection (
    parent_instance : GIOStream,
    priv : Pointer[GTlsConnectionPrivate],
);

record Struct__GTlsConnectionClass (
    parent_class : GIOStreamClass,
    accept_certificate : CCodePointer[[Pointer[GTlsConnection], Pointer[GTlsCertificate], GTlsCertificateFlags],[gboolean]],
    handshake : CCodePointer[[Pointer[GTlsConnection], Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    handshake_async : CCodePointer[[Pointer[GTlsConnection], Int, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    handshake_finish : CCodePointer[[Pointer[GTlsConnection], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    padding : Array[gpointer, 8],
);

external (cdecl) g_tls_connection_get_type() : GType;

external (cdecl) g_tls_connection_set_use_system_certdb(arg0:Pointer[GTlsConnection], arg1:gboolean) : ;

external (cdecl) g_tls_connection_get_use_system_certdb(arg0:Pointer[GTlsConnection]) : gboolean;

external (cdecl) g_tls_connection_set_database(arg0:Pointer[GTlsConnection], arg1:Pointer[GTlsDatabase]) : ;

external (cdecl) g_tls_connection_get_database(arg0:Pointer[GTlsConnection]) : Pointer[GTlsDatabase];

external (cdecl) g_tls_connection_set_certificate(arg0:Pointer[GTlsConnection], arg1:Pointer[GTlsCertificate]) : ;

external (cdecl) g_tls_connection_get_certificate(arg0:Pointer[GTlsConnection]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_connection_set_interaction(arg0:Pointer[GTlsConnection], arg1:Pointer[GTlsInteraction]) : ;

external (cdecl) g_tls_connection_get_interaction(arg0:Pointer[GTlsConnection]) : Pointer[GTlsInteraction];

external (cdecl) g_tls_connection_get_peer_certificate(arg0:Pointer[GTlsConnection]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_connection_get_peer_certificate_errors(arg0:Pointer[GTlsConnection]) : GTlsCertificateFlags;

external (cdecl) g_tls_connection_set_require_close_notify(arg0:Pointer[GTlsConnection], arg1:gboolean) : ;

external (cdecl) g_tls_connection_get_require_close_notify(arg0:Pointer[GTlsConnection]) : gboolean;

external (cdecl) g_tls_connection_set_rehandshake_mode(arg0:Pointer[GTlsConnection], arg1:GTlsRehandshakeMode) : ;

external (cdecl) g_tls_connection_get_rehandshake_mode(arg0:Pointer[GTlsConnection]) : GTlsRehandshakeMode;

external (cdecl) g_tls_connection_handshake(arg0:Pointer[GTlsConnection], arg1:Pointer[GCancellable], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_tls_connection_handshake_async(arg0:Pointer[GTlsConnection], arg1:Int, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_tls_connection_handshake_finish(arg0:Pointer[GTlsConnection], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_tls_error_quark() : GQuark;

external (cdecl) g_tls_connection_emit_accept_certificate(arg0:Pointer[GTlsConnection], arg1:Pointer[GTlsCertificate], arg2:GTlsCertificateFlags) : gboolean;

alias GTlsClientConnectionInterface = Struct__GTlsClientConnectionInterface;

record Struct__GTlsClientConnectionInterface (
    g_iface : GTypeInterface,
);

external (cdecl) g_tls_client_connection_get_type() : GType;

external (cdecl) g_tls_client_connection_new(arg0:Pointer[GIOStream], arg1:Pointer[GSocketConnectable], arg2:Pointer[Pointer[GError]]) : Pointer[GIOStream];

external (cdecl) g_tls_client_connection_get_validation_flags(arg0:Pointer[GTlsClientConnection]) : GTlsCertificateFlags;

external (cdecl) g_tls_client_connection_set_validation_flags(arg0:Pointer[GTlsClientConnection], arg1:GTlsCertificateFlags) : ;

external (cdecl) g_tls_client_connection_get_server_identity(arg0:Pointer[GTlsClientConnection]) : Pointer[GSocketConnectable];

external (cdecl) g_tls_client_connection_set_server_identity(arg0:Pointer[GTlsClientConnection], arg1:Pointer[GSocketConnectable]) : ;

external (cdecl) g_tls_client_connection_get_use_ssl3(arg0:Pointer[GTlsClientConnection]) : gboolean;

external (cdecl) g_tls_client_connection_set_use_ssl3(arg0:Pointer[GTlsClientConnection], arg1:gboolean) : ;

external (cdecl) g_tls_client_connection_get_accepted_cas(arg0:Pointer[GTlsClientConnection]) : Pointer[GList];

alias GTlsDatabaseClass = Struct__GTlsDatabaseClass;

alias Struct__GTlsDatabasePrivate = Opaque;

alias GTlsDatabasePrivate = Struct__GTlsDatabasePrivate;

record Struct__GTlsDatabase (
    parent_instance : GObject,
    priv : Pointer[GTlsDatabasePrivate],
);

record Struct__GTlsDatabaseClass (
    parent_class : GObjectClass,
    verify_chain : CCodePointer[[Pointer[GTlsDatabase], Pointer[GTlsCertificate], Pointer[gchar], Pointer[GSocketConnectable], Pointer[GTlsInteraction], GTlsDatabaseVerifyFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[GTlsCertificateFlags]],
    verify_chain_async : CCodePointer[[Pointer[GTlsDatabase], Pointer[GTlsCertificate], Pointer[gchar], Pointer[GSocketConnectable], Pointer[GTlsInteraction], GTlsDatabaseVerifyFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    verify_chain_finish : CCodePointer[[Pointer[GTlsDatabase], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[GTlsCertificateFlags]],
    create_certificate_handle : CCodePointer[[Pointer[GTlsDatabase], Pointer[GTlsCertificate]],[Pointer[gchar]]],
    lookup_certificate_for_handle : CCodePointer[[Pointer[GTlsDatabase], Pointer[gchar], Pointer[GTlsInteraction], GTlsDatabaseLookupFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GTlsCertificate]]],
    lookup_certificate_for_handle_async : CCodePointer[[Pointer[GTlsDatabase], Pointer[gchar], Pointer[GTlsInteraction], GTlsDatabaseLookupFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_certificate_for_handle_finish : CCodePointer[[Pointer[GTlsDatabase], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GTlsCertificate]]],
    lookup_certificate_issuer : CCodePointer[[Pointer[GTlsDatabase], Pointer[GTlsCertificate], Pointer[GTlsInteraction], GTlsDatabaseLookupFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GTlsCertificate]]],
    lookup_certificate_issuer_async : CCodePointer[[Pointer[GTlsDatabase], Pointer[GTlsCertificate], Pointer[GTlsInteraction], GTlsDatabaseLookupFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_certificate_issuer_finish : CCodePointer[[Pointer[GTlsDatabase], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GTlsCertificate]]],
    lookup_certificates_issued_by : CCodePointer[[Pointer[GTlsDatabase], Pointer[GByteArray], Pointer[GTlsInteraction], GTlsDatabaseLookupFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[Pointer[GList]]],
    lookup_certificates_issued_by_async : CCodePointer[[Pointer[GTlsDatabase], Pointer[GByteArray], Pointer[GTlsInteraction], GTlsDatabaseLookupFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    lookup_certificates_issued_by_finish : CCodePointer[[Pointer[GTlsDatabase], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[Pointer[GList]]],
    padding : Array[gpointer, 16],
);

external (cdecl) g_tls_database_get_type() : GType;

external (cdecl) g_tls_database_verify_chain(arg0:Pointer[GTlsDatabase], arg1:Pointer[GTlsCertificate], arg2:Pointer[gchar], arg3:Pointer[GSocketConnectable], arg4:Pointer[GTlsInteraction], arg5:GTlsDatabaseVerifyFlags, arg6:Pointer[GCancellable], arg7:Pointer[Pointer[GError]]) : GTlsCertificateFlags;

external (cdecl) g_tls_database_verify_chain_async(arg0:Pointer[GTlsDatabase], arg1:Pointer[GTlsCertificate], arg2:Pointer[gchar], arg3:Pointer[GSocketConnectable], arg4:Pointer[GTlsInteraction], arg5:GTlsDatabaseVerifyFlags, arg6:Pointer[GCancellable], arg7:GAsyncReadyCallback, arg8:gpointer) : ;

external (cdecl) g_tls_database_verify_chain_finish(arg0:Pointer[GTlsDatabase], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : GTlsCertificateFlags;

external (cdecl) g_tls_database_create_certificate_handle(arg0:Pointer[GTlsDatabase], arg1:Pointer[GTlsCertificate]) : Pointer[gchar];

external (cdecl) g_tls_database_lookup_certificate_for_handle(arg0:Pointer[GTlsDatabase], arg1:Pointer[gchar], arg2:Pointer[GTlsInteraction], arg3:GTlsDatabaseLookupFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_database_lookup_certificate_for_handle_async(arg0:Pointer[GTlsDatabase], arg1:Pointer[gchar], arg2:Pointer[GTlsInteraction], arg3:GTlsDatabaseLookupFlags, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_tls_database_lookup_certificate_for_handle_finish(arg0:Pointer[GTlsDatabase], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_database_lookup_certificate_issuer(arg0:Pointer[GTlsDatabase], arg1:Pointer[GTlsCertificate], arg2:Pointer[GTlsInteraction], arg3:GTlsDatabaseLookupFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_database_lookup_certificate_issuer_async(arg0:Pointer[GTlsDatabase], arg1:Pointer[GTlsCertificate], arg2:Pointer[GTlsInteraction], arg3:GTlsDatabaseLookupFlags, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_tls_database_lookup_certificate_issuer_finish(arg0:Pointer[GTlsDatabase], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GTlsCertificate];

external (cdecl) g_tls_database_lookup_certificates_issued_by(arg0:Pointer[GTlsDatabase], arg1:Pointer[GByteArray], arg2:Pointer[GTlsInteraction], arg3:GTlsDatabaseLookupFlags, arg4:Pointer[GCancellable], arg5:Pointer[Pointer[GError]]) : Pointer[GList];

external (cdecl) g_tls_database_lookup_certificates_issued_by_async(arg0:Pointer[GTlsDatabase], arg1:Pointer[GByteArray], arg2:Pointer[GTlsInteraction], arg3:GTlsDatabaseLookupFlags, arg4:Pointer[GCancellable], arg5:GAsyncReadyCallback, arg6:gpointer) : ;

external (cdecl) g_tls_database_lookup_certificates_issued_by_finish(arg0:Pointer[GTlsDatabase], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : Pointer[GList];

alias GTlsFileDatabaseInterface = Struct__GTlsFileDatabaseInterface;

record Struct__GTlsFileDatabaseInterface (
    g_iface : GTypeInterface,
    padding : Array[gpointer, 8],
);

external (cdecl) g_tls_file_database_get_type() : GType;

external (cdecl) g_tls_file_database_new(arg0:Pointer[gchar], arg1:Pointer[Pointer[GError]]) : Pointer[GTlsDatabase];

alias GTlsInteractionClass = Struct__GTlsInteractionClass;

alias Struct__GTlsInteractionPrivate = Opaque;

alias GTlsInteractionPrivate = Struct__GTlsInteractionPrivate;

record Struct__GTlsInteraction (
    parent_instance : GObject,
    priv : Pointer[GTlsInteractionPrivate],
);

record Struct__GTlsInteractionClass (
    parent_class : GObjectClass,
    ask_password : CCodePointer[[Pointer[GTlsInteraction], Pointer[GTlsPassword], Pointer[GCancellable], Pointer[Pointer[GError]]],[GTlsInteractionResult]],
    ask_password_async : CCodePointer[[Pointer[GTlsInteraction], Pointer[GTlsPassword], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    ask_password_finish : CCodePointer[[Pointer[GTlsInteraction], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[GTlsInteractionResult]],
    padding : Array[gpointer, 24],
);

external (cdecl) g_tls_interaction_get_type() : GType;

external (cdecl) g_tls_interaction_invoke_ask_password(arg0:Pointer[GTlsInteraction], arg1:Pointer[GTlsPassword], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : GTlsInteractionResult;

external (cdecl) g_tls_interaction_ask_password(arg0:Pointer[GTlsInteraction], arg1:Pointer[GTlsPassword], arg2:Pointer[GCancellable], arg3:Pointer[Pointer[GError]]) : GTlsInteractionResult;

external (cdecl) g_tls_interaction_ask_password_async(arg0:Pointer[GTlsInteraction], arg1:Pointer[GTlsPassword], arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_tls_interaction_ask_password_finish(arg0:Pointer[GTlsInteraction], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : GTlsInteractionResult;

alias GTlsServerConnectionInterface = Struct__GTlsServerConnectionInterface;

record Struct__GTlsServerConnectionInterface (
    g_iface : GTypeInterface,
);

external (cdecl) g_tls_server_connection_get_type() : GType;

external (cdecl) g_tls_server_connection_new(arg0:Pointer[GIOStream], arg1:Pointer[GTlsCertificate], arg2:Pointer[Pointer[GError]]) : Pointer[GIOStream];

alias GTlsPasswordClass = Struct__GTlsPasswordClass;

alias Struct__GTlsPasswordPrivate = Opaque;

alias GTlsPasswordPrivate = Struct__GTlsPasswordPrivate;

record Struct__GTlsPassword (
    parent_instance : GObject,
    priv : Pointer[GTlsPasswordPrivate],
);

record Struct__GTlsPasswordClass (
    parent_class : GObjectClass,
    get_value : CCodePointer[[Pointer[GTlsPassword], Pointer[gsize]],[Pointer[guchar]]],
    set_value : CCodePointer[[Pointer[GTlsPassword], Pointer[guchar], gssize, GDestroyNotify],[]],
    get_default_warning : CCodePointer[[Pointer[GTlsPassword]],[Pointer[gchar]]],
    padding : Array[gpointer, 4],
);

external (cdecl) g_tls_password_get_type() : GType;

external (cdecl) g_tls_password_new(arg0:GTlsPasswordFlags, arg1:Pointer[gchar]) : Pointer[GTlsPassword];

external (cdecl) g_tls_password_get_value(arg0:Pointer[GTlsPassword], arg1:Pointer[gsize]) : Pointer[guchar];

external (cdecl) g_tls_password_set_value(arg0:Pointer[GTlsPassword], arg1:Pointer[guchar], arg2:gssize) : ;

external (cdecl) g_tls_password_set_value_full(arg0:Pointer[GTlsPassword], arg1:Pointer[guchar], arg2:gssize, arg3:GDestroyNotify) : ;

external (cdecl) g_tls_password_get_flags(arg0:Pointer[GTlsPassword]) : GTlsPasswordFlags;

external (cdecl) g_tls_password_set_flags(arg0:Pointer[GTlsPassword], arg1:GTlsPasswordFlags) : ;

external (cdecl) g_tls_password_get_description(arg0:Pointer[GTlsPassword]) : Pointer[gchar];

external (cdecl) g_tls_password_set_description(arg0:Pointer[GTlsPassword], arg1:Pointer[gchar]) : ;

external (cdecl) g_tls_password_get_warning(arg0:Pointer[GTlsPassword]) : Pointer[gchar];

external (cdecl) g_tls_password_set_warning(arg0:Pointer[GTlsPassword], arg1:Pointer[gchar]) : ;

alias GVfsClass = Struct__GVfsClass;

record Struct__GVfs (
    parent_instance : GObject,
);

record Struct__GVfsClass (
    parent_class : GObjectClass,
    is_active : CCodePointer[[Pointer[GVfs]],[gboolean]],
    get_file_for_path : CCodePointer[[Pointer[GVfs], Pointer[CChar]],[Pointer[GFile]]],
    get_file_for_uri : CCodePointer[[Pointer[GVfs], Pointer[CChar]],[Pointer[GFile]]],
    get_supported_uri_schemes : CCodePointer[[Pointer[GVfs]],[Pointer[Pointer[gchar]]]],
    parse_name : CCodePointer[[Pointer[GVfs], Pointer[CChar]],[Pointer[GFile]]],
    local_file_add_info : CCodePointer[[Pointer[GVfs], Pointer[CChar], guint64, Pointer[GFileAttributeMatcher], Pointer[GFileInfo], Pointer[GCancellable], Pointer[gpointer], Pointer[GDestroyNotify]],[]],
    add_writable_namespaces : CCodePointer[[Pointer[GVfs], Pointer[GFileAttributeInfoList]],[]],
    local_file_set_attributes : CCodePointer[[Pointer[GVfs], Pointer[CChar], Pointer[GFileInfo], GFileQueryInfoFlags, Pointer[GCancellable], Pointer[Pointer[GError]]],[gboolean]],
    local_file_removed : CCodePointer[[Pointer[GVfs], Pointer[CChar]],[]],
    local_file_moved : CCodePointer[[Pointer[GVfs], Pointer[CChar], Pointer[CChar]],[]],
    _g_reserved1 : CCodePointer[[],[]],
    _g_reserved2 : CCodePointer[[],[]],
    _g_reserved3 : CCodePointer[[],[]],
    _g_reserved4 : CCodePointer[[],[]],
    _g_reserved5 : CCodePointer[[],[]],
    _g_reserved6 : CCodePointer[[],[]],
    _g_reserved7 : CCodePointer[[],[]],
);

external (cdecl) g_vfs_get_type() : GType;

external (cdecl) g_vfs_is_active(arg0:Pointer[GVfs]) : gboolean;

external (cdecl) g_vfs_get_file_for_path(arg0:Pointer[GVfs], arg1:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_vfs_get_file_for_uri(arg0:Pointer[GVfs], arg1:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_vfs_get_supported_uri_schemes(arg0:Pointer[GVfs]) : Pointer[Pointer[gchar]];

external (cdecl) g_vfs_parse_name(arg0:Pointer[GVfs], arg1:Pointer[CChar]) : Pointer[GFile];

external (cdecl) g_vfs_get_default() : Pointer[GVfs];

external (cdecl) g_vfs_get_local() : Pointer[GVfs];

alias GVolumeIface = Struct__GVolumeIface;

record Struct__GVolumeIface (
    g_iface : GTypeInterface,
    changed : CCodePointer[[Pointer[GVolume]],[]],
    removed : CCodePointer[[Pointer[GVolume]],[]],
    get_name : CCodePointer[[Pointer[GVolume]],[Pointer[CChar]]],
    get_icon : CCodePointer[[Pointer[GVolume]],[Pointer[GIcon]]],
    get_uuid : CCodePointer[[Pointer[GVolume]],[Pointer[CChar]]],
    get_drive : CCodePointer[[Pointer[GVolume]],[Pointer[GDrive]]],
    get_mount : CCodePointer[[Pointer[GVolume]],[Pointer[GMount]]],
    can_mount : CCodePointer[[Pointer[GVolume]],[gboolean]],
    can_eject : CCodePointer[[Pointer[GVolume]],[gboolean]],
    mount_fn : CCodePointer[[Pointer[GVolume], GMountMountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    mount_finish : CCodePointer[[Pointer[GVolume], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    eject : CCodePointer[[Pointer[GVolume], GMountUnmountFlags, Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_finish : CCodePointer[[Pointer[GVolume], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
    get_identifier : CCodePointer[[Pointer[GVolume], Pointer[CChar]],[Pointer[CChar]]],
    enumerate_identifiers : CCodePointer[[Pointer[GVolume]],[Pointer[Pointer[CChar]]]],
    should_automount : CCodePointer[[Pointer[GVolume]],[gboolean]],
    get_activation_root : CCodePointer[[Pointer[GVolume]],[Pointer[GFile]]],
    eject_with_operation : CCodePointer[[Pointer[GVolume], GMountUnmountFlags, Pointer[GMountOperation], Pointer[GCancellable], GAsyncReadyCallback, gpointer],[]],
    eject_with_operation_finish : CCodePointer[[Pointer[GVolume], Pointer[GAsyncResult], Pointer[Pointer[GError]]],[gboolean]],
);

external (cdecl) g_volume_get_type() : GType;

external (cdecl) g_volume_get_name(arg0:Pointer[GVolume]) : Pointer[CChar];

external (cdecl) g_volume_get_icon(arg0:Pointer[GVolume]) : Pointer[GIcon];

external (cdecl) g_volume_get_uuid(arg0:Pointer[GVolume]) : Pointer[CChar];

external (cdecl) g_volume_get_drive(arg0:Pointer[GVolume]) : Pointer[GDrive];

external (cdecl) g_volume_get_mount(arg0:Pointer[GVolume]) : Pointer[GMount];

external (cdecl) g_volume_can_mount(arg0:Pointer[GVolume]) : gboolean;

external (cdecl) g_volume_can_eject(arg0:Pointer[GVolume]) : gboolean;

external (cdecl) g_volume_should_automount(arg0:Pointer[GVolume]) : gboolean;

external (cdecl) g_volume_mount(arg0:Pointer[GVolume], arg1:GMountMountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_volume_mount_finish(arg0:Pointer[GVolume], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_volume_eject(arg0:Pointer[GVolume], arg1:GMountUnmountFlags, arg2:Pointer[GCancellable], arg3:GAsyncReadyCallback, arg4:gpointer) : ;

external (cdecl) g_volume_eject_finish(arg0:Pointer[GVolume], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_volume_get_identifier(arg0:Pointer[GVolume], arg1:Pointer[CChar]) : Pointer[CChar];

external (cdecl) g_volume_enumerate_identifiers(arg0:Pointer[GVolume]) : Pointer[Pointer[CChar]];

external (cdecl) g_volume_get_activation_root(arg0:Pointer[GVolume]) : Pointer[GFile];

external (cdecl) g_volume_eject_with_operation(arg0:Pointer[GVolume], arg1:GMountUnmountFlags, arg2:Pointer[GMountOperation], arg3:Pointer[GCancellable], arg4:GAsyncReadyCallback, arg5:gpointer) : ;

external (cdecl) g_volume_eject_with_operation_finish(arg0:Pointer[GVolume], arg1:Pointer[GAsyncResult], arg2:Pointer[Pointer[GError]]) : gboolean;

alias GZlibCompressorClass = Struct__GZlibCompressorClass;

record Struct__GZlibCompressorClass (
    parent_class : GObjectClass,
);

external (cdecl) g_zlib_compressor_get_type() : GType;

external (cdecl) g_zlib_compressor_new(arg0:GZlibCompressorFormat, arg1:Int) : Pointer[GZlibCompressor];

external (cdecl) g_zlib_compressor_get_file_info(arg0:Pointer[GZlibCompressor]) : Pointer[GFileInfo];

external (cdecl) g_zlib_compressor_set_file_info(arg0:Pointer[GZlibCompressor], arg1:Pointer[GFileInfo]) : ;

alias GZlibDecompressorClass = Struct__GZlibDecompressorClass;

record Struct__GZlibDecompressorClass (
    parent_class : GObjectClass,
);

external (cdecl) g_zlib_decompressor_get_type() : GType;

external (cdecl) g_zlib_decompressor_new(arg0:GZlibCompressorFormat) : Pointer[GZlibDecompressor];

external (cdecl) g_zlib_decompressor_get_file_info(arg0:Pointer[GZlibDecompressor]) : Pointer[GFileInfo];

alias GDBusInterfaceIface = Struct__GDBusInterfaceIface;

record Struct__GDBusInterfaceIface (
    parent_iface : GTypeInterface,
    get_info : CCodePointer[[Pointer[GDBusInterface]],[Pointer[GDBusInterfaceInfo]]],
    get_object : CCodePointer[[Pointer[GDBusInterface]],[Pointer[GDBusObject]]],
    set_object : CCodePointer[[Pointer[GDBusInterface], Pointer[GDBusObject]],[]],
);

external (cdecl) g_dbus_interface_get_type() : GType;

external (cdecl) g_dbus_interface_get_info(arg0:Pointer[GDBusInterface]) : Pointer[GDBusInterfaceInfo];

external (cdecl) g_dbus_interface_get_object(arg0:Pointer[GDBusInterface]) : Pointer[GDBusObject];

external (cdecl) g_dbus_interface_set_object(arg0:Pointer[GDBusInterface], arg1:Pointer[GDBusObject]) : ;

alias GDBusInterfaceSkeletonClass = Struct__GDBusInterfaceSkeletonClass;

alias Struct__GDBusInterfaceSkeletonPrivate = Opaque;

alias GDBusInterfaceSkeletonPrivate = Struct__GDBusInterfaceSkeletonPrivate;

record Struct__GDBusInterfaceSkeleton (
    parent_instance : GObject,
    priv : Pointer[GDBusInterfaceSkeletonPrivate],
);

record Struct__GDBusInterfaceSkeletonClass (
    parent_class : GObjectClass,
    get_info : CCodePointer[[Pointer[GDBusInterfaceSkeleton]],[Pointer[GDBusInterfaceInfo]]],
    get_vtable : CCodePointer[[Pointer[GDBusInterfaceSkeleton]],[Pointer[GDBusInterfaceVTable]]],
    get_properties : CCodePointer[[Pointer[GDBusInterfaceSkeleton]],[Pointer[GVariant]]],
    flush : CCodePointer[[Pointer[GDBusInterfaceSkeleton]],[]],
    vfunc_padding : Array[gpointer, 8],
    g_authorize_method : CCodePointer[[Pointer[GDBusInterfaceSkeleton], Pointer[GDBusMethodInvocation]],[gboolean]],
    signal_padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_interface_skeleton_get_type() : GType;

external (cdecl) g_dbus_interface_skeleton_get_flags(arg0:Pointer[GDBusInterfaceSkeleton]) : GDBusInterfaceSkeletonFlags;

external (cdecl) g_dbus_interface_skeleton_set_flags(arg0:Pointer[GDBusInterfaceSkeleton], arg1:GDBusInterfaceSkeletonFlags) : ;

external (cdecl) g_dbus_interface_skeleton_get_info(arg0:Pointer[GDBusInterfaceSkeleton]) : Pointer[GDBusInterfaceInfo];

external (cdecl) g_dbus_interface_skeleton_get_vtable(arg0:Pointer[GDBusInterfaceSkeleton]) : Pointer[GDBusInterfaceVTable];

external (cdecl) g_dbus_interface_skeleton_get_properties(arg0:Pointer[GDBusInterfaceSkeleton]) : Pointer[GVariant];

external (cdecl) g_dbus_interface_skeleton_flush(arg0:Pointer[GDBusInterfaceSkeleton]) : ;

external (cdecl) g_dbus_interface_skeleton_export(arg0:Pointer[GDBusInterfaceSkeleton], arg1:Pointer[GDBusConnection], arg2:Pointer[gchar], arg3:Pointer[Pointer[GError]]) : gboolean;

external (cdecl) g_dbus_interface_skeleton_unexport(arg0:Pointer[GDBusInterfaceSkeleton]) : ;

external (cdecl) g_dbus_interface_skeleton_get_connection(arg0:Pointer[GDBusInterfaceSkeleton]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_interface_skeleton_get_object_path(arg0:Pointer[GDBusInterfaceSkeleton]) : Pointer[gchar];

alias GDBusObjectIface = Struct__GDBusObjectIface;

record Struct__GDBusObjectIface (
    parent_iface : GTypeInterface,
    get_object_path : CCodePointer[[Pointer[GDBusObject]],[Pointer[gchar]]],
    get_interfaces : CCodePointer[[Pointer[GDBusObject]],[Pointer[GList]]],
    get_interface : CCodePointer[[Pointer[GDBusObject], Pointer[gchar]],[Pointer[GDBusInterface]]],
    interface_added : CCodePointer[[Pointer[GDBusObject], Pointer[GDBusInterface]],[]],
    interface_removed : CCodePointer[[Pointer[GDBusObject], Pointer[GDBusInterface]],[]],
);

external (cdecl) g_dbus_object_get_type() : GType;

external (cdecl) g_dbus_object_get_object_path(arg0:Pointer[GDBusObject]) : Pointer[gchar];

external (cdecl) g_dbus_object_get_interfaces(arg0:Pointer[GDBusObject]) : Pointer[GList];

external (cdecl) g_dbus_object_get_interface(arg0:Pointer[GDBusObject], arg1:Pointer[gchar]) : Pointer[GDBusInterface];

alias GDBusObjectSkeletonClass = Struct__GDBusObjectSkeletonClass;

alias Struct__GDBusObjectSkeletonPrivate = Opaque;

alias GDBusObjectSkeletonPrivate = Struct__GDBusObjectSkeletonPrivate;

record Struct__GDBusObjectSkeleton (
    parent_instance : GObject,
    priv : Pointer[GDBusObjectSkeletonPrivate],
);

record Struct__GDBusObjectSkeletonClass (
    parent_class : GObjectClass,
    authorize_method : CCodePointer[[Pointer[GDBusObjectSkeleton], Pointer[GDBusInterfaceSkeleton], Pointer[GDBusMethodInvocation]],[gboolean]],
    padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_object_skeleton_get_type() : GType;

external (cdecl) g_dbus_object_skeleton_new(arg0:Pointer[gchar]) : Pointer[GDBusObjectSkeleton];

external (cdecl) g_dbus_object_skeleton_flush(arg0:Pointer[GDBusObjectSkeleton]) : ;

external (cdecl) g_dbus_object_skeleton_add_interface(arg0:Pointer[GDBusObjectSkeleton], arg1:Pointer[GDBusInterfaceSkeleton]) : ;

external (cdecl) g_dbus_object_skeleton_remove_interface(arg0:Pointer[GDBusObjectSkeleton], arg1:Pointer[GDBusInterfaceSkeleton]) : ;

external (cdecl) g_dbus_object_skeleton_remove_interface_by_name(arg0:Pointer[GDBusObjectSkeleton], arg1:Pointer[gchar]) : ;

external (cdecl) g_dbus_object_skeleton_set_object_path(arg0:Pointer[GDBusObjectSkeleton], arg1:Pointer[gchar]) : ;

alias GDBusObjectProxyClass = Struct__GDBusObjectProxyClass;

alias Struct__GDBusObjectProxyPrivate = Opaque;

alias GDBusObjectProxyPrivate = Struct__GDBusObjectProxyPrivate;

record Struct__GDBusObjectProxy (
    parent_instance : GObject,
    priv : Pointer[GDBusObjectProxyPrivate],
);

record Struct__GDBusObjectProxyClass (
    parent_class : GObjectClass,
    padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_object_proxy_get_type() : GType;

external (cdecl) g_dbus_object_proxy_new(arg0:Pointer[GDBusConnection], arg1:Pointer[gchar]) : Pointer[GDBusObjectProxy];

external (cdecl) g_dbus_object_proxy_get_connection(arg0:Pointer[GDBusObjectProxy]) : Pointer[GDBusConnection];

alias GDBusObjectManagerIface = Struct__GDBusObjectManagerIface;

record Struct__GDBusObjectManagerIface (
    parent_iface : GTypeInterface,
    get_object_path : CCodePointer[[Pointer[GDBusObjectManager]],[Pointer[gchar]]],
    get_objects : CCodePointer[[Pointer[GDBusObjectManager]],[Pointer[GList]]],
    get_object : CCodePointer[[Pointer[GDBusObjectManager], Pointer[gchar]],[Pointer[GDBusObject]]],
    get_interface : CCodePointer[[Pointer[GDBusObjectManager], Pointer[gchar], Pointer[gchar]],[Pointer[GDBusInterface]]],
    object_added : CCodePointer[[Pointer[GDBusObjectManager], Pointer[GDBusObject]],[]],
    object_removed : CCodePointer[[Pointer[GDBusObjectManager], Pointer[GDBusObject]],[]],
    interface_added : CCodePointer[[Pointer[GDBusObjectManager], Pointer[GDBusObject], Pointer[GDBusInterface]],[]],
    interface_removed : CCodePointer[[Pointer[GDBusObjectManager], Pointer[GDBusObject], Pointer[GDBusInterface]],[]],
);

external (cdecl) g_dbus_object_manager_get_type() : GType;

external (cdecl) g_dbus_object_manager_get_object_path(arg0:Pointer[GDBusObjectManager]) : Pointer[gchar];

external (cdecl) g_dbus_object_manager_get_objects(arg0:Pointer[GDBusObjectManager]) : Pointer[GList];

external (cdecl) g_dbus_object_manager_get_object(arg0:Pointer[GDBusObjectManager], arg1:Pointer[gchar]) : Pointer[GDBusObject];

external (cdecl) g_dbus_object_manager_get_interface(arg0:Pointer[GDBusObjectManager], arg1:Pointer[gchar], arg2:Pointer[gchar]) : Pointer[GDBusInterface];

alias GDBusObjectManagerClientClass = Struct__GDBusObjectManagerClientClass;

alias Struct__GDBusObjectManagerClientPrivate = Opaque;

alias GDBusObjectManagerClientPrivate = Struct__GDBusObjectManagerClientPrivate;

record Struct__GDBusObjectManagerClient (
    parent_instance : GObject,
    priv : Pointer[GDBusObjectManagerClientPrivate],
);

record Struct__GDBusObjectManagerClientClass (
    parent_class : GObjectClass,
    interface_proxy_signal : CCodePointer[[Pointer[GDBusObjectManagerClient], Pointer[GDBusObjectProxy], Pointer[GDBusProxy], Pointer[gchar], Pointer[gchar], Pointer[GVariant]],[]],
    interface_proxy_properties_changed : CCodePointer[[Pointer[GDBusObjectManagerClient], Pointer[GDBusObjectProxy], Pointer[GDBusProxy], Pointer[GVariant], Pointer[Pointer[gchar]]],[]],
    padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_object_manager_client_get_type() : GType;

external (cdecl) g_dbus_object_manager_client_new(arg0:Pointer[GDBusConnection], arg1:GDBusObjectManagerClientFlags, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GDBusProxyTypeFunc, arg5:gpointer, arg6:GDestroyNotify, arg7:Pointer[GCancellable], arg8:GAsyncReadyCallback, arg9:gpointer) : ;

external (cdecl) g_dbus_object_manager_client_new_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusObjectManager];

external (cdecl) g_dbus_object_manager_client_new_sync(arg0:Pointer[GDBusConnection], arg1:GDBusObjectManagerClientFlags, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GDBusProxyTypeFunc, arg5:gpointer, arg6:GDestroyNotify, arg7:Pointer[GCancellable], arg8:Pointer[Pointer[GError]]) : Pointer[GDBusObjectManager];

external (cdecl) g_dbus_object_manager_client_new_for_bus(arg0:GBusType, arg1:GDBusObjectManagerClientFlags, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GDBusProxyTypeFunc, arg5:gpointer, arg6:GDestroyNotify, arg7:Pointer[GCancellable], arg8:GAsyncReadyCallback, arg9:gpointer) : ;

external (cdecl) g_dbus_object_manager_client_new_for_bus_finish(arg0:Pointer[GAsyncResult], arg1:Pointer[Pointer[GError]]) : Pointer[GDBusObjectManager];

external (cdecl) g_dbus_object_manager_client_new_for_bus_sync(arg0:GBusType, arg1:GDBusObjectManagerClientFlags, arg2:Pointer[gchar], arg3:Pointer[gchar], arg4:GDBusProxyTypeFunc, arg5:gpointer, arg6:GDestroyNotify, arg7:Pointer[GCancellable], arg8:Pointer[Pointer[GError]]) : Pointer[GDBusObjectManager];

external (cdecl) g_dbus_object_manager_client_get_connection(arg0:Pointer[GDBusObjectManagerClient]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_object_manager_client_get_flags(arg0:Pointer[GDBusObjectManagerClient]) : GDBusObjectManagerClientFlags;

external (cdecl) g_dbus_object_manager_client_get_name(arg0:Pointer[GDBusObjectManagerClient]) : Pointer[gchar];

external (cdecl) g_dbus_object_manager_client_get_name_owner(arg0:Pointer[GDBusObjectManagerClient]) : Pointer[gchar];

alias GDBusObjectManagerServerClass = Struct__GDBusObjectManagerServerClass;

alias Struct__GDBusObjectManagerServerPrivate = Opaque;

alias GDBusObjectManagerServerPrivate = Struct__GDBusObjectManagerServerPrivate;

record Struct__GDBusObjectManagerServer (
    parent_instance : GObject,
    priv : Pointer[GDBusObjectManagerServerPrivate],
);

record Struct__GDBusObjectManagerServerClass (
    parent_class : GObjectClass,
    padding : Array[gpointer, 8],
);

external (cdecl) g_dbus_object_manager_server_get_type() : GType;

external (cdecl) g_dbus_object_manager_server_new(arg0:Pointer[gchar]) : Pointer[GDBusObjectManagerServer];

external (cdecl) g_dbus_object_manager_server_get_connection(arg0:Pointer[GDBusObjectManagerServer]) : Pointer[GDBusConnection];

external (cdecl) g_dbus_object_manager_server_set_connection(arg0:Pointer[GDBusObjectManagerServer], arg1:Pointer[GDBusConnection]) : ;

external (cdecl) g_dbus_object_manager_server_export(arg0:Pointer[GDBusObjectManagerServer], arg1:Pointer[GDBusObjectSkeleton]) : ;

external (cdecl) g_dbus_object_manager_server_export_uniquely(arg0:Pointer[GDBusObjectManagerServer], arg1:Pointer[GDBusObjectSkeleton]) : ;

external (cdecl) g_dbus_object_manager_server_unexport(arg0:Pointer[GDBusObjectManagerServer], arg1:Pointer[gchar]) : gboolean;

